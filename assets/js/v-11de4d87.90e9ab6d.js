"use strict";(self.webpackChunkdemo1=self.webpackChunkdemo1||[]).push([[559],{1311:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-11de4d87",path:"/%E5%B7%A5%E5%85%B7/2022/20221001.html",title:"Webpack 5基础入门手册",lang:"zh-CN",frontmatter:{title:"Webpack 5基础入门手册",date:"2022-10-01T00:00:00.000Z",tags:["webpack"],categories:["工具"]},excerpt:"",headers:[{level:2,title:"基础使用",slug:"基础使用",children:[]},{level:2,title:"自定义 webpack 配置",slug:"自定义-webpack-配置",children:[]},{level:2,title:"配置文件",slug:"配置文件",children:[]},{level:2,title:"自动引入资源",slug:"自动引入资源",children:[]},{level:2,title:"使用 source map",slug:"使用-source-map",children:[]},{level:2,title:"使用 watch mode(观察模式)",slug:"使用-watch-mode-观察模式",children:[]},{level:2,title:"使用 webpack-dev-server",slug:"使用-webpack-dev-server",children:[]},{level:2,title:"资源模块",slug:"资源模块",children:[]},{level:2,title:"Loader(预处理加载器)",slug:"loader-预处理加载器",children:[]},{level:2,title:"抽离和压缩css",slug:"抽离和压缩css",children:[]},{level:2,title:"babel-loader",slug:"babel-loader",children:[]},{level:2,title:"代码分离",slug:"代码分离",children:[]},{level:2,title:"拆分生产环境和开发环境",slug:"拆分生产环境和开发环境",children:[{level:3,title:"公共路径",slug:"公共路径",children:[]},{level:3,title:"环境变量",slug:"环境变量",children:[]},{level:3,title:"拆分配置文件",slug:"拆分配置文件",children:[]},{level:3,title:"合并配置文件",slug:"合并配置文件",children:[]}]},{level:2,title:"模块热替换与热加载",slug:"模块热替换与热加载",children:[]},{level:2,title:"eslint",slug:"eslint",children:[{level:3,title:"结合webpack使用",slug:"结合webpack使用",children:[]}]},{level:2,title:"git-hooks 与 husky",slug:"git-hooks-与-husky",children:[{level:3,title:"提交代码前进行 eslist 检测",slug:"提交代码前进行-eslist-检测",children:[]},{level:3,title:"使用 husky 进行代码提交前 eslist 检测",slug:"使用-husky-进行代码提交前-eslist-检测",children:[]}]},{level:2,title:"Webpack 模块与解析原理",slug:"webpack-模块与解析原理",children:[]},{level:2,title:"外部扩展",slug:"外部扩展",children:[]},{level:2,title:"依赖图",slug:"依赖图",children:[]},{level:2,title:"Web Works",slug:"web-works",children:[]},{level:2,title:"TypeScript",slug:"typescript",children:[{level:3,title:"使用第三方类库",slug:"使用第三方类库",children:[]}]},{level:2,title:"多页面应用",slug:"多页面应用",children:[{level:3,title:"entry 配置",slug:"entry-配置",children:[]}]},{level:2,title:"Tree shaking",slug:"tree-shaking",children:[]},{level:2,title:"渐进式网络应用程序 PWA",slug:"渐进式网络应用程序-pwa",children:[]},{level:2,title:"Shimming 预置全局变量",slug:"shimming-预置全局变量",children:[{level:3,title:"this 指向",slug:"this-指向",children:[]}]},{level:2,title:"创建一个小轮子",slug:"创建一个小轮子",children:[{level:3,title:"如何构建一个 library",slug:"如何构建一个-library",children:[]},{level:3,title:"创建一个 webpack-numbers",slug:"创建一个-webpack-numbers",children:[]},{level:3,title:"发布到 npm package上",slug:"发布到-npm-package上",children:[]}]},{level:2,title:"dll (动态链接库)",slug:"dll-动态链接库",children:[]}],git:{updatedTime:null,contributors:[]}}},6654:(n,s,a)=>{a.r(s),a.d(s,{default:()=>Z});var p=a(6252);const e=(0,p.uE)('<div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Webpack 是一种前端资源构建工具，静态模块打包器 ( module bundler )。在 Webpack 看来，前端的所有资源文件 ( js / json / css / img / less / … ) 都会作为模块处理。它将根据模块的依赖关系进行静态分析，打包生成对应的静态资源 ( module )。</p></div><h2 id="基础使用" tabindex="-1"><a class="header-anchor" href="#基础使用" aria-hidden="true">#</a> 基础使用</h2><ul><li><p>安装</p><p>首先使用 npm init -y 初始化项目，然后安装 webpack 以及 webpack-cli</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 本地安装(推荐)</span>\nnpm i webpack webpack<span class="token operator">-</span>cli <span class="token operator">-</span><span class="token constant">D</span>\n<span class="token comment">// 运行 webpack</span>\nnpx webpack\n<span class="token comment">// 查看打包详细信息</span>\nnpx webpack <span class="token operator">--</span>stats detailed\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li></ul><h2 id="自定义-webpack-配置" tabindex="-1"><a class="header-anchor" href="#自定义-webpack-配置" aria-hidden="true">#</a> 自定义 webpack 配置</h2><p>实际上，<code>webpack-cli</code>给我们提供了丰富的终端命令行指令，可以通过 <code>webpack --help</code>来查看</p><ul><li><p>指定入口文件和mode</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// entry 命令后面就是指定的入口文件，mode 后面就是指定的 mode 通过选择 development(开发环境), production(生产环境) 或 none 之中的一个，来设置 mode 参数，你可以启用 webpack 内置在相应环境下的优化。其默认值为 production。</span>\nnpx webpack <span class="token operator">--</span>entry <span class="token punctuation">.</span><span class="token operator">/</span>src<span class="token operator">/</span>index<span class="token punctuation">.</span>js <span class="token operator">--</span>mode production\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ul><h2 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件" aria-hidden="true">#</a> 配置文件</h2><p>在文件根目录下新建 <code>webpack.config.js</code> 配置文件</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// webpack.config.js</span>\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&#39;./src/index.js&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 设置入口文件</span>\n\n  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token comment">// 设置出口</span>\n    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;bundle.js&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 设置打包后的文件名</span>\n    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;./dist&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// 文件输出路径。例：会生成一个dist文件夹</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;none&#39;</span> <span class="token comment">// 设置 mode 模式</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// index.html</span>\n<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">&quot;en&quot;</span><span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span>head<span class="token operator">&gt;</span>\n  <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">&quot;UTF-8&quot;</span><span class="token operator">&gt;</span>\n  <span class="token operator">&lt;</span>meta http<span class="token operator">-</span>equiv<span class="token operator">=</span><span class="token string">&quot;X-UA-Compatible&quot;</span> content<span class="token operator">=</span><span class="token string">&quot;IE=edge&quot;</span><span class="token operator">&gt;</span>\n  <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">&quot;viewport&quot;</span> content<span class="token operator">=</span><span class="token string">&quot;width=device-width, initial-scale=1.0&quot;</span><span class="token operator">&gt;</span>\n  <span class="token operator">&lt;</span>title<span class="token operator">&gt;</span>Hello<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>\n  <span class="token comment">// 在 script 标签里手动引入打包后的文件，打开html，就可以运行打包后文件里的方法了</span>\n  <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">&quot;./dist/bundle.js&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h2 id="自动引入资源" tabindex="-1"><a class="header-anchor" href="#自动引入资源" aria-hidden="true">#</a> 自动引入资源</h2><p>首先安装插件：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>npm i html<span class="token operator">-</span>webpack<span class="token operator">-</span>plugin <span class="token operator">-</span><span class="token constant">D</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>调整 <code>webpack.config.js</code>配置文件：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;html-webpack-plugin&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 引入插件</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&#39;./src/index.js&#39;</span><span class="token punctuation">,</span>\n\n  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;bundle.js&#39;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;./dist&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">clean</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token comment">// 清理在打包过程中清理上一次打包中没有用的内容</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;none&#39;</span><span class="token punctuation">,</span>\n\n  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token comment">// 在 plugins 配置项里配置webpack插件</span>\n    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    \n      <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&#39;./index.html&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 指定模板</span>\n      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;app.html&#39;</span><span class="token punctuation">,</span>   <span class="token comment">// 指定打包后的文件夹里的 html 文件名</span>\n      <span class="token literal-property property">inject</span><span class="token operator">:</span> <span class="token string">&#39;body&#39;</span>    <span class="token comment">//  指定在生成的 html 文件里的 body 标签里生成 script 标签</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h2 id="使用-source-map" tabindex="-1"><a class="header-anchor" href="#使用-source-map" aria-hidden="true">#</a> 使用 source map</h2><p>当<code>webpack</code>打包源代码时，可能会很难追踪到error(错误)和warning(警告)在源代码中的原始位置。例如，如果将三个源文件（ <code>a.js</code> , <code>b.js</code>和<code>c.js</code>）打包到一个bundle ( <code>bundle.js</code> ）中，而其中一个源文件包含一个错误，那么堆栈跟踪就会直接指向到 bundle.js。你可能需要准确地知道错误来自于哪个源文件，所以这种提示这通常不会提供太多帮助。 为了更容易地追踪error和 warning，JavaScript提供了<code>source maps</code> 功能，可以将编译后的代码映射回原始源代码。如果一个错误来自于b.js , source map就会明确的告诉你。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;development&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 设置 mode 为开发环境</span>\n\n  <span class="token literal-property property">devtool</span><span class="token operator">:</span> <span class="token string">&#39;cheap-module-source-map&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 在开发模式下追踪代码</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 配置好后，如果有错误或者警告，打开浏览器控制台就能准确知道报错位置</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="使用-watch-mode-观察模式" tabindex="-1"><a class="header-anchor" href="#使用-watch-mode-观察模式" aria-hidden="true">#</a> 使用 watch mode(观察模式)</h2><p>在每次编译代码时，手动运行<code>npx webpack</code>会显得很麻烦。 我们可以在webpack启动时添加&quot;watch”参数。如果其中一个文件被更新，代码将被重新编译，所以你不必再去手动运行整个构建。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>npx webpack <span class="token operator">--</span>watch\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="使用-webpack-dev-server" tabindex="-1"><a class="header-anchor" href="#使用-webpack-dev-server" aria-hidden="true">#</a> 使用 webpack-dev-server</h2><p><code>webpack-dev-server</code> 为你提供了一个基本的web server，并且具有live reloading(实时重新加载)功能</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 先下载</span>\nnpm i webpack<span class="token operator">-</span>dev<span class="token operator">-</span>server <span class="token operator">-</span><span class="token constant">D</span>\n\n<span class="token comment">// webpack.config.js</span>\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token comment">// 配置 webpack-dev-server</span>\n    <span class="token keyword">static</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;./dist&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 告诉 dev server ，从什么位置查找文件</span>\n    <span class="token literal-property property">compress</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 设置是否在服务器中进行代码压缩，减少传输的大小</span>\n    <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">3000</span><span class="token punctuation">,</span> <span class="token comment">// 设置端口号</span>\n    <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token comment">// 可以设置一些头部给浏览器</span>\n      <span class="token string-property property">&#39;X-Access-Token&#39;</span><span class="token operator">:</span> <span class="token string">&#39;abc123&#39;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 设置代理</span>\n      <span class="token string-property property">&#39;/api&#39;</span><span class="token operator">:</span> <span class="token string">&#39;http://localhost:9000&#39;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">// https: true,  如果想将本地http服务变成https服务，但是访问时浏览器会报是不安全的，因为我们默认使用的是自签名证书</span>\n    <span class="token literal-property property">http2</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment">// 如果想开启http2, http2 自带 https 证书</span>\n    <span class="token literal-property property">historyApiFallback</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token comment">// 如果我们的应用是个SPA(单页面应用)，例 当路由到/some时(可以直接在地址栏里输入)，会发现此时刷新页面后，控制台会报错。开启 historyApiFallback 配置就不会报错了</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 运行 webpack-dev-server</span>\nnpx webpack<span class="token operator">-</span>dev<span class="token operator">-</span>server serve\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h2 id="资源模块" tabindex="-1"><a class="header-anchor" href="#资源模块" aria-hidden="true">#</a> 资源模块</h2><p>资源模块(asset module)是一种模块类型，它允许使用资源文件（字体，图标等）而无需配置额外 loader。</p><p>资源模块类型(asset module type)，通过添加 4 种新的模块类型，来替换所有这些 loader：</p><ul><li><code>asset/resource</code> 发送一个单独的文件并导出 URL。之前通过使用 <code>file-loader</code> 实现。</li><li><code>asset/inline</code> 导出一个资源的 data URL。之前通过使用 <code>url-loader</code> 实现。</li><li><code>asset/source</code> 导出资源的源代码。之前通过使用 <code>raw-loader</code> 实现。</li><li><code>asset</code> 在导出一个 data URI 和发送一个单独的文件之间自动选择。之前通过使用 <code>url-loader</code>，并且配置资源体积限制实现。</li></ul><p>当在 webpack 5 中使用旧的 assets loader（如 <code>file-loader</code>/<code>url-loader</code>/<code>raw-loader</code> 等）和 asset 模块时，你可能想停止当前 asset 模块的处理，并再次启动处理，这可能会导致 asset 重复，你可以通过将 asset 模块的类型设置为 <code>&#39;javascript/auto&#39;</code> 来解决。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&#39;./src/index.js&#39;</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;bundle.js&#39;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;./dist&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">clean</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token comment">// 第一种设置输出资源时，资源的名字，会随机生成哈希值</span>\n    <span class="token literal-property property">assetModuleFilename</span><span class="token operator">:</span> <span class="token string">&#39;images/[contenthash][ext]&#39;</span> \n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">// ... </span>\n  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token comment">// 在 module 对象里配置模块， rules 配置项里配置规则</span>\n    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.png$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">// 以 png 为扩展名的文件</span>\n        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;asset/resource&#39;</span><span class="token punctuation">,</span>  <span class="token comment">// 使用 asset/resource 类型，打包后的文件夹里，会输出一张图片，在控制台上看，img标签的src是一个本地链接</span>\n        <span class="token literal-property property">generator</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token comment">// 第二种设置输出资源时，资源的名字，会随机生成哈希值，generator 优先级高于 output </span>\n          <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;images/[contenthash][ext]&#39;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n      <span class="token punctuation">{</span>\n        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.svg$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;asset/inline&#39;</span>  <span class="token comment">// 使用 asset/resource 类型，不会在打包后的文件夹里生成图片，在控制台上看，img标签的src是一个data URL</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n      <span class="token punctuation">{</span>\n        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.txt$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;asset/source&#39;</span> <span class="token comment">// 例： 会将 txt 文件的内容提取出来，我们可以在 js 文件中导入，并放入 div 中</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n      <span class="token punctuation">{</span>\n        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.jpg$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;asset&#39;</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">parser</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token literal-property property">dataUrlCondition</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token literal-property property">maxSize</span><span class="token operator">:</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token comment">// 自动地在resource和 inline 之间进行选择: webpack默认条件，小于8kb的文件，将会视为inline模块类型,否则会被视为resource模块类型。可以在 dataUrlCondition 修改</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br></div></div><h2 id="loader-预处理加载器" tabindex="-1"><a class="header-anchor" href="#loader-预处理加载器" aria-hidden="true">#</a> Loader(预处理加载器)</h2>',30),t=(0,p.Uk)("Webpack 支持使用 "),o={href:"https://webpack.docschina.org/concepts/loaders",target:"_blank",rel:"noopener noreferrer"},l=(0,p.Uk)("loader"),r=(0,p.Uk)(" 对文件进行预处理。你可以构建包括 JavaScript 在内的任何静态资源。并且可以使用 Node.js 轻松编写自己的 loader。"),c={href:"https://webpack.docschina.org/configuration/module/#modulerules",target:"_blank",rel:"noopener noreferrer"},i=(0,p._)("code",null,"module.rules",-1),u=(0,p.Uk)(" 允许你在 webpack 配置中指定多个 loader。 这种方式是展示 loader 的一种简明方式，并且有助于使代码变得简洁和易于维护。同时让你对各个 loader 有个全局概览："),k=(0,p.Uk)("loader 从右到左（或从下到上）地取值(evaluate)/执行(execute)。在下面的示例中，从 sass-loader 开始执行，然后继续执行 css-loader，最后以 style-loader 为结束。查看 "),b={href:"https://webpack.docschina.org/concepts/loaders/#loader-features",target:"_blank",rel:"noopener noreferrer"},m=(0,p.Uk)("loader 功能"),d=(0,p.Uk)(" 章节，了解有关 loader 顺序的更多信息。"),g=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span> <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;style-loader&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">{</span>\n            <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;css-loader&#39;</span><span class="token punctuation">,</span>\n            <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n              <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">{</span> <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;sass-loader&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h2 id="抽离和压缩css" tabindex="-1"><a class="header-anchor" href="#抽离和压缩css" aria-hidden="true">#</a> 抽离和压缩css</h2><p>在多数情况下，我们也可以进行压缩CSS，以便在生产环境中节省加载时间，同时还可以将CSS文件抽离成一个单独的文件。实现这个功能，需要<code>mini-css-extract-plugin</code>这个插件来帮忙，本插件会将CSS提取到单独的文件中，为每个包含CSS的JS文件创建一个cSS文件，并且支持CSS和Source Maps 的按需加载。 本插件基于webpack v5的新特性构建，并且需要webpack 5才能正常工作。之后将loader 与 plugin添加到你的 webpack配置文件中</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 下载</span>\nnpm i mini<span class="token operator">-</span>css<span class="token operator">-</span>extract<span class="token operator">-</span>plugin <span class="token operator">-</span><span class="token constant">D</span>\nnpm i css<span class="token operator">-</span>minimizer<span class="token operator">-</span>webpack<span class="token operator">-</span>plugin <span class="token operator">-</span><span class="token constant">D</span>\n<span class="token comment">// webpack.config.js</span>\n<span class="token keyword">const</span> MiniCssExtractPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mini-css-extract-plugin&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// 第一步引入抽离css插件</span>\n<span class="token keyword">const</span> CssMinimizerPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;css-minimizer-webpack-plugin&#39;</span><span class="token punctuation">)</span>   <span class="token comment">// 第一步引入引入压缩css插件</span>\n<span class="token keyword">const</span> toml <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;toml&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// 处理toml 文件的插件</span>\n<span class="token keyword">const</span> yaml <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;yaml&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// 处理yaml 文件的插件</span>\n<span class="token keyword">const</span> json5 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;json5&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// 处理 json5 文件的插件</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ... </span>\n  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;production&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 使用压缩css插件，修改 mode 为生产环境</span>\n    \n  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&#39;./index.html&#39;</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;app.html&#39;</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">inject</span><span class="token operator">:</span> <span class="token string">&#39;body&#39;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    \n    <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token comment">// 第二步，在 plugins 引入配置</span>\n      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;styles/[contenthash].css&#39;</span> <span class="token comment">//配置打包后的文件名</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n\n  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(css|less)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">// 以css或less后缀的文件</span>\n<span class="token comment">//第三步，style-loader 替换成 MiniCssExtractPlugin.loader</span>\n        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span> <span class="token string">&#39;css-loader&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;less-loader&#39;</span><span class="token punctuation">]</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n      <span class="token punctuation">{</span>\n        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(woff|woff2|eot|ttf|otf)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">// 字体资源</span>\n        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;asset/resource&#39;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n      <span class="token punctuation">{</span>\n        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(csv|tsv)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>  <span class="token comment">// 其他资源文件，例如csv，tsv</span>\n        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token string">&#39;csv-loader&#39;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n      <span class="token punctuation">{</span>\n        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.xml$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>  <span class="token comment">// 处理 xml 资源文件</span>\n        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token string">&#39;xml-loader&#39;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n      <span class="token punctuation">{</span>\n        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.toml$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;json&#39;</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">parser</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token literal-property property">parse</span><span class="token operator">:</span> toml<span class="token punctuation">.</span>parse\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n      <span class="token punctuation">{</span>\n        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.yaml$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;json&#39;</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">parser</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token literal-property property">parse</span><span class="token operator">:</span> yaml<span class="token punctuation">.</span>parse\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n      <span class="token punctuation">{</span>\n        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.json5$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;json&#39;</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">parser</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token literal-property property">parse</span><span class="token operator">:</span> json5<span class="token punctuation">.</span>parse\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n  <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 在 optimization 优化配置里配置css压缩插件</span>\n    <span class="token literal-property property">minimizer</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token keyword">new</span> <span class="token class-name">CssMinimizerPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br></div></div><h2 id="babel-loader" tabindex="-1"><a class="header-anchor" href="#babel-loader" aria-hidden="true">#</a> babel-loader</h2><p>作用：将 ES6 的代码转译成低版本浏览器支持的 ES5</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 下载</span>\nnpm i babel<span class="token operator">-</span>loader @babel<span class="token operator">/</span>core @babel<span class="token operator">/</span>preset<span class="token operator">-</span>env <span class="token operator">-</span><span class="token constant">D</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>在 webpack 配置对象中，需要将 babel-loader 添加到 module 列表中，就像下面这样：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n      <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">{</span> \n        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;babel-loader&#39;</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">// 排除node_modules 里的js</span>\n        <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>  \n          <span class="token literal-property property">presets</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;@babel/preset-env&#39;</span><span class="token punctuation">]</span> <span class="token comment">// 在 options 里配置预设</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>此时执行编译，在浏览器里打开项目发现报了一个致命错误: regeneratorRuntime is not defined这个错误显然是未能正确配置babel。regeneratorRuntime 是webpack打包生成的全局辅助函数，由babel生成，用于兼容async/await的语法。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 正确配置,第一步下载插件</span>\nnpm install <span class="token operator">--</span>save @babel<span class="token operator">/</span>runtime  <span class="token comment">// 这个包中包含了regeneratorRuntime 运行时需要</span>\nnpm install <span class="token operator">--</span>save<span class="token operator">-</span>dev @babel<span class="token operator">/</span>plugin<span class="token operator">-</span>transform<span class="token operator">-</span>runtime <span class="token comment">// 这个插件会在需要 regeneratorRuntime 的地方自动 require 导包</span>\n\n<span class="token comment">// 第二步，修改 webpack.config.js 配置</span>\n<span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n      <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(node_modules|bower_components)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> \n      <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">{</span> \n        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;babel-loader&#39;</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>  \n          <span class="token literal-property property">presets</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;@babel/preset-env&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n          <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n              <span class="token punctuation">[</span>\n                <span class="token string">&#39;@babel/plugin-transform-runtime&#39;</span>\n              <span class="token punctuation">]</span>\n            <span class="token punctuation">]</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h2 id="代码分离" tabindex="-1"><a class="header-anchor" href="#代码分离" aria-hidden="true">#</a> 代码分离</h2><p>代码分离是 webpack 中最引人注目的特性之一。此特性能够把代码分离到不同的 bundle 中，然后可以按需加载或并行加载这些文件。代码分离可以用于获取更小的 bundle，以及控制资源加载优先级，如果使用合理，会极大影响加载时间。</p><p>常用的代码分离方法有三种：</p>',14),y=(0,p._)("strong",null,"入口起点",-1),h=(0,p.Uk)("：使用 "),v={href:"https://webpack.docschina.org/configuration/entry-context",target:"_blank",rel:"noopener noreferrer"},w=(0,p._)("code",null,"entry",-1),x=(0,p.Uk)(" 配置手动地分离代码。"),j=(0,p._)("strong",null,"防止重复",-1),f=(0,p.Uk)("：使用 "),q={href:"https://webpack.docschina.org/configuration/entry-context/#dependencies",target:"_blank",rel:"noopener noreferrer"},_=(0,p.Uk)("Entry dependencies"),S=(0,p.Uk)(" 或者 "),W={href:"https://webpack.docschina.org/plugins/split-chunks-plugin",target:"_blank",rel:"noopener noreferrer"},P=(0,p._)("code",null,"SplitChunksPlugin",-1),U=(0,p.Uk)(" 去重和分离 chunk。"),C=(0,p._)("li",null,[(0,p._)("strong",null,"动态导入"),(0,p.Uk)("：通过模块的内联函数调用来分离代码。")],-1),T=(0,p.Uk)("更具体的请参考"),E={href:"https://webpack.docschina.org/guides/code-splitting#root",target:"_blank",rel:"noopener noreferrer"},D=(0,p.Uk)("官方文档"),A=(0,p._)("h2",{id:"拆分生产环境和开发环境",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#拆分生产环境和开发环境","aria-hidden":"true"},"#"),(0,p.Uk)(" 拆分生产环境和开发环境")],-1),M=(0,p._)("h3",{id:"公共路径",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#公共路径","aria-hidden":"true"},"#"),(0,p.Uk)(" 公共路径")],-1),H={href:"https://webpack.docschina.org/configuration/output/#outputpublicpath",target:"_blank",rel:"noopener noreferrer"},$=(0,p._)("code",null,"publicPath",-1),z=(0,p.Uk)(" 配置选项在各种场景中都非常有用。你可以通过它来指定应用程序中所有资源的基础路径。"),R=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// webpack.config.js</span>\nmodule<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">env</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n   <span class="token comment">// 项目中所有引入的资源前缀都改成了下面的公共路径</span>\n      <span class="token literal-property property">publicPath</span><span class="token operator">:</span> <span class="token string">&#39;http://localhost:8080/&#39;</span> <span class="token comment">// 配置公共路径</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="环境变量" tabindex="-1"><a class="header-anchor" href="#环境变量" aria-hidden="true">#</a> 环境变量</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 设置了一个环境变量, production 为 true</span>\nnpx webpack <span class="token operator">--</span>env production<span class="token operator">=</span><span class="token boolean">true</span>\n<span class="token comment">// 改造 webpack.config.js</span>\nmodule<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">env</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// 改造成一个函数，拿到 env 参数</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n    <span class="token literal-property property">mode</span><span class="token operator">:</span> env<span class="token punctuation">.</span>production <span class="token operator">?</span> <span class="token string">&#39;production&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;development&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="拆分配置文件" tabindex="-1"><a class="header-anchor" href="#拆分配置文件" aria-hidden="true">#</a> 拆分配置文件</h3><p>如果配置文件中，都通过三元运算符的方式来进行配置，显然特别糟糕，我们可以拆分配置文件</p><ol><li><p>在项目根目录中创建一个 config 文件夹，文件夹下创建 <code>webpack.config.dev.js</code> , <code>webpack.config.prod,js</code> 文件</p></li><li><p>如果将<code>module.exports</code>配置文件改成了函数形式，还原到原来的 <code>module.exports = { }</code></p></li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 通过 npx webpack -c 指定配置文件</span>\nnpx webpack <span class="token operator">-</span>c <span class="token punctuation">.</span><span class="token operator">/</span>config<span class="token operator">/</span>webpack<span class="token punctuation">.</span>config<span class="token punctuation">.</span>dev<span class="token punctuation">.</span>js\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="合并配置文件" tabindex="-1"><a class="header-anchor" href="#合并配置文件" aria-hidden="true">#</a> 合并配置文件</h3><p>开发配置文件和生产配置文件中，有很多相同的代码，我们可以创建一个 <code>webpack.config.commin.js</code>文件提取出来，并合并配置文件</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 第一步下载webpack-merge</span>\nnpm i webpack<span class="token operator">-</span>merge <span class="token operator">-</span><span class="token constant">D</span>\n<span class="token comment">// 第二步：在根目录 config 文件夹下创建一个 webpack.config.js</span>\n\n<span class="token comment">// 第三步 webpack.config.js</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> merge <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;webpack-merge&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 导入</span>\n<span class="token comment">// 导入三个配置文件</span>\n<span class="token keyword">const</span> commonConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./webpack.config.common&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> productionConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./webpack.config.prod&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> developmentConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./webpack.config.dev&#39;</span><span class="token punctuation">)</span>\n<span class="token comment">// 如果用户传入的环境变量里有development，则是开发配置合并公共配置</span>\nmodule<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">env</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">switch</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">case</span> env<span class="token punctuation">.</span>development<span class="token operator">:</span>\n      <span class="token keyword">return</span> <span class="token function">merge</span><span class="token punctuation">(</span>commonConfig<span class="token punctuation">,</span> developmentConfig<span class="token punctuation">)</span>\n\n    <span class="token keyword">case</span> env<span class="token punctuation">.</span>production<span class="token operator">:</span>\n      <span class="token keyword">return</span> <span class="token function">merge</span><span class="token punctuation">(</span>commonConfig<span class="token punctuation">,</span> productionConfig<span class="token punctuation">)</span>\n\n    <span class="token literal-property property">defult</span><span class="token operator">:</span>\n      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;No matching configuration was found&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h2 id="模块热替换与热加载" tabindex="-1"><a class="header-anchor" href="#模块热替换与热加载" aria-hidden="true">#</a> 模块热替换与热加载</h2>',11),J=(0,p.Uk)("模块热替换(HMR - hot module replacement)功能会在应用程序运行过程中，替换、添加或删除 "),I={href:"https://webpack.docschina.org/concepts/modules/",target:"_blank",rel:"noopener noreferrer"},L=(0,p.Uk)("模块"),O=(0,p.Uk)("，而无需重新加载整个页面。主要是通过以下几种方式，来显著加快开发速度："),N=(0,p.uE)('<ul><li>保留在完全重新加载页面期间丢失的应用程序状态。</li><li>只更新变更内容，以节省宝贵的开发时间。</li><li>在源代码中 CSS/JS 产生修改时，会立刻在浏览器中进行更新，这几乎相当于在浏览器 devtools 直接更改样式。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 开启webpack的热模块替换特性，需要配置devServer.hot参数:</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">hot</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment">// 默认开启热替换</span>\n    <span class="token literal-property property">liveReload</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">// 默认开启热加载</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="eslint" tabindex="-1"><a class="header-anchor" href="#eslint" aria-hidden="true">#</a> eslint</h2><p><code>eslint</code>是用来扫描我们所写的代码是否符合规范的工具。 往往我们的项目是多人协作 开发的，我们期望统一的代码规范，这时候可以让eslint来对我们进行约束。 严格意义上来说，eslint配置跟webpack无关，但在工程化开发环境中，它往往是不可或缺的。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 下载</span>\nnpm i eslint <span class="token operator">-</span><span class="token constant">D</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>配置<code>eslint</code>，只需要在根目录下添加一个.eslintrc文件(或者.eslintrc.json, .js等)。当然，我们可以使用<code>eslint</code>工具来自动生成它：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>npx eslint <span class="token operator">--</span>init\n<span class="token comment">// 第一种只检查语法  第二种检查语法并发现问题  第三种检查语法发现问题并规范格式，我们通常选择第三种</span>\n✔ How would you like to use ESLint<span class="token operator">?</span> · syntax\n<span class="token comment">// 选择模块化语法，这里选择ESM</span>\n✔ What type <span class="token keyword">of</span> modules does your project use<span class="token operator">?</span> · esm\n<span class="token comment">// 选择是使用react还是vue,或者什么都没有</span>\n✔ Which framework does your project use<span class="token operator">?</span> · react\n<span class="token comment">// 项目中使用TS吗</span>\n✔ Does your project use TypeScript<span class="token operator">?</span> · No <span class="token operator">/</span> Yes\n<span class="token comment">// 代码运行在哪里，browser浏览器，还是node后端</span>\n✔ Where does your code run<span class="token operator">?</span> · browser\n<span class="token comment">// 使用哪种方式配置规范，流行式/一问一答/导入自有的文件，这里选择的是第一种</span>\n✔ How would you like to define a style <span class="token keyword">for</span> your project<span class="token operator">?</span> · guide \n<span class="token comment">// 选择哪一种流行规范</span>\n✔ which stvle quide <span class="token keyword">do</span> vou want to follow<span class="token punctuation">.</span> airbnb\n<span class="token comment">// 配置文件放在什么地方</span>\n✔ What format <span class="token keyword">do</span> you want your config file to be <span class="token keyword">in</span><span class="token operator">?</span> · <span class="token constant">JSON</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token comment">// .eslintrc.json</span>\n<span class="token punctuation">{</span>\n    <span class="token property">&quot;env&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 指定脚本的运行环境。每种环境都有一组特定的预定义全局变量。此处使用的 browser 预定义了浏览器环境中的全局变量，es6 启用除了 modules 以外的所有 ECMAScript 6 特性（该选项会自动设置 ecmaVersion 解析器选项为 6）。    </span>\n        <span class="token property">&quot;browser&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;es2021&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">// 支持es2021</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;extends&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>  <span class="token comment">// 检测中使用的预定义的规则集合。</span>\n        <span class="token string">&quot;airbnb-base&quot;</span>  <span class="token comment">// 可以使用这个扩展文件来帮我们  检查文件</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;parserOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">&quot;ecmaVersion&quot;</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>  \n        <span class="token property">&quot;sourceType&quot;</span><span class="token operator">:</span> <span class="token string">&quot;module&quot;</span>  <span class="token comment">// 类型为 module</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;rules&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">&quot;no-console&quot;</span><span class="token operator">:</span> <span class="token number">0</span>  <span class="token comment">// 关闭不允许使用 console 规则</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;globals&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h3 id="结合webpack使用" tabindex="-1"><a class="header-anchor" href="#结合webpack使用" aria-hidden="true">#</a> 结合webpack使用</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(js|jsx)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        exclude<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node-modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;babel-loader&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;eslint-loader&#39;</span><span class="token punctuation">]</span>\n   <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="git-hooks-与-husky" tabindex="-1"><a class="header-anchor" href="#git-hooks-与-husky" aria-hidden="true">#</a> git-hooks 与 husky</h2><p>为了保证团队里的开发人员提交的代码符合规范，我们可以在开发者上传代码时进行 校验。 我们常用 <code>husky</code> 来协助进行代码提交时的 <code>eslint</code> 校验。在使用<code>husky</code>之前， 我们先来研究一下 <code>git-hooks</code> 。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>初始化项目 git init\n在项目里运行 ls <span class="token operator">-</span>la 命令 我们可以看到，存在一个<span class="token string">&quot;.git&quot;</span>名称的文件夹。事实上，在我们项目中根目录下运行git命令时，git 会根据它来工作。\ncd <span class="token punctuation">.</span>git  \ncd hooks\nls <span class="token operator">-</span>la  <span class="token comment">// 进入到 hooks 文件夹里，可以看到有很多 sample 文件</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="提交代码前进行-eslist-检测" tabindex="-1"><a class="header-anchor" href="#提交代码前进行-eslist-检测" aria-hidden="true">#</a> 提交代码前进行 eslist 检测</h3><p>我们需要使用<code>git hooks</code>里的 <code>pre-commit.sample</code> 文件里的方法</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// cat命令可以查看一个文件的内容</span>\ncat pre<span class="token operator">-</span>commit<span class="token punctuation">.</span>sample\n<span class="token comment">// 我们可以看到这样一句话，大概意思是要启用这个钩子的话，我们就把这个文件的后缀名去掉。</span>\nTo enable <span class="token keyword">this</span> hook<span class="token punctuation">,</span> rename <span class="token keyword">this</span> file to <span class="token string">&quot;pre-commit&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>虽然这样对我们本地来讲是可行的，但要注意，<code>.git</code>文件夹的改动无法同步到远端仓库。所以我们期望将<code>git-hook</code>的执行权移交到外面来。我们回到项目的根目录下，然后我们新建一个文件夹，暂时命名 为<code>.mygithooks</code>然后在此文件夹下，新增一个<code>git-hook</code>文件,命名为<code>pre-commit</code>，并写入以下内容：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>npx eslint <span class="token punctuation">.</span><span class="token operator">/</span>src  \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>我们新建了自己的<code>git-hook</code>，但此时 git 并不能识别。下面我们执行这行命令</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 项目根目录下</span>\ngit config core<span class="token punctuation">.</span>hooksPath <span class="token punctuation">.</span>mygithooks\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>上述命令给我们自己的文件，配置了<code>git-hook</code>的执行权限。 但这个时候我们<code>git commit</code>的话，可能会报这样的警告，并且没有执行我们的 shell</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token literal-property property">hint</span><span class="token operator">:</span> The <span class="token string">&#39;pre-commit&#39;</span> hook was ignored because it&#39;s not <span class="token keyword">set</span> <span class="token keyword">as</span> \nexecutable<span class="token punctuation">.</span>\n\n<span class="token literal-property property">hint</span><span class="token operator">:</span> You can disable <span class="token keyword">this</span> warning <span class="token keyword">with</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">git config \nadvice.ignoredHook false</span><span class="token template-punctuation string">`</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>这是因为我们的操作系统没有给出这个文件的可执行权限。 因此我们得再执行这样一句命令</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>chmod +x .mygithooks/pre-commit\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>现在我们执行 <code>git commit</code> 会先执行 <code>npx eslint ./src</code> 命令，进行 <code>eslist</code> 检测</p><h3 id="使用-husky-进行代码提交前-eslist-检测" tabindex="-1"><a class="header-anchor" href="#使用-husky-进行代码提交前-eslist-检测" aria-hidden="true">#</a> 使用 husky 进行代码提交前 eslist 检测</h3><p>husky在升级到7.x后，做了跟我们上述同样的事。 安装它之前，我们需要在package.json中的script里，先添加</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string-property property">&quot;sctript&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n    <span class="token string">&quot;prepare&quot;</span><span class="token operator">:</span> <span class="token string">&quot;husky install&quot;</span>  <span class="token comment">// prepare是一个npm钩子，意思是安装依赖的时候，会先执行husky install命令。这个命令就做了上述的123这三件事！</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 下载 husky</span>\nnpm i husky <span class="token operator">-</span><span class="token constant">D</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>我们安装了7.x的<code>husky</code>会发现，项目根目录下生成了<code>.husky</code>的文件夹。 当然，7.x的<code>husky</code>似乎是有bug的，如果不能正常使用，那么我们只需要验证两件事</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 第一件事：是否移交了git-hook的配置权限，执行命令 &quot;git config --list&quot;查看core.hooksPath配置是否存在，是否正确指向了.husky。如果没有，我们只需要手动的给加上就行：</span>\ngit config core<span class="token punctuation">.</span>hooksPath <span class="token punctuation">.</span>husky\n<span class="token comment">// 第二件事：是否是可执行文件，如果没有，手动加上</span>\nchmod <span class="token operator">+</span>x <span class="token punctuation">.</span>mygithooks<span class="token operator">/</span>pre<span class="token operator">-</span>commit \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>然后我们在<code>.husky</code>文件夹下创建一个文件命名为<code>pre-commit</code>，</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>// pre-commit\nnpx eslint ./src  \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>现在我们进行 <code>git commit</code> 提交，<code>husky</code>就会进行 <code>eslist</code> 检测</p><h2 id="webpack-模块与解析原理" tabindex="-1"><a class="header-anchor" href="#webpack-模块与解析原理" aria-hidden="true">#</a> Webpack 模块与解析原理</h2><ul><li><p><strong>Webpack 模块</strong>：所有能被引入的都可以当成一个模块， 例如：ESM，CommonJS，AMD，css/scss/less 文件中的 @import 语句</p></li><li><p><strong>解析原理</strong>：</p><ol><li><p>webpack 通过 Resolvers 实现了模块解析，它是基 enhanced-resolve 这个包实现的</p></li><li><p>通过内置的 <strong>enhanced-resolve</strong> 可以解析<strong>绝对路径</strong>，<strong>相对路径</strong>，<strong>模块路径</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// webpack.config.js</span>\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  resolve<span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token comment">// 可以通过 resolve 里的 alias 配置项配置自定义路径</span>\n    alias<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token string">&quot;@utils&quot;</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;src/utils/&#39;</span><span class="token punctuation">)</span>\n   <span class="token punctuation">}</span><span class="token punctuation">,</span>\n <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></li><li><p>如果遇到一个文件夹下有相同名称不同类型的文件（<strong>main.js</strong>，<strong>main.json</strong>），例如通过 <strong>import</strong> 导入时，没有写明导入文件夹哪个 <strong>main</strong> 文件，<strong>webpack</strong> 会默认导入 <strong>js</strong> 文件</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// webpack会按照数组顺序去解析这些后缀名，对于同名的文件，webpack总是会先解析列在数组首位的后缀名的文件。</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  resolve<span class="token operator">:</span> <span class="token punctuation">{</span>\n    extensions<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;.js&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;.json&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;.wasm&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li></ol></li></ul><h2 id="外部扩展" tabindex="-1"><a class="header-anchor" href="#外部扩展" aria-hidden="true">#</a> 外部扩展</h2><p>有时候我们为了减小打包后的体积，从而把一些不变的第三方库用cdn的形式引入进来，比如jQuery</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> \n  <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.js<span class="token punctuation">&quot;</span></span>\n<span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>这个时候我们想在我们的代码里使用引入的<strong>jquery</strong>———但似乎三种模块引入方式都 不行，这时候怎么办呢？ webpack给我们提供了<strong>Externals</strong>的配置属性，让我们可以 配置外部扩展模块</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  externals<span class="token operator">:</span> <span class="token punctuation">{</span>\n    jquery<span class="token operator">:</span> <span class="token string">&#39;jQuery&#39;</span><span class="token punctuation">,</span> <span class="token comment">// key的名必须和你引入的名一样，value 是暴露在window上</span>\n <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// index.js</span>\n<span class="token keyword">import</span> $ <span class="token keyword">from</span> <span class="token string">&#39;jquery&#39;</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>$<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="依赖图" tabindex="-1"><a class="header-anchor" href="#依赖图" aria-hidden="true">#</a> 依赖图</h2><p>每当一个文件依赖另一个文件时，webpack 会直接将文件视为存在依赖关系。 这使 得 webpack 可以获取非代码资源，如 images 或 web 字体等。并会把它们作为 依 赖 提供给应用程序。 当 webpack 开始工作时，它会根据我们写好的配置,从入口(entry) 开始，webpack 会递归的构建一个 依赖关系图，这个依赖图包含着应用程序中所需的每个模块，然后将所有模块打包为bundle(也就是output的配置项)。 单纯讲似乎很抽象，我们更期望能够可视化打包产物的依赖图，下边列示了一些bundle分析工具。</p><ul><li>webpack-chart：webpack stats 可交互饼图；</li><li>webpack-visualizer：可视化并分析你的bundle，检查哪些模块占用空间，哪些可能使重复使用的；</li><li>webpack-bundle-analyzer：一个 plugin 和 CLI 工具，它将 bundle 内容展示为一个便捷的、交互式、可缩放的树状图形式；</li><li>webpack bundle optimize helper：分析你的bundle并提供可操作的改进措施，减少 bundle 的大小；</li><li>bundle-stats：生成一个 bundle 报告 ( bundle大小、资源、模块 )，并比较不同构建之间的结果。</li></ul><p>我们来使用 <strong>webpack-bundle-analyzer</strong> 实现下面这个案例。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 首先安装这个插件作为开发依赖</span>\nnpm install <span class="token operator">--</span>save<span class="token operator">-</span>dev webpack<span class="token operator">-</span>bundle<span class="token operator">-</span>analyzer\n<span class="token comment">// 在配置文件中配置</span>\n<span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;html-webpack-plugin&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> BundleAnalyzerPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;webpack-bundle-analyzer&#39;</span><span class="token punctuation">)</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;development&#39;</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">app</span><span class="token operator">:</span> <span class="token string">&#39;./src/app.js&#39;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">app2</span><span class="token operator">:</span> <span class="token string">&#39;./src/app2.js&#39;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token keyword">new</span> <span class="token class-name">BundleAnalyzerPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 执行 webpack </span>\nnpx webpack serve\n<span class="token comment">// 执行完后，点击执行后出现的网址，就可以看到可视化的打包产物依赖图</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h2 id="web-works" tabindex="-1"><a class="header-anchor" href="#web-works" aria-hidden="true">#</a> Web Works</h2><p>html5之前，打开一个常规的网页，浏览器会启用几个线程？ 一般而言，至少存在三个线程(公用线程不计入在内):</p><p>分别是js引擎线程(处理js)、GUI渲染线程(渲染页面)、浏览器事件触发线程(控制交 互)。 当一段JS脚本长时间占用着处理机,就会挂起浏览器的GUI更新，而后面的事件响应也 被排在队列中得不到处理，从而造成了浏览器被锁定进入假死状态。 现在如果遇到了这种情况，我们可以做的不仅仅是优化代码————webpack5 提供了解决方案，webworker。</p><p>webWorkers提供了js的后台处理线程的API，它允许将复杂耗时的单纯js逻辑处理放 在浏览器后台线程中进行处理，让js线程不阻塞UI线程的渲染。</p><ul><li>在入口文件同级目录下创建一个<strong>work</strong>脚本 <code>work.js</code>文件</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>self<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n <span class="token comment">// self.postMessage 函数会返回结果</span>\n  self<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">answer</span><span class="token operator">:</span> <span class="token number">1111</span>       \n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 入口文件 app.js</span>\n<span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">&#39;./work.js&#39;</span><span class="token punctuation">,</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\nworker<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">question</span><span class="token operator">:</span> <span class="token string">&#39;hi，那边的workder线程，请告诉我今天的幸运数字是多少？&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\nworker<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>data<span class="token punctuation">.</span>answer<span class="token punctuation">)</span> <span class="token comment">// 接受 workder 返回的结果</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="typescript" tabindex="-1"><a class="header-anchor" href="#typescript" aria-hidden="true">#</a> TypeScript</h2><blockquote><p>在前端生态里，TS扮演着越来越重要的角色。 我们直入正题，讲下如何在webpack工程化环境中集成TS。 首先，当然是安装我们的ts和对应的loader。</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>npm install <span class="token operator">--</span>save<span class="token operator">-</span>dev typescript ts<span class="token operator">-</span>loader\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>接下来我们需要在项目根目录下添加一个ts的配置文件————tsconfig.json，我们可以用<strong>ts</strong>自带的工具来自动化生成它。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>npx tsc --init\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>我们发现生成了一个tsconfig.json，里面注释掉了绝大多数配置。 现在，根据我们想要的效果来打开对应的配置。</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;rootDir&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./src&quot;</span><span class="token punctuation">,</span>   <span class="token comment">// 指定入口</span>\n    <span class="token property">&quot;outDir&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./dist&quot;</span><span class="token punctuation">,</span>   <span class="token comment">// 指定出口</span>\n    <span class="token property">&quot;noImplicitAny&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;sourceMap&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;module&quot;</span><span class="token operator">:</span> <span class="token string">&quot;es6&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;target&quot;</span><span class="token operator">:</span> <span class="token string">&quot;es5&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;jsx&quot;</span><span class="token operator">:</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;allowJs&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;moduleResolution&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node&quot;</span>  \n <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>好了，接下来我们新增一个src/index.ts，内置一些内容。 然后我们别忘了更改我们的entry及配置对应的loder。 当然，还有<strong>resolve.extensions</strong>，将.ts放在.js之前，这样它会先找.ts。 注意，如果我们使用了<strong>sourceMap</strong>，一定记得和上面的ts配置一样，设置<strong>sourcemap</strong>为true。 也别忘记在我们的<strong>webpack.config.js</strong>里</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;html-webpack-plugin&#39;</span><span class="token punctuation">)</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;development&#39;</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&#39;./src/app.ts&#39;</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">devtool</span><span class="token operator">:</span> <span class="token string">&#39;inline-source-map&#39;</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.ts$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token string">&#39;ts-loader&#39;</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;.ts&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;.js&#39;</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;bundle.js&#39;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;./dist&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h3 id="使用第三方类库" tabindex="-1"><a class="header-anchor" href="#使用第三方类库" aria-hidden="true">#</a> 使用第三方类库</h3><p>在从 npm 上安装第三方库时，一定要记得同时安装这个库的类型声明文件，我们可以从 [TypeSearch](https://www.ty pescriptlang.org/dt/search?search=) 中找到并安装这些第三方库的类型声明文件。举个例子，如果想安装 lodash 类型声明文件，我们可以运行下面的命令</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>npm install <span class="token operator">--</span>save<span class="token operator">-</span>dev @types<span class="token operator">/</span>lodash\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="多页面应用" tabindex="-1"><a class="header-anchor" href="#多页面应用" aria-hidden="true">#</a> 多页面应用</h2><h3 id="entry-配置" tabindex="-1"><a class="header-anchor" href="#entry-配置" aria-hidden="true">#</a> entry 配置</h3><ul><li><strong>单个入口（简写）语法</strong>：<code>entry: string | [string]</code></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token operator">:</span> <span class="token string">&#39;./path/to/my/entry/file.js&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 多入口</span>\n<span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;html-webpack-plugin&#39;</span><span class="token punctuation">)</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;development&#39;</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;多页面应用&#39;</span><span class="token punctuation">,</span>  <span class="token comment">// 设置 title 标签，但模板的title内容需要改成 &lt;title&gt;&lt;%= htmlWebpackPlugin.options.title %&gt;&lt;/title&gt;</span>\n      <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&#39;./index.html&#39;</span><span class="token punctuation">,</span>  <span class="token comment">// 设置模板</span>\n      <span class="token literal-property property">inject</span><span class="token operator">:</span> <span class="token string">&#39;body&#39;</span><span class="token punctuation">,</span>  <span class="token comment">// 设置 script 标签注入哪个标签里</span>\n      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;chanel1/index.html&#39;</span><span class="token punctuation">,</span>  <span class="token comment">// 设置输出 html 文件名</span>\n      <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;main&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;lodash&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 默认会将 entry 里的所有入口引入</span>\n      <span class="token literal-property property">publicPath</span><span class="token operator">:</span> <span class="token string">&#39;http://www.b.com/&#39;</span>  <span class="token comment">// 设置公共路径</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\n    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&#39;./index2.html&#39;</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">inject</span><span class="token operator">:</span> <span class="token string">&#39;body&#39;</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;chanel2/index2.html&#39;</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;main2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;lodash&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">publicPath</span><span class="token operator">:</span> <span class="token string">&#39;http://www.a.com/&#39;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n\n  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">main</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token keyword">import</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;./src/app2.js&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;./src/app.js&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">dependOn</span><span class="token operator">:</span> <span class="token string">&#39;lodash&#39;</span><span class="token punctuation">,</span>   <span class="token comment">// 上面2个入口文件可能都用了 lodash，抽离出来</span>\n      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;chanel1/[name].js&#39;</span> <span class="token comment">// 设置打包后的输出文件</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">main2</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token keyword">import</span><span class="token operator">:</span> <span class="token string">&#39;./src/app3.js&#39;</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">dependOn</span><span class="token operator">:</span> <span class="token string">&#39;lodash&#39;</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;chanel2/[name].js&#39;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">lodash</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token keyword">import</span><span class="token operator">:</span> <span class="token string">&#39;lodash&#39;</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;common/[name].js&#39;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">clean</span><span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br></div></div><h2 id="tree-shaking" tabindex="-1"><a class="header-anchor" href="#tree-shaking" aria-hidden="true">#</a> Tree shaking</h2><p><code>Tree Shaking</code> 指基于 ES Module 进行静态分析，通过 AST 将用不到的函数进行移除，从而减小打包体积。</p><blockquote><p>注意 Webpack 不能百分百安全地进行 tree-shaking。有些模块导入，只要被引入， 就会对应用程序产生重要的影响。一个很好的例子就是全局样式表，或者设置全局配 置的JavaScript 文件。</p><p>Webpack 认为这样的文件有“副作用”。具有副作用的文件不应该做 tree-shaking， 因为这将破坏整个应用程序。</p><p>Webpack 的设计者清楚地认识到不知道哪些文件有副作用的情况下打包代码的风 险，因此webpack4默认地将所有代码视为有副作用。这可以保护你免于删除必要的 文件，但这意味着 Webpack 的默认行为实际上是不进行 tree-shaking。值得注意的 是webpack5默认会进行 tree-shaking。 如何告诉 Webpack 你的代码无副作用，可以通过 package.json 有一个特殊的属性 sideEffects，就是为此而存在的。它有三个可能的值</p></blockquote><ul><li><strong>true</strong>：如果不指定其他值的话。这意味着所有的文件都有副作用，也就是没有一个文件 可以 <strong>tree-shaking</strong>。</li><li><strong>false</strong>：告诉 Webpack 没有文件有副作用，所有文件都可以 <strong>tree-shaking</strong>。</li><li><strong>数组[…]</strong> ：是文件路径数组。它告诉 webpack，除了数组中包含的文件外，你的任何文件 都没有副作用。因此，除了指定的文件之外，其他文件都可以安全地进行 <strong>treeshaking</strong>。</li></ul><h2 id="渐进式网络应用程序-pwa" tabindex="-1"><a class="header-anchor" href="#渐进式网络应用程序-pwa" aria-hidden="true">#</a> 渐进式网络应用程序 PWA</h2><blockquote><p><strong>渐进式网络应用程序(progressive web application - PWA)，是一种可以提供类似于 native app(原生应用程序) 体验的 web app(网络应用程序)。PWA 可以用来做很多事。其中最重要的是，在离线(offline)时应用程序能够继续运行功能。这是通过使用 名为 Service Workers 的 web 技术来实现的。</strong></p></blockquote><h2 id="shimming-预置全局变量" tabindex="-1"><a class="header-anchor" href="#shimming-预置全局变量" aria-hidden="true">#</a> Shimming 预置全局变量</h2><p>可以通过内置的 <strong>ProvidePlugin</strong> 插件实现不用下载第三方包，在 webpack 编译的每个模块中，通过访问一个变量来获取一个 package。如果 webpack 看到模块中用到这个变量，它将在最终 bundle 中引入给定的 package。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;webpack&#39;</span><span class="token punctuation">)</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  mode<span class="token operator">:</span> <span class="token string">&#39;development&#39;</span><span class="token punctuation">,</span>\n  entry<span class="token operator">:</span> <span class="token string">&#39;./src/index.js&#39;</span><span class="token punctuation">,</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>ProvidePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> \n      _<span class="token operator">:</span> <span class="token string">&#39;lodash&#39;</span> <span class="token comment">// 如果你遇到了至少一处用到 _ 变量的模块实例，你将 lodash package 引入进来，并将其提供给需要用到它的模块。</span>\n\n   <span class="token punctuation">}</span><span class="token punctuation">)</span>\n <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>还可以使用 ProvidePlugin 暴露出某个模块中单个导出，通过配置一个“数组路径”，这样就能很好的与 tree shaking 配合，将 lodash 中的其余没有用到的导出去除。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;webpack&#39;</span><span class="token punctuation">)</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  mode<span class="token operator">:</span> <span class="token string">&#39;development&#39;</span><span class="token punctuation">,</span>\n  entry<span class="token operator">:</span> <span class="token string">&#39;./src/index.js&#39;</span><span class="token punctuation">,</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>ProvidePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      join<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;lodash&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;join&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n   <span class="token punctuation">}</span><span class="token punctuation">)</span>\n <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="this-指向" tabindex="-1"><a class="header-anchor" href="#this-指向" aria-hidden="true">#</a> this 指向</h3><p>当模块运行在 CommonJS 上下文中，这将会变成一个问题，也就是说此时的 this 指向的是 module.exports 。在这种情况下，你可以通过使用 imports-loader 覆盖 this 指向</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>npm i imports<span class="token operator">-</span>loader <span class="token operator">-</span><span class="token constant">D</span>\n\n<span class="token comment">// webpack.config.js</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>  <span class="token comment">// 让 ./src/index.js 文件的 this 指向 window</span>\n        <span class="token literal-property property">test</span><span class="token operator">:</span> require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;./src/index.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token string">&#39;imports-loader?wrapper=window&#39;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="创建一个小轮子" tabindex="-1"><a class="header-anchor" href="#创建一个小轮子" aria-hidden="true">#</a> 创建一个小轮子</h2><h3 id="如何构建一个-library" tabindex="-1"><a class="header-anchor" href="#如何构建一个-library" aria-hidden="true">#</a> 如何构建一个 library</h3><blockquote><p>除了打包应用程序，webpack 还可以用于打包 JavaScript library</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 搭建好 webpapck 环境后，创建一个 src 文件夹 ，下有一个 indnx.js</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> x <span class="token operator">+</span> y\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//  webpack.config.js</span>\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;production&#39;</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&#39;./src/index.js&#39;</span><span class="token punctuation">,</span>\n  <span class="token comment">// experiments: {  // ESM 引入暂时是一个实验性的功能，需要手动开启，还需要将 library 中的 name 属性删除</span>\n  <span class="token comment">//   outputModule: true,</span>\n  <span class="token comment">// },</span>\n  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;dist&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;mylib.js&#39;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">library</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;mylib&#39;</span><span class="token punctuation">,</span>  <span class="token comment">// 定义一个 library 名字</span>\n      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;umd&#39;</span>  <span class="token comment">// 让我们的轮子可以通过 CommonJS，ASD，script src 引入\t</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">globalObject</span><span class="token operator">:</span> <span class="token string">&#39;globalThis&#39;</span> <span class="token comment">// 配置全局this</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h3 id="创建一个-webpack-numbers" tabindex="-1"><a class="header-anchor" href="#创建一个-webpack-numbers" aria-hidden="true">#</a> 创建一个 webpack-numbers</h3><blockquote><p>假设我们正在编写一个名为 webpack-numbers 的小的 library，可以将数字 1 到 5 转换为文本表示，反之亦然，例如将 2 转换为 &#39;two&#39;。</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 我们将 lodash 安装为 devDependencies 而不是 dependencies ，因为我们不需要将其打包到我们的库中，否则我们的库体积很容易变大。</span>\nnpm i webpack webpack<span class="token operator">-</span>cli lodash <span class="token operator">-</span><span class="token constant">D</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token comment">// 在项目根目录下创建一个 src 文件夹，里面创建一个 ref.json</span>\n<span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    <span class="token property">&quot;num&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;word&quot;</span><span class="token operator">:</span> <span class="token string">&quot;One&quot;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    <span class="token property">&quot;num&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;word&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Two&quot;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    <span class="token property">&quot;num&quot;</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;word&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Three&quot;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    <span class="token property">&quot;num&quot;</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;word&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Four&quot;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    <span class="token property">&quot;num&quot;</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;word&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Five&quot;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    <span class="token property">&quot;num&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;word&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Zero&quot;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// src/index.js</span>\n<span class="token keyword">import</span> _ <span class="token keyword">from</span> <span class="token string">&#39;lodash&#39;</span>\n<span class="token keyword">import</span> numRef <span class="token keyword">from</span> <span class="token string">&#39;./ref.json&#39;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">numToWord</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> _<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>numRef<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">accum<span class="token punctuation">,</span> ref</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> ref<span class="token punctuation">.</span>num <span class="token operator">===</span> num <span class="token operator">?</span> ref<span class="token punctuation">.</span>word <span class="token operator">:</span> accum\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">wordToNum</span><span class="token punctuation">(</span><span class="token parameter">word</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> _<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>numRef<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">accum<span class="token punctuation">,</span> ref</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> ref<span class="token punctuation">.</span>word <span class="token operator">===</span> word <span class="token operator">&amp;&amp;</span> word<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> ref<span class="token punctuation">.</span>num <span class="token operator">:</span> accum\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// webpack.config.js</span>\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;production&#39;</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&#39;./src/index.js&#39;</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;dist&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;webpack-numbers.js&#39;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">library</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;webpackNumbers&#39;</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;umd&#39;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">globalObject</span><span class="token operator">:</span> <span class="token string">&#39;globalThis&#39;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">externals</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">lodash</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">commonjs</span><span class="token operator">:</span> <span class="token string">&#39;lodash&#39;</span><span class="token punctuation">,</span> <span class="token comment">//common规范中使用，其实下面一个可以不用写</span>\n      <span class="token literal-property property">commonjs2</span><span class="token operator">:</span> <span class="token string">&#39;lodash&#39;</span><span class="token punctuation">,</span> \n      <span class="token literal-property property">amd</span><span class="token operator">:</span> <span class="token string">&#39;lodash&#39;</span><span class="token punctuation">,</span>  <span class="token comment">// amd 规范中所有</span>\n      <span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token string">&#39;_&#39;</span>  <span class="token comment">// 全局使用</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token comment">// package.json</span>\n<span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  <span class="token property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;dist/webpack-numbers.js&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 修改入口，修改成打包后的文件</span>\n  <span class="token comment">// ... </span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="发布到-npm-package上" tabindex="-1"><a class="header-anchor" href="#发布到-npm-package上" aria-hidden="true">#</a> 发布到 npm package上</h3><ul><li><p>先在 npm 官网注册账号，点击个人图标，点击 packages 进去</p></li><li><p>回到项目根目录打开命令行</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>npm config <span class="token keyword">get</span> registry  <span class="token comment">// 输入后返回下面的地址才是正确</span>\n<span class="token literal-property property">https</span><span class="token operator">:</span><span class="token operator">/</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">registry.npmjs.org</span><span class="token regex-delimiter">/</span></span>  \n\n<span class="token comment">// 然后执行下面命令添加一个用户，然后输入npm官网注册的用户名</span>\nnpm adduser\n<span class="token comment">// 然后执行下面命令发布我们的包，成功后就可以在 npm 官网上看到并使用npm 下载</span>\nnpm publish\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li></ul><h2 id="dll-动态链接库" tabindex="-1"><a class="header-anchor" href="#dll-动态链接库" aria-hidden="true">#</a> dll (动态链接库)</h2><p>可以通过 <strong>webapck</strong> 内置的 <code>DllPlugin</code>链接一些第三方库，减少 <strong>webpack</strong> 打包时间，下面以 <code>jquery</code> 为例</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 在根目录下创建一个 webpack.dll.config.js 文件配置 dll</span>\n<span class="token comment">// webpack.dll.config.js</span>\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;webpack&#39;</span><span class="token punctuation">)</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;production&#39;</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">jquery</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;jquery&#39;</span><span class="token punctuation">]</span> <span class="token comment">// 设置入口文件，这里是 jquery 包</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;[name].js&#39;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;dll&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">library</span><span class="token operator">:</span> <span class="token string">&#39;[name]_[hash]&#39;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DllPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment">// 通过 DllPlugin 配置 dll</span>\n      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;[name]_[hash]&#39;</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;dll/manifest.json&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// webpack.config.js</span>\n<span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;html-webpack-plugin&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;webpack&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> AddAssetHtmlPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;add-asset-html-webpack-plugin&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 下载这个插件并导入，这个插件可以把 dll 文件夹也打包到 dist 文件夹里，这样打包时间又会恢复，但 jquery 第三方库单独拿出来了</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;production&#39;</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&#39;./src/index.js&#39;</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DllReferencePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token comment">// 链接到动态链接库</span>\n      <span class="token literal-property property">manifest</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;./dll/manifest.json&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token keyword">new</span> <span class="token class-name">AddAssetHtmlPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token literal-property property">filepath</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;./dll/jquery.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">publicPath</span><span class="token operator">:</span> <span class="token string">&#39;./&#39;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div>',101),F={href:"https://webpack.docschina.org/concepts/",target:"_blank",rel:"noopener noreferrer"},B=(0,p.Uk)("官方文档"),Y={},Z=(0,a(3744).Z)(Y,[["render",function(n,s){const a=(0,p.up)("ExternalLinkIcon");return(0,p.wg)(),(0,p.iD)(p.HY,null,[e,(0,p._)("p",null,[t,(0,p._)("a",o,[l,(0,p.Wm)(a)]),r]),(0,p._)("p",null,[(0,p._)("a",c,[i,(0,p.Wm)(a)]),u]),(0,p._)("p",null,[k,(0,p._)("a",b,[m,(0,p.Wm)(a)]),d]),g,(0,p._)("ul",null,[(0,p._)("li",null,[y,h,(0,p._)("a",v,[w,(0,p.Wm)(a)]),x]),(0,p._)("li",null,[j,f,(0,p._)("a",q,[_,(0,p.Wm)(a)]),S,(0,p._)("a",W,[P,(0,p.Wm)(a)]),U]),C]),(0,p._)("p",null,[T,(0,p._)("a",E,[D,(0,p.Wm)(a)])]),A,M,(0,p._)("p",null,[(0,p._)("a",H,[$,(0,p.Wm)(a)]),z]),R,(0,p._)("blockquote",null,[(0,p._)("p",null,[J,(0,p._)("a",I,[L,(0,p.Wm)(a)]),O])]),N,(0,p._)("p",null,[(0,p._)("a",F,[B,(0,p.Wm)(a)])])],64)}]])}}]);