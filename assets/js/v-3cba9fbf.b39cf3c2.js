"use strict";(self.webpackChunkdemo1=self.webpackChunkdemo1||[]).push([[6679],{8289:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-3cba9fbf",path:"/%E5%B7%A5%E5%85%B7/2023/20230602.html",title:"Monorepo",lang:"zh-CN",frontmatter:{title:"Monorepo",date:"2023-06-02T00:00:00.000Z",tags:["工具"],categories:["工具"]},excerpt:"",headers:[{level:2,title:"一、Monorepo 介绍",slug:"一、monorepo-介绍",children:[]},{level:2,title:"二、Monorepo 演进",slug:"二、monorepo-演进",children:[]},{level:2,title:"三、Monorepo 优劣",slug:"三、monorepo-优劣",children:[]},{level:2,title:"四、Monorepo 场景",slug:"四、monorepo-场景",children:[]},{level:2,title:"五、Monorepo 踩坑",slug:"五、monorepo-踩坑",children:[{level:3,title:"5.1、幽灵依赖",slug:"_5-1、幽灵依赖",children:[]},{level:3,title:"5.2、依赖安装耗时长",slug:"_5-2、依赖安装耗时长",children:[]},{level:3,title:"5.3、构建打包耗时长",slug:"_5-3、构建打包耗时长",children:[]}]},{level:2,title:"六、Monorepo 选型",slug:"六、monorepo-选型",children:[{level:3,title:"6.1、构建型 Monorepo 方案",slug:"_6-1、构建型-monorepo-方案",children:[]},{level:3,title:"6.2、轻量化 Monorepo 方案",slug:"_6-2、轻量化-monorepo-方案",children:[]},{level:3,title:"6.3、小结：如何选择",slug:"_6-3、小结-如何选择",children:[]}]}],git:{updatedTime:null,contributors:[]}}},8989:(n,s,a)=>{a.r(s),a.d(s,{default:()=>En});var e=a(6252);const t=(0,e.uE)('<div class="custom-container tip"><p class="custom-container-title">TIP</p><p>带你了解更全面的 Monorepo - 优劣、踩坑、选型</p></div><h2 id="一、monorepo-介绍" tabindex="-1"><a class="header-anchor" href="#一、monorepo-介绍" aria-hidden="true">#</a> 一、Monorepo 介绍</h2><p>Monorepo 是一种项目代码管理方式，指单个仓库中管理多个项目，有助于简化代码共享、版本控制、构建和部署等方面的复杂性，并提供更好的可重用性和协作性。Monorepo 提倡了开放、透明、共享的组织文化，这种方法已经被很多大型公司广泛使用，如 Google、Facebook 和 Microsoft 等。</p><h2 id="二、monorepo-演进" tabindex="-1"><a class="header-anchor" href="#二、monorepo-演进" aria-hidden="true">#</a> 二、Monorepo 演进</h2><p><strong>阶段一：单仓库巨石应用，</strong> 一个 Git 仓库维护着项目代码，随着迭代业务复杂度的提升，项目代码会变得越来越多，越来越复杂，大量代码构建效率也会降低，最终导致了单体巨石应用，这种代码管理方式称之为 Monolith。</p><p><strong>阶段二：多仓库多模块应用</strong>，于是将项目拆解成多个业务模块，并在多个 Git 仓库管理，模块解耦，降低了巨石应用的复杂度，每个模块都可以独立编码、测试、发版，代码管理变得简化，构建效率也得以提升，这种代码管理方式称之为 MultiRepo。</p><p><strong>阶段三：单仓库多模块应用</strong>，随着业务复杂度的提升，模块仓库越来越多，MultiRepo这种方式虽然从业务上解耦了，但增加了项目工程管理的难度，随着模块仓库达到一定数量级，会有几个问题：跨仓库代码难共享；分散在单仓库的模块依赖管理复杂（底层模块升级后，其他上层依赖需要及时更新，否则有问题）；增加了构建耗时。于是将多个项目集成到一个仓库下，共享工程配置，同时又快捷地共享模块代码，成为趋势，这种代码管理方式称之为 MonoRepo。</p>',7),o=(0,e._)("p",null,[(0,e._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"img",originSrc:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/14ba61eb924c4411bc4ff102f8f3f530~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp",data:"aurora"})],-1),r=(0,e._)("h2",{id:"三、monorepo-优劣",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#三、monorepo-优劣","aria-hidden":"true"},"#"),(0,e.Uk)(" 三、Monorepo 优劣")],-1),p=(0,e._)("p",null,[(0,e._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"img",originSrc:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9de0308bb3c24633977688558953cf4c~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp",data:"aurora"})],-1),l=(0,e.uE)('<table><thead><tr><th><strong>场景</strong></th><th><strong>MultiRepo</strong></th><th><strong>MonoRepo</strong></th></tr></thead><tbody><tr><td>代码可见性</td><td>✅ 代码隔离，研发者只需关注自己负责的仓库 ❌ 包管理按照各自owner划分，当出现问题时，需要到依赖包中进行判断并解决。</td><td>✅ 一个仓库中多个相关项目，很容易看到整个代码库的变化趋势，更好的团队协作。 ❌ 增加了非owner改动代码的风险</td></tr><tr><td>依赖管理</td><td>❌ 多个仓库都有自己的 node_modules，存在依赖重复安装情况，占用磁盘内存大。</td><td>✅ 多项目代码都在一个仓库中，相同版本依赖提升到顶层只安装一次，节省磁盘内存，</td></tr><tr><td>代码权限</td><td>✅ 各项目单独仓库，不会出现代码被误改的情况，单个项目出现问题不会影响其他项目。</td><td>❌ 多个项目代码都在一个仓库中，没有项目粒度的权限管控，一个项目出问题，可能影响所有项目。</td></tr><tr><td>开发迭代</td><td>✅ 仓库体积小，模块划分清晰，可维护性强。 ❌ 多仓库来回切换（编辑器及命令行），项目多的话效率很低。多仓库见存在依赖时，需要手动 <code>npm link</code>，操作繁琐。 ❌ 依赖管理不便，多个依赖可能在多个仓库中存在不同版本，重复安装，npm link 时不同项目的依赖会存在冲突。</td><td>✅ 多个项目都在一个仓库中，可看到相关项目全貌，编码非常方便。 ✅ 代码复用高，方便进行代码重构。 ❌ 多项目在一个仓库中，代码体积多大几个 G，<code>git clone</code>时间较长。 ✅ 依赖调试方便，依赖包迭代场景下，借助工具自动 npm link，直接使用最新版本依赖，简化了操作流程。</td></tr><tr><td>工程配置</td><td>❌ 各项目构建、打包、代码校验都各自维护，不一致时会导致代码差异或构建差异。</td><td>✅ 多项目在一个仓库，工程配置一致，代码质量标准及风格也很容易一致。</td></tr><tr><td>构建部署</td><td>❌ 多个项目间存在依赖，部署时需要手动到不同的仓库根据先后顺序去修改版本及进行部署，操作繁琐效率低。</td><td>✅ 构建性 Monorepo 工具可以配置依赖项目的构建优先级，可以实现一次命令完成所有的部署。</td></tr></tbody></table><h2 id="四、monorepo-场景" tabindex="-1"><a class="header-anchor" href="#四、monorepo-场景" aria-hidden="true">#</a> 四、Monorepo 场景</h2><p>综合如上 Monorepo VS MultiRepo，<strong>中大型项目，多模块项目</strong>，更适合用 MonoRepo 方式管理代码，在开发、协作效率、代码一致性方面都能受益。</p><h2 id="五、monorepo-踩坑" tabindex="-1"><a class="header-anchor" href="#五、monorepo-踩坑" aria-hidden="true">#</a> 五、Monorepo 踩坑</h2><h3 id="_5-1、幽灵依赖" tabindex="-1"><a class="header-anchor" href="#_5-1、幽灵依赖" aria-hidden="true">#</a> 5.1、幽灵依赖</h3><p><strong>问题</strong>：npm/yarn 安装依赖时，存在依赖提升，某个项目使用的依赖，并没有在其 package.json 中声明，也可以直接使用，这种现象称之为 “幽灵依赖”；随着项目迭代，这个依赖不再被其他项目使用，不再被安装，使用幽灵依赖的项目，会因为无法找到依赖而报错。</p><p><strong>方案</strong>：基于 npm/yarn 的 Monorepo 方案，依然存在 “幽灵依赖” 问题，我们可以通过 pnpm 彻底解决这个问题</p><h3 id="_5-2、依赖安装耗时长" tabindex="-1"><a class="header-anchor" href="#_5-2、依赖安装耗时长" aria-hidden="true">#</a> 5.2、依赖安装耗时长</h3><p><strong>问题</strong>：MonoRepo 中每个项目都有自己的 package.json 依赖列表，随着 MonoRepo 中依赖总数的增长，每次 <code>install</code> 时，耗时会较长。</p><p><strong>方案</strong>：相同版本依赖提升到 Monorepo 根目录下，减少冗余依赖安装；使用 pnpm 按需安装及依赖缓存。</p><h3 id="_5-3、构建打包耗时长" tabindex="-1"><a class="header-anchor" href="#_5-3、构建打包耗时长" aria-hidden="true">#</a> 5.3、构建打包耗时长</h3><p><strong>问题</strong>：多个项目构建任务存在依赖时，往往是串行构建 或 全量构建，导致构建时间较长</p><p><strong>方案</strong>：增量构建，而非全量构建；也可以将串行构建，优化成并行构建。</p><h2 id="六、monorepo-选型" tabindex="-1"><a class="header-anchor" href="#六、monorepo-选型" aria-hidden="true">#</a> 六、Monorepo 选型</h2><h3 id="_6-1、构建型-monorepo-方案" tabindex="-1"><a class="header-anchor" href="#_6-1、构建型-monorepo-方案" aria-hidden="true">#</a> 6.1、构建型 Monorepo 方案</h3><p>此类工具，主要解决大仓库 Monorepo 构建效率低的问题。项目代码仓库越来越庞大，工作流（int、构建、单元测试、集成测试）也会越来越慢；这类工具，是专门针对这样的场景进行极致的性能优化。适用于包非常多、代码体积非常大的 Monorepo 项目。</p><h4 id="_6-1-1、turborepo" tabindex="-1"><a class="header-anchor" href="#_6-1-1、turborepo" aria-hidden="true">#</a> 6.1.1、Turborepo</h4>',17),c={href:"https://link.juejin.cn?target=https%3A%2F%2Fturbo.build%2F",target:"_blank",rel:"noopener noreferrer"},i=(0,e._)("strong",null,"Turborepo",-1),u=(0,e.Uk)(" 是 Vercel 团队开源的高性能构建代码仓库系统，允许开发者使用不同的构建系统。"),d=(0,e.uE)('<p><strong>构建加速思路</strong>：</p><ul><li><strong>Multiple Running Task</strong>：构建任务并行进行，构建顺序交给开发者配置</li><li><strong>Cache、Remote Cache</strong>：通过缓存 及 远程缓存，减少构建时间</li></ul><p><strong>举例 Multiple Running Task</strong>：我们现在有一个 Monorepo 的项目，有以下几个 package：</p><ul><li>apps/web，依赖 shared</li><li>apps/docs，依赖 shared</li><li>package/shared，被 web 和 docs 依赖</li></ul><div class="language-arduino ext-arduino line-numbers-mode"><pre class="language-arduino"><code>arduino复制代码# 当我们使用正常的 yarn workspace 去管理 monorepo 的工作流任务时，例如执行以下命令：\nyarn workspaces <span class="token builtin">run</span> lint\nyarn workspaces <span class="token builtin">run</span> test\nyarn workspaces <span class="token builtin">run</span> build\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><strong>传统的 yarn workspace 问题</strong>：串行构建，性能差</p>',6),g=(0,e._)("p",null,[(0,e._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"img",originSrc:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/759b0b76af6e447897c8c70cc9013483~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp",data:"aurora"})],-1),b=(0,e._)("p",null,[(0,e._)("strong",null,"Turborepo Multiple Running Task"),(0,e.Uk)("：允许用户在 "),(0,e._)("code",null,"turbo.json"),(0,e.Uk)(" 中声明 task 之间依赖关系，优化后构建如下")],-1),m=(0,e._)("p",null,[(0,e._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"img",originSrc:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/524439e9e11340299386184c6a658ef5~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp",data:"aurora"})],-1),k=(0,e._)("p",null,[(0,e._)("strong",null,"举例 Local Cache"),(0,e.Uk)("：第一次"),(0,e._)("code",null,"trubo run build"),(0,e.Uk)("后，会生成缓存存放在 "),(0,e._)("code",null,"node_modules/.cache/turbo/")],-1),h=(0,e._)("p",null,[(0,e._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"img",originSrc:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8ff1250dac4b460b95692bdbc804fbc9~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp",data:"aurora"})],-1),_=(0,e._)("p",null,"（第一次构建示意图）",-1),f=(0,e._)("p",null,[(0,e._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"img",originSrc:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/36c1ee537ace4efebde4f3828ff546af~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp",data:"aurora"})],-1),v=(0,e._)("p",null,"（第二次构建示意图）",-1),x=(0,e._)("p",null,[(0,e._)("strong",null,"举例 Remote Cache"),(0,e.Uk)("：想要在 CI/CD 或团队中共享打包缓存，把缓存保存到了云端，构建时被拉取")],-1),j=(0,e._)("p",null,[(0,e._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"img",originSrc:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/183feec8a7994c78956150afc1733a15~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp",data:"aurora"})],-1),q=(0,e._)("p",null,"（远程缓存构建示意图）",-1),y=(0,e._)("h4",{id:"_6-1-2、rush",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_6-1-2、rush","aria-hidden":"true"},"#"),(0,e.Uk)(" 6.1.2、Rush")],-1),w={href:"https://link.juejin.cn?target=https%3A%2F%2Frushstack.io%2F",target:"_blank",rel:"noopener noreferrer"},F=(0,e.Uk)("Rush"),M=(0,e.Uk)(" 是微软开发的可扩展的 Monorepo 工具及解决方案。"),L=(0,e._)("strong",null,"早期，只提供了 Rush 作为构建调取器",-1),U=(0,e.Uk)("，其余事项交给用户灵活的选择任意构建工具链，由于过于灵活带来了很大的选型及维护成本，后来成立了 Rush Stack 来提供了"),z=(0,e._)("strong",null,"一套可复用的解决方案，涵盖多项目的构建、测试、打包和发布",-1),R=(0,e.Uk)("，实现了更强大的工作流。有如下工具："),S={href:"https://link.juejin.cn?target=https%3A%2F%2Frushjs.io%2F",target:"_blank",rel:"noopener noreferrer"},A=(0,e.Uk)("Rush"),W=(0,e.Uk)(": 可扩展的 monorepo 构建编排工具"),C={href:"https://link.juejin.cn?target=https%3A%2F%2Frushstack.io%2Fzh-cn%2Fpages%2Fheft%2Foverview%2F",target:"_blank",rel:"noopener noreferrer"},N=(0,e.Uk)("Heft"),T=(0,e.Uk)(": 可以与 Rush 交互的可扩展构建系统"),E={href:"https://link.juejin.cn?target=https%3A%2F%2Fapi-extractor.com%2F",target:"_blank",rel:"noopener noreferrer"},I=(0,e.Uk)("API Extractor"),P=(0,e.Uk)(": 为工具库审阅 API 并生成 .d.ts 文件"),D={href:"https://link.juejin.cn?target=https%3A%2F%2Fapi-extractor.com%2Fpages%2Fsetup%2Fgenerating_docs",target:"_blank",rel:"noopener noreferrer"},G=(0,e.Uk)("API Documenter"),K=(0,e.Uk)(": 生成你的 API 文档站"),V={href:"https://link.juejin.cn?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2F%40rushstack%2Feslint-config",target:"_blank",rel:"noopener noreferrer"},B=(0,e.Uk)("@rushstack/eslint-config"),Y=(0,e.Uk)(": 专门为大型 TypeScript monorepo 仓库设计的 ESLint 规则集"),H={href:"https://link.juejin.cn?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2F%40rushstack%2Feslint-plugin-packlets",target:"_blank",rel:"noopener noreferrer"},Z=(0,e.Uk)("@rushstack/eslint-plugin-packlets"),O=(0,e.Uk)(": 可用于在单个项目内来组织代码，NPM 发包的一个轻量级解决方案"),J={href:"https://link.juejin.cn?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2F%40rushstack%2Frundown",target:"_blank",rel:"noopener noreferrer"},Q=(0,e.Uk)("Rundown"),X=(0,e.Uk)(": 用于优化 Node.js 启动时间的工具"),$=(0,e._)("p",null,[(0,e._)("strong",null,"Rush 功能列举")],-1),nn=(0,e._)("li",null,[(0,e._)("p",null,[(0,e._)("strong",null,"解决了幽灵依赖"),(0,e.Uk)("：将项目所有依赖都安装到 Repo根目录的common/temp下，通过"),(0,e._)("strong",null,"软链接"),(0,e.Uk)("到各项目，保证了 node_modules 下依赖与 package.json 一致")])],-1),sn=(0,e._)("li",null,[(0,e._)("p",null,[(0,e._)("strong",null,"并行构建"),(0,e.Uk)("：Rush 支持并行构建多个项目，提高了构建效率")])],-1),an=(0,e._)("strong",null,"插件系统",-1),en=(0,e.Uk)("：Rush 提供了丰富的插件系统，可以扩展其功能，满足不同的需求，"),tn={href:"https://link.juejin.cn?target=https%3A%2F%2Frushstack.io%2Fzh-cn%2Fpages%2Fheft%2Fcore_plugins%2F",target:"_blank",rel:"noopener noreferrer"},on=(0,e.Uk)("具体参考"),rn=(0,e._)("li",null,[(0,e._)("p",null,[(0,e._)("strong",null,"项目发布，ChangeLog 支持友好"),(0,e.Uk)("：自动修改项目版本号，自动生成 ChangeLog")])],-1),pn=(0,e._)("h4",{id:"_6-1-3、nx",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_6-1-3、nx","aria-hidden":"true"},"#"),(0,e.Uk)(" 6.1.3、Nx")],-1),ln=(0,e.Uk)("Nx 是 "),cn={href:"https://link.juejin.cn?target=https%3A%2F%2Fnx.app%2Fcompany",target:"_blank",rel:"noopener noreferrer"},un=(0,e.Uk)("Nrwl"),dn=(0,e.Uk)(" 团队开发的，同时在维护 Lerna，目前 Nx 可以与 Learn 5.1及以上集成使用"),gn=(0,e.uE)("<p><strong>构建加速思路</strong>（比 Turborepo 更丰富）</p><ul><li><strong>缓存：</strong> 通过缓存 及 远程缓存，减少构建时间（远程缓存：Nx 公开了一个公共 API，它允许您提供自己的远程缓存实现，Turborepo 必须使用内置的远程缓存）</li><li><strong>增量构建：</strong> 最小范围构建，非全量构建</li><li><strong>并行构建：</strong> Nx 自动分析项目的关联关系，对这些任务进行排序以最大化并行性</li><li><strong>分布式构建：</strong> 结合 Nx Cloud，您的任务将自动分布在 CI 代理中（多台远程构建机器），同时考虑构建顺序、最大化并行化和代理利用率</li></ul>",2),bn=(0,e._)("p",null,[(0,e._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"img",originSrc:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8379b44c52064ffe876cc952db3f9402~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp",data:"aurora"})],-1),mn=(0,e._)("p",null,"（分布式构建示意图）",-1),kn=(0,e._)("p",null,[(0,e._)("strong",null,"用 Nx 强大的任务调度器加速 Lerna"),(0,e.Uk)("：Lerna 擅长管理依赖关系和发布，但扩展基于 Lerna 的 Monorepos 很快就会变得很痛苦，因为 Lerna 很慢。这就是 Nx 的闪光点，也是它可以真正加速你的 monorepo 的地方。")],-1),hn=(0,e._)("h3",{id:"_6-2、轻量化-monorepo-方案",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_6-2、轻量化-monorepo-方案","aria-hidden":"true"},"#"),(0,e.Uk)(" 6.2、轻量化 Monorepo 方案")],-1),_n=(0,e._)("h4",{id:"_6-2-1、lerna-全面讲解",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_6-2-1、lerna-全面讲解","aria-hidden":"true"},"#"),(0,e.Uk)(" 6.2.1、Lerna（全面讲解）")],-1),fn={href:"https://link.juejin.cn?target=https%3A%2F%2Flerna.js.org%2F",target:"_blank",rel:"noopener noreferrer"},vn=(0,e.Uk)("Lerna"),xn=(0,e.Uk)(),jn=(0,e._)("strong",null,"是什么？",-1),qn=(0,e.uE)('<ul><li>Lerna 是 Babel 为实现 Monorepo 开发的工具；最擅长管理依赖关系和发布</li><li>Lerna 优化了多包工作流，解决了<strong>多包依赖</strong>、<strong>发版手动维护版本</strong>等问题</li><li>Lerna 不提供构建、测试等任务，工程能力较弱，项目中往往需要基于它进行顶层能力的封装</li></ul><p><strong>Lerna 主要做三件事</strong></p><ul><li>为单个包或多个包运行命令 (lerna run)</li><li>管理依赖项 (lerna bootstrap)</li><li>发布依赖包，处理版本管理，并生成变更日志 (lerna publish)</li></ul><p><strong>Lerna 能解决了什么问题？</strong></p><ul><li><strong>代码共享，调试便捷：</strong> 一个依赖包更新，其他依赖此包的包/项目无需安装最新版本，因为 Lerna 自动 Link</li><li><strong>安装依赖，减少冗余</strong>：多个包都使用相同版本的依赖包时，Lerna 优先将依赖包安装在根目录</li><li><strong>规范版本管理：</strong> Lerna 通过 Git 检测代码变动，自动发版、更新版本号；两种模式管理多个依赖包的版本号</li><li><strong>自动生成发版日志</strong>：使用插件，根据 Git Commit 记录，自动生成 ChangeLog</li></ul><p><strong>Lerna 自动检测发布，判断逻辑</strong></p><ol><li>校验本地是否有没有被 <code>commit</code> 内容？</li><li>判断当前的分支是否正常？</li><li>判断当前分支是否在 <code>remote</code> 存在？</li><li>判断当前分支是否在 <code>lerna.json</code> 允许的 <code>allowBranch</code> 设置之中？</li><li>判断当前分支提交是否落后于 remote</li></ol><p><strong>Lerna 工作模式</strong></p><p>Lerna 允许您使用两种模式来管理您的项目：固定模式(Fixed)、独立模式(Independent)</p><p><strong>① 固定模式（Locked mode）</strong></p><ul><li>Lerna 把多个软件包当做一个整体工程，每次发布所有软件包版本号统一升级（版本一致），无论是否修改</li><li>项目初始化时，<code>lerna init</code> 默认是 <strong>Locked mode</strong></li></ul><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>json复制代码<span class="token punctuation">{</span>\n  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;0.0.0&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>② 独立模式（Independent mode）</strong></p><ul><li>Lerna 单独管理每个软件包的版本号，每次执行发布指令，Git 检查文件变动，只发版升级有调整的软件包</li><li>项目初始化时，<code>lerna init --independent</code></li></ul><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>json复制代码<span class="token punctuation">{</span>\n  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;independent&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>Lerna 常用指令</strong></p><p><strong>① 初始化：init</strong></p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code>csharp复制代码lerna init\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>执行成功后，目录下将会生成这样的目录结构</p><div class="language-scss ext-scss line-numbers-mode"><pre class="language-scss"><code>scss复制代码 <span class="token operator">-</span> <span class="token function">packages</span><span class="token punctuation">(</span>目录<span class="token punctuation">)</span>\n <span class="token operator">-</span> lerna.<span class="token function">json</span><span class="token punctuation">(</span>配置文件<span class="token punctuation">)</span>\n <span class="token operator">-</span> package.<span class="token function">json</span><span class="token punctuation">(</span>工程描述文件<span class="token punctuation">)</span>\n<span class="token selector">json复制代码</span><span class="token punctuation">{</span>\n  <span class="token string">&quot;version&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;0.0.0&quot;</span><span class="token punctuation">,</span>\n  <span class="token string">&quot;useWorkspaces&quot;</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token string">&quot;packages&quot;</span><span class="token punctuation">:</span> [\n    <span class="token string">&quot;packages/*&quot;</span><span class="token punctuation">,</span>\n  ]<span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>需要在项目根目录下的 <code>package.json</code>中设置 <code>&quot;private&quot;: true</code></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>bash复制代码<span class="token punctuation">{</span>\n  <span class="token string">&quot;name&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;xxxx&quot;</span>,\n  <span class="token string">&quot;version&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;0.0.1&quot;</span>,\n  <span class="token string">&quot;description&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;&quot;</span>,\n  <span class="token string">&quot;main&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;index.js&quot;</span>,\n  <span class="token string">&quot;private&quot;</span><span class="token builtin class-name">:</span> true,\n  <span class="token string">&quot;scripts&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>\n    <span class="token string">&quot;test&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;echo &quot;</span>Error: no <span class="token builtin class-name">test</span> specified<span class="token string">&quot; &amp;&amp; exit 1&quot;</span>\n  <span class="token punctuation">}</span>,\n  <span class="token string">&quot;keywords&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>,\n  <span class="token string">&quot;author&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;&quot;</span>,\n  <span class="token string">&quot;license&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;ISC&quot;</span>,\n  <span class="token string">&quot;devDependencies&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>\n    <span class="token string">&quot;lerna&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;^6.4.1&quot;</span>\n  <span class="token punctuation">}</span>,\n  <span class="token string">&quot;workspaces&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>\n    <span class="token string">&quot;packages/*&quot;</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p><strong>② 创建 package：create</strong></p><div class="language-lua ext-lua line-numbers-mode"><pre class="language-lua"><code>lua复制代码lerna create <span class="token operator">&lt;</span>name<span class="token operator">&gt;</span> <span class="token punctuation">[</span>location<span class="token punctuation">]</span>\n\nlerna create package1\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>执行 <code>lerna init</code> 后，默认的 lerna workspace 是 <code>packages/*</code>，需要手动修改 <code>package.json</code> 中的 <code>workspaces</code>，再执行指令生成特定目录下的 package</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>bash复制代码<span class="token comment"># 在 packages/pwd1 目录下，生成 package2 依赖包</span>\nlerna create package2 packages/pwd1\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>③ 给 package 添加依赖：add</strong></p><p>安装的依赖，如果是本地包，Lerna 会自动 <code>npm link</code> 到本地包</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">sql</span>复制代码<span class="token comment"># 给所有包安装依赖，默认作为 dependencies</span>\nlerna <span class="token keyword">add</span> module<span class="token operator">-</span><span class="token number">1</span>\nlerna <span class="token keyword">add</span> module<span class="token operator">-</span><span class="token number">1</span> <span class="token comment">--dev\t# 作为 devDependencies</span>\nlerna <span class="token keyword">add</span> module<span class="token operator">-</span><span class="token number">1</span> <span class="token comment">--peer\t# 作为 peerDependencies</span>\nlerna <span class="token keyword">add</span> module<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">[</span><span class="token variable">@version</span><span class="token punctuation">]</span> <span class="token comment">--exact  # 安装准确版本的依赖</span>\n\nlerna <span class="token keyword">add</span> module<span class="token operator">-</span><span class="token number">1</span> <span class="token comment">--scope=module-2\t\t# 给指定包安装依赖</span>\nlerna <span class="token keyword">add</span> module<span class="token operator">-</span><span class="token number">1</span> packages<span class="token operator">/</span>prefix<span class="token operator">-</span><span class="token operator">*</span> \t<span class="token comment"># 给前缀为 xxx 的包，安装依赖</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><strong>④ 给所有 package 安装依赖：bootstrap</strong></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>bash复制代码<span class="token comment"># 项目根目录下执行，将安装所有依赖</span>\nlerna bootstrap\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>执行</strong> <code>lerna bootstrap</code> <strong>指令</strong>：会自动为每个依赖包进行 <code>npm install</code> 和 <code>npm link</code> 操作</p><p><strong>关于冗余依赖的安装</strong>：</p><ul><li>npm 场景下 <code>lerna bootstrap</code> 会安装冗余依赖（多个 package 共用依赖，每个目录都会安装）</li><li>yarn 会自动 hosit 依赖包（相同版本的依赖，安装在根目录），无需关心</li></ul><p><strong>npm 场景下冗余依赖解决方案：</strong></p><ul><li><strong>方案一：</strong> <code>lerna bootstrap --hoist</code></li><li><strong>方案二</strong>：配置 <code>lerna.json/command.bootsrap.hoist = true</code></li></ul><p><strong>⑤ 给 package 执行 shell 指令：exec</strong></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>bash复制代码<span class="token comment"># 删除所有包内的 lib 目录</span>\nlerna <span class="token builtin class-name">exec</span> -- <span class="token function">rm</span> -rf lib\n\n<span class="token comment"># 给xxx软件包，删除依赖</span>\nlerna <span class="token builtin class-name">exec</span> --scope<span class="token operator">=</span>xxx -- <span class="token function">yarn</span> remove yyy\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><strong>⑥ 给 package 执行 scripts 指令：run</strong></p><div class="language-ini ext-ini line-numbers-mode"><pre class="language-ini"><code>ini复制代码# 所有依赖执行 package.json 文件 scripts 中的指令 xxx\nlerna run xxx\n\n<span class="token comment"># 指定依赖执行 package.json 文件 scripts 中的指令 xxx</span>\n<span class="token key attr-name">lerna run --scope</span><span class="token punctuation">=</span><span class="token value attr-value">my-component xxx</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><strong>⑦ 清除所有 package 下的依赖：clean</strong></p><p>清楚所有依赖包下的 node_modules，根目录下不会删除</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>复制代码lerna clean\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><strong>⑧ 发布软件包，自动检测：publish</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>复制代码lerna publish\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><code>lerna publish</code> 做那些事儿</p><ul><li>运行lerna updated来决定哪一个包需要被publish</li><li>如果有必要，将会更新lerna.json中的version</li><li>将所有更新过的的包中的package.json的version字段更新</li><li>将所有更新过的包中的依赖更新</li><li>为新版本创建一个git commit或tag</li><li>将包publish到npm上</li></ul>',47),yn=(0,e._)("p",null,[(0,e._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"img",originSrc:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a186d8db39d04249aa20c3ee2848cc7a~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp",data:"aurora"})],-1),wn=(0,e.uE)('<p><strong>⑨ 查看自上次发布的变更：diff、changed</strong></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>bash复制代码<span class="token comment"># 查看自上次relase tag以来有修改的包的差异</span>\nlerna <span class="token function">diff</span>\n\n<span class="token comment"># 查看自上次relase tag以来有修改的包名</span>\nlerna changed\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><strong>⑩ 导入已有包：import</strong></p><div class="language-arduino ext-arduino line-numbers-mode"><pre class="language-arduino"><code>arduino复制代码lerna import <span class="token punctuation">[</span>npm 包所在本地路径<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><strong>⑪</strong> <strong>列出所有包：list</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>复制代码lerna list\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="_6-2-2、yarn-npm-workspace" tabindex="-1"><a class="header-anchor" href="#_6-2-2、yarn-npm-workspace" aria-hidden="true">#</a> 6.2.2、yarn/npm + workspace</h4><p>yarn 1.x 及以上版本，新增 workspace 能力，不借助 Lerna，也可以提供原生的 Monorepo 支持，需要在根目录下 <code>package.json</code> 中，声明 <code>workspace</code></p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>json复制代码<span class="token punctuation">{</span>\n  <span class="token property">&quot;private&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 必须是私有项目</span>\n  <span class="token property">&quot;workspaces&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;project1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;project2/*&quot;</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><strong>yarn workspace VS Lerna</strong></p><ul><li><strong>yarn workspace 更突出对依赖的管理：</strong> 依赖提升到根目录的 <code>node_modules</code> 下，安装更快，体积更小</li><li><strong>Lerna 更突出工作流方面</strong>：使用 Lerna 命令来优化多个包的管理，如：依赖发包、版本管理，批量执行脚本</li></ul><p><strong>能力及性能对比</strong></p><table><thead><tr><th><strong>命令</strong></th><th><strong>能力</strong></th><th><strong>Lerna(NPM)</strong></th><th><strong>NPM Workspace</strong></th><th><strong>Yarn Workspace</strong></th></tr></thead><tbody><tr><td>依赖管理</td><td>依赖初始化和提升</td><td>lerna bootstrap</td><td>npm install</td><td>yarn</td></tr><tr><td>安装依赖</td><td>lerna add xxx --scope=pkg</td><td>npm install xxx -w pkg</td><td>yarn workspace pkg add xxx</td><td></td></tr><tr><td>移除依赖</td><td>无</td><td>npm uninstall xxx -w pkg</td><td>yarn workspace pkg remove xxx</td><td></td></tr><tr><td>依赖发布</td><td>全局执行 scipts 指令</td><td>lerna run xxx --scope=pkg</td><td>npm run xxx -w pkg</td><td>yarn workspace pkg run xxx</td></tr><tr><td>统一执行 scipts 指令</td><td>lerna run xxx</td><td>npm run xxx --ws</td><td>yarn workspaces run xxx</td><td></td></tr><tr><td>在每个包下动态执行指令</td><td>lerna exec -- command</td><td>npm exec -c &#39;command&#39; --ws</td><td>yarn workspaces foreach command（需插件支持）</td><td></td></tr><tr><td>统一发布配置、changelog、tag 和 commit 等</td><td>lerna.json/lerna publish</td><td>无</td><td>无</td><td></td></tr><tr><td>依赖初始化耗时</td><td>/</td><td>65.6626s、61.8620s、62.9221s</td><td>72.9516s、83.0750s、86.5041s</td><td>51.9236s、59.0584s、58.1938s</td></tr><tr><td>相对缺点</td><td>/</td><td>1. 无法一次安装多个依赖2. 未提供依赖移除能力</td><td>1. 未提供更为精细的发布控制配置2. 依赖安装耗时相对较长</td><td>1. 未提供更为精细的发布控制配置2. 不原生支持在每个包下动态执行指令</td></tr></tbody></table><p><strong>更佳方案：</strong> <strong>yarn workspace + Lerna</strong></p><p>如上 VS 可以看出，yarn workspace 和 Lerna 各有所长，yarn workspace + Lerna 是更好的 Monorepo 方案，执行命令 <code>yarn</code>（相当于执行<code> lerna bootstrap</code>），即可安装所有依赖，指令过渡更平滑，自动依赖提升，减少依赖安装。</p><p><strong>能力分工</strong>：Lerna 将依赖管理交给 yarn workspace；Lerna 承担依赖发布能力。</p><p><strong>操作步骤：</strong></p><ol><li><p><strong>配置 Lerna 使用 Yarn 管理依赖</strong>：<code>learn.json</code> 中配置 <code>&quot;npmClient&quot;: &quot;yarn&quot;</code></p></li><li><p><strong>配置 Lerna 启用 Yarn Workspaces：</strong></p></li><li><ol><li>配置 <code>lerna.json/useWorkspaces = true</code></li><li>配置根目录 <code>package.json/workspaces = [&quot;pacages/*&quot;]</code> , 此时 lerna.json 中的 packages 配置项将不再使用</li><li>配置根目录 <code>package.json/private = true</code></li></ol></li></ol><div class="language-scss ext-scss line-numbers-mode"><pre class="language-scss"><code>scss复制代码说明：\n上面三个配置项需同时开启<span class="token punctuation">,</span> 只开启一个 lerna 会报错\n此时执行 lerna bootstrap 相当于执行yarn install，等同于执行 lerna bootstrap --npm-client yarn --use-workspaces\n由于 yarn 会自动 hosit 依赖包<span class="token punctuation">,</span> 无需再 lerna bootstrap 时增加参数 --hoist <span class="token punctuation">(</span>加了参数 lerna 也会报错<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ol><li>不需要发包的项目，配置 <code>package.json/private = true</code></li></ol><h4 id="_6-2-3、lerna-pnpm-workspace" tabindex="-1"><a class="header-anchor" href="#_6-2-3、lerna-pnpm-workspace" aria-hidden="true">#</a> 6.2.3、Lerna + pnpm + workspace</h4><p>pnpm 是新一代 Node 包管理器，它由 npm/yarn 衍生而来，解决了 npm/yarn 内部潜在的风险，并且极大提升依赖安装速度。pnpm 内部使用<strong>基于内容寻址的文件系统</strong>，来管理磁盘上依赖，减少依赖安装；<code>node_modules/.pnmp</code>为<strong>虚拟存储</strong>目录，该目录通过<code>@</code>来实现相同模块不同版本之间隔离和复用，由于它只会根据项目中的依赖生成，并不存在提升。</p><p><strong>CAS 内容寻址存储</strong>，是一种存储信息的方式，根据内容而不是位置进行检索信息的存储方式。</p><p><strong>Virtual store 虚拟存储</strong>，指向存储的链接的目录，所有直接和间接依赖项都<strong>链接</strong>到此目录中，项目当中的.pnpm目录</p><p>pnpm 相比于 npm、yarn 的包管理器，优势如下，同理是 Lerna + yarn + workspace 优势：</p><ul><li><strong>装包速度极快：</strong> 缓存中有的依赖，直接硬链接到项目的 node_module 中；减少了 copy 的大量 IO 操作</li><li><strong>磁盘利用率极高：</strong> 软/硬链接方式，同一版本的依赖共用一个磁盘空间；不同版本依赖，只额外存储 diff 内容</li><li><strong>解决了幽灵依赖：</strong> node_modules 目录结构 与 package.json 依赖列表一致</li></ul><p><strong>补充：pnpm 原理</strong></p><ol><li><strong>存储中心 Store 集中管理依赖</strong>：不同项目，相同版本依赖安装只进行硬链接；不同版本依赖，只增加Diff文件</li><li>项目 <code>package.json</code> 依赖列表，和<code>node_modules/.pnpm</code>目录结构一致</li><li>相同依赖安装时，将 Store 中的依赖<strong>硬链接</strong>到项目的 <code>node_modules/.pnpm</code> 下，而不是复制，速度快</li><li>项目<code>node_modules</code>中已有依赖重复安装时，会被<strong>软链接</strong>到指定目录下</li></ol>',28),Fn=(0,e._)("p",null,[(0,e._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"img",originSrc:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7b99f7a8117140dba9955099fc16b8b7~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp",data:"aurora"})],-1),Mn=(0,e.uE)('<h3 id="_6-3、小结-如何选择" tabindex="-1"><a class="header-anchor" href="#_6-3、小结-如何选择" aria-hidden="true">#</a> 6.3、小结：如何选择</h3><h4 id="_6-3-1、工具对比" tabindex="-1"><a class="header-anchor" href="#_6-3-1、工具对比" aria-hidden="true">#</a> 6.3.1、工具对比</h4><table><thead><tr><th>工具</th><th><strong>Turborepo</strong></th><th><strong>Rush</strong></th><th><strong>Nx</strong></th><th><strong>Lerna</strong></th><th><strong>Pnpm Workspace</strong></th></tr></thead><tbody><tr><td>依赖管理</td><td>❌</td><td>✅</td><td>❌</td><td>❌</td><td>✅</td></tr><tr><td>版本管理</td><td>❌</td><td>✅</td><td>❌</td><td>✅</td><td>❌</td></tr><tr><td>增量构建</td><td>✅</td><td>✅</td><td>✅</td><td>❌</td><td>❌</td></tr><tr><td>插件扩展</td><td>✅</td><td>✅</td><td>✅</td><td>❌</td><td>❌</td></tr><tr><td>云端缓存</td><td>✅</td><td>✅</td><td>✅</td><td>❌</td><td>❌</td></tr><tr><td>Stars</td><td>20.4K</td><td>4.9K</td><td>17K</td><td>34.3K</td><td>22.7K</td></tr></tbody></table>',3),Ln=(0,e._)("p",null,[(0,e._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"img",originSrc:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2d5ce619b26b4adb9092f5c3e4c027ef~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp",data:"aurora"})],-1),Un=(0,e._)("p",null,"详细对比：",-1),zn={href:"https://link.juejin.cn?target=https%3A%2F%2Fnx.dev%2Fmore-concepts%2Fturbo-and-nx",target:"_blank",rel:"noopener noreferrer"},Rn=(0,e.Uk)("Nx and Turborepo"),Sn={href:"https://link.juejin.cn?target=https%3A%2F%2Fbyteofdev.com%2Fposts%2Flerna-vs-turbopack-rush",target:"_blank",rel:"noopener noreferrer"},An=(0,e.Uk)("lerna-vs-turbopack-rush"),Wn=(0,e._)("h4",{id:"_6-3-2、选型建议",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_6-3-2、选型建议","aria-hidden":"true"},"#"),(0,e.Uk)(" 6.3.2、选型建议")],-1),Cn=(0,e._)("ul",null,[(0,e._)("li",null,"建议采用渐进式架构方案，即对于轻量级 Monorepo 项目，我们初期可以选择 Lerna + pnpm workspace + lerna-changelog，解决了依赖管理、发版管理等问题，为开发者带来便利；随着后续项目迭代，代码变多或多个项目间依赖关系复杂，可以很平滑的接入 Nx 来提升构建打包效率。")],-1),Nn=(0,e._)("p",null,"**原文链接：**https://juejin.cn/post/7215886869199896637",-1),Tn={},En=(0,a(3744).Z)(Tn,[["render",function(n,s){const a=(0,e.up)("ExternalLinkIcon");return(0,e.wg)(),(0,e.iD)(e.HY,null,[t,o,r,p,l,(0,e._)("p",null,[(0,e._)("a",c,[i,(0,e.Wm)(a)]),u]),d,g,b,m,k,h,_,f,v,x,j,q,y,(0,e._)("p",null,[(0,e._)("a",w,[F,(0,e.Wm)(a)]),M,L,U,z,R]),(0,e._)("ul",null,[(0,e._)("li",null,[(0,e._)("a",S,[A,(0,e.Wm)(a)]),W]),(0,e._)("li",null,[(0,e._)("a",C,[N,(0,e.Wm)(a)]),T]),(0,e._)("li",null,[(0,e._)("a",E,[I,(0,e.Wm)(a)]),P]),(0,e._)("li",null,[(0,e._)("a",D,[G,(0,e.Wm)(a)]),K]),(0,e._)("li",null,[(0,e._)("a",V,[B,(0,e.Wm)(a)]),Y]),(0,e._)("li",null,[(0,e._)("a",H,[Z,(0,e.Wm)(a)]),O]),(0,e._)("li",null,[(0,e._)("a",J,[Q,(0,e.Wm)(a)]),X])]),$,(0,e._)("ul",null,[nn,sn,(0,e._)("li",null,[(0,e._)("p",null,[an,en,(0,e._)("a",tn,[on,(0,e.Wm)(a)])])]),rn]),pn,(0,e._)("p",null,[ln,(0,e._)("a",cn,[un,(0,e.Wm)(a)]),dn]),gn,bn,mn,kn,hn,_n,(0,e._)("p",null,[(0,e._)("a",fn,[vn,(0,e.Wm)(a)]),xn,jn]),qn,yn,wn,Fn,Mn,Ln,Un,(0,e._)("ul",null,[(0,e._)("li",null,[(0,e._)("a",zn,[Rn,(0,e.Wm)(a)])]),(0,e._)("li",null,[(0,e._)("a",Sn,[An,(0,e.Wm)(a)])])]),Wn,Cn,Nn],64)}]])}}]);