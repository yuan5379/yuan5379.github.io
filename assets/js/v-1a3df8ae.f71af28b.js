"use strict";(self.webpackChunkdemo1=self.webpackChunkdemo1||[]).push([[3931],{8747:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-1a3df8ae",path:"/react/2023/20230505.html",title:"手写一个 Zustand",lang:"zh-CN",frontmatter:{title:"手写一个 Zustand",date:"2023-05-05T00:00:00.000Z",tags:["react"],categories:["react"]},excerpt:"",headers:[{level:2,title:"回顾使用",slug:"回顾使用",children:[]},{level:2,title:"手写实现一个 zustand",slug:"手写实现一个-zustand",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],git:{updatedTime:null,contributors:[]}}},9930:(n,s,a)=>{a.r(s),a.d(s,{default:()=>on});var p=a(6252);const t=(0,p.uE)('<div class="custom-container tip"><p class="custom-container-title">TIP</p><p>提到状态管理，大家可能首先想到的是 redux。 redux 是老牌状态管理库，能完成各种基本功能，并且有着庞大的中间件生态来扩展额外功能。 但 redux 经常被人诟病它的使用繁琐。 近两年，React 社区出现了很多新的状态管理库，比如 zustand、jotai、recoil 等，都完全能替代 redux，而且更简单。 zustand 算是其中最流行的一个。</p></div><h2 id="回顾使用" tabindex="-1"><a class="header-anchor" href="#回顾使用" aria-hidden="true">#</a> 回顾使用</h2><p>进入项目把它跑起来：</p><div class="language-arduino ext-arduino line-numbers-mode"><pre class="language-arduino"><code>npm <span class="token builtin">run</span> start\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>浏览器访问下：</p>',5),e=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"img",originSrc:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a92fbafeb491470e94913811f96be6fd~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1642&h=1174&s=130058&e=png&b=292c33",data:"aurora"})],-1),o=(0,p.uE)('<p>然后安装 zustand:</p><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code>npm install --save zustand\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>改下 App.js</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> create <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;zustand&#39;</span>\n\n<span class="token keyword">const</span> useXxxStore <span class="token operator">=</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">set</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">aaa</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">bbb</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">updateAaa</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">aaa</span><span class="token operator">:</span> value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">updateBbb</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">bbb</span><span class="token operator">:</span> value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> updateAaa <span class="token operator">=</span> <span class="token function">useXxxStore</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>updateAaa<span class="token punctuation">)</span>\n  <span class="token keyword">const</span> aaa <span class="token operator">=</span> <span class="token function">useXxxStore</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>aaa<span class="token punctuation">)</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>\n        <span class="token operator">&lt;</span>input\n          onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">updateAaa</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>currentTarget<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span>\n          value<span class="token operator">=</span><span class="token punctuation">{</span>aaa<span class="token punctuation">}</span>\n        <span class="token operator">/</span><span class="token operator">&gt;</span>\n        <span class="token operator">&lt;</span>Bbb<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Bbb<span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">Bbb</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span>Ccc<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Ccc<span class="token operator">&gt;</span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">Ccc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> aaa <span class="token operator">=</span> <span class="token function">useXxxStore</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>aaa<span class="token punctuation">)</span>\n  <span class="token keyword">return</span> <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>hello<span class="token punctuation">,</span> <span class="token punctuation">{</span>aaa<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><p>用 create 函数创建一个 store，定义 state 和修改 state 的方法。</p>',5),c=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"img",originSrc:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/976ff3a9b79f41a4beb72f7e02d38f07~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=812&h=250&s=46699&e=png&b=1f1f1f",data:"aurora"})],-1),l=(0,p._)("p",null,"然后在组件里调用 create 返回的函数，取出属性或者方法在组件里用：",-1),u=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"img",originSrc:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fecf937f65af47be8685eb15262b115d~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=962&h=520&s=84753&e=png&b=202020",data:"aurora"})],-1),r=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"img",originSrc:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/66f53d0566a84b50bc076ca481fa97d5~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=738&h=182&s=35891&e=png&b=212121",data:"aurora"})],-1),i=(0,p._)("p",null,"这就是 zustand 的全部用法了，就这么简单。",-1),k=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"img",originSrc:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6ab61fe8aa604e3bb7ddc20e79f61764~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=604&h=430&s=35942&e=gif&f=19&b=fefefe",data:"aurora"})],-1),b=(0,p._)("p",null,"有的同学说，不是还有中间件么？",-1),m=(0,p._)("p",null,"其实中间件并不是 zustand 自己实现的功能。",-1),f=(0,p._)("p",null,"你看这个 create 方法的参数，它是一个接受 set、get、store 的三个参数的函数：",-1),d=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"img",originSrc:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a789b7bbb5214082aac31e915909574b~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=816&h=244&s=46190&e=png&b=1f1f1f",data:"aurora"})],-1),g=(0,p.uE)('<p>那我们可不可以包一层，自己拿到 get、set、store，对这些做一些修改，之后返回一个接受三个参数的函数呢？</p><p>比如这样：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">logMiddleware</span><span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">set<span class="token punctuation">,</span> get<span class="token punctuation">,</span> store</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">function</span> <span class="token function">newSet</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;调用了 set，新的 state：&#39;</span><span class="token punctuation">,</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">return</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  \n    <span class="token keyword">return</span> <span class="token function">func</span><span class="token punctuation">(</span>newSet<span class="token punctuation">,</span> get<span class="token punctuation">,</span> store<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>我接受之前的函数，然后对把 set、get、store 修改之后再调用它：</p>',4),y=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"img",originSrc:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5707cf2971a744b9b2d2a1d3f3ac30f0~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=846&h=656&s=106639&e=png&b=1f1f1f",data:"aurora"})],-1),w=(0,p._)("p",null,"这样不就给 zustand 的 set 方法加上了额外的功能么？",-1),j=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"img",originSrc:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/371915a1fcd44ff5bf7c9245106e76d5~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=996&h=1088&s=175445&e=gif&f=30&b=fefefe",data:"aurora"})],-1),v=(0,p._)("p",null,"这个就是中间件，和 redux 的中间件是一样的设计。",-1),S=(0,p._)("p",null,"它并不需要 zustand 本身做啥支持，只要把 create 的参数设计成一个函数，这个函数接收 set、get 等函作为参数，那就自然支持了中间件。",-1),h=(0,p._)("p",null,"zustand 内置了一些中间件，比如 immer、persist。",-1),z=(0,p._)("p",null,"persist 就是同步 store 数据到 localStorage 的。",-1),_=(0,p._)("p",null,"我们试一下：",-1),x=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"img",originSrc:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1b712c446ff44096a56de29a341a5576~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=890&h=576&s=106762&e=png&b=1f1f1f",data:"aurora"})],-1),q=(0,p._)("p",null,"效果如下：",-1),E=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"img",originSrc:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4d5312dfe9c34bd7af988bb9eb7cbd0a~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1988&h=870&s=132902&e=png&b=fefefe",data:"aurora"})],-1),B=(0,p._)("p",null,"而且，中间件是可以层层嵌套的：",-1),O=(0,p._)("p",null,"我们把自己写的 log 和内置的 persist 结合起来：",-1),C=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"img",originSrc:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/35a2546e1697420c8d9b81f2c3332380~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1070&h=590&s=123116&e=png&b=202020",data:"aurora"})],-1),A=(0,p._)("p",null,"效果如下：",-1),R=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"img",originSrc:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/314e9cb8372b456a92b6274b199e4c2d~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=966&h=800&s=99743&e=png&b=ffffff",data:"aurora"})],-1),T=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"img",originSrc:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/179b386d20414054920cdbe29e476fa7~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1802&h=838&s=123496&e=png&b=fefefe",data:"aurora"})],-1),X=(0,p.uE)('<p>因为中间件不就是修改 set、get 这些参数么，这些 set、get 是可以层层包装的，所以自然中间件也就可以层层嵌套。</p><p>redux 和 zustand 的中间件一脉相承，都是很巧妙的设计。</p><p>学完了 zustand 的功能后，你觉得写这样一个 zustand 需要多少代码呢？</p><p>其实不到 100 行就能搞定。</p><p>不信我们试试看：</p><h2 id="手写实现一个-zustand" tabindex="-1"><a class="header-anchor" href="#手写实现一个-zustand" aria-hidden="true">#</a> 手写实现一个 zustand</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">createStore</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">createState</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> state<span class="token punctuation">;</span>\n    <span class="token keyword">const</span> listeners <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  \n    <span class="token keyword">const</span> <span class="token function-variable function">setState</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">partial<span class="token punctuation">,</span> replace</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> nextState <span class="token operator">=</span> <span class="token keyword">typeof</span> partial <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">?</span> <span class="token function">partial</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">:</span> partial\n\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span>nextState<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> previousState <span class="token operator">=</span> state<span class="token punctuation">;</span>\n\n        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>replace<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            state <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> nextState <span class="token operator">!==</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">||</span> nextState <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\n                <span class="token operator">?</span> nextState\n                <span class="token operator">:</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> state<span class="token punctuation">,</span> nextState<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            state <span class="token operator">=</span> nextState<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        listeners<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">listener</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">listener</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> previousState<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  \n    <span class="token keyword">const</span> <span class="token function-variable function">getState</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">;</span>\n  \n    <span class="token keyword">const</span> <span class="token function-variable function">subscribe</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">listener</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      listeners<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span>\n      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> listeners<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  \n    <span class="token keyword">const</span> <span class="token function-variable function">destroy</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      listeners<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  \n    <span class="token keyword">const</span> api <span class="token operator">=</span> <span class="token punctuation">{</span> setState<span class="token punctuation">,</span> getState<span class="token punctuation">,</span> subscribe<span class="token punctuation">,</span> destroy <span class="token punctuation">}</span>\n\n    state <span class="token operator">=</span> <span class="token function">createState</span><span class="token punctuation">(</span>setState<span class="token punctuation">,</span> getState<span class="token punctuation">,</span> api<span class="token punctuation">)</span>\n\n    <span class="token keyword">return</span> api\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><p>state 是全局状态，listeners 是监听器。</p><p>然后 setState 修改状态、getState 读取状态、subscribe 添加监听器、destroy 清除所有监听器。</p><p>这些都很容易理解。</p><p>至于 replace，这是 zustand 在 set 状态的时候默认是合并，你也可以传一个 true 改成替换：</p>',11),Z=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"img",originSrc:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/52c507fec2a7487e90961e1f235c613c~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1396&h=382&s=52079&e=png&b=ffffff",data:"aurora"})],-1),M=(0,p.uE)('<p>那如果状态变了，如何触发渲染呢？</p><p>useState 就可以。</p><p>这样写：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token parameter">api<span class="token punctuation">,</span> selector</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">,</span>forceRender <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        api<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> prevState</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n            <span class="token keyword">const</span> newObj <span class="token operator">=</span> <span class="token function">selector</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">const</span> oldobj <span class="token operator">=</span> <span class="token function">selector</span><span class="token punctuation">(</span>prevState<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token keyword">if</span><span class="token punctuation">(</span>newObj <span class="token operator">!==</span> oldobj<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token function">forceRender</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>       \n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token function">selector</span><span class="token punctuation">(</span>api<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>selector 说的是传入的这个函数：</p>',5),D=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"img",originSrc:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cde3193d934d4e769325a2ccc9f7fa56~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=924&h=510&s=79066&e=png&b=1f1f1f",data:"aurora"})],-1),H=(0,p.uE)('<p>我们用 useState 设置随机数来触发渲染。</p><p>监听 state 的变化，变了之后，根据新旧 state 调用 selector 函数的结果，来判断是否需要重新渲染。</p><p>然后定义 create 方法：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">create</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">createState</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> api <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>createState<span class="token punctuation">)</span>\n\n    <span class="token keyword">const</span> <span class="token function-variable function">useBoundStore</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">selector</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">useStore</span><span class="token punctuation">(</span>api<span class="token punctuation">,</span> selector<span class="token punctuation">)</span>\n\n    Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>useBoundStore<span class="token punctuation">,</span> api<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> useBoundStore\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>它就是先调用 createStore 创建 store。</p><p>然后返回 useStore 的函数，用于组件内调用。</p><p>测试下：</p><p>把 create 函数换成我们自己的，其余代码不变：</p>',8),I=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"img",originSrc:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3e2328ed38394499b0e7a40b0b4a3de4~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1056&h=1112&s=226742&e=png&b=1f1f1f",data:"aurora"})],-1),N=(0,p._)("p",null,"可以看到，功能依然正常：",-1),P=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"img",originSrc:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/35c48201496242a9945776fa9515fc46~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1146&h=910&s=111556&e=png&b=ffffff",data:"aurora"})],-1),Y=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"img",originSrc:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7b766f587cd14122a83401d85685f3bd~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1814&h=970&s=144316&e=png&b=fefefe",data:"aurora"})],-1),F=(0,p.uE)('<p>我们的 my-zustand 已经能够完美替代 zustand 了。</p><p>全部代码如下：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useEffect<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">createStore</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">createState</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> state<span class="token punctuation">;</span>\n    <span class="token keyword">const</span> listeners <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  \n    <span class="token keyword">const</span> <span class="token function-variable function">setState</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">partial<span class="token punctuation">,</span> replace</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> nextState <span class="token operator">=</span> <span class="token keyword">typeof</span> partial <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">?</span> <span class="token function">partial</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">:</span> partial\n\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span>nextState<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> previousState <span class="token operator">=</span> state<span class="token punctuation">;</span>\n\n        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>replace<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            state <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> nextState <span class="token operator">!==</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">||</span> nextState <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\n                <span class="token operator">?</span> nextState\n                <span class="token operator">:</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> state<span class="token punctuation">,</span> nextState<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            state <span class="token operator">=</span> nextState<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        listeners<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">listener</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">listener</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> previousState<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  \n    <span class="token keyword">const</span> <span class="token function-variable function">getState</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">;</span>\n  \n    <span class="token keyword">const</span> <span class="token function-variable function">subscribe</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">listener</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      listeners<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span>\n      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> listeners<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  \n    <span class="token keyword">const</span> <span class="token function-variable function">destroy</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      listeners<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  \n    <span class="token keyword">const</span> api <span class="token operator">=</span> <span class="token punctuation">{</span> setState<span class="token punctuation">,</span> getState<span class="token punctuation">,</span> subscribe<span class="token punctuation">,</span> destroy <span class="token punctuation">}</span>\n\n    state <span class="token operator">=</span> <span class="token function">createState</span><span class="token punctuation">(</span>setState<span class="token punctuation">,</span> getState<span class="token punctuation">,</span> api<span class="token punctuation">)</span>\n\n    <span class="token keyword">return</span> api\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token parameter">api<span class="token punctuation">,</span> selector</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">,</span>forceRender <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        api<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> prevState</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n            <span class="token keyword">const</span> newObj <span class="token operator">=</span> <span class="token function">selector</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">const</span> oldobj <span class="token operator">=</span> <span class="token function">selector</span><span class="token punctuation">(</span>prevState<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token keyword">if</span><span class="token punctuation">(</span>newObj <span class="token operator">!==</span> oldobj<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token function">forceRender</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>       \n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token function">selector</span><span class="token punctuation">(</span>api<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">create</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">createState</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> api <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>createState<span class="token punctuation">)</span>\n\n    <span class="token keyword">const</span> <span class="token function-variable function">useBoundStore</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">selector</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">useStore</span><span class="token punctuation">(</span>api<span class="token punctuation">,</span> selector<span class="token punctuation">)</span>\n\n    Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>useBoundStore<span class="token punctuation">,</span> api<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> useBoundStore\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br></div></div><p>60 多行代码。</p><p>其实，代码还可以进一步简化。</p><p>react 有一个 hook 就是用来定义外部 store 的，store 变化以后会触发 rerender：</p>',6),G=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"img",originSrc:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ec7c78b9bf784e038339d3f4f5d5dfef~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1648&h=706&s=131461&e=png&b=fefefe",data:"aurora"})],-1),J=(0,p._)("p",null,"有了这个 useSyncExternalStore 的 hook，我们就不用自己监听 store 变化触发 rerender 了：",-1),K=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"img",originSrc:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ce27c72c270141a88b27a14afff0281e~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=744&h=550&s=86239&e=png&b=1f1f1f",data:"aurora"})],-1),L=(0,p.uE)('<p>可以简化成这样：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token parameter">api<span class="token punctuation">,</span> selector</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">function</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token function">selector</span><span class="token punctuation">(</span>api<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    \n    <span class="token keyword">return</span> <span class="token function">useSyncExternalStore</span><span class="token punctuation">(</span>api<span class="token punctuation">.</span>subscribe<span class="token punctuation">,</span> getState<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>这样，my-zustand 就完美了。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useSyncExternalStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">createStore</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">createState</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> state<span class="token punctuation">;</span>\n    <span class="token keyword">const</span> listeners <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  \n    <span class="token keyword">const</span> <span class="token function-variable function">setState</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">partial<span class="token punctuation">,</span> replace</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> nextState <span class="token operator">=</span> <span class="token keyword">typeof</span> partial <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">?</span> <span class="token function">partial</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">:</span> partial\n\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span>nextState<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> previousState <span class="token operator">=</span> state<span class="token punctuation">;</span>\n\n        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>replace<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            state <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> nextState <span class="token operator">!==</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">||</span> nextState <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\n                <span class="token operator">?</span> nextState\n                <span class="token operator">:</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> state<span class="token punctuation">,</span> nextState<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            state <span class="token operator">=</span> nextState<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        listeners<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">listener</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">listener</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> previousState<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  \n    <span class="token keyword">const</span> <span class="token function-variable function">getState</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">;</span>\n  \n    <span class="token keyword">const</span> <span class="token function-variable function">subscribe</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">listener</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      listeners<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span>\n      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> listeners<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  \n    <span class="token keyword">const</span> <span class="token function-variable function">destroy</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      listeners<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  \n    <span class="token keyword">const</span> api <span class="token operator">=</span> <span class="token punctuation">{</span> setState<span class="token punctuation">,</span> getState<span class="token punctuation">,</span> subscribe<span class="token punctuation">,</span> destroy <span class="token punctuation">}</span>\n\n    state <span class="token operator">=</span> <span class="token function">createState</span><span class="token punctuation">(</span>setState<span class="token punctuation">,</span> getState<span class="token punctuation">,</span> api<span class="token punctuation">)</span>\n\n    <span class="token keyword">return</span> api\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token parameter">api<span class="token punctuation">,</span> selector</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">function</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token function">selector</span><span class="token punctuation">(</span>api<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    \n    <span class="token keyword">return</span> <span class="token function">useSyncExternalStore</span><span class="token punctuation">(</span>api<span class="token punctuation">.</span>subscribe<span class="token punctuation">,</span> getState<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">create</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">createState</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> api <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>createState<span class="token punctuation">)</span>\n\n    <span class="token keyword">const</span> <span class="token function-variable function">useBoundStore</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">selector</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">useStore</span><span class="token punctuation">(</span>api<span class="token punctuation">,</span> selector<span class="token punctuation">)</span>\n\n    Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>useBoundStore<span class="token punctuation">,</span> api<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> useBoundStore\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br></div></div><p>有的同学可能会质疑，zustand 的源码就这么点么？</p><p>我们调试下就知道了：</p><p>点击 vscode 的 create a launch.json file，创建一个调试配置：</p>',7),Q=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"img",originSrc:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a377db82e9fc4c2a8b13c46cac935467~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=566&h=366&s=39522&e=png&b=191919",data:"aurora"})],-1),U=(0,p._)("p",null,"改下调试的端口，点击调试启动：",-1),V=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"img",originSrc:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d237292abc904dc9b653854c51f3a7bc~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1592&h=726&s=164063&e=png&b=1d1d1d",data:"aurora"})],-1),W=(0,p._)("p",null,"把 zustand 换成之前的，然后打个断点：",-1),$=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"img",originSrc:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1424329f18cf43b3b42e47c32480fb62~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=970&h=810&s=142632&e=png&b=1f1f1f",data:"aurora"})],-1),nn=(0,p._)("p",null,"通过调试，可以看到 create 的实现如下：",-1),sn=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"img",originSrc:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4eefcd90ecf2412f85639fe5a6ecbef2~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1088&h=1016&s=246422&e=png&b=1f1f1f",data:"aurora"})],-1),an=(0,p._)("p",null,"而 useStore 的实现如下：",-1),pn=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"img",originSrc:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b1f3550b38c14b59b08edc4c44f8d142~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1376&h=764&s=192747&e=png&b=1f1f1f",data:"aurora"})],-1),tn=(0,p.uE)('<p>唯一的区别就是它用的是一个 shim 包里的，因为它要保证这个 hook 的兼容性。</p><p>所以说，我们通过 60 行代码实现的，就是一比一复刻的 zustand。</p><p>至此，zustand 还有一个非常大的优点就呼之欲出了：体积小。</p><p>一共也没多少代码，压缩后能多大呢？只有 1kb。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>近几年出了很多可以替代 redux 的优秀状态管理库，zustand 是其中最优秀的一个。</p><p>它的特点有很多：体积小、简单、支持中间件扩展。</p><p>它的核心就是一个 create 函数，传入 state 来创建 store。</p><p>create 返回的函数可以传入 selector，取出部分 state 在组件里用。</p><p>它的中间件和 redux 一样，就是一个高阶函数，可以对 get、set 做一些扩展。</p><p>zustand 内置了 immer、persist 等中间件，我们也自己写了一个 log 的中间件。</p><p>zustand 本身的实现也很简单，就是 getState、setState、subscribe 这些功能，然后再加上 useSyncExternalStore 来触发组件 rerender。</p><p>一共也就 60 行代码。</p><p>这样一个简单强大、非常流行的状态管理库，你确定不自己手写一个试试么？</p><p>来源链接：https://juejin.cn/post/7313242064195797001</p>',15),en={},on=(0,a(3744).Z)(en,[["render",function(n,s){return(0,p.wg)(),(0,p.iD)(p.HY,null,[t,e,o,c,l,u,r,i,k,b,m,f,d,g,y,w,j,v,S,h,z,_,x,q,E,B,O,C,A,R,T,X,Z,M,D,H,I,N,P,Y,F,G,J,K,L,Q,U,V,W,$,nn,sn,an,pn,tn],64)}]])}}]);