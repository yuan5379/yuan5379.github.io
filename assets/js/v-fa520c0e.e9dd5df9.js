"use strict";(self.webpackChunkdemo1=self.webpackChunkdemo1||[]).push([[8871],{5163:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-fa520c0e",path:"/%E5%B0%8F%E7%A8%8B%E5%BA%8F/2022/20220901.html",title:"在微信小程序中使用外部字体",lang:"zh-CN",frontmatter:{title:"在微信小程序中使用外部字体",date:"2022-09-01T00:00:00.000Z",tags:["小程序"],categories:["小程序"]},excerpt:"",headers:[],git:{updatedTime:null,contributors:[]}}},1880:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const p=(0,a(6252).uE)('<div class="custom-container tip"><p class="custom-container-title">TIP</p><p>我们在开发小程序时，很多时候需要使用外部字体，这一篇就来讲讲如果引入外部字体</p></div><h1 id="代码展示" tabindex="-1"><a class="header-anchor" href="#代码展示" aria-hidden="true">#</a> 代码展示</h1><p>首先小程序字体文件是无法放在本地的当你尝试在css中导入本地字体文件时，</p><p>会报错，我们可以将字体文件上传至服务器的 oss 上，</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 可以在 app.wxss 文件中全局定义字体</span>\n@font<span class="token operator">-</span>face <span class="token punctuation">{</span>\n  font<span class="token operator">-</span>family<span class="token operator">:</span> <span class="token string">&quot;kaiti&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 定义字体名字</span>\n  <span class="token literal-property property">src</span><span class="token operator">:</span> <span class="token function">url</span><span class="token punctuation">(</span><span class="token string">&quot;https://spkf-zsxn-prod.s3.cn-north-1.amazonaws.com.cn/pic/livecenter/kaiti.ttf&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 需要使用时</span>\n<span class="token punctuation">.</span>test <span class="token punctuation">{</span>\n  font<span class="token operator">-</span>family<span class="token operator">:</span> <span class="token string">&quot;kaiti&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 使用字体</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>我们除了通过 @font-face 方法引入使用，也可以通过 wx.loadFontFace 使用外部字体</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>wx<span class="token punctuation">.</span><span class="token function">loadFontFace</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">family</span><span class="token operator">:</span> <span class="token string">&quot;Bitstream&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 定义字体名字</span>\n  <span class="token literal-property property">source</span><span class="token operator">:</span>\n    <span class="token string">&#39;url(&quot;https://spkf-zsxn-prod.s3.cn-north-1.amazonaws.com.cn/pic/livecenter/kaiti.ttf&quot;)&#39;</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 需要使用时</span>\n<span class="token punctuation">.</span>test <span class="token punctuation">{</span>\n  font<span class="token operator">-</span>family<span class="token operator">:</span> <span class="token string">&quot;Bitstream&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 使用字体</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div>',7),t={},e=(0,a(3744).Z)(t,[["render",function(n,s){return p}]])}}]);