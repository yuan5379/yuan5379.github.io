"use strict";(self.webpackChunkdemo1=self.webpackChunkdemo1||[]).push([[955],{4274:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-a4ce4834",path:"/vue/2022/20220325.html",title:"尤雨溪强势推荐的Pinia",lang:"zh-CN",frontmatter:{title:"尤雨溪强势推荐的Pinia",date:"2022-03-25T00:00:00.000Z",tags:["vue"],categories:["vue"]},excerpt:"",headers:[{level:2,title:"Pinia 基本使用",slug:"pinia-基本使用",children:[]},{level:2,title:"解构store",slug:"解构store",children:[{level:3,title:"ES传统方式解构(能获取到值，但是不具有响应性)",slug:"es传统方式解构-能获取到值-但是不具有响应性",children:[]},{level:3,title:"Pinia解构方法：storeToRefs",slug:"pinia解构方法-storetorefs",children:[]}]},{level:2,title:"Pinia修改数据状态",slug:"pinia修改数据状态",children:[{level:3,title:"简单数据修改",slug:"简单数据修改",children:[]},{level:3,title:"多条数据修改",slug:"多条数据修改",children:[]},{level:3,title:"通过action修改",slug:"通过action修改",children:[]}]},{level:2,title:"Pinia中的Getters",slug:"pinia中的getters",children:[]},{level:2,title:"store之间的相互调用",slug:"store之间的相互调用",children:[]},{level:2,title:"自定义pinia持久化插件",slug:"自定义pinia持久化插件",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],git:{updatedTime:null,contributors:[]}}},8891:(n,s,a)=>{a.r(s),a.d(s,{default:()=>P});var t=a(6252);const p=(0,t.uE)('<div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Pinia是一个全新的Vue状态管理库，是Vuex的代替者，尤雨溪强势推荐</p><ol><li>Vue2 和 Vue3 都能支持</li><li>抛弃传统的 <code>Mutation</code> ，只有 <code>state, getter</code> 和 <code>action</code> ，简化状态管理库</li><li>不需要嵌套模块，符合 Vue3 的 Composition api，让代码扁平化</li><li>TypeScript支持</li><li>代码简介，很好的代码自动分割</li></ol></div><h2 id="pinia-基本使用" tabindex="-1"><a class="header-anchor" href="#pinia-基本使用" aria-hidden="true">#</a> Pinia 基本使用</h2><p><strong>初始化项目：</strong> <code>npm init vite@latest</code></p><p><strong>安装Pinia:</strong> <code>npm i pinia</code></p><p><strong>挂载Pinia</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// src/main.ts</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>\n<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&#39;./App.vue&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> createPinia <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pinia&#39;</span>\n\n<span class="token keyword">const</span> pinia <span class="token operator">=</span> <span class="token function">createPinia</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>\n\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>pinia<span class="token punctuation">)</span>\napp<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><strong>创建Store</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// src/store/index.ts</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> defineStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pinia&#39;</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> mainStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span> <span class="token string">&#39;main&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n    <span class="token function-variable function">state</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token punctuation">{</span>\n            msg<span class="token operator">:</span>&#39;Hello world<span class="token operator">!</span><span class="token operator">!</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    getters<span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    actions<span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><strong>使用Store</strong></p><div class="language-vue ext-vue line-numbers-mode"><pre class="language-vue"><code>// src/components/HelloWorld.vue\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n  <span class="token keyword">import</span> <span class="token punctuation">{</span> mainStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../store/index&#39;</span>\n  <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">mainStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>{{ store.msg }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">\n    \n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="解构store" tabindex="-1"><a class="header-anchor" href="#解构store" aria-hidden="true">#</a> 解构store</h2><p>当store中的多个参数需要被使用到的时候，为了更简洁的使用这些变量，我们通常采用结构的方式一次性获取所有的变量名</p><h3 id="es传统方式解构-能获取到值-但是不具有响应性" tabindex="-1"><a class="header-anchor" href="#es传统方式解构-能获取到值-但是不具有响应性" aria-hidden="true">#</a> ES传统方式解构(能获取到值，但是不具有响应性)</h3>',13),e=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"pinia-ES传统方式解构Store",originSrc:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f080f0d53a054a67b54878d3d0791f2d~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp",data:"aurora"})],-1),o=(0,t._)("h3",{id:"pinia解构方法-storetorefs",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#pinia解构方法-storetorefs","aria-hidden":"true"},"#"),(0,t.Uk)(" Pinia解构方法：storeToRefs")],-1),c=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"pinia-storeToRefs解构Store",originSrc:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/821275676927405188b9be39b05806c8~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp",data:"aurora"})],-1),i=(0,t._)("h2",{id:"pinia修改数据状态",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#pinia修改数据状态","aria-hidden":"true"},"#"),(0,t.Uk)(" Pinia修改数据状态")],-1),l=(0,t._)("h3",{id:"简单数据修改",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#简单数据修改","aria-hidden":"true"},"#"),(0,t.Uk)(" 简单数据修改")],-1),r=(0,t._)("p",null,[(0,t.Uk)("简单数据直接通过在方法中操作 "),(0,t._)("code",null,"store.属性名"),(0,t.Uk)(" 来修改")],-1),u=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"pinia-简单数据修改",originSrc:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6d5c183112c5482db4cf6ee0bd181d5b~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp",data:"aurora"})],-1),k=(0,t.uE)('<h3 id="多条数据修改" tabindex="-1"><a class="header-anchor" href="#多条数据修改" aria-hidden="true">#</a> 多条数据修改</h3><p>通过基础数据修改方式去修改多条数据也是可行的，但是在 <code>pinia</code> 官网中，已经明确表示<code>$patch</code> 的方式是经过优化的，会加快修改速度，对性能有很大好处，所以在进行多条数据修改的时候，更推荐使用 <code>$patch</code></p><p><code>$patch</code> 方法可以接受两个类型的参数，函数 和 对象</p><ul><li><strong>$patch + 对象</strong></li><li><strong>$patch + 函数：</strong> 通过函数方式去使用的时候，函数接受一个 state 的参数，state 就是 store 仓库中的 state</li></ul>',4),b=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"pinia-多条数据修改",originSrc:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cd7ff1a198d04b179562d51b95f296da~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp",data:"aurora"})],-1),d=(0,t._)("h3",{id:"通过action修改",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#通过action修改","aria-hidden":"true"},"#"),(0,t.Uk)(" 通过action修改")],-1),m=(0,t._)("ul",null,[(0,t._)("li",null,[(0,t._)("p",null,[(0,t.Uk)("Store.actions中添加 "),(0,t._)("code",null,"changeState"),(0,t.Uk)(" 方法")]),(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"pinia-多条数据修改action_store",originSrc:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c5040c61df2b43798aae25663fb471a6~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp",data:"aurora"})])]),(0,t._)("li",null,[(0,t._)("p",null,[(0,t.Uk)("组件方法调用 "),(0,t._)("code",null,"store.方法名")]),(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"pinia-多条数据修改action_components",originSrc:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/158c352fbfba40bb8284480d01b6af19~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp",data:"aurora"})])])],-1),g=(0,t._)("h2",{id:"pinia中的getters",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#pinia中的getters","aria-hidden":"true"},"#"),(0,t.Uk)(" Pinia中的Getters")],-1),f=(0,t._)("p",null,"Pinia 中的 getter 和 Vue 中的计算属性几乎一样，在获取 State值之前做一些逻辑处理",-1),h=(0,t._)("ol",null,[(0,t._)("li",null,[(0,t._)("p",null,"getter 中的值有缓存特性，如果值没有改变，多次使用也只会调用一次"),(0,t._)("ul",null,[(0,t._)("li",null,"添加 getter方法")]),(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"pinia-添加getter",originSrc:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d0d1fa3b3d3c4d248e7840daab479598~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp",data:"aurora"})]),(0,t._)("ul",null,[(0,t._)("li",null,"组件内多次调用")]),(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"pinia-getter基本使用",originSrc:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c3dfc0ffba6c48448c1e1fc24ecac234~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp",data:"aurora"})]),(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"image-20220313194548932",originSrc:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2d890aff47884bb69a9709562740e87d~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp",data:"aurora"})])]),(0,t._)("li",null,[(0,t._)("p",null,[(0,t.Uk)("getter 中不仅可以传递 "),(0,t._)("code",null,"state"),(0,t.Uk)(" 直接改变数据状态，还可以使用 "),(0,t._)("code",null,"this"),(0,t.Uk)(" 来改变数据")]),(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"pinia-this方式添加getter",originSrc:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e6d2dcd2a6664e959c4090af96155a24~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp",data:"aurora"})])])],-1),v=(0,t.uE)('<h2 id="store之间的相互调用" tabindex="-1"><a class="header-anchor" href="#store之间的相互调用" aria-hidden="true">#</a> store之间的相互调用</h2><p>在 Pinia 中，可以在一个 <code>store</code> 中 <code>import</code> 另外一个 <code>store</code> ，然后通过调用引入 store 方法的形式，获取引入 <code>store</code> 的状态</p><ul><li>新建 store</li></ul>',3),y=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"pinia-新建store",originSrc:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7c9eef2dddc64924b0f60c90160f2abb~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp",data:"aurora"})],-1),_=(0,t._)("ul",null,[(0,t._)("li",null,[(0,t.Uk)("在原 store 中引入 allanStore，并获取 "),(0,t._)("code",null,"moveList")])],-1),w=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"pinia-store互相引用",originSrc:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/effd4216b8a24d01814bb80af2d2a515~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp",data:"aurora"})],-1),j=(0,t._)("ul",null,[(0,t._)("li",null,[(0,t.Uk)("组件中使用 "),(0,t._)("code",null,"mainStore.getAllanStoreList")])],-1),z=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"image-20220313201156248",originSrc:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/14d33eb3fede4f1297e8debf1715e223~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp",data:"aurora"})],-1),S=(0,t.uE)('<h2 id="自定义pinia持久化插件" tabindex="-1"><a class="header-anchor" href="#自定义pinia持久化插件" aria-hidden="true">#</a> 自定义pinia持久化插件</h2><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// plugins/persistedstate.ts</span>\n\n<span class="token keyword">import</span> <span class="token punctuation">{</span> PiniaPluginContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;pinia&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">persistedstate</span><span class="token punctuation">(</span>context<span class="token operator">:</span> PiniaPluginContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 初始化回显数据，通过context.store.$id拿到本地存储的数据</span>\n  <span class="token keyword">const</span> shop <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>store<span class="token punctuation">.</span>$id<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&quot;{}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// 返回给对应的模块</span>\n  context<span class="token punctuation">.</span>store<span class="token punctuation">.</span><span class="token function">$patch</span><span class="token punctuation">(</span>shop<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 订阅每次state的变化，_mutation是当前修改store的上下文，state是当前修改的数据</span>\n  context<span class="token punctuation">.</span>store<span class="token punctuation">.</span><span class="token function">$subscribe</span><span class="token punctuation">(</span>\n    <span class="token punctuation">(</span>_mutation<span class="token operator">:</span> <span class="token punctuation">{</span> storeId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> state<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span>_mutation<span class="token punctuation">.</span>storeId<span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>\n      <span class="token comment">// 组件卸载依赖还在</span>\n      detached<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// src/main.ts</span>\n<span class="token operator">...</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> createPinia <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pinia&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> persistedstate <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./plugins/persistedstate.ts&#39;</span>\n<span class="token keyword">const</span> pinia <span class="token operator">=</span> <span class="token function">createPinia</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\npinia<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>persistedstate<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>总得来说，Pinia 就是 Vuex 的替代版，可以更好的兼容 Vue2，Vue3以及TypeScript。在Vuex的基础上去掉了 Mutation，只保留了 state, getter和action。Pinia拥有更简洁的语法， 扁平化的代码编排，符合Vue3 的 Composition api</p>',5),x={},P=(0,a(3744).Z)(x,[["render",function(n,s){return(0,t.wg)(),(0,t.iD)(t.HY,null,[p,e,o,c,i,l,r,u,k,b,d,m,g,f,h,v,y,_,w,j,z,S],64)}]])}}]);