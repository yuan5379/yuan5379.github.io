"use strict";(self.webpackChunkdemo1=self.webpackChunkdemo1||[]).push([[2589],{1184:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-493de946",path:"/vue/2022/20220930.html",title:"大文件分片上传",lang:"zh-CN",frontmatter:{title:"大文件分片上传",date:"2022-09-30T00:00:00.000Z",tags:["vue"],categories:["vue"]},excerpt:"",headers:[],git:{updatedTime:null,contributors:[]}}},2283:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const p=(0,a(6252).uE)('<div class="custom-container tip"><p class="custom-container-title">TIP</p><p>项目开发中，大文件上传不可避免的因各种原因上传失败，这一篇来讲在 vue 项目中如何分片上传</p></div><h1 id="代码部分" tabindex="-1"><a class="header-anchor" href="#代码部分" aria-hidden="true">#</a> 代码部分</h1><p>需要下载 js-md5，分片上传需要用 md5</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> uploadByPieces <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@/utils/burst&#39;</span>\n\n<span class="token comment">// 上传接口</span>\n<span class="token function">handleUploadvideo</span> <span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 通过上传组件获取到文件的信息，调用分片上传接口</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">afterRead</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n<span class="token comment">// 视频上传</span>\n    <span class="token function">afterRead</span> <span class="token punctuation">(</span><span class="token parameter">files<span class="token punctuation">,</span> code</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// uploadByPieces函数由另外的js文件引入</span>\n      <span class="token function">uploadByPieces</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        files<span class="token punctuation">,</span>\n        <span class="token literal-property property">pieceSize</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">concurrent</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">success</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>VideoSuccess<span class="token punctuation">,</span>\n        <span class="token literal-property property">error</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>VideoFail\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">// 上传视频成功回调</span>\n    <span class="token function">VideoSuccess</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>\n      <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span> url <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>form<span class="token punctuation">.</span>video <span class="token operator">=</span> url\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token string">&#39;上传成功&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">// 上传失败回调</span>\n    <span class="token function">VideoFail</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token string">&#39;失败回调&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>burst<span class="token punctuation">.</span>js 文件\n\n<span class="token keyword">import</span> md5 <span class="token keyword">from</span> <span class="token string">&#39;js-md5&#39;</span> <span class="token comment">// 引入MD5加密</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> chunkupload <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@/pages/busmanagement/children/GroupService.js&#39;</span> <span class="token comment">// 分片上传接口</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> concurrentExecution <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./jnxh.js&#39;</span> <span class="token comment">// 并发文件</span>\n<span class="token doc-comment comment">/**\n * 文件分片上传\n * <span class="token keyword">@params</span> file <span class="token punctuation">{</span>File<span class="token punctuation">}</span> 文件\n * <span class="token keyword">@params</span> pieceSize <span class="token punctuation">{</span>Number<span class="token punctuation">}</span> 分片大小 默认1MB\n * <span class="token keyword">@params</span> concurrent <span class="token punctuation">{</span>Number<span class="token punctuation">}</span> 并发数量 默认2\n * <span class="token keyword">@params</span> process <span class="token punctuation">{</span>Function<span class="token punctuation">}</span> 进度回调函数\n * <span class="token keyword">@params</span> success <span class="token punctuation">{</span>Function<span class="token punctuation">}</span> 成功回调函数\n * <span class="token keyword">@params</span> error <span class="token punctuation">{</span>Function<span class="token punctuation">}</span> 失败回调函数\n */</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">uploadByPieces</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>\n  <span class="token literal-property property">files</span><span class="token operator">:</span> <span class="token punctuation">{</span> file <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  pieceSize <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>\n  concurrent <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>\n  process<span class="token punctuation">,</span>\n  success<span class="token punctuation">,</span>\n  error\n<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 如果文件传入为空直接 return 返回</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file <span class="token operator">||</span> file<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;文件不能为空&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">let</span> fileMD5 <span class="token operator">=</span> <span class="token string">&#39;&#39;</span> <span class="token comment">// 总文件列表</span>\n  <span class="token keyword">const</span> chunkSize <span class="token operator">=</span> pieceSize <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token comment">// 3MB一片</span>\n  <span class="token keyword">const</span> chunkCount <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>size <span class="token operator">/</span> chunkSize<span class="token punctuation">)</span> <span class="token comment">// 总片数</span>\n  <span class="token keyword">const</span> chunkList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 分片列表</span>\n  <span class="token keyword">let</span> uploaded <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 已经上传的</span>\n  <span class="token comment">// let fileType = &#39;&#39; // 文件类型</span>\n  <span class="token keyword">let</span> uploadId <span class="token operator">=</span> <span class="token string">&#39;&#39;</span> <span class="token comment">// 上传id</span>\n  <span class="token comment">// 获取md5</span>\n  <span class="token doc-comment comment">/***\n     * 获取md5\n     **/</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1111</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">readFileMD5</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 读取视频文件的md5</span>\n    <span class="token comment">// fileType = file.name.substring(file.name.lastIndexOf(&#39;.&#39;) + 1, file.name.length)</span>\n    <span class="token keyword">const</span> fileRederInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;file&#39;</span><span class="token punctuation">,</span> file<span class="token punctuation">)</span>\n    fileRederInstance<span class="token punctuation">.</span><span class="token function">readAsBinaryString</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>\n    fileRederInstance<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;load&#39;</span><span class="token punctuation">,</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> fileBolb <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result\n      fileMD5 <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span>fileBolb<span class="token punctuation">)</span>\n\n      <span class="token keyword">const</span> <span class="token punctuation">{</span>\n        chunk\n      <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">getChunkInfo</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> chunkSize<span class="token punctuation">)</span>\n      <span class="token keyword">const</span> chunkInfo <span class="token operator">=</span> <span class="token punctuation">{</span>\n        chunk<span class="token punctuation">,</span>\n        <span class="token literal-property property">currentChunk</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n        chunkCount<span class="token punctuation">,</span>\n        uploadId\n      <span class="token punctuation">}</span>\n      <span class="token keyword">const</span> uploadData <span class="token operator">=</span> <span class="token function">createUploadData</span><span class="token punctuation">(</span>chunkInfo<span class="token punctuation">)</span>\n\n      <span class="token function">chunkupload</span><span class="token punctuation">(</span>uploadData<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token operator">=</span> res\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>skipUpload<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token string">&#39;文件已被上传&#39;</span><span class="token punctuation">)</span>\n          <span class="token function">success</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n          uploadId <span class="token operator">=</span> data<span class="token punctuation">.</span>uploadId\n          <span class="token comment">// 判断是否是断点续传</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>uploaded <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">.</span>uploaded<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            uploaded <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>uploaded<span class="token punctuation">)</span>\n          <span class="token punctuation">}</span>\n          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;已上传的分片：&#39;</span> <span class="token operator">+</span> uploaded<span class="token punctuation">)</span>\n          <span class="token comment">// 判断是并发上传或顺序上传</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span>concurrent <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">||</span> chunkCount <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;顺序上传&#39;</span><span class="token punctuation">)</span>\n            <span class="token function">sequentialUplode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;并发上传&#39;</span><span class="token punctuation">)</span>\n            <span class="token function">concurrentUpload</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;文件合并错误&#39;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token doc-comment comment">/***\n     * 获取每一个分片的详情\n     **/</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">getChunkInfo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">file<span class="token punctuation">,</span> currentChunk<span class="token punctuation">,</span> chunkSize</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> start <span class="token operator">=</span> currentChunk <span class="token operator">*</span> chunkSize\n    <span class="token keyword">const</span> end <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>size<span class="token punctuation">,</span> start <span class="token operator">+</span> chunkSize<span class="token punctuation">)</span>\n    <span class="token keyword">const</span> chunk <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      start<span class="token punctuation">,</span>\n      end<span class="token punctuation">,</span>\n      chunk\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token doc-comment comment">/***\n     * 原始上传\n     **/</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">uploadChunk</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">chunkInfo</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> sd <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>chunkInfo<span class="token punctuation">.</span>currentChunk <span class="token operator">/</span> chunkInfo<span class="token punctuation">.</span>chunkCount<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sd<span class="token punctuation">,</span> <span class="token string">&#39;进度&#39;</span><span class="token punctuation">)</span>\n    <span class="token comment">// process(sd)</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>chunkInfo<span class="token punctuation">,</span> <span class="token string">&#39;分片大小&#39;</span><span class="token punctuation">)</span>\n    <span class="token keyword">const</span> inde <span class="token operator">=</span> chunkInfo<span class="token punctuation">.</span>currentChunk <span class="token operator">+</span> <span class="token number">1</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>uploaded<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>inde <span class="token operator">+</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> <span class="token punctuation">{</span>\n        chunk\n      <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">getChunkInfo</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> chunkInfo<span class="token punctuation">.</span>currentChunk <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> chunkSize<span class="token punctuation">)</span>\n      <span class="token function">uploadChunk</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        chunk<span class="token punctuation">,</span>\n        <span class="token literal-property property">currentChunk</span><span class="token operator">:</span> inde<span class="token punctuation">,</span>\n        chunkCount\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> uploadData <span class="token operator">=</span> <span class="token function">createUploadData</span><span class="token punctuation">(</span>chunkInfo<span class="token punctuation">)</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>uploadData<span class="token punctuation">)</span>\n      <span class="token function">chunkupload</span><span class="token punctuation">(</span>uploadData<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>errcode <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;分片上传成功&#39;</span><span class="token punctuation">)</span>\n          uploaded<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>chunkInfo<span class="token punctuation">.</span>currentChunk <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n          <span class="token comment">// 判断是否全部上传完</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span>uploaded<span class="token punctuation">.</span>length <span class="token operator">==</span> chunkInfo<span class="token punctuation">.</span>chunkCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;全部完成&#39;</span><span class="token punctuation">)</span>\n            <span class="token function">success</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n            <span class="token comment">// process(100)</span>\n          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token keyword">const</span> <span class="token punctuation">{</span>\n              chunk\n            <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">getChunkInfo</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> chunkInfo<span class="token punctuation">.</span>currentChunk <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> chunkSize<span class="token punctuation">)</span>\n            <span class="token function">uploadChunk</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n              chunk<span class="token punctuation">,</span>\n              <span class="token literal-property property">currentChunk</span><span class="token operator">:</span> chunkInfo<span class="token punctuation">.</span>currentChunk <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>\n              chunkCount\n            <span class="token punctuation">}</span><span class="token punctuation">)</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>msg<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token comment">// if (chunkInfo.currentChunk &lt; chunkInfo.chunkCount) {</span>\n      <span class="token comment">//   setTimeout(() =&gt; {</span>\n      <span class="token comment">//</span>\n      <span class="token comment">//   }, 1000)</span>\n      <span class="token comment">// }</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token doc-comment comment">/***\n     * 顺序上传\n     **/</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">sequentialUplode</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">currentChunk</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span>\n      chunk\n    <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">getChunkInfo</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> currentChunk<span class="token punctuation">,</span> chunkSize<span class="token punctuation">)</span>\n    <span class="token keyword">const</span> chunkInfo <span class="token operator">=</span> <span class="token punctuation">{</span>\n      chunk<span class="token punctuation">,</span>\n      currentChunk<span class="token punctuation">,</span>\n      chunkCount<span class="token punctuation">,</span>\n      uploadId\n    <span class="token punctuation">}</span>\n    <span class="token comment">// const sd = parseInt((chunkInfo.currentChunk / chunkInfo.chunkCount) * 100)</span>\n    <span class="token comment">// process(sd)</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;当前上传分片：&#39;</span> <span class="token operator">+</span> currentChunk<span class="token punctuation">)</span>\n    <span class="token keyword">const</span> inde <span class="token operator">=</span> chunkInfo<span class="token punctuation">.</span>currentChunk <span class="token operator">+</span> <span class="token number">1</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>uploaded<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>inde <span class="token operator">+</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;分片【&#39;</span> <span class="token operator">+</span> currentChunk <span class="token operator">+</span> <span class="token string">&#39;】已上传&#39;</span><span class="token punctuation">)</span>\n      <span class="token function">sequentialUplode</span><span class="token punctuation">(</span>currentChunk <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> uploadData <span class="token operator">=</span> <span class="token function">createUploadData</span><span class="token punctuation">(</span>chunkInfo<span class="token punctuation">)</span>\n\n      <span class="token comment">// 执行分片上传</span>\n      <span class="token function">chunkupload</span><span class="token punctuation">(</span>uploadData<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token string">&#39;sdfsdfsd&#39;</span><span class="token punctuation">)</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>errcode <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;分片【&#39;</span> <span class="token operator">+</span> currentChunk <span class="token operator">+</span> <span class="token string">&#39;】上传成功&#39;</span><span class="token punctuation">)</span>\n          uploaded<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>chunkInfo<span class="token punctuation">.</span>currentChunk <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n          <span class="token comment">// 判断是否全部上传完</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span>uploaded<span class="token punctuation">.</span>length <span class="token operator">==</span> chunkInfo<span class="token punctuation">.</span>chunkCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;全部完成&#39;</span><span class="token punctuation">)</span>\n            <span class="token function">success</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n            <span class="token comment">// process(100)</span>\n          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token function">sequentialUplode</span><span class="token punctuation">(</span>currentChunk <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>errmsg<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token doc-comment comment">/***\n     * 并发上传\n     **/</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">concurrentUpload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> chunkCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> index <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>uploaded<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        chunkList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// debugger</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;需要上传的分片索引：&#39;</span> <span class="token operator">+</span> chunkList<span class="token punctuation">)</span>\n    <span class="token function">concurrentExecution</span><span class="token punctuation">(</span>chunkList<span class="token punctuation">,</span> concurrent<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">curItem</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> <span class="token punctuation">{</span>\n          chunk\n        <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">getChunkInfo</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> curItem<span class="token punctuation">,</span> chunkSize<span class="token punctuation">)</span>\n        <span class="token keyword">const</span> chunkInfo <span class="token operator">=</span> <span class="token punctuation">{</span>\n          chunk<span class="token punctuation">,</span>\n          <span class="token literal-property property">currentChunk</span><span class="token operator">:</span> curItem<span class="token punctuation">,</span>\n          chunkCount<span class="token punctuation">,</span>\n          uploadId\n        <span class="token punctuation">}</span>\n        <span class="token comment">// const sd = parseInt((chunkInfo.currentChunk / chunkInfo.chunkCount) * 100)</span>\n        <span class="token comment">// process(sd)</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;当前上传分片：&#39;</span> <span class="token operator">+</span> curItem<span class="token punctuation">)</span>\n        <span class="token keyword">const</span> inde <span class="token operator">=</span> chunkInfo<span class="token punctuation">.</span>currentChunk <span class="token operator">+</span> <span class="token number">1</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>uploaded<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>inde<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token comment">// 构建上传文件的formData</span>\n          <span class="token keyword">const</span> uploadData <span class="token operator">=</span> <span class="token function">createUploadData</span><span class="token punctuation">(</span>chunkInfo<span class="token punctuation">)</span>\n          <span class="token function">chunkupload</span><span class="token punctuation">(</span>uploadData<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>errcode <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              uploaded<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>chunkInfo<span class="token punctuation">.</span>currentChunk <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;已经上传完成的分片：&#39;</span> <span class="token operator">+</span> uploaded<span class="token punctuation">)</span>\n              <span class="token comment">// 判断是否全部上传完</span>\n              <span class="token keyword">if</span> <span class="token punctuation">(</span>uploaded<span class="token punctuation">.</span>length <span class="token operator">==</span> chunkInfo<span class="token punctuation">.</span>chunkCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token function">success</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n                <span class="token comment">// process(100)</span>\n              <span class="token punctuation">}</span>\n              <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n              <span class="token function">reject</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>errmsg<span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token string">&#39;errrrr&#39;</span><span class="token punctuation">)</span>\n            <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>\n            <span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>\n          <span class="token punctuation">}</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;分片【&#39;</span> <span class="token operator">+</span> chunkInfo<span class="token punctuation">.</span>currentChunk <span class="token operator">+</span> <span class="token string">&#39;】已上传&#39;</span><span class="token punctuation">)</span>\n          <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;finish&#39;</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token doc-comment comment">/***\n     * 创建文件上传参数\n     **/</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">createUploadData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">chunkInfo</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> fetchForm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    fetchForm<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&#39;identifier&#39;</span><span class="token punctuation">,</span> fileMD5<span class="token punctuation">)</span> <span class="token comment">// 文件MD5编码</span>\n    fetchForm<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&#39;filename&#39;</span><span class="token punctuation">,</span> file<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// 文件名</span>\n    fetchForm<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&#39;totalChunks&#39;</span><span class="token punctuation">,</span> chunkInfo<span class="token punctuation">.</span>chunkCount<span class="token punctuation">)</span> <span class="token comment">// 分片总数</span>\n    fetchForm<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&#39;chunkSize&#39;</span><span class="token punctuation">,</span> chunkSize<span class="token punctuation">)</span> <span class="token comment">// 每片大小</span>\n    fetchForm<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&#39;chunkNumber&#39;</span><span class="token punctuation">,</span> chunkInfo<span class="token punctuation">.</span>currentChunk <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 当前为第几片</span>\n    fetchForm<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&#39;currentChunkSize&#39;</span><span class="token punctuation">,</span> chunkInfo<span class="token punctuation">.</span>chunk<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token comment">// 当前分片大小</span>\n    <span class="token keyword">const</span> chunkfile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token punctuation">[</span>chunkInfo<span class="token punctuation">.</span>chunk<span class="token punctuation">]</span><span class="token punctuation">,</span> file<span class="token punctuation">.</span>name<span class="token punctuation">)</span>\n    fetchForm<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&#39;file&#39;</span><span class="token punctuation">,</span> chunkfile<span class="token punctuation">)</span> <span class="token comment">// 文件</span>\n    fetchForm<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&#39;uploadId&#39;</span><span class="token punctuation">,</span> chunkInfo<span class="token punctuation">.</span>uploadId<span class="token punctuation">)</span> <span class="token comment">// 第一次不传，后面的请求需要传</span>\n    <span class="token comment">// fetchForm.append(&#39;objectType&#39;, fileType)</span>\n    <span class="token keyword">return</span> fetchForm\n  <span class="token punctuation">}</span>\n  <span class="token function">readFileMD5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 开始执行代码</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br><span class="line-number">135</span><br><span class="line-number">136</span><br><span class="line-number">137</span><br><span class="line-number">138</span><br><span class="line-number">139</span><br><span class="line-number">140</span><br><span class="line-number">141</span><br><span class="line-number">142</span><br><span class="line-number">143</span><br><span class="line-number">144</span><br><span class="line-number">145</span><br><span class="line-number">146</span><br><span class="line-number">147</span><br><span class="line-number">148</span><br><span class="line-number">149</span><br><span class="line-number">150</span><br><span class="line-number">151</span><br><span class="line-number">152</span><br><span class="line-number">153</span><br><span class="line-number">154</span><br><span class="line-number">155</span><br><span class="line-number">156</span><br><span class="line-number">157</span><br><span class="line-number">158</span><br><span class="line-number">159</span><br><span class="line-number">160</span><br><span class="line-number">161</span><br><span class="line-number">162</span><br><span class="line-number">163</span><br><span class="line-number">164</span><br><span class="line-number">165</span><br><span class="line-number">166</span><br><span class="line-number">167</span><br><span class="line-number">168</span><br><span class="line-number">169</span><br><span class="line-number">170</span><br><span class="line-number">171</span><br><span class="line-number">172</span><br><span class="line-number">173</span><br><span class="line-number">174</span><br><span class="line-number">175</span><br><span class="line-number">176</span><br><span class="line-number">177</span><br><span class="line-number">178</span><br><span class="line-number">179</span><br><span class="line-number">180</span><br><span class="line-number">181</span><br><span class="line-number">182</span><br><span class="line-number">183</span><br><span class="line-number">184</span><br><span class="line-number">185</span><br><span class="line-number">186</span><br><span class="line-number">187</span><br><span class="line-number">188</span><br><span class="line-number">189</span><br><span class="line-number">190</span><br><span class="line-number">191</span><br><span class="line-number">192</span><br><span class="line-number">193</span><br><span class="line-number">194</span><br><span class="line-number">195</span><br><span class="line-number">196</span><br><span class="line-number">197</span><br><span class="line-number">198</span><br><span class="line-number">199</span><br><span class="line-number">200</span><br><span class="line-number">201</span><br><span class="line-number">202</span><br><span class="line-number">203</span><br><span class="line-number">204</span><br><span class="line-number">205</span><br><span class="line-number">206</span><br><span class="line-number">207</span><br><span class="line-number">208</span><br><span class="line-number">209</span><br><span class="line-number">210</span><br><span class="line-number">211</span><br><span class="line-number">212</span><br><span class="line-number">213</span><br><span class="line-number">214</span><br><span class="line-number">215</span><br><span class="line-number">216</span><br><span class="line-number">217</span><br><span class="line-number">218</span><br><span class="line-number">219</span><br><span class="line-number">220</span><br><span class="line-number">221</span><br><span class="line-number">222</span><br><span class="line-number">223</span><br><span class="line-number">224</span><br><span class="line-number">225</span><br><span class="line-number">226</span><br><span class="line-number">227</span><br><span class="line-number">228</span><br><span class="line-number">229</span><br><span class="line-number">230</span><br><span class="line-number">231</span><br><span class="line-number">232</span><br><span class="line-number">233</span><br><span class="line-number">234</span><br><span class="line-number">235</span><br><span class="line-number">236</span><br><span class="line-number">237</span><br><span class="line-number">238</span><br><span class="line-number">239</span><br><span class="line-number">240</span><br><span class="line-number">241</span><br><span class="line-number">242</span><br><span class="line-number">243</span><br><span class="line-number">244</span><br><span class="line-number">245</span><br><span class="line-number">246</span><br><span class="line-number">247</span><br><span class="line-number">248</span><br><span class="line-number">249</span><br><span class="line-number">250</span><br><span class="line-number">251</span><br><span class="line-number">252</span><br><span class="line-number">253</span><br><span class="line-number">254</span><br><span class="line-number">255</span><br><span class="line-number">256</span><br><span class="line-number">257</span><br><span class="line-number">258</span><br><span class="line-number">259</span><br><span class="line-number">260</span><br><span class="line-number">261</span><br><span class="line-number">262</span><br><span class="line-number">263</span><br><span class="line-number">264</span><br><span class="line-number">265</span><br><span class="line-number">266</span><br><span class="line-number">267</span><br><span class="line-number">268</span><br><span class="line-number">269</span><br><span class="line-number">270</span><br><span class="line-number">271</span><br><span class="line-number">272</span><br><span class="line-number">273</span><br><span class="line-number">274</span><br><span class="line-number">275</span><br><span class="line-number">276</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>jnxh<span class="token punctuation">.</span>js 文件\n\n<span class="token doc-comment comment">/**\n * 并发执行\n * <span class="token keyword">@params</span> list <span class="token punctuation">{</span>Array<span class="token punctuation">}</span> - 要迭代的数组\n * <span class="token keyword">@params</span> limit <span class="token punctuation">{</span>Number<span class="token punctuation">}</span> - 并发数量控制数,最好小于3\n * <span class="token keyword">@params</span> asyncHandle <span class="token punctuation">{</span>Function<span class="token punctuation">}</span> - 对`list`的每一个项的处理函数，参数为当前处理项，必须 return 一个Promise来确定是否继续进行迭代\n * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>Promise<span class="token punctuation">}</span></span> - 返回一个 Promise 值来确认所有数据是否迭代完成\n */</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">concurrentExecution</span> <span class="token punctuation">(</span><span class="token parameter">list<span class="token punctuation">,</span> limit<span class="token punctuation">,</span> asyncHandle</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 递归执行</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">recursion</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 执行方法 arr.shift() 取出并移除第一个数据</span>\n    <span class="token keyword">return</span> <span class="token function">asyncHandle</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 数组还未迭代完，递归继续进行迭代</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token function">recursion</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token string">&#39;finish&#39;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 创建新的并发数组</span>\n  <span class="token keyword">const</span> listCopy <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span>\n  <span class="token comment">// 正在进行的所有并发异步操作</span>\n  <span class="token keyword">const</span> asyncList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  limit <span class="token operator">=</span> limit <span class="token operator">&gt;</span> listCopy<span class="token punctuation">.</span>length <span class="token operator">?</span> listCopy<span class="token punctuation">.</span>length <span class="token operator">:</span> limit\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>limit<span class="token punctuation">)</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>limit<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    asyncList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">recursion</span><span class="token punctuation">(</span>listCopy<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 所有并发异步操作都完成后，本次并发控制迭代完成</span>\n  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>asyncList<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><h1 id="文档借鉴地址" tabindex="-1"><a class="header-anchor" href="#文档借鉴地址" aria-hidden="true">#</a> 文档借鉴地址</h1><p>1：https://www.jb51.net/article/260764.htm</p><p>2：https://blog.csdn.net/qq_43040552/article/details/123375581?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-123375581-blog-123520915.pc_relevant_aa_2&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-123375581-blog-123520915.pc_relevant_aa_2&amp;utm_relevant_index=1</p>',9),t={},e=(0,a(3744).Z)(t,[["render",function(n,s){return p}]])}}]);