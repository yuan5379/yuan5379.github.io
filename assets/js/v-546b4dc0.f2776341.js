"use strict";(self.webpackChunkdemo1=self.webpackChunkdemo1||[]).push([[753],{3866:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-546b4dc0",path:"/%E5%B7%A5%E5%85%B7/2022/20221019.html",title:"尤雨溪推荐神器 ni ，能替代 npm/yarn/pnpm ？",lang:"zh-CN",frontmatter:{title:"尤雨溪推荐神器 ni ，能替代 npm/yarn/pnpm ？",date:"2022-10-19T00:00:00.000Z",tags:["工具"],categories:["工具"]},excerpt:"",headers:[{level:2,title:"ni 原理",slug:"ni-原理",children:[]},{level:2,title:"使用",slug:"使用",children:[]},{level:2,title:"阅读源码",slug:"阅读源码",children:[]},{level:2,title:"主流程 runner - runCli 函数",slug:"主流程-runner-runcli-函数",children:[]},{level:2,title:"主流程 runner - run 主函数",slug:"主流程-runner-run-主函数",children:[]},{level:2,title:"根据锁文件猜测用哪个包管理器 - detect 函数",slug:"根据锁文件猜测用哪个包管理器-detect-函数",children:[]},{level:2,title:"抹平不同的包管理器的命令差异 - parseNi 函数",slug:"抹平不同的包管理器的命令差异-parseni-函数",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],git:{updatedTime:null,contributors:[]}}},15:(n,s,a)=>{a.r(s),a.d(s,{default:()=>B});var p=a(6252);const t={class:"custom-container tip"},e=(0,p._)("p",{class:"custom-container-title"},"TIP",-1),o=(0,p.Uk)("我们日常开发中，可能容易 "),c=(0,p._)("strong",null,"npm、yarn、pnpm",-1),l=(0,p.Uk)(" 混用。有了 "),r=(0,p._)("strong",null,"ni",-1),u=(0,p.Uk)(" 后，可以用于日常开发使用。Vue 核心成员 "),i={href:"https://link.juejin.cn/?target=https%3A%2F%2Fantfu.me",target:"_blank",rel:"noopener noreferrer"},k=(0,p.Uk)("Anthony Fu"),b=(0,p.Uk)(" 发现问题，最终开发了一个工具 "),m={href:"https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fantfu%2Fni",target:"_blank",rel:"noopener noreferrer"},d=(0,p.Uk)("ni"),g=(0,p.Uk)(" 解决问题。通过这一篇可以学到"),y=(0,p._)("ol",null,[(0,p._)("li",null,"学会 ni 使用和理解其原理"),(0,p._)("li",null,"学会调试学习源码"),(0,p._)("li",null,"可以在日常工作中也使用 ni")],-1),f=(0,p.uE)('<h2 id="ni-原理" tabindex="-1"><a class="header-anchor" href="#ni-原理" aria-hidden="true">#</a> ni 原理</h2><p>在它运行之前，它会检测你的 <strong>yarn.lock</strong> / <strong>pnpm-lock.yaml</strong> / <strong>package-lock.json</strong> 以了解当前的包管理器，并运行相应的命令。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>单从这句话中可能有些不好理解，还是不知道它是个什么。我解释一下。\n\n使用 `ni` 在项目中安装依赖时：\n   假设你的项目中有锁文件 `yarn.lock`，那么它最终会执行 `yarn install` 命令。\n   假设你的项目中有锁文件 `pnpm-lock.yaml`，那么它最终会执行 `pnpm i` 命令。\n   假设你的项目中有锁文件 `package-lock.json`，那么它最终会执行 `npm i` 命令。\n\n使用 `ni -g vue-cli` 安装全局依赖时\n    默认使用 `npm i -g vue-cli`\n\n当然不只有 `ni` 安装依赖。\n    还有 `nr` - run\n    `nx` - execute\n    `nu` - upgrade\n    `nci` - clean install\n    `nrm` - remove\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>查看源码发现：<strong>ni</strong> 相关的命令，都可以在末尾追加 **? **，表示只打印，不是真正执行。所以全局安装 <strong>ni</strong> 后，可以尽情测试，比如 <strong>ni ?</strong>，<strong>nr dev --port=3000 ?</strong>，因为打印，所以可以在各种目录下执行，有助于理解 ni源码。我测试了如下图所示：</p>',4),v=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"命令测试图示",originSrc:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bebec9efba69488ab2167ef1c6121781~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?",data:"aurora"})],-1),w=(0,p.uE)('<p>假设项目目录下没有锁文件，默认就会让用户从<strong>npm、yarn、pnpm</strong> 选择，然后执行相应的命令。 但如果在 <strong>~/.nirc</strong> 文件中，设置了全局默认的配置，则使用默认配置执行对应命令。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>//~/.nirc\n\n//fallback when no lock found\ndefaultAgent=npm # default &quot;prompt&quot;\n\n//for global installs\nglobalAgent=npm\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h2><ul><li>先全局安装: npm i -g @antfu/ni</li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>ni\n\n# npm install\n# yarn install\n# pnpm install\n\nni axios\n\n# npm i axios\n# yarn add axios\n# pnpm i axios\n\nnr dev --port=3000\n\n# npm run dev -- --port=3000\n# yarn run dev --port=3000\n# pnpm run dev -- --port=3000\n\nnr -\n\n# 重新执行最后一次执行的命令\n# rerun the last command\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>更多的使用请查看官方github地址: https://github.com/antfu/ni#how</p><h2 id="阅读源码" tabindex="-1"><a class="header-anchor" href="#阅读源码" aria-hidden="true">#</a> 阅读源码</h2><ul><li>众所周知，看一个开源项目，先从 package.json 文件开始看起。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">package</span><span class="token punctuation">.</span>json 文件\n\n<span class="token punctuation">{</span>\n    <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;@antfu/ni&quot;</span><span class="token punctuation">,</span>\n    <span class="token string-property property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;0.10.0&quot;</span><span class="token punctuation">,</span>\n    <span class="token string-property property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Use the right package manager&quot;</span><span class="token punctuation">,</span>\n    <span class="token comment">// 暴露了六个命令</span>\n    <span class="token string-property property">&quot;bin&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token string-property property">&quot;ni&quot;</span><span class="token operator">:</span> <span class="token string">&quot;bin/ni.js&quot;</span><span class="token punctuation">,</span>\n        <span class="token string-property property">&quot;nci&quot;</span><span class="token operator">:</span> <span class="token string">&quot;bin/nci.js&quot;</span><span class="token punctuation">,</span>\n        <span class="token string-property property">&quot;nr&quot;</span><span class="token operator">:</span> <span class="token string">&quot;bin/nr.js&quot;</span><span class="token punctuation">,</span>\n        <span class="token string-property property">&quot;nu&quot;</span><span class="token operator">:</span> <span class="token string">&quot;bin/nu.js&quot;</span><span class="token punctuation">,</span>\n        <span class="token string-property property">&quot;nx&quot;</span><span class="token operator">:</span> <span class="token string">&quot;bin/nx.js&quot;</span><span class="token punctuation">,</span>\n        <span class="token string-property property">&quot;nrm&quot;</span><span class="token operator">:</span> <span class="token string">&quot;bin/nrm.js&quot;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token string-property property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 省略了其他的命令 用 esno 执行 ts 文件</span>\n        <span class="token comment">// 可以加上 ? 便于调试，也可以不加</span>\n        <span class="token comment">// 或者是终端 npm run dev \\?</span>\n        <span class="token string-property property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;esno src/ni.ts ?&quot;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><ul><li>根据 <strong>dev</strong> 命令，我们找到主入口文件 <strong>src/ni.ts</strong>。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// ni/src/ni.ts</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> parseNi <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./commands&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> runCli <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./runner&#39;</span>\n\n<span class="token comment">// 我们可以在这里打断点</span>\n<span class="token function">runCli</span><span class="token punctuation">(</span>parseNi<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>找到 <strong>ni/package.json</strong> 的 <strong>scripts</strong> ，把鼠标移动到 <strong>dev</strong> 命令上，会出现<strong>运行脚本</strong>和<strong>调试脚本</strong>命令。如下图所示，选择调试脚本</p>',12),h=(0,p._)("p",null,[(0,p._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"VSCode 调试",originSrc:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c14f2badd837455194dc6a222480a61f~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?",data:"aurora"})],-1),x=(0,p._)("h2",{id:"主流程-runner-runcli-函数",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#主流程-runner-runcli-函数","aria-hidden":"true"},"#"),(0,p.Uk)(" 主流程 runner - runCli 函数")],-1),q=(0,p.Uk)("这个函数就是对终端传入的命令行参数做一次解析。最终还是执行的 "),j=(0,p._)("strong",null,"run",-1),_=(0,p.Uk)(" 函数，对于 "),C=(0,p._)("strong",null,"process",-1),U=(0,p.Uk)(" 不了解的读者，可以看"),A={href:"https://link.juejin.cn/?target=http%3A%2F%2Fjavascript.ruanyifeng.com%2Fnodejs%2Fprocess.html",target:"_blank",rel:"noopener noreferrer"},N=(0,p.Uk)("阮一峰老师写的 process 对象"),E=(0,p.uE)('<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// ni/src/runner.ts</span>\n<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">runCli</span><span class="token punctuation">(</span>fn<span class="token operator">:</span> Runner<span class="token punctuation">,</span> options<span class="token operator">:</span> DetectOptions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// process.argv：返回一个数组，成员是当前进程的所有命令行参数。</span>\n  <span class="token comment">// 其中 process.argv 的第一和第二个元素是Node可执行文件和被执行JavaScript文件的完全限定的文件系统路径，无论你是否这样输入他们。</span>\n  <span class="token keyword">const</span> args <span class="token operator">=</span> process<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span>\n  <span class="token keyword">try</span> <span class="token punctuation">{</span>\n    <span class="token keyword">await</span> <span class="token function">run</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> args<span class="token punctuation">,</span> options<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// process.exit方法用来退出当前进程。它可以接受一个数值参数，如果参数大于0，表示执行失败；如果等于0表示执行成功。</span>\n    process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="主流程-runner-run-主函数" tabindex="-1"><a class="header-anchor" href="#主流程-runner-run-主函数" aria-hidden="true">#</a> 主流程 runner - run 主函数</h2><ul><li>这个函数主要做了三件事</li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>1. 根据锁文件猜测用哪个包管理器 npm/yarn/pnpm - detect 函数\n2. 抹平不同的包管理器的命令差异 - parseNi 函数\n3. 最终运行相应的脚本 - execa 工具\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// ni/src/runner.ts</span>\n<span class="token comment">// 源码有删减</span>\n<span class="token keyword">import</span> execa <span class="token keyword">from</span> <span class="token string">&#39;execa&#39;</span>\n<span class="token keyword">const</span> <span class="token constant">DEBUG_SIGN</span> <span class="token operator">=</span> <span class="token string">&#39;?&#39;</span>\n<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span>fn<span class="token operator">:</span> Runner<span class="token punctuation">,</span> args<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> options<span class="token operator">:</span> DetectOptions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 命令参数包含 问号? 则是调试模式，不执行脚本</span>\n  <span class="token keyword">const</span> debug <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token constant">DEBUG_SIGN</span><span class="token punctuation">)</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>debug<span class="token punctuation">)</span>\n    <span class="token comment">// 调试模式下，删除这个问号</span>\n    <span class="token function">remove</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> <span class="token constant">DEBUG_SIGN</span><span class="token punctuation">)</span>\n\n  <span class="token comment">// cwd 方法返回进程的当前目录（绝对路径）</span>\n  <span class="token keyword">let</span> cwd <span class="token operator">=</span> process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">let</span> command\n\n  <span class="token comment">// 支持指定 文件目录</span>\n  <span class="token comment">// ni -C packages/foo vite</span>\n  <span class="token comment">// nr -C playground dev</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;-C&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    cwd <span class="token operator">=</span> <span class="token function">resolve</span><span class="token punctuation">(</span>cwd<span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n    <span class="token comment">// 删掉这两个参数 -C packages/foo</span>\n    args<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 如果是全局安装，那么使用全局的包管理器</span>\n  <span class="token keyword">const</span> isGlobal <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;-g&#39;</span><span class="token punctuation">)</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>isGlobal<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    command <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token function">getGlobalAgent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> agent <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">detect</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>options<span class="token punctuation">,</span> cwd <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">getDefaultAgent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token comment">// 猜测使用哪个包管理器，如果没有发现锁文件，会返回 null，则调用 getDefaultAgent 函数，默认返回是让用户选择 prompt</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>agent <span class="token operator">===</span> <span class="token string">&#39;prompt&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      agent <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">prompts</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        name<span class="token operator">:</span> <span class="token string">&#39;agent&#39;</span><span class="token punctuation">,</span>\n        type<span class="token operator">:</span> <span class="token string">&#39;select&#39;</span><span class="token punctuation">,</span>\n        message<span class="token operator">:</span> <span class="token string">&#39;Choose the agent&#39;</span><span class="token punctuation">,</span>\n        choices<span class="token operator">:</span> agents<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>value <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> title<span class="token operator">:</span> value<span class="token punctuation">,</span> value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>agent\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>agent<span class="token punctuation">)</span>\n        <span class="token keyword">return</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 这里的 fn 是 传入解析代码的函数</span>\n    command <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fn</span><span class="token punctuation">(</span>agent <span class="token keyword">as</span> Agent<span class="token punctuation">,</span> args<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n      hasLock<span class="token operator">:</span> <span class="token function">Boolean</span><span class="token punctuation">(</span>agent<span class="token punctuation">)</span><span class="token punctuation">,</span>\n      cwd<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 如果没有命令，直接返回，上一个 runCli 函数报错，退出进程</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>command<span class="token punctuation">)</span>\n    <span class="token keyword">return</span>\n\n  <span class="token comment">// 如果是调试模式，那么直接打印出命令。调试非常有用。</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>debug<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// eslint-disable-next-line no-console</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span>\n    <span class="token keyword">return</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 最终用 execa 执行命令，比如 npm i</span>\n  <span class="token comment">// https://github.com/sindresorhus/execa</span>\n  <span class="token comment">// 介绍：Process execution for humans</span>\n\n  <span class="token keyword">await</span> execa<span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> <span class="token punctuation">{</span> stdio<span class="token operator">:</span> <span class="token string">&#39;inherit&#39;</span><span class="token punctuation">,</span> encoding<span class="token operator">:</span> <span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">,</span> cwd <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br></div></div><p>我们学习完主流程，接着来看两个重要的函数：<strong>detect</strong> 函数、<strong>parseNi</strong> 函数。根据入口我们可以知道。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token function">runCli</span><span class="token punctuation">(</span>parseNi<span class="token punctuation">)</span>\n\n<span class="token function">run</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>\n\n这里 fn 则是 parseNi\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="根据锁文件猜测用哪个包管理器-detect-函数" tabindex="-1"><a class="header-anchor" href="#根据锁文件猜测用哪个包管理器-detect-函数" aria-hidden="true">#</a> 根据锁文件猜测用哪个包管理器 - detect 函数</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>主要就做了三件事情\n\n1. 找到项目根路径下的锁文件。返回对应的包管理 `npm/yarn/pnpm`。\n2. 如果没找到，那就返回 `null`。\n3. 如果找到了，但是用户电脑没有这个命令，则询问用户是否自动安装。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// ni/src/agents.ts</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">LOCKS</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> Agent<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token string-property property">&#39;pnpm-lock.yaml&#39;</span><span class="token operator">:</span> <span class="token string">&#39;pnpm&#39;</span><span class="token punctuation">,</span>\n  <span class="token string-property property">&#39;yarn.lock&#39;</span><span class="token operator">:</span> <span class="token string">&#39;yarn&#39;</span><span class="token punctuation">,</span>\n  <span class="token string-property property">&#39;package-lock.json&#39;</span><span class="token operator">:</span> <span class="token string">&#39;npm&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// ni/src/detect.ts</span>\n<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">detect</span><span class="token punctuation">(</span><span class="token punctuation">{</span> autoInstall<span class="token punctuation">,</span> cwd <span class="token punctuation">}</span><span class="token operator">:</span> DetectOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">findUp</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token constant">LOCKS</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> cwd <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> agent <span class="token operator">=</span> <span class="token punctuation">(</span>result <span class="token operator">?</span> <span class="token constant">LOCKS</span><span class="token punctuation">[</span>path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>agent <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">cmdExists</span><span class="token punctuation">(</span>agent<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>autoInstall<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Detected </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>agent<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> but it doesn&#39;t seem to be installed.\\n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">CI</span><span class="token punctuation">)</span>\n        process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n\n      <span class="token keyword">const</span> link <span class="token operator">=</span> <span class="token function">terminalLink</span><span class="token punctuation">(</span>agent<span class="token punctuation">,</span> <span class="token constant">INSTALL_PAGE</span><span class="token punctuation">[</span>agent<span class="token punctuation">]</span><span class="token punctuation">)</span>\n      <span class="token keyword">const</span> <span class="token punctuation">{</span> tryInstall <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">prompts</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        name<span class="token operator">:</span> <span class="token string">&#39;tryInstall&#39;</span><span class="token punctuation">,</span>\n        type<span class="token operator">:</span> <span class="token string">&#39;confirm&#39;</span><span class="token punctuation">,</span>\n        message<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Would you like to globally install </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>link<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">?</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tryInstall<span class="token punctuation">)</span>\n        process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">await</span> execa<span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">npm i -g </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>agent<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span> stdio<span class="token operator">:</span> <span class="token string">&#39;inherit&#39;</span><span class="token punctuation">,</span> cwd <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> agent\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h2 id="抹平不同的包管理器的命令差异-parseni-函数" tabindex="-1"><a class="header-anchor" href="#抹平不同的包管理器的命令差异-parseni-函数" aria-hidden="true">#</a> 抹平不同的包管理器的命令差异 - parseNi 函数</h2><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// ni/src/commands.ts</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> parseNi <span class="token operator">=</span> <span class="token operator">&lt;</span>Runner<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">(</span>agent<span class="token punctuation">,</span> args<span class="token punctuation">,</span> ctx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ni -v 输出版本号</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;-v&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// eslint-disable-next-line no-console</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">@antfu/ni v</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>version<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n    process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> <span class="token function">getCommand</span><span class="token punctuation">(</span>agent<span class="token punctuation">,</span> <span class="token string">&#39;install&#39;</span><span class="token punctuation">)</span>\n  <span class="token comment">// 省略一些代码</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>通过 <strong>getCommand</strong> 获取命令。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// ni/src/agents.ts</span>\n<span class="token comment">// 有删减</span>\n<span class="token comment">// 一份配置，写个这三种包管理器中的命令。</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">AGENTS</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  npm<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token string-property property">&#39;install&#39;</span><span class="token operator">:</span> <span class="token string">&#39;npm i&#39;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  yarn<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token string-property property">&#39;install&#39;</span><span class="token operator">:</span> <span class="token string">&#39;yarn install&#39;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  pnpm<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token string-property property">&#39;install&#39;</span><span class="token operator">:</span> <span class="token string">&#39;pnpm i&#39;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// ni/src/commands.ts</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getCommand</span><span class="token punctuation">(</span>\n  agent<span class="token operator">:</span> Agent<span class="token punctuation">,</span>\n  command<span class="token operator">:</span> Command<span class="token punctuation">,</span>\n  args<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 包管理器不在 AGENTS 中则报错</span>\n  <span class="token comment">// 比如 npm 不在</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>agent <span class="token keyword">in</span> <span class="token constant">AGENTS</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Unsupported agent &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>agent<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n\n  <span class="token comment">// 获取命令 安装则对应 npm install</span>\n  <span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token constant">AGENTS</span><span class="token punctuation">[</span>agent<span class="token punctuation">]</span><span class="token punctuation">[</span>command<span class="token punctuation">]</span>\n\n  <span class="token comment">// 如果是函数，则执行函数。</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> c <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> <span class="token function">c</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>\n\n  <span class="token comment">// 命令 没找到，则报错</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>c<span class="token punctuation">)</span>\n    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Command &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>command<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; is not support by agent &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>agent<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n  <span class="token comment">// 最终拼接成命令字符串</span>\n  <span class="token keyword">return</span> c<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&#39;{0}&#39;</span><span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div>',16),F=(0,p.Uk)("得到相应的命令，比如是 "),S=(0,p._)("strong",null,"npm i",-1),G=(0,p.Uk)("，最终用这个工具 "),I={href:"https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fsindresorhus%2Fexeca",target:"_blank",rel:"noopener noreferrer"},D=(0,p.Uk)("execa"),L=(0,p.Uk)(" 执行最终得到的相应的脚本。"),T=(0,p.uE)('<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">await</span> execa<span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> <span class="token punctuation">{</span> stdio<span class="token operator">:</span> <span class="token string">&#39;inherit&#39;</span><span class="token punctuation">,</span> encoding<span class="token operator">:</span> <span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">,</span> cwd <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ul><li>我们看完源码，可以知道这个神器 <strong>ni</strong> 主要做了三件事</li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>1. 根据锁文件猜测用哪个包管理器 npm/yarn/pnpm - detect 函数\n2. 抹平不同的包管理器的命令差异 - parseNi 函数\n3. 最终运行相应的脚本 - execa 工具\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',4),z={},B=(0,a(3744).Z)(z,[["render",function(n,s){const a=(0,p.up)("ExternalLinkIcon");return(0,p.wg)(),(0,p.iD)(p.HY,null,[(0,p._)("div",t,[e,(0,p._)("p",null,[o,c,l,r,u,(0,p._)("a",i,[k,(0,p.Wm)(a)]),b,(0,p._)("a",m,[d,(0,p.Wm)(a)]),g]),y]),f,v,w,h,x,(0,p._)("ul",null,[(0,p._)("li",null,[q,j,_,C,U,(0,p._)("a",A,[N,(0,p.Wm)(a)])])]),E,(0,p._)("p",null,[F,S,G,(0,p._)("a",I,[D,(0,p.Wm)(a)]),L]),T],64)}]])}}]);