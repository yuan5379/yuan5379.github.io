"use strict";(self.webpackChunkdemo1=self.webpackChunkdemo1||[]).push([[380],{8458:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-394ce253",path:"/CICD/2023/20230105.html",title:"CICD入门教程，使用Github Action给自己的项目加上CICD",lang:"zh-CN",frontmatter:{title:"CICD入门教程，使用Github Action给自己的项目加上CICD",date:"2023-01-05T00:00:00.000Z",tags:["CICD"],categories:["CICD"]},excerpt:"",headers:[{level:2,title:"为什么选择Github Action",slug:"为什么选择github-action",children:[]},{level:2,title:"Github Action初学入门",slug:"github-action初学入门",children:[]},{level:2,title:"给一个项目添加CICD流程",slug:"给一个项目添加cicd流程",children:[{level:3,title:"添加CI流程",slug:"添加ci流程",children:[]},{level:3,title:"添加CD流程",slug:"添加cd流程",children:[]},{level:3,title:"添加状态徽章",slug:"添加状态徽章",children:[]}]}],git:{updatedTime:null,contributors:[]}}},9910:(n,s,a)=>{a.r(s),a.d(s,{default:()=>la});var t=a(6252);const p=(0,t.uE)('<div class="custom-container tip"><p class="custom-container-title">TIP</p><p>这是一篇属于面向前端的关于CICD和Github Action的入门文章，其旨在：</p><ol><li>入门掌握Github Action的用法</li><li>学习CI和CD的含义及其实现细节</li><li>基于Github Action展示如何给自己手上的项目添加CICD的流程</li></ol></div><h2 id="为什么选择github-action" tabindex="-1"><a class="header-anchor" href="#为什么选择github-action" aria-hidden="true">#</a> 为什么选择Github Action</h2><p><code>Github Action</code>在<strong>开源项目</strong>是免费使用的，而在<strong>私有项目</strong>方面的计费会根据你购买的服务而不同,<code>Github Action</code>对于其他的<strong>CICD 工具</strong>及其没被选为本文实现方式的原因如下所示：</p><ul><li><strong><code>Gitlab CI</code></strong>：与<code>Gitlab</code>高度绑定，项目放在<code>Gitlab</code>就谈不上开源了</li><li><strong><code>Travic CI</code></strong>：限时免费，过后按进程收费</li><li><strong><code>Drone CI</code></strong>：执行任务时，国内机器从<code>Github</code>拉取仓库代码时会偶尔超时，从而导致任务失败</li><li><strong><code>Jenkins CI</code></strong>：除了存在与<code>Drone CI</code>一样的缺点外，自身比较重量，占用宿主机较多资源</li></ul><h2 id="github-action初学入门" tabindex="-1"><a class="header-anchor" href="#github-action初学入门" aria-hidden="true">#</a> Github Action初学入门</h2><p>当我们想往自己的项目里接入<strong>Github Actions</strong>时，要在根项目目录里新建<code>.github/workflows</code>目录。然后通过编写<code>yml</code>格式文件定义<strong>Workflow(工作流程)去实现<code>CI</code>。在阅读<code>yml</code>文件之前，我们要先搞懂在Workflow</strong>中一些比较重要的概念：</p><ul><li><strong>Event(触发事件)</strong>：指触发 <strong>Workflow(工作流程)</strong> 运行的事件。</li><li><strong>Job(作业)</strong>：一个<strong>工作流程</strong>中包含一个或多个<strong>Job</strong>，这些<strong>Job</strong>默认情况下并行运行，但我们也可以通过设置让其按顺序执行。每个<strong>Job</strong>都在指定的环境(虚拟机或容器)里开启一个<strong>Runner</strong>(可以理解为一个进程)运行，包含多个<strong>Step(步骤)</strong>。</li><li><strong>Step(步骤)</strong>：<strong>Job</strong>的组成部分，用于定义每一部的工作内容。每个<strong>Step</strong>在运行器环境中以其单独的进程运行，且可以访问工作区和文件系统。</li></ul><p>以下图的<code>Workflow</code>作为例子，我们可以更直观地看懂<strong>Event</strong>、<strong>Job</strong>以及<strong>Step</strong>两者的关系：</p>',8),e=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"image.png",originSrc:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/27deef91333747ab8f7e09bd2649b5bb~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?",data:"aurora"})],-1),o=(0,t.Uk)("在"),c=(0,t._)("code",null,"Github Action",-1),l=(0,t.Uk)("中， "),u=(0,t._)("strong",null,"Job",-1),r=(0,t.Uk)(" 和 "),i=(0,t._)("strong",null,"Step",-1),k=(0,t.Uk)(" 以及 "),b=(0,t._)("strong",null,"Workflow",-1),m=(0,t.Uk)(" 都有资源占用以及时间限制，超出限制就会直接取消运行，关于这些限制可看"),g={href:"https://link.juejin.cn?target=https%3A%2F%2Fdocs.github.com%2Fcn%2Factions%2Flearn-github-actions%2Fusage-limits-billing-and-administration%23usage-limits",target:"_blank",rel:"noopener noreferrer"},d=(0,t.Uk)("Usage limits"),h=(0,t.Uk)("。"),f=(0,t.uE)('<p>下面我们用<code>Github</code>的官方教程中的一个<code>Workflow</code>例子来学习：</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token comment"># 指定工作流程的名称</span>\n<span class="token key atrule">name</span><span class="token punctuation">:</span> learn<span class="token punctuation">-</span>github<span class="token punctuation">-</span>actions\n<span class="token comment"># 指定此工作流程的触发事件Event。 此示例使用 推送 事件，即执行push后，触发该流水线的执行</span>\n<span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>push<span class="token punctuation">]</span>\n<span class="token comment"># 存放 learn-github-actions 工作流程中的所有Job</span>\n<span class="token key atrule">jobs</span><span class="token punctuation">:</span>\n  <span class="token comment"># 指定一个Job的名称为check-bats-version</span>\n  <span class="token key atrule">check-bats-version</span><span class="token punctuation">:</span>\n    <span class="token comment"># 指定该Job在最新版本的 Ubuntu Linux 的 Runner(运行器)上运行</span>\n    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest\n    <span class="token comment"># 存放 check-bats-version 作业中的所有Step</span>\n    <span class="token key atrule">steps</span><span class="token punctuation">:</span>\n      <span class="token comment"># step-no.1: 运行actions/checkout@v3操作，操作一般用uses来调用，</span>\n      <span class="token comment"># 一般用于处理一些复杂又频繁的操作例如拉取分支，安装插件</span>\n      <span class="token comment"># 此处 actions/checkout 操作是从仓库拉取代码到Runner里的操作</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v3\n      <span class="token comment"># step-no.2: actions/setup-node@v3 操作来安装指定版本的 Node.js，此处指定安装的版本为v14</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>node@v3\n        <span class="token key atrule">with</span><span class="token punctuation">:</span>\n          <span class="token key atrule">node-version</span><span class="token punctuation">:</span> <span class="token string">&quot;14&quot;</span>\n      <span class="token comment"># step-no.3: 运行命令行下载bats依赖到全局环境中</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">run</span><span class="token punctuation">:</span> npm install <span class="token punctuation">-</span>g bats\n      <span class="token comment"># step-no.4: 运行命令行查看bats依赖的版本</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">run</span><span class="token punctuation">:</span> bats <span class="token punctuation">-</span>v\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h2 id="给一个项目添加cicd流程" tabindex="-1"><a class="header-anchor" href="#给一个项目添加cicd流程" aria-hidden="true">#</a> 给一个项目添加CICD流程</h2><h3 id="添加ci流程" tabindex="-1"><a class="header-anchor" href="#添加ci流程" aria-hidden="true">#</a> 添加CI流程</h3><h4 id="ci的概念" tabindex="-1"><a class="header-anchor" href="#ci的概念" aria-hidden="true">#</a> CI的概念</h4><p><strong>CI</strong>的全称是<strong>Continuous Integration</strong>，直译为<strong>可持续集成</strong>，而普遍对其的解释是<strong>频繁地（一天多次）将代码集成到主干</strong>。对于这个解释我们要搞懂其中的两个概念：</p><ol><li><strong>主干</strong>：是指包含多个已上和即将上线的特性的分支。</li><li><strong>集成</strong>：是指把含新特性的分支合并(<code>merge</code>)到<strong>主干</strong>上的行为</li></ol><p>我们借<code>github flow</code>分支管理策略作为例子来更加深入了解<code>CI</code>及上面的两个概念：</p>',8),y=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"image.png",originSrc:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e231ae5101154085bcb13b18443c5e2d~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?",data:"aurora"})],-1),_=(0,t.uE)("<p><code>github flow</code>在开发新特性的运行模式如下所示：</p><ol><li>基于<code>master</code>创建新的分支<code>feature</code>进行开发。注意这需要保证<code>master</code>的代码和特性永远是最稳定的。</li><li>开发期间，定期提交更改(<code>commit and push change</code>)到远程仓库的<code>feature</code>分支</li><li>在编码以及自测完成后，通过创建<code>pull request</code>去对<code>master</code>发起合并<code>feature</code>的请求</li><li><code>pull request</code>在经过审核确认可行后合并到<code>master</code>分支</li><li>删除已合并的特性分支<code>feature</code></li></ol>",2),v=(0,t.Uk)("更多详细细节可看"),w={href:"https://link.juejin.cn?target=https%3A%2F%2Fdocs.github.com%2Fcn%2Fget-started%2Fquickstart%2Fgithub-flow",target:"_blank",rel:"noopener noreferrer"},j=(0,t.Uk)("GitHub flow"),U=(0,t.Uk)("。"),C=(0,t.uE)("<p>在<code>github Flow</code>模型中，<strong>主干</strong>指<code>master</code>分支，广义上是一个包含多个已上和即将上线的特性的分支；<strong>集成</strong>指的是在<code>pull request</code>通过后把特性分支<code>merge</code>合并到<strong>主干</strong>，也就是<code>master</code>分支上。</p>",1),q=(0,t.Uk)("阮一峰老师的"),F={href:"https://link.juejin.cn?target=https%3A%2F%2Fwww.ruanyifeng.com%2Fblog%2F2015%2F09%2Fcontinuous-integration.html",target:"_blank",rel:"noopener noreferrer"},x=(0,t.Uk)("持续集成是什么？"),z=(0,t.Uk)("里说到过："),E=(0,t.uE)('<blockquote><p>持续集成的目的，就是让产品可以快速迭代，同时还能保持高质量。它的核心措施是，代码集成到主干之前，必须通过自动化测试。只要有一个测试用例失败，就不能集成。</p></blockquote><p>而<code>github flow</code>模型<strong>保证高质量的核心措施</strong>是：在<strong>集成</strong>前通过<code>pull request</code>，从而触发审核（审核可以是一系列的自动化校验测试以及代码审核<strong>Code Review</strong>），在审核通过后再合并到<strong>主干</strong>，从而保证<strong>主干</strong>的稳定性。</p><p>下面我们就按照<code>github flow</code>模型的机制，在开头创建的项目上添加<code>CI</code>流程。</p><h4 id="在项目中实现ci" tabindex="-1"><a class="header-anchor" href="#在项目中实现ci" aria-hidden="true">#</a> 在项目中实现CI</h4><p>根据上面所说的<code>github flow</code>模型<strong>保证高质量的核心措施</strong>可知，我们要定义的执行<code>CI</code>的<strong>Workflow</strong>（下称<strong>CI Workflow</strong>）的<strong>Event</strong>是<code>master</code>分支的<code>pull request</code>事件。而<code>Job</code>和<code>Step</code>的话没具体说明，而我们可以把目前最普遍的 <strong>代码测试（Test）</strong> 和 <strong>代码扫描（Lint）</strong> 加入其中。</p><p>其实现思路是，首先要借助一些第三方插件，在<code>package.json</code>中的<code>scripts</code>定义可以执行<strong>代码测试（Test）**和**代码扫描（Lint）**的命令，然后在把这些命令行加到**CI Workflow</strong>的<strong>Step</strong>里。</p><p>具体流程图如下所示：</p>',7),D=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"image.png",originSrc:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8cd2441838274ff39f63af4fccb134a4~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?",data:"aurora"})],-1),I=(0,t._)("h4",{id:"代码扫描命令实现",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#代码扫描命令实现","aria-hidden":"true"},"#"),(0,t.Uk)(" 代码扫描命令实现")],-1),S=(0,t.Uk)("一般公司里都会通过类似"),A=(0,t._)("code",null,"Sonar",-1),W=(0,t.Uk)("这类代码质量管理插件来保证代码质量。不过我们也可以通过前端样式三剑侠："),R=(0,t._)("code",null,"eslint",-1),T=(0,t.Uk)("+"),G=(0,t._)("code",null,"prettier",-1),O=(0,t.Uk)("+"),H=(0,t._)("code",null,"stylelint",-1),N=(0,t.Uk)("来简单保证。这里我直接使用本人比较喜好和经常使用的"),J=(0,t._)("code",null,"umi",-1),P=(0,t.Uk)("的代码规范："),M={href:"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fumijs%2Ffabric",target:"_blank",rel:"noopener noreferrer"},$=(0,t._)("strong",null,"@umijs/fabric",-1),K=(0,t.Uk)("来规定三剑侠的规则了，使用方式如下所示："),B=(0,t.uE)('<p><strong>.eslintrc.js</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span>require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&quot;@umijs/fabric/dist/eslint&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><strong>.prettierrc.js</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> fabric <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;@umijs/fabric&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token operator">...</span>fabric<span class="token punctuation">.</span>prettier<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><strong>.stylelintrc.js</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> fabric <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;@umijs/fabric&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token operator">...</span>fabric<span class="token punctuation">.</span>stylelint<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>然后在<code>package.json</code>的<code>script</code>上加上对应的执行命令即可：</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vite&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;tsc &amp;&amp; vite build&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;preview&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vite preview&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;lint&quot;</span><span class="token operator">:</span> <span class="token string">&quot;npm run lint:js &amp;&amp; npm run lint:style &amp;&amp; npm run lint:prettier&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;lint:js&quot;</span><span class="token operator">:</span> <span class="token string">&quot;eslint --cache --ext .js,.jsx,.ts,.tsx ./src&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;lint:prettier&quot;</span><span class="token operator">:</span> <span class="token string">&quot;prettier --check \\&quot;src/**/*\\&quot; --end-of-line auto&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;lint:style&quot;</span><span class="token operator">:</span> <span class="token string">&quot;stylelint --fix &#39;src/**/*.{css,scss,less}&#39; --cache&quot;</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>这样子就完成了<strong>代码扫描</strong>部分了。通过<code>yarn run lint</code>执行后的效果如下所示：</p>',9),L=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"image.png",originSrc:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ed18411c0d2c41108d62ab0fd1716779~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?",data:"aurora"})],-1),V=(0,t.uE)('<h4 id="自动化测试命令实现" tabindex="-1"><a class="header-anchor" href="#自动化测试命令实现" aria-hidden="true">#</a> 自动化测试命令实现</h4><p>前端测试主要有<strong>单元测试（Unit Test）</strong>、<strong>集成测试（Integration Test）</strong>、<strong>UI 测试（UI Test）</strong>。由于项目里只有一个页面组件，且本章节的重点是实现<code>CI</code>而不是<strong>前端自动化测试</strong>，因此这里用<strong>单元测试</strong>来实现一下：</p><p>为了多写点测试用例给测试代码加点内容，我给页面对应组件<code>App.tsx</code>加了个<code>props</code>，代码如下所示：</p><p><strong>App.tsx</strong></p><div class="language-tsx ext-tsx line-numbers-mode"><pre class="language-tsx"><code><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> <span class="token constant">FC</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> logo <span class="token keyword">from</span> <span class="token string">&quot;./logo.svg&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">&quot;./App.css&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">Props</span> <span class="token punctuation">{</span>\n  value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> App<span class="token operator">:</span> <span class="token constant">FC</span><span class="token operator">&lt;</span>Props<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> value <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>App<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>App-header<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>logo<span class="token punctuation">}</span></span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>App-logo<span class="token punctuation">&quot;</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>logo<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Hello Vite + React!!!!!!!!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n          </span><span class="token punctuation">{</span><span class="token comment">/*\n            测试代码中需要获取的DOM元素用role属性标记，这里的role属性只会在测试代码中用到，\n            这样子就可以避免代码因需求改动时，因DOM属性改变导致测试不通过。有利于TDD（测试驱动开发）开发的进行\n          */</span><span class="token punctuation">}</span><span class="token plain-text">\n          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>\n            <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>button<span class="token punctuation">&quot;</span></span>\n            <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>button<span class="token punctuation">&quot;</span></span>\n            <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setCount</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> v <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>\n          <span class="token punctuation">&gt;</span></span><span class="token plain-text">\n            count is: </span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token plain-text">\n          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>props<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>value<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><p>这里采用<code>ts-jest</code>+<code>@testing-library</code>来编写测试代码（当然对于<code>React</code>还有别的选择，例如<code>ts-jest</code>+<code>enzyme</code>），测试代码如下所示：</p><p><strong>App.test.tsx</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> render<span class="token punctuation">,</span> screen<span class="token punctuation">,</span> fireEvent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@testing-library/react&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&quot;./App&quot;</span><span class="token punctuation">;</span>\n\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;props is avaliable&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">;</span>\n  <span class="token comment">// 为了多写点测试用例，我给App组件加了个prop</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App value<span class="token operator">=</span><span class="token punctuation">{</span>value<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">expect</span><span class="token punctuation">(</span>screen<span class="token punctuation">.</span><span class="token function">getByRole</span><span class="token punctuation">(</span><span class="token string">&quot;props&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveTextContent</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;click of button is avaliable&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App value<span class="token operator">=</span><span class="token string">&quot;123&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  fireEvent<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span>screen<span class="token punctuation">.</span><span class="token function">getByRole</span><span class="token punctuation">(</span><span class="token string">&quot;button&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">expect</span><span class="token punctuation">(</span>screen<span class="token punctuation">.</span><span class="token function">getByRole</span><span class="token punctuation">(</span><span class="token string">&quot;button&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveTextContent</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">count is: 1</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div>',8),Y=(0,t._)("code",null,"jest.config.js",-1),Z=(0,t.Uk)("的配置比较复杂，可以从"),Q={href:"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2FHitotsubashi%2Fcicd-study%2Fblob%2Fmain%2Fjest.config.js",target:"_blank",rel:"noopener noreferrer"},X=(0,t.Uk)("此处"),nn=(0,t.Uk)("查看。配置好后运行"),sn=(0,t._)("code",null,"yarn test",-1),an=(0,t.Uk)("后控制台输出如下所示："),tn=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"image.png",originSrc:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/916b1e12446b45f796f1cc376d635af1~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?",data:"aurora"})],-1),pn=(0,t.uE)('<h4 id="配置ci-workflow" tabindex="-1"><a class="header-anchor" href="#配置ci-workflow" aria-hidden="true">#</a> 配置<strong>CI Workflow</strong></h4><p>在项目根目录里的<code>.github/workflows</code>文件夹上新建<code>ci.yml</code>，代码如下所示：</p><p><strong>ci.yml</strong></p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">name</span><span class="token punctuation">:</span> CI\n<span class="token comment"># Event设置为main分支的pull request事件，</span>\n<span class="token comment"># 这里的main分支相当于master分支，github项目新建是把main设置为默认分支，我懒得改了所以就保持这样吧</span>\n<span class="token key atrule">on</span><span class="token punctuation">:</span>\n  <span class="token key atrule">pull_request</span><span class="token punctuation">:</span>\n    <span class="token key atrule">branches</span><span class="token punctuation">:</span> main\n<span class="token key atrule">jobs</span><span class="token punctuation">:</span>\n  <span class="token comment"># 只需要定义一个job并命名为CI</span>\n  <span class="token key atrule">CI</span><span class="token punctuation">:</span>\n    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest\n    <span class="token key atrule">steps</span><span class="token punctuation">:</span>\n      <span class="token comment"># 拉取项目代码</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Checkout repository\n        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v2\n      <span class="token comment"># 给当前环境下载node</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Use Node.js\n        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>node@v3\n        <span class="token key atrule">with</span><span class="token punctuation">:</span>\n          <span class="token key atrule">node-version</span><span class="token punctuation">:</span> <span class="token string">&quot;16.x&quot;</span>\n      <span class="token comment"># 检查缓存</span>\n      <span class="token comment"># 如果key命中缓存则直接将缓存的文件还原到 path 目录，从而减少流水线运行时间</span>\n      <span class="token comment"># 若 key 没命中缓存时，在当前Job成功完成时将自动创建一个新缓存</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Cache\n        <span class="token comment"># 缓存命中结果会存储在steps.[id].outputs.cache-hit里，该变量在继后的step中可读</span>\n        <span class="token key atrule">id</span><span class="token punctuation">:</span> cache<span class="token punctuation">-</span>dependencies\n        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/cache@v3\n        <span class="token key atrule">with</span><span class="token punctuation">:</span>\n          <span class="token comment"># 缓存文件目录的路径</span>\n          <span class="token key atrule">path</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">\n            **/node_modules</span>\n          <span class="token comment"># key中定义缓存标志位的生成方式。runner.OS指当前环境的系统。外加对yarn.lock内容生成哈希码作为key值，如果yarn.lock改变则代表依赖有变化。</span>\n          <span class="token comment"># 这里用yarn.lock而不是package.json是因为package.json中还有version和description之类的描述项目但和依赖无关的属性</span>\n          <span class="token key atrule">key</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span>runner.OS<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">-</span>$<span class="token punctuation">{</span><span class="token punctuation">{</span>hashFiles(&#39;<span class="token important">**/yarn.lock&#39;)</span><span class="token punctuation">}</span><span class="token punctuation">}</span>\n      <span class="token comment"># 安装依赖</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Installing Dependencies\n        <span class="token comment"># 如果缓存标志位没命中，则执行该step。否则就跳过该step</span>\n        <span class="token key atrule">if</span><span class="token punctuation">:</span> steps.cache<span class="token punctuation">-</span>dependencies.outputs.cache<span class="token punctuation">-</span>hit <span class="token tag">!=</span> &#39;true&#39;\n        <span class="token key atrule">run</span><span class="token punctuation">:</span> yarn install\n      <span class="token comment"># 运行代码扫描</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Running Lint\n        <span class="token comment"># 通过前面章节定义的命令行执行代码扫描</span>\n        <span class="token key atrule">run</span><span class="token punctuation">:</span> yarn lint\n      <span class="token comment"># 运行自动化测试</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Running Test\n        <span class="token comment"># 通过前面章节定义的命令行执行自动化测试</span>\n        <span class="token key atrule">run</span><span class="token punctuation">:</span> yarn test\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br></div></div>',4),en=(0,t.Uk)("关于上面的"),on=(0,t._)("code",null,"Cahe",-1),cn=(0,t.Uk)("步骤中，7 天内未被访问的任何缓存条目将会被删除。 可以存储的缓存数没有限制，但存储库中所有缓存的总大小限制为 10 GB。更多内容请看"),ln={href:"https://link.juejin.cn?target=https%3A%2F%2Fdocs.github.com%2Fcn%2Factions%2Fusing-workflows%2Fcaching-dependencies-to-speed-up-workflows",target:"_blank",rel:"noopener noreferrer"},un=(0,t.Uk)("缓存依赖项以加快工作流程"),rn=(0,t.Uk)("。"),kn=(0,t._)("hr",null,null,-1),bn=(0,t._)("p",null,[(0,t.Uk)("当创建"),(0,t._)("code",null,"pull request"),(0,t.Uk)("合并到主干时，"),(0,t._)("strong",null,"CI Workflow"),(0,t.Uk)("触发运行，此时可以看到下面的情况：")],-1),mn=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"image.png",originSrc:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/da87fc3688394d11a1be7391721250e1~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?",data:"aurora"})],-1),gn=(0,t._)("p",null,[(0,t.Uk)("当"),(0,t._)("strong",null,"CI Workflow"),(0,t.Uk)("运行完成时，其效果如下所示：")],-1),dn=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"image.png",originSrc:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9f59410d312a4dc8aa517701f98a94b7~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?",data:"aurora"})],-1),hn=(0,t._)("p",null,[(0,t.Uk)("我们可以通过点击"),(0,t._)("code",null,"Details"),(0,t.Uk)("查看执行详细信息，如下所示：")],-1),fn=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"image.png",originSrc:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0a907606f73e4894a13fc72d4f9bb731~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?",data:"aurora"})],-1),yn=(0,t._)("p",null,[(0,t.Uk)("也可以点开每个"),(0,t._)("code",null,"step"),(0,t.Uk)("查看控制台输出信息：")],-1),_n=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"image.png",originSrc:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/69118f7b049d4ec0ba3746493be1a653~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?",data:"aurora"})],-1),vn=(0,t.uE)("<p>确认代码安全可靠后就可以点击<code>Merge pull request</code>来把新代码<strong>集成</strong>到<strong>主干</strong>上。从而基于<code>CI</code>完成一次<strong>bug 修复</strong>或<strong>新特性迭代</strong>。</p>",1),wn=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"image.png",originSrc:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dcecb9fa1df148f291d0ce40fe88a5f6~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?",data:"aurora"})],-1),jn=(0,t.uE)('<p>合并成功后，可以点击<code>Delete branch</code>以删除已合并的特性分支。</p><h4 id="补充" tabindex="-1"><a class="header-anchor" href="#补充" aria-hidden="true">#</a> 补充</h4><p>部分<code>DevOps</code>平台中的<code>CI</code>流程比上面我们实现的流程里多一个阶段：<strong>编译并整理产物</strong>，即基于当前版本的代码打包构建产物。在这篇文章中我把这个阶段放在<code>CD</code>流程里。</p><h3 id="添加cd流程" tabindex="-1"><a class="header-anchor" href="#添加cd流程" aria-hidden="true">#</a> 添加CD流程</h3><h4 id="cd的概念" tabindex="-1"><a class="header-anchor" href="#cd的概念" aria-hidden="true">#</a> CD的概念</h4>',5),Un=(0,t._)("code",null,"CD",-1),Cn=(0,t.Uk)("指的是 "),qn=(0,t._)("strong",null,"持续交付（Continuous delivery）",-1),Fn=(0,t.Uk)(" 或者 "),xn=(0,t._)("strong",null,"持续部署（continuous deployment）",-1),zn=(0,t.Uk)(" 或者是两者的并集，我们借用"),En={href:"https://link.juejin.cn?target=https%3A%2F%2Faws.amazon.com%2Fcn%2Fdevops%2Fcontinuous-delivery%2F",target:"_blank",rel:"noopener noreferrer"},Dn=(0,t.Uk)("AWS 中对持续交付说明"),In=(0,t.Uk)("来说明下这两者的解释，如下："),Sn=(0,t._)("blockquote",null,[(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"image.png",originSrc:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/539a9328755340e69a1fa5d50abd3bb5~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?",data:"aurora"}),(0,t.Uk)(" 采用持续交付时，系统会构建并测试每一个代码变更，然后将其推送到非生产测试环境或临时环境中。生产部署前可能存在多个并行测试阶段。"),(0,t._)("strong",null,"持续交付与持续部署之间的区别在于，需要手动批准才能更新到生产环境。对于持续部署，生产会在没有明确批准的情况下自动发生。")])],-1),An=(0,t.uE)("<p>从上面的解释中可知其有三个步骤：</p><ol><li>生成制品</li><li>自动部署到测试环境以校验其稳定性</li><li>部署到生产环境（自动的是<strong>持续部署</strong>，手动的是<strong>持续交付</strong>）</li></ol><p>基于本文是以入门为主，且很多读者也就只有一个服务器来直接部署自己的小项目，因此本章节的<code>CD</code>实现中，我们以<strong>持续部署（continuous deployment）</strong> 且跳过上面第二步来实现，也就是生成制品后直接自动部署到生产环境。</p><hr>",4),Wn=(0,t.Uk)("其实对于"),Rn=(0,t._)("strong",null,"持续交付（Continuous delivery）",-1),Tn=(0,t.Uk)(" 和 "),Gn=(0,t._)("strong",null,"持续部署（continuous deployment）",-1),On=(0,t.Uk)(" ，不同"),Hn=(0,t._)("code",null,"DevOps",-1),Nn=(0,t.Uk)("平台有不同的解释，而不同的企业和项目也有不同的实现方式。但本质上不会有太大区别，而我们也没必要去花时间咬文嚼字，借用"),Jn=(0,t._)("strong",null,"Red Hat",-1),Pn=(0,t.Uk)("对"),Mn={href:"https://link.juejin.cn?target=https%3A%2F%2Fwww.redhat.com%2Fzh%2Ftopics%2Fdevops%2Fwhat-is-ci-cd",target:"_blank",rel:"noopener noreferrer"},$n=(0,t._)("strong",null,"CICD",-1),Kn=(0,t.Uk)("说明 "),Bn=(0,t.Uk)("里的一句话总结，如下："),Ln=(0,t._)("blockquote",null,[(0,t._)("p",null,'CI/CD 既可能仅指持续集成和持续交付构成的关联环节，也可以指持续集成、持续交付和持续部署这三项构成的关联环节。更为复杂的是，有时"持续交付"也包含了持续部署流程。'),(0,t._)("p",null,"归根结底，我们没必要纠结于这些语义，您只需记得 CI/CD 其实就是一个流程（通常形象地表述为管道），用于实现应用开发中的高度持续自动化和持续监控。因案例而异，该术语的具体含义取决于 CI/CD 管道的自动化程度。许多企业最开始先添加 CI，然后逐步实现交付和部署的自动化（例如作为云原生应用的一部分）。")],-1),Vn=(0,t._)("h4",{id:"在项目中实现cd",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#在项目中实现cd","aria-hidden":"true"},"#"),(0,t.Uk)(" 在项目中实现CD")],-1),Yn=(0,t._)("p",null,[(0,t.Uk)("这是我们在本章节要实现的"),(0,t._)("code",null,"CD"),(0,t.Uk)("机制的流程图：")],-1),Zn=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"image.png",originSrc:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/34de1e458c6e4f5f9429ca6251272a77~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?",data:"aurora"})],-1),Qn=(0,t.uE)('<h4 id="先前准备" tabindex="-1"><a class="header-anchor" href="#先前准备" aria-hidden="true">#</a> 先前准备</h4><p>在编写<strong>CD Workflow</strong>前，我们要准备以下东西：</p><ol><li>内置<code>nginx</code>的服务器一台：用于部署制品</li><li>服务器的密钥对：用于提供给流水线通过 ssh 免密登录到服务器进行部署</li><li><code>Github</code>里的<strong>Personal Access Token</strong>：用于提供给流水线免密登录<code>github</code>账号进行发布制品的操作</li><li>把步骤 2 和步骤 3 及其他关于机器的信息都放在对应仓库的<strong>Secret</strong>里</li></ol><p>下面对上述需要准备的东西逐一讲解：</p>',4),Xn=(0,t.uE)('<li><p><strong>准备一台服务器，在里面启动<code>nginx</code>服务。</strong></p><p>读者可以直接通过<code>apt</code>下载<code>nginx</code>到指定目录后启动。我个人习惯以<code>docker</code>启动容器以开启<code>nginx</code>服务。因此我直接通过下面的<code>docker-compose.yml</code>去创建启动<code>nginx</code>容器：</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token comment"># 指定docker-compose解析的版本</span>\n<span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&quot;3&quot;</span>\n<span class="token key atrule">services</span><span class="token punctuation">:</span>\n  <span class="token key atrule">pure-nginx</span><span class="token punctuation">:</span>\n    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>latest\n    <span class="token comment"># 指定容器名</span>\n    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> pure<span class="token punctuation">-</span>nginx\n    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always\n    <span class="token comment"># 指定持久卷，格式为 宿主机目录路径:容器目录路径</span>\n    <span class="token comment"># CD Workflow会通过密钥登录该服务器，然后把生成的制品放在/data/www里，在此之后直接访问宿主机的ip即可访问到项目页面</span>\n    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> /data/www<span class="token punctuation">:</span>/usr/share/nginx/html\n    <span class="token key atrule">ports</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> <span class="token datetime number">80:80</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div></li>',1),ns=(0,t._)("p",null,[(0,t._)("strong",null,"创建服务器的密钥对：用于提供给流水线通过 ssh 免密登录到服务器进行部署")],-1),ss=(0,t.Uk)("每个平台都有创建密钥的教程，例如我的机器是腾讯云的，因此参考"),as={href:"https://link.juejin.cn?target=https%3A%2F%2Fcloud.tencent.com%2Fdocument%2Fproduct%2F1207%2F44573",target:"_blank",rel:"noopener noreferrer"},ts=(0,t.Uk)("这篇文章"),ps=(0,t.Uk)("去创建密钥，密钥分公钥和私钥。公钥存放在服务器上，私钥我们自己下载保存。在配置"),es=(0,t._)("code",null,"CD Workflow",-1),os=(0,t.Uk)("的免密登录机器的"),cs=(0,t._)("strong",null,"步骤 step",-1),ls=(0,t.Uk)("之前，大家也可以参考这篇文章"),us={href:"https://link.juejin.cn?target=https%3A%2F%2Fcloud.tencent.com%2Fdocument%2Fproduct%2F1207%2F44643",target:"_blank",rel:"noopener noreferrer"},rs=(0,t.Uk)("使用密钥登录"),is=(0,t.Uk)("，使用"),ks=(0,t._)("code",null,"VSCode",-1),bs=(0,t.Uk)("中的"),ms={href:"https://link.juejin.cn?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dms-vscode-remote.remote-ssh",target:"_blank",rel:"noopener noreferrer"},gs=(0,t.Uk)("Remote - SSH"),ds=(0,t.Uk)("通过配置私钥尝试是否可以免密登录机器，如果成功后就可以放心交给流水线去登录。"),hs=(0,t._)("p",null,[(0,t._)("strong",null,[(0,t.Uk)("创建"),(0,t._)("code",null,"Github"),(0,t.Uk)("里的 Personal Access Token ：用于提供给流水线免密登录"),(0,t._)("code",null,"github"),(0,t.Uk)("账号进行发布制品的操作")])],-1),fs=(0,t.Uk)("参考"),ys=(0,t._)("code",null,"Github",-1),_s=(0,t.Uk)("官方文档"),vs={href:"https://link.juejin.cn?target=https%3A%2F%2Fdocs.github.com%2Fcn%2Fauthentication%2Fkeeping-your-account-and-data-secure%2Fcreating-a-personal-access-token",target:"_blank",rel:"noopener noreferrer"},ws=(0,t.Uk)("Creating a personal access token"),js=(0,t.Uk)("创建"),Us=(0,t._)("strong",null,"Personal Access Token",-1),Cs=(0,t.Uk)("。"),qs=(0,t._)("p",null,[(0,t.Uk)("在上述文档里的第 8 步 "),(0,t._)("strong",null,"Select scopes"),(0,t.Uk)(" 时直接点击"),(0,t._)("code",null,"repo"),(0,t.Uk)("即可，其余的可不选，如下所示：")],-1),Fs=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"image.png",originSrc:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/64beb416e2ef41beb21ea45994ff9dcc~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?",data:"aurora"})],-1),xs=(0,t._)("li",null,[(0,t._)("p",null,[(0,t._)("strong",null,[(0,t.Uk)("把步骤 2 和步骤 3 及其他关于机器的信息都放在"),(0,t._)("code",null,"github"),(0,t.Uk)("仓库的 Secret 里")])]),(0,t._)("p",null,[(0,t._)("strong",null,"Secret"),(0,t.Uk)("是一些相对机密重要的信息，这些信息在 "),(0,t._)("strong",null,"Workflow"),(0,t.Uk)(" 里面需要用到，但又不能以明文的形式直接写在文件里以免泄露。此时我们可以放在"),(0,t._)("strong",null,"Secret"),(0,t.Uk)("里，在 "),(0,t._)("strong",null,"Workflow"),(0,t.Uk)(" 运行时这些"),(0,t._)("strong",null,"Secret"),(0,t.Uk)("会以环境变量的形式注入到"),(0,t._)("code",null,"Runner"),(0,t.Uk)("里")]),(0,t._)("p",null,[(0,t.Uk)("在如图所示的页面下点击右上角的"),(0,t._)("code",null,"New repository secret"),(0,t.Uk)("去创建"),(0,t._)("code",null,"secret"),(0,t.Uk)("，在接下来要创建的"),(0,t._)("code",null,"CD Workflow"),(0,t.Uk)("中需要用到如图红字标记所示的四个"),(0,t._)("strong",null,"Secret"),(0,t.Uk)("。")]),(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"image.png",originSrc:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bc7dfad31cd2485490a1170dd9548701~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?",data:"aurora"})])],-1),zs=(0,t.uE)('<h4 id="配置cd-workflow" tabindex="-1"><a class="header-anchor" href="#配置cd-workflow" aria-hidden="true">#</a> 配置<strong>CD Workflow</strong></h4><p>这里我们把执行<code>CD</code>的<strong>Workflow</strong>（下称<strong>CD Workflow</strong>）的<strong>Event</strong>定义为<code>master</code>分支的<code>push</code>事件，因为<strong>CD Workflow</strong>的执行是在<code>Merge pull request</code>完成后的，而合并行为会触发<strong>主干</strong>的<code>push</code>事件。</p><p>接下来在<code>.github/workflows</code>里新建<code>cd.yml</code>来定义<strong>CD Workflow</strong>，代码如下所示：</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">name</span><span class="token punctuation">:</span> CD\n<span class="token key atrule">on</span><span class="token punctuation">:</span>\n  <span class="token comment"># 以主干的push事件作为触发条件</span>\n  <span class="token key atrule">push</span><span class="token punctuation">:</span>\n    <span class="token key atrule">branches</span><span class="token punctuation">:</span> main\n<span class="token key atrule">jobs</span><span class="token punctuation">:</span>\n  <span class="token key atrule">CD</span><span class="token punctuation">:</span>\n    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest\n    <span class="token key atrule">steps</span><span class="token punctuation">:</span>\n      <span class="token comment"># 拉取代码</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Checkout repository\n        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v2\n      <span class="token comment"># 下载Node</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Use Node.js\n        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>node@v3\n        <span class="token key atrule">with</span><span class="token punctuation">:</span>\n          <span class="token key atrule">node-version</span><span class="token punctuation">:</span> <span class="token string">&quot;16.x&quot;</span>\n      <span class="token comment"># 添加缓存，逻辑和CI Workflow里的一样</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Cache\n        <span class="token key atrule">id</span><span class="token punctuation">:</span> cache<span class="token punctuation">-</span>dependencies\n        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/cache@v3\n        <span class="token key atrule">with</span><span class="token punctuation">:</span>\n          <span class="token key atrule">path</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">\n            **/node_modules</span>\n          <span class="token key atrule">key</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span>runner.OS<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">-</span>$<span class="token punctuation">{</span><span class="token punctuation">{</span>hashFiles(&#39;<span class="token important">**/yarn.lock&#39;)</span><span class="token punctuation">}</span><span class="token punctuation">}</span>\n      <span class="token comment"># 安装依赖。命中缓存则跳过此步</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Installing Dependencies\n        <span class="token key atrule">if</span><span class="token punctuation">:</span> steps.cache<span class="token punctuation">-</span>dependencies.outputs.cache<span class="token punctuation">-</span>hit <span class="token tag">!=</span> &#39;true&#39;\n        <span class="token key atrule">run</span><span class="token punctuation">:</span> yarn install\n      <span class="token comment"># 从package.json里获取version属性的值</span>\n      <span class="token comment"># 在CD Workflow中会给每个生成的制品打上标签，而标签取值于version值</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Read Version\n        <span class="token comment"># 读取出来的值会放在steps.[id].outputs.value供其他步骤step读取</span>\n        <span class="token key atrule">id</span><span class="token punctuation">:</span> version\n        <span class="token key atrule">uses</span><span class="token punctuation">:</span> ashley<span class="token punctuation">-</span>taylor/read<span class="token punctuation">-</span>json<span class="token punctuation">-</span>property<span class="token punctuation">-</span>action@v1.0\n        <span class="token key atrule">with</span><span class="token punctuation">:</span>\n          <span class="token key atrule">path</span><span class="token punctuation">:</span> ./package.json\n          <span class="token key atrule">property</span><span class="token punctuation">:</span> version\n      <span class="token comment"># 打包生成制品，且把制品压缩到assets.zip压缩包里</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Building\n        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">\n          yarn build\n          zip -r assets ./dist/**</span>\n      <span class="token comment"># 基于当前commit进行版本发布(Create a release)，tag_name是v前缀加上package.json的version值</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Create GitHub Release\n        <span class="token comment"># 此步骤中，版本发布后会返回对应的url，以供下面上传制品的步骤中读取使用</span>\n        <span class="token key atrule">id</span><span class="token punctuation">:</span> create_release\n        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/create<span class="token punctuation">-</span>release@v1\n        <span class="token key atrule">env</span><span class="token punctuation">:</span>\n          <span class="token comment"># GITHUB_TOKEN是准备工作步骤三申请的Personal Access Token</span>\n          <span class="token key atrule">GITHUB_TOKEN</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.PROJECT_ACCESS_TOKEN <span class="token punctuation">}</span><span class="token punctuation">}</span>\n        <span class="token key atrule">with</span><span class="token punctuation">:</span>\n          <span class="token key atrule">tag_name</span><span class="token punctuation">:</span> v$<span class="token punctuation">{</span><span class="token punctuation">{</span>steps.version.outputs.value<span class="token punctuation">}</span><span class="token punctuation">}</span>\n          <span class="token key atrule">release_name</span><span class="token punctuation">:</span> v$<span class="token punctuation">{</span><span class="token punctuation">{</span>steps.version.outputs.value<span class="token punctuation">}</span><span class="token punctuation">}</span>\n          <span class="token key atrule">draft</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>\n          <span class="token key atrule">prerelease</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>\n      <span class="token comment"># 把assets.zip上传到仓库对应的发布版本Release上</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Update Release Asset\n        <span class="token key atrule">id</span><span class="token punctuation">:</span> upload<span class="token punctuation">-</span>release<span class="token punctuation">-</span>asset\n        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/upload<span class="token punctuation">-</span>release<span class="token punctuation">-</span>asset@v1\n        <span class="token key atrule">env</span><span class="token punctuation">:</span>\n          <span class="token key atrule">GITHUB_TOKEN</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.PROJECT_ACCESS_TOKEN <span class="token punctuation">}</span><span class="token punctuation">}</span>\n        <span class="token key atrule">with</span><span class="token punctuation">:</span>\n          <span class="token key atrule">upload_url</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> steps.create_release.outputs.upload_url <span class="token punctuation">}</span><span class="token punctuation">}</span>\n          <span class="token key atrule">asset_path</span><span class="token punctuation">:</span> ./assets.zip\n          <span class="token key atrule">asset_name</span><span class="token punctuation">:</span> assets.zip\n          <span class="token key atrule">asset_content_type</span><span class="token punctuation">:</span> application/zip\n      <span class="token comment"># 把制品上传到部署机器</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Upload to Deploy Server\n        <span class="token key atrule">uses</span><span class="token punctuation">:</span> easingthemes/ssh<span class="token punctuation">-</span>deploy@v2.0.7\n        <span class="token key atrule">env</span><span class="token punctuation">:</span>\n          <span class="token comment"># SSH_PRIVATE_KEY为准备工作步骤三中生成密钥对里的私钥</span>\n          <span class="token key atrule">SSH_PRIVATE_KEY</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.DEPLOY_TOKEN <span class="token punctuation">}</span><span class="token punctuation">}</span>\n          <span class="token comment"># 指定当前目录中要上传的内容</span>\n          <span class="token key atrule">SOURCE</span><span class="token punctuation">:</span> <span class="token string">&quot;dist/&quot;</span>\n          <span class="token comment"># 指定上传到部署机器的哪个目录下</span>\n          <span class="token key atrule">TARGET</span><span class="token punctuation">:</span> <span class="token string">&quot;/data/www&quot;</span>\n          <span class="token comment"># 上传前指令，此处用于清空TARGET下的文件</span>\n          <span class="token key atrule">ARGS</span><span class="token punctuation">:</span> <span class="token string">&quot;-avzr --delete&quot;</span>\n          <span class="token comment"># REMOTE_HOST为机器的公网IP</span>\n          <span class="token key atrule">REMOTE_HOST</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.REMOTE_HOST <span class="token punctuation">}</span><span class="token punctuation">}</span>\n          <span class="token comment"># REMOTE_USER为登录机器时用到账号名</span>\n          <span class="token key atrule">REMOTE_USER</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span>secrets.REMOTE_USER<span class="token punctuation">}</span><span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br></div></div><p>这样子就完成了<strong>CD Workflow</strong>的流程了，运行效果如下所示：</p>',5),Es=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"image.png",originSrc:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a9aa0c1c9e3b48fba193017b9de0898f~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?",data:"aurora"})],-1),Ds=(0,t._)("p",null,[(0,t.Uk)("在"),(0,t._)("strong",null,"CD Workflow"),(0,t.Uk)("运行完成后，可以输入自己机器的公网 IP 查看部署的项目。"),(0,t._)("strong",null,"注意：每次提 pr 时要确保 package.json 中的 version 值有变化，不然 CD Workflow 会在 Create GitHub Release 的步骤里报已存在 Tag 的错误。")],-1),Is=(0,t._)("p",null,[(0,t._)("strong",null,"关于 CD Workflow 细节补充：")],-1),Ss=(0,t._)("p",null,[(0,t._)("em",null,[(0,t.Uk)("为什么要获取"),(0,t._)("code",null,"package.json"),(0,t.Uk)("中"),(0,t._)("code",null,"version"),(0,t.Uk)("值，有什么作用?")])],-1),As=(0,t._)("p",null,[(0,t._)("code",null,"version"),(0,t.Uk)("值在"),(0,t._)("strong",null,"CD Workflow"),(0,t.Uk)("主要用于版本发布，此过程需要填写指定的"),(0,t._)("code",null,"tag_name"),(0,t.Uk)("。发布的版本如下所示：")],-1),Ws=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"image.png",originSrc:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6b2f57ce89f64881be4635e41ce2a9f1~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?",data:"aurora"})],-1),Rs=(0,t._)("p",null,"点进去后可以看到当前项目的所有版本，如下所示：",-1),Ts=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"image.png",originSrc:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/62b357bd98724867946a81b3a45ab151~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?",data:"aurora"})],-1),Gs=(0,t.Uk)("我们也可以在通过"),Os={href:"https://link.juejin.cn?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dmhutchie.git-graph",target:"_blank",rel:"noopener noreferrer"},Hs=(0,t.Uk)("VSCode GitGraph 插件"),Ns=(0,t.Uk)("来看到自己发布的版本标签（commit 写的有点随便，不要介意），如下所示："),Js=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"image.png",originSrc:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/97aa18a6e64045ed9d1246bf5798db92~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?",data:"aurora"})],-1),Ps=(0,t._)("p",null,[(0,t.Uk)("在每次"),(0,t._)("strong",null,"主干"),(0,t.Uk)("更新后进行版本发布不仅符合开源项目的更新流程，而且利于我们之后部署特定"),(0,t._)("strong",null,"发布版本"),(0,t.Uk)("的制品（可看下面"),(0,t._)("strong",null,"深入章节的回滚流程"),(0,t.Uk)("）。")],-1),Ms=(0,t.uE)("<li><p>为什么要有 <strong>Update Release Asset</strong> 这个步骤？</p><p>首先，把制品放在对应的<strong>发布版本</strong>上是很常见的开源行为，读者也可以把制品下载下来放到<code>nginx</code>直接查看页面效果。其次也是很重要的，是为了<strong>回滚（下面深入篇会写回滚机制的实现）**的实现，回滚需要快速获取前一个**发布版本</strong>的制品覆盖到部署机器上。因此需要我们把每个制品都存放在对应的<strong>发布版本</strong>以实现持久化。</p></li>",1),$s=(0,t.Uk)("为什么 "),Ks=(0,t._)("strong",null,"Update Release Asset(上传制品)",-1),Bs=(0,t.Uk)(" 阶段不使用"),Ls={href:"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Factions%2Fupload-artifact",target:"_blank",rel:"noopener noreferrer"},Vs=(0,t._)("code",null,"actions/upload-artifact",-1),Ys=(0,t.Uk)("："),Zs=(0,t.uE)("<p>首先在<strong>Release</strong>中上传制品是很多开源项目中常见的操作，其次<code>actions/upload-artifact</code>中存在两个缺点：</p><ol><li>上传的制品只能供同一个<code>Workflow</code>的不同<code>Job</code>中使用。换言之，不同<code>Workflow</code>是不能使用这个制品的，这样子我们就不利于我们在不同的流程去调用这个制品。例如<strong>回滚（下面深入篇会写回滚机制的实现）</strong>，在当前部署机器上的项目存在问题时，我们可以通过回滚迅速把前一个稳定的版本的制品覆盖到部署机器上。</li><li>上传的制品最多只存在 90 天，不能做到持久化。</li></ol><p>因此这里没选择<code>actions/upload-artifact</code>。</p>",3),Qs=(0,t._)("h3",{id:"添加状态徽章",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#添加状态徽章","aria-hidden":"true"},"#"),(0,t.Uk)(" 添加状态徽章")],-1),Xs=(0,t._)("p",null,[(0,t._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"image.png",originSrc:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1c002a4f5f8946d7a77a2eac0721475f~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?",data:"aurora"})],-1),na=(0,t.uE)('<p>我们可以在项目的<code>README.md</code>中加了<code>CI</code>和<code>CD</code>两个状态徽章来代表这个项目已成功实现了<code>CI</code>和<code>CD</code>的流程，如上图所示。这两个状态徽章是根据你指定的<strong>Workflow</strong>的名称和最近一次运行的结果动态变化的。如果对应的流水线并没有运行记录，则效果如图上的<code>E2E-Test</code>状态徽章所示。</p><p>徽章可以直接以下面的格式来插入到自己的<code>README.md</code>上：</p><div class="language-markdown ext-md line-numbers-mode"><pre class="language-markdown"><code><span class="token url"><span class="token operator">!</span>[<span class="token content">example workflow</span>](<span class="token url">https://github.com/&lt;OWNER&gt;/&lt;REPOSITORY&gt;/actions/workflows/&lt;WORKFLOW_FILE&gt;/badge.svg</span>)</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>例如我的<code>CI</code>和<code>CD</code>徽章分别如下所示：</p><div class="language-markdown ext-md line-numbers-mode"><pre class="language-markdown"><code><span class="token url"><span class="token operator">!</span>[<span class="token content">CI</span>](<span class="token url">https://github.com/Hitotsubashi/cicd-study/actions/workflows/ci.yml/badge.svg</span>)</span>\n\n<span class="token url"><span class="token operator">!</span>[<span class="token content">CD</span>](<span class="token url">https://github.com/Hitotsubashi/cicd-study/actions/workflows/cd.yml/badge.svg</span>)</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',5),sa=(0,t.Uk)("关于更多有关工作流程状态徽章的可看官方文档"),aa={href:"https://link.juejin.cn?target=https%3A%2F%2Fdocs.github.com%2Fcn%2Factions%2Fmonitoring-and-troubleshooting-workflows%2Fadding-a-workflow-status-badge",target:"_blank",rel:"noopener noreferrer"},ta=(0,t.Uk)("添加工作流程状态徽章"),pa=(0,t.Uk)("文章转载于"),ea={href:"https://juejin.cn/post/7113562222852309023",target:"_blank",rel:"noopener noreferrer"},oa=(0,t.Uk)("掘金"),ca={},la=(0,a(3744).Z)(ca,[["render",function(n,s){const a=(0,t.up)("ExternalLinkIcon");return(0,t.wg)(),(0,t.iD)(t.HY,null,[p,e,(0,t._)("p",null,[(0,t._)("em",null,[o,c,l,u,r,i,k,b,m,(0,t._)("a",g,[d,(0,t.Wm)(a)]),h])]),f,y,_,(0,t._)("p",null,[v,(0,t._)("a",w,[j,(0,t.Wm)(a)]),U]),C,(0,t._)("p",null,[q,(0,t._)("a",F,[x,(0,t.Wm)(a)]),z]),E,D,I,(0,t._)("p",null,[S,A,W,R,T,G,O,H,N,J,P,(0,t._)("a",M,[$,(0,t.Wm)(a)]),K]),B,L,V,(0,t._)("p",null,[Y,Z,(0,t._)("a",Q,[X,(0,t.Wm)(a)]),nn,sn,an]),tn,pn,(0,t._)("p",null,[en,on,cn,(0,t._)("a",ln,[un,(0,t.Wm)(a)]),rn]),kn,bn,mn,gn,dn,hn,fn,yn,_n,vn,wn,jn,(0,t._)("p",null,[Un,Cn,qn,Fn,xn,zn,(0,t._)("a",En,[Dn,(0,t.Wm)(a)]),In]),Sn,An,(0,t._)("p",null,[Wn,Rn,Tn,Gn,On,Hn,Nn,Jn,Pn,(0,t._)("a",Mn,[$n,Kn,(0,t.Wm)(a)]),Bn]),Ln,Vn,Yn,Zn,Qn,(0,t._)("ol",null,[Xn,(0,t._)("li",null,[ns,(0,t._)("p",null,[ss,(0,t._)("a",as,[ts,(0,t.Wm)(a)]),ps,es,os,cs,ls,(0,t._)("a",us,[rs,(0,t.Wm)(a)]),is,ks,bs,(0,t._)("a",ms,[gs,(0,t.Wm)(a)]),ds])]),(0,t._)("li",null,[hs,(0,t._)("p",null,[fs,ys,_s,(0,t._)("a",vs,[ws,(0,t.Wm)(a)]),js,Us,Cs]),qs,Fs]),xs]),zs,Es,Ds,Is,(0,t._)("ol",null,[(0,t._)("li",null,[Ss,As,Ws,Rs,Ts,(0,t._)("p",null,[Gs,(0,t._)("a",Os,[Hs,(0,t.Wm)(a)]),Ns]),Js,Ps]),Ms,(0,t._)("li",null,[(0,t._)("p",null,[(0,t._)("em",null,[$s,Ks,Bs,(0,t._)("a",Ls,[Vs,(0,t.Wm)(a)]),Ys])]),Zs])]),Qs,Xs,na,(0,t._)("p",null,[sa,(0,t._)("a",aa,[ta,(0,t.Wm)(a)])]),(0,t._)("p",null,[pa,(0,t._)("a",ea,[oa,(0,t.Wm)(a)])])],64)}]])}}]);