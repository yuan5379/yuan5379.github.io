"use strict";(self.webpackChunkdemo1=self.webpackChunkdemo1||[]).push([[964],{7617:(s,n,e)=>{e.r(n),e.d(n,{data:()=>a});const a={key:"v-379809b4",path:"/CICD/2023/20230104.html",title:"GitHub Actions 入门教程",lang:"zh-CN",frontmatter:{title:"GitHub Actions 入门教程",date:"2023-01-04T00:00:00.000Z",tags:["CICD"],categories:["CICD"]},excerpt:"",headers:[{level:2,title:"一、GitHub Actions 是什么？",slug:"一、github-actions-是什么",children:[]},{level:2,title:"二、基本概念",slug:"二、基本概念",children:[]},{level:2,title:"三、workflow 文件",slug:"三、workflow-文件",children:[]},{level:2,title:"四、实例：React 项目发布到 GitHub Pages",slug:"四、实例-react-项目发布到-github-pages",children:[]},{level:2,title:"五、参考链接",slug:"五、参考链接",children:[]}],git:{updatedTime:null,contributors:[]}}},5514:(s,n,e)=>{e.r(n),e.d(n,{default:()=>Un});var a=e(6252);const o=(0,a._)("div",{class:"custom-container tip"},[(0,a._)("p",{class:"custom-container-title"},"TIP"),(0,a._)("p",null,"GitHub Actions 是 GitHub 的持续集成服务，于2018年10月推出。这些天，我一直在试用，觉得它非常强大，有创意，本文是一个简单教程，演示如何使用 GitHub Actions 自动发布一个 React 应用到 GitHub Pages。")],-1),t=(0,a._)("h2",{id:"一、github-actions-是什么",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#一、github-actions-是什么","aria-hidden":"true"},"#"),(0,a.Uk)(" 一、GitHub Actions 是什么？")],-1),r=(0,a._)("p",null,"大家知道，持续集成由很多操作组成，比如抓取代码、运行测试、登录远程服务器，发布到第三方服务等等。GitHub 把这些操作就称为 actions。",-1),p=(0,a._)("p",null,"很多操作在不同项目里面是类似的，完全可以共享。GitHub 注意到了这一点，想出了一个很妙的点子，允许开发者把每个操作写成独立的脚本文件，存放到代码仓库，使得其他开发者可以引用。",-1),l=(0,a._)("p",null,"如果你需要某个 action，不必自己写复杂的脚本，直接引用他人写好的 action 即可，整个持续集成过程，就变成了一个 actions 的组合。这就是 GitHub Actions 最特别的地方。",-1),c=(0,a.Uk)("GitHub 做了一个"),i={href:"https://github.com/marketplace?type=actions",target:"_blank",rel:"noopener noreferrer"},u=(0,a.Uk)("官方市场"),b=(0,a.Uk)("，可以搜索到他人提交的 actions。另外，还有一个 "),d={href:"https://github.com/sdras/awesome-actions",target:"_blank",rel:"noopener noreferrer"},k=(0,a.Uk)("awesome actions"),m=(0,a.Uk)(" 的仓库，也可以找到不少 action。"),g=(0,a._)("p",null,[(0,a._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"img",originSrc:"https://www.wangbase.com/blogimg/asset/201909/bg2019091105.jpg",data:"aurora"})],-1),h=(0,a.Uk)("上面说了，每个 action 就是一个独立脚本，因此可以做成代码仓库，使用"),_=(0,a._)("code",null,"userName/repoName",-1),f=(0,a.Uk)("的语法引用 action。比如，"),w=(0,a._)("code",null,"actions/setup-node",-1),y=(0,a.Uk)("就表示"),v=(0,a._)("code",null,"github.com/actions/setup-node",-1),U=(0,a.Uk)("这个"),j={href:"https://github.com/actions/setup-node",target:"_blank",rel:"noopener noreferrer"},G=(0,a.Uk)("仓库"),H=(0,a.Uk)("，它代表一个 action，作用是安装 Node.js。事实上，GitHub 官方的 actions 都放在 "),A={href:"https://github.com/actions",target:"_blank",rel:"noopener noreferrer"},W=(0,a.Uk)("github.com/actions"),E=(0,a.Uk)(" 里面。"),x=(0,a.Uk)("既然 actions 是代码仓库，当然就有版本的概念，用户可以引用某个具体版本的 action。下面都是合法的 action 引用，用的就是 Git 的指针概念，详见"),S={href:"https://help.github.com/en/articles/about-actions#versioning-your-action",target:"_blank",rel:"noopener noreferrer"},C=(0,a.Uk)("官方文档"),M=(0,a.Uk)("。"),D=(0,a.uE)('<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>actions/setup-node@74bc508 <span class="token comment"># 指向一个 commit</span>\nactions/setup-node@v1.0    <span class="token comment"># 指向一个标签</span>\nactions/setup-node@master  <span class="token comment"># 指向一个分支</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="二、基本概念" tabindex="-1"><a class="header-anchor" href="#二、基本概念" aria-hidden="true">#</a> 二、基本概念</h2><p>GitHub Actions 有一些自己的术语。</p><p>（1）<strong>workflow</strong> （工作流程）：持续集成一次运行的过程，就是一个 workflow。</p><p>（2）<strong>job</strong> （任务）：一个 workflow 由一个或多个 jobs 构成，含义是一次持续集成的运行，可以完成多个任务。</p><p>（3）<strong>step</strong>（步骤）：每个 job 由多个 step 构成，一步步完成。</p><p>（4）<strong>action</strong> （动作）：每个 step 可以依次执行一个或多个命令（action）。</p><h2 id="三、workflow-文件" tabindex="-1"><a class="header-anchor" href="#三、workflow-文件" aria-hidden="true">#</a> 三、workflow 文件</h2><p>GitHub Actions 的配置文件叫做 workflow 文件，存放在代码仓库的<code>.github/workflows</code>目录。</p>',9),I=(0,a.Uk)("workflow 文件采用 "),N={href:"https://www.ruanyifeng.com/blog/2016/07/yaml.html",target:"_blank",rel:"noopener noreferrer"},q=(0,a.Uk)("YAML 格式"),z=(0,a.Uk)("，文件名可以任意取，但是后缀名统一为"),R=(0,a._)("code",null,".yml",-1),T=(0,a.Uk)("，比如"),L=(0,a._)("code",null,"foo.yml",-1),P=(0,a.Uk)("。一个库可以有多个 workflow 文件。GitHub 只要发现"),O=(0,a._)("code",null,".github/workflows",-1),$=(0,a.Uk)("目录里面有"),B=(0,a._)("code",null,".yml",-1),J=(0,a.Uk)("文件，就会自动运行该文件。"),F=(0,a.Uk)("workflow 文件的配置字段非常多，详见"),Y={href:"https://help.github.com/en/articles/workflow-syntax-for-github-actions",target:"_blank",rel:"noopener noreferrer"},K=(0,a.Uk)("官方文档"),Z=(0,a.Uk)("。下面是一些基本字段。"),V=(0,a.uE)('<p><strong>（1）<code>name</code></strong></p><p><code>name</code>字段是 workflow 的名称。如果省略该字段，默认为当前 workflow 的文件名。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>name: GitHub Actions Demo\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><strong>（2）<code>on</code></strong></p><p><code>on</code>字段指定触发 workflow 的条件，通常是某些事件。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>on: push\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>上面代码指定，<code>push</code>事件触发 workflow。</p><p><code>on</code>字段也可以是事件的数组。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>on: <span class="token punctuation">[</span>push, pull_request<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>上面代码指定，<code>push</code>事件或<code>pull_request</code>事件都可以触发 workflow。</p>',10),Q=(0,a.Uk)("完整的事件列表，请查看"),X={href:"https://help.github.com/en/articles/events-that-trigger-workflows",target:"_blank",rel:"noopener noreferrer"},ss=(0,a.Uk)("官方文档"),ns=(0,a.Uk)("。除了代码库事件，GitHub Actions 也支持外部事件触发，或者定时运行。"),es=(0,a.uE)('<p><strong>（3）<code>on..</code></strong></p><p>指定触发事件时，可以限定分支或标签。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>on:\n  push:\n    branches:    \n      - master\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>上面代码指定，只有<code>master</code>分支发生<code>push</code>事件时，才会触发 workflow。</p><p><strong>（4）<code>jobs..name</code></strong></p><p>workflow 文件的主体是<code>jobs</code>字段，表示要执行的一项或多项任务。</p><p><code>jobs</code>字段里面，需要写出每一项任务的<code>job_id</code>，具体名称自定义。<code>job_id</code>里面的<code>name</code>字段是任务的说明。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token literal-property property">jobs</span><span class="token operator">:</span>\n  <span class="token literal-property property">my_first_job</span><span class="token operator">:</span>\n    <span class="token literal-property property">name</span><span class="token operator">:</span> My first job\n  <span class="token literal-property property">my_second_job</span><span class="token operator">:</span>\n    <span class="token literal-property property">name</span><span class="token operator">:</span> My second job\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>上面代码的<code>jobs</code>字段包含两项任务，<code>job_id</code>分别是<code>my_first_job</code>和<code>my_second_job</code>。</p><p><strong>（5）<code>jobs..needs</code></strong></p><p><code>needs</code>字段指定当前任务的依赖关系，即运行顺序。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token literal-property property">jobs</span><span class="token operator">:</span>\n  <span class="token literal-property property">job1</span><span class="token operator">:</span>\n  <span class="token literal-property property">job2</span><span class="token operator">:</span>\n    <span class="token literal-property property">needs</span><span class="token operator">:</span> job1\n  <span class="token literal-property property">job3</span><span class="token operator">:</span>\n    <span class="token literal-property property">needs</span><span class="token operator">:</span> <span class="token punctuation">[</span>job1<span class="token punctuation">,</span> job2<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>上面代码中，<code>job1</code>必须先于<code>job2</code>完成，而<code>job3</code>等待<code>job1</code>和<code>job2</code>的完成才能运行。因此，这个 workflow 的运行顺序依次为：<code>job1</code>、<code>job2</code>、<code>job3</code>。</p><p><strong>（6）<code>jobs..runs-on</code></strong></p><p><code>runs-on</code>字段指定运行所需要的虚拟机环境。它是必填字段。目前可用的虚拟机如下。</p><blockquote><ul><li><code>ubuntu-latest</code>，<code>ubuntu-18.04</code>或<code>ubuntu-16.04</code></li><li><code>windows-latest</code>，<code>windows-2019</code>或<code>windows-2016</code></li><li><code>macOS-latest</code>或<code>macOS-10.14</code></li></ul></blockquote><p>下面代码指定虚拟机环境为<code>ubuntu-18.04</code>。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>runs<span class="token operator">-</span>on<span class="token operator">:</span> ubuntu<span class="token operator">-</span><span class="token number">18.04</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><strong>（7）<code>jobs..steps</code></strong></p><p><code>steps</code>字段指定每个 Job 的运行步骤，可以包含一个或多个步骤。每个步骤都可以指定以下三个字段。</p><blockquote><ul><li><code>jobs..steps.name</code>：步骤名称。</li><li><code>jobs..steps.run</code>：该步骤运行的命令或者 action。</li><li><code>jobs..steps.env</code>：该步骤所需的环境变量。</li></ul></blockquote><p>下面是一个完整的 workflow 文件的范例。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token literal-property property">name</span><span class="token operator">:</span> Greeting from Mona\n<span class="token literal-property property">on</span><span class="token operator">:</span> push\n\n<span class="token literal-property property">jobs</span><span class="token operator">:</span>\n  my<span class="token operator">-</span>job<span class="token operator">:</span>\n    <span class="token literal-property property">name</span><span class="token operator">:</span> My Job\n    runs<span class="token operator">-</span>on<span class="token operator">:</span> ubuntu<span class="token operator">-</span>latest\n    <span class="token literal-property property">steps</span><span class="token operator">:</span>\n    <span class="token operator">-</span> name<span class="token operator">:</span> Print a greeting\n      <span class="token literal-property property">env</span><span class="token operator">:</span>\n        <span class="token constant">MY_VAR</span><span class="token operator">:</span> Hi there<span class="token operator">!</span> My name is\n        <span class="token constant">FIRST_NAME</span><span class="token operator">:</span> Mona\n        <span class="token constant">MIDDLE_NAME</span><span class="token operator">:</span> The\n        <span class="token constant">LAST_NAME</span><span class="token operator">:</span> Octocat\n      <span class="token literal-property property">run</span><span class="token operator">:</span> <span class="token operator">|</span>\n        echo $<span class="token constant">MY_VAR</span> $<span class="token constant">FIRST_NAME</span> $<span class="token constant">MIDDLE_NAME</span> $<span class="token constant">LAST_NAME</span><span class="token punctuation">.</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>上面代码中，<code>steps</code>字段只包括一个步骤。该步骤先注入四个环境变量，然后执行一条 Bash 命令。</p><h2 id="四、实例-react-项目发布到-github-pages" tabindex="-1"><a class="header-anchor" href="#四、实例-react-项目发布到-github-pages" aria-hidden="true">#</a> 四、实例：React 项目发布到 GitHub Pages</h2>',25),as=(0,a.Uk)("下面是一个实例，通过 GitHub Actions 构建一个 React 项目，并发布到 GitHub Pages。最终代码都在"),os={href:"https://github.com/ruanyf/github-actions-demo",target:"_blank",rel:"noopener noreferrer"},ts=(0,a.Uk)("这个仓库"),rs=(0,a.Uk)("里面，发布后的参考网址为"),ps={href:"https://ruanyf.github.io/github-actions-demo",target:"_blank",rel:"noopener noreferrer"},ls=(0,a.Uk)("ruanyf.github.io/github-actions-demo"),cs=(0,a.Uk)("。"),is=(0,a.Uk)("第一步，GitHub Actions 目前还处在测试阶段，需要到"),us={href:"https://github.com/features/actions/signup/",target:"_blank",rel:"noopener noreferrer"},bs=(0,a.Uk)("这个网址"),ds=(0,a.Uk)("申请测试资格。申请以后，可能需要几天才能通过。据说，2019年11月就会放开。"),ks=(0,a._)("p",null,[(0,a.Uk)("获得资格后，仓库顶部的菜单会出现"),(0,a._)("code",null,"Actions"),(0,a.Uk)("一项。")],-1),ms=(0,a._)("p",null,[(0,a._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"img",originSrc:"https://www.wangbase.com/blogimg/asset/201909/bg2019091106.jpg",data:"aurora"})],-1),gs=(0,a.Uk)("第二步，这个示例需要将构建成果发到 GitHub 仓库，因此需要 GitHub 密钥。按照"),hs={href:"https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line",target:"_blank",rel:"noopener noreferrer"},_s=(0,a.Uk)("官方文档"),fs=(0,a.Uk)("，生成一个密钥。然后，将这个密钥储存到当前仓库的"),ws=(0,a._)("code",null,"Settings/Secrets",-1),ys=(0,a.Uk)("里面。"),vs=(0,a._)("p",null,[(0,a._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"img",originSrc:"https://www.wangbase.com/blogimg/asset/201909/bg2019091107.jpg",data:"aurora"})],-1),Us=(0,a._)("p",null,[(0,a.Uk)("上图是储存秘密的环境变量的地方。环境变量的名字可以随便起，这里用的是"),(0,a._)("code",null,"ACCESS_TOKEN"),(0,a.Uk)("。如果你不用这个名字，后面脚本里的变量名也要跟着改。")],-1),js=(0,a.Uk)("第三步，本地计算机使用"),Gs={href:"https://github.com/facebook/create-react-app",target:"_blank",rel:"noopener noreferrer"},Hs=(0,a._)("code",null,"create-react-app",-1),As=(0,a.Uk)("，生成一个标准的 React 应用。"),Ws=(0,a.uE)('<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ npx create-react-app github-actions-demo\n$ <span class="token builtin class-name">cd</span> github-actions-demo\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),Es=(0,a.Uk)("然后，打开"),xs=(0,a._)("code",null,"package.json",-1),Ss=(0,a.Uk)("文件，加一个"),Cs=(0,a._)("code",null,"homepage",-1),Ms=(0,a.Uk)("字段，表示该应用发布后的根目录（参见"),Ds={href:"https://create-react-app.dev/docs/deployment#building-for-relative-paths",target:"_blank",rel:"noopener noreferrer"},Is=(0,a.Uk)("官方文档"),Ns=(0,a.Uk)("）。"),qs=(0,a.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string-property property">&quot;homepage&quot;</span><span class="token operator">:</span> <span class="token string">&quot;https://[username].github.io/github-actions-demo&quot;</span><span class="token punctuation">,</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',1),zs=(0,a.Uk)("上面代码中，将"),Rs=(0,a._)("code",null,"[username]",-1),Ts=(0,a.Uk)("替换成你的 GitHub 用户名，参见"),Ls={href:"https://github.com/ruanyf/github-actions-demo/blob/master/package.json#L10",target:"_blank",rel:"noopener noreferrer"},Ps=(0,a.Uk)("范例"),Os=(0,a.Uk)("。"),$s=(0,a._)("p",null,[(0,a.Uk)("第四步，在这个仓库的"),(0,a._)("code",null,".github/workflows"),(0,a.Uk)("目录，生成一个 workflow 文件，名字可以随便取，这个示例是"),(0,a._)("code",null,"ci.yml"),(0,a.Uk)("。")],-1),Bs=(0,a.Uk)("我们选用一个别人已经写好的 action："),Js={href:"https://github.com/marketplace/actions/deploy-to-github-pages",target:"_blank",rel:"noopener noreferrer"},Fs=(0,a.Uk)("JamesIves/github-pages-deploy-action"),Ys=(0,a.Uk)("，它提供了 workflow 的范例文件，直接拷贝过来就行了（查看"),Ks={href:"https://github.com/ruanyf/github-actions-demo/blob/master/.github/workflows/ci.yml",target:"_blank",rel:"noopener noreferrer"},Zs=(0,a.Uk)("源码"),Vs=(0,a.Uk)("）。"),Qs=(0,a.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token literal-property property">name</span><span class="token operator">:</span> GitHub Actions Build and Deploy Demo\n<span class="token literal-property property">on</span><span class="token operator">:</span>\n  <span class="token literal-property property">push</span><span class="token operator">:</span>\n    <span class="token literal-property property">branches</span><span class="token operator">:</span>\n      <span class="token operator">-</span> master\n<span class="token literal-property property">jobs</span><span class="token operator">:</span>\n  build<span class="token operator">-</span>and<span class="token operator">-</span>deploy<span class="token operator">:</span>\n    runs<span class="token operator">-</span>on<span class="token operator">:</span> ubuntu<span class="token operator">-</span>latest\n    <span class="token literal-property property">steps</span><span class="token operator">:</span>\n    <span class="token operator">-</span> name<span class="token operator">:</span> Checkout\n      <span class="token literal-property property">uses</span><span class="token operator">:</span> actions<span class="token operator">/</span>checkout@master\n\n    <span class="token operator">-</span> name<span class="token operator">:</span> Build and Deploy\n      <span class="token literal-property property">uses</span><span class="token operator">:</span> JamesIves<span class="token operator">/</span>github<span class="token operator">-</span>pages<span class="token operator">-</span>deploy<span class="token operator">-</span>action@master\n      <span class="token literal-property property">env</span><span class="token operator">:</span>\n        <span class="token constant">ACCESS_TOKEN</span><span class="token operator">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets<span class="token punctuation">.</span><span class="token constant">ACCESS_TOKEN</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>\n        <span class="token constant">BRANCH</span><span class="token operator">:</span> gh<span class="token operator">-</span>pages\n        <span class="token constant">FOLDER</span><span class="token operator">:</span> build\n        <span class="token constant">BUILD_SCRIPT</span><span class="token operator">:</span> npm install <span class="token operator">&amp;&amp;</span> npm run build\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>上面这个 workflow 文件的要点如下。</p><blockquote><ol><li>整个流程在<code>master</code>分支发生<code>push</code>事件时触发。</li><li>只有一个<code>job</code>，运行在虚拟机环境<code>ubuntu-latest</code>。</li><li>第一步是获取源码，使用的 action 是<code>actions/checkout</code>。</li><li>第二步是构建和部署，使用的 action 是<code>JamesIves/github-pages-deploy-action</code>。</li><li>第二步需要四个环境变量，分别为 GitHub 密钥、发布分支、构建成果所在目录、构建脚本。其中，只有 GitHub 密钥是秘密变量，需要写在双括号里面，其他三个都可以直接写在文件里。</li></ol></blockquote><p>第五步，保存上面的文件后，将整个仓库推送到 GitHub。</p>',4),Xs=(0,a.Uk)("GitHub 发现了 workflow 文件以后，就会自动运行。你可以在网站上实时查看"),sn={href:"https://github.com/ruanyf/github-actions-demo/commit/24fbf6a875351297f31434fd44bc3146accf9e59/checks",target:"_blank",rel:"noopener noreferrer"},nn=(0,a.Uk)("运行日志"),en=(0,a.Uk)("，日志默认保存30天。"),an=(0,a._)("p",null,[(0,a._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"img",originSrc:"https://www.wangbase.com/blogimg/asset/201909/bg2019091108.jpg",data:"aurora"})],-1),on=(0,a.Uk)("等到 workflow 运行结束，访问 "),tn={href:"https://ruanyf.github.io/github-actions-demo/",target:"_blank",rel:"noopener noreferrer"},rn=(0,a.Uk)("GitHub Page"),pn=(0,a.Uk)("，会看到构建成果已经发上网了。"),ln=(0,a._)("p",null,[(0,a._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"img",originSrc:"https://www.wangbase.com/blogimg/asset/201909/bg2019091109.jpg",data:"aurora"})],-1),cn=(0,a._)("p",null,"以后，每次修改后推送源码，GitHub Actions 都会自动运行，将构建产物发布到网页。",-1),un=(0,a._)("h2",{id:"五、参考链接",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#五、参考链接","aria-hidden":"true"},"#"),(0,a.Uk)(" 五、参考链接")],-1),bn={href:"https://help.github.com/en/categories/automating-your-workflow-with-github-actions",target:"_blank",rel:"noopener noreferrer"},dn=(0,a.Uk)("GitHub Pages 官方文档"),kn={href:"https://lukeboyle.com/blog-posts/2019/08/github-actions-for-web-apps/",target:"_blank",rel:"noopener noreferrer"},mn=(0,a.Uk)("Github Actions for web apps"),gn=(0,a.Uk)(", Luke Boyle"),hn={href:"https://medium.com/@adam.zolyak/my-first-week-with-github-actions-5d92de4c4851",target:"_blank",rel:"noopener noreferrer"},_n=(0,a.Uk)("My First Week With GitHub Actions"),fn=(0,a.Uk)(", Adam Zolyak"),wn={href:"http://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html",target:"_blank",rel:"noopener noreferrer"},yn=(0,a.Uk)("阮一峰"),vn={},Un=(0,e(3744).Z)(vn,[["render",function(s,n){const e=(0,a.up)("ExternalLinkIcon");return(0,a.wg)(),(0,a.iD)(a.HY,null,[o,t,r,p,l,(0,a._)("p",null,[c,(0,a._)("a",i,[u,(0,a.Wm)(e)]),b,(0,a._)("a",d,[k,(0,a.Wm)(e)]),m]),g,(0,a._)("p",null,[h,_,f,w,y,v,U,(0,a._)("a",j,[G,(0,a.Wm)(e)]),H,(0,a._)("a",A,[W,(0,a.Wm)(e)]),E]),(0,a._)("p",null,[x,(0,a._)("a",S,[C,(0,a.Wm)(e)]),M]),D,(0,a._)("p",null,[I,(0,a._)("a",N,[q,(0,a.Wm)(e)]),z,R,T,L,P,O,$,B,J]),(0,a._)("p",null,[F,(0,a._)("a",Y,[K,(0,a.Wm)(e)]),Z]),V,(0,a._)("p",null,[Q,(0,a._)("a",X,[ss,(0,a.Wm)(e)]),ns]),es,(0,a._)("p",null,[as,(0,a._)("a",os,[ts,(0,a.Wm)(e)]),rs,(0,a._)("a",ps,[ls,(0,a.Wm)(e)]),cs]),(0,a._)("p",null,[is,(0,a._)("a",us,[bs,(0,a.Wm)(e)]),ds]),ks,ms,(0,a._)("p",null,[gs,(0,a._)("a",hs,[_s,(0,a.Wm)(e)]),fs,ws,ys]),vs,Us,(0,a._)("p",null,[js,(0,a._)("a",Gs,[Hs,(0,a.Wm)(e)]),As]),Ws,(0,a._)("p",null,[Es,xs,Ss,Cs,Ms,(0,a._)("a",Ds,[Is,(0,a.Wm)(e)]),Ns]),qs,(0,a._)("p",null,[zs,Rs,Ts,(0,a._)("a",Ls,[Ps,(0,a.Wm)(e)]),Os]),$s,(0,a._)("p",null,[Bs,(0,a._)("a",Js,[Fs,(0,a.Wm)(e)]),Ys,(0,a._)("a",Ks,[Zs,(0,a.Wm)(e)]),Vs]),Qs,(0,a._)("p",null,[Xs,(0,a._)("a",sn,[nn,(0,a.Wm)(e)]),en]),an,(0,a._)("p",null,[on,(0,a._)("a",tn,[rn,(0,a.Wm)(e)]),pn]),ln,cn,un,(0,a._)("ul",null,[(0,a._)("li",null,[(0,a._)("a",bn,[dn,(0,a.Wm)(e)])]),(0,a._)("li",null,[(0,a._)("a",kn,[mn,(0,a.Wm)(e)]),gn]),(0,a._)("li",null,[(0,a._)("a",hn,[_n,(0,a.Wm)(e)]),fn]),(0,a._)("li",null,[(0,a._)("a",wn,[yn,(0,a.Wm)(e)])])])],64)}]])}}]);