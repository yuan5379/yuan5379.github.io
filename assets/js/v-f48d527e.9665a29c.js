"use strict";(self.webpackChunkdemo1=self.webpackChunkdemo1||[]).push([[4204],{2664:(a,s,e)=>{e.r(s),e.d(s,{data:()=>n});const n={key:"v-f48d527e",path:"/%E5%9F%BA%E7%A1%80/2022/20220612.html",title:"vscode 调式",lang:"zh-CN",frontmatter:{title:"vscode 调式",date:"2022-06-12T00:00:00.000Z",tags:["基础"],categories:["基础"]},excerpt:"",headers:[],git:{updatedTime:null,contributors:[]}}},7685:(a,s,e)=>{e.r(s),e.d(s,{default:()=>l});const n=(0,e(6252).uE)('<div class="custom-container tip"><p class="custom-container-title">TIP</p><p>代码调式对于开发者来说必不可少的，这一篇简单讲如何调式</p></div><h1 id="配置auto-attach" tabindex="-1"><a class="header-anchor" href="#配置auto-attach" aria-hidden="true">#</a> 配置auto-attach</h1><ul><li>VSCode 调试 JS 的方法有很多，目前比较推荐的就是无需配置的 auto-attach。</li><li>按 ctrl + shift + p，打开输入 &gt;auto attach。默认是智能（smart）。如果不是，可以查看设置成智能，或者根据场景自行设置成其他的。</li></ul><h1 id="调试操作方式" tabindex="-1"><a class="header-anchor" href="#调试操作方式" aria-hidden="true">#</a> 调试操作方式</h1><ul><li><p>方式一：在 package.json 找到相应的 scripts。鼠标悬浮在相应的命令上，会出现运行命令和调试命令两个选项，选择调试命令即可进入调试模式。或者点击 scripts 上方的 调试，再选择相应的命令。也可以进入调试模式。</p></li><li><p>方式二：通过快捷键 ctrl + 反引号 打开终端。或者通过查看 —— 终端打开 VSCode 终端。</p><p>在终端进入到目录。执行相应的脚本。</p></li></ul><h1 id="调试按钮介绍" tabindex="-1"><a class="header-anchor" href="#调试按钮介绍" aria-hidden="true">#</a> 调试按钮介绍</h1><ol><li>继续（F5）: 点击后代码会直接执行到下一个断点所在位置，如果没有下一个断点，则认为本次代码执行完成。</li><li>单步跳过（F10）：点击后会跳到当前代码下一行继续执行，不会进入到函数内部。</li><li>单步调试（F11）：点击后进入到当前函数的内部调试，比如在 fn 这一行中执行单步调试，会进入到 fn 函数内部进行调试。</li><li>单步跳出（Shift + F11）：点击后跳出当前调试的函数，与单步调试对应。</li><li>重启（Ctrl + Shift + F5）：顾名思义。</li><li>断开链接（Shift + F5）：顾名思义。</li></ol><h1 id="其他调试" tabindex="-1"><a class="header-anchor" href="#其他调试" aria-hidden="true">#</a> 其他调试</h1><ul><li><p>由于很多项目都配置了代码压缩，难于调试。所以开发环境下，一般通过配置生成 sourcemap 来调试代码。大部分开源项目（比如vue、vue-next源码）也会在贡献指南中说明如何开启 sourcemap。</p><ol><li><p>普通 webpack 配置</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token literal-property property">devtool</span><span class="token operator">:</span> <span class="token string">&#39;source-map&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>调试 vue-cli 3+ 生成的项目</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// vue-cli 3+</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">configureWebpack</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">devtool</span><span class="token operator">:</span> <span class="token string">&#39;source-map&#39;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li></ol></li></ul>',9),t={},l=(0,e(3744).Z)(t,[["render",function(a,s){return n}]])}}]);