"use strict";(self.webpackChunkdemo1=self.webpackChunkdemo1||[]).push([[9898],{8946:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-43cd8d2e",path:"/%E9%9D%A2%E8%AF%95/2022/20221212.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"长列表数据优化之object.freeze",slug:"长列表数据优化之object-freeze",children:[]}],git:{updatedTime:null,contributors:[]}}},8033:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const p=(0,a(6252).uE)('<p>title: 项目中的性能优化 date: 2022-12-12 tags:</p><ul><li>js categories:</li><li>面试</li></ul><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>本篇主要是笔者记录在项目开发中所做过的性能优化所做的笔记，如果出现错误，希望大家指出！</p></div><h2 id="长列表数据优化之object-freeze" tabindex="-1"><a class="header-anchor" href="#长列表数据优化之object-freeze" aria-hidden="true">#</a> 长列表数据优化之object.freeze</h2><ul><li>在项目开发中，我们会经常遇到数据非常大的列表需要展示，但是浏览器渲染时会非常耗时，例如 vue 项目中，我们通过控制台性能监测可以发现，耗时最久的是渲染，因为 vue 会将 data 对象中的所有的属性加入到 vue 的响应式系统中，当这些属性的值发生改变时，视图将会产生响应，若对象的体积比较大，会消耗很多浏览器解析时间。但是有些数据不需要响应式，例如纯展示的长列表，所以我们可以通过减少数据的响应式转换来提供前端的性能</li><li><code>Object.freeze()</code> 方法可以冻结一个对象。一个被冻结的对象再也不能被修改；冻结了一个对象则不能向这个对象添加新的属性，不能删除已有属性，不能修改该对象已有属性的可枚举性、可配置性、可写性，以及不能修改已有属性的值。此外，冻结一个对象后该对象的原型也不能被修改。 但是原型中的属性却可以被修改，这是因为<code>Object.freeze</code>方法是浅冻结，也就是说只会冻结一层 <code>freeze()</code> 返回和传入的参数相同的对象</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 深度冻结案例</span>\n<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n          <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n          <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n          <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token literal-property property">d</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>\n            <span class="token literal-property property">e</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>\n            <span class="token literal-property property">f</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n              <span class="token literal-property property">g</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// 在Object对象上添加一个新的方法</span>\nObject<span class="token punctuation">.</span><span class="token function-variable function">deepFreeze</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">let</span> keys<span class="token operator">=</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment">// 获取对象自身所有属性（包括不可枚举属性）</span>\n    <span class="token comment">// 递归执行</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>keys<span class="token punctuation">.</span>length<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n     keys<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n         <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> obj<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&quot;object&quot;</span> <span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n             Object<span class="token punctuation">.</span><span class="token function">deepFreeze</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span>\n         <span class="token punctuation">}</span>\n     <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n   Object<span class="token punctuation">.</span><span class="token function">deepFreeze</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token comment">// ...同以上新增、修改、删除相同</span>\n   obj<span class="token punctuation">.</span>c<span class="token punctuation">.</span>f<span class="token punctuation">.</span>g <span class="token operator">=</span> <span class="token number">333</span><span class="token punctuation">;</span>\n   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {a:1,b:2,c{d:3,e:4,f{g:5}}} 所有属性都不可被修改</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div>',6),e={},t=(0,a(3744).Z)(e,[["render",function(n,s){return p}]])}}]);