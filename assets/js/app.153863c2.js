"use strict";(self.webpackChunkdemo1=self.webpackChunkdemo1||[]).push([[2143],{6396:(n,s,a)=>{a.d(s,{g:()=>b});var e=a(7478),p=a(5748),t=a(1598),r=a(6665),o=a(1843),l=a(8580),c=a(9146),i=a(881),u=a(1301);const k=(0,a(7621).vW)((({app:n,router:s,siteData:a})=>{})),b=[e.Z,p.Z,t.Z,r.Z,o.Z,l.Z,c.Z,i.Z,u.Z,k]},9947:(n,s,a)=>{a.d(s,{p:()=>r});var e=a(3051),p=a(8805),t=a(9796);const r=[e.Z,p.Z,t.Z]},4611:(n,s,a)=>{a.d(s,{l:()=>r});var e=a(1263),p=a(6243),t=a(7593);const r=[e.Z,p.Z,t.Z]},4150:(n,s,a)=>{a.d(s,{Z:()=>p});var e=a(6252);const p={404:(0,e.RC)((()=>Promise.all([a.e(1973),a.e(2431)]).then(a.bind(a,2431)))),Layout:(0,e.RC)((()=>a.e(8887).then(a.bind(a,8887))))}},6056:(n,s,a)=>{a.d(s,{b:()=>p});var e=a(6252);const p={"v-2b97a6cc":(0,e.RC)((()=>a.e(7299).then(a.bind(a,6438)))),"v-60490958":(0,e.RC)((()=>a.e(1213).then(a.bind(a,8106)))),"v-54b0cc6b":(0,e.RC)((()=>a.e(688).then(a.bind(a,8194)))),"v-7ee8eb88":(0,e.RC)((()=>a.e(7683).then(a.bind(a,5429)))),"v-5d086546":(0,e.RC)((()=>a.e(9905).then(a.bind(a,7778)))),"v-6eec9732":(0,e.RC)((()=>a.e(5594).then(a.bind(a,3493)))),"v-379809b4":(0,e.RC)((()=>a.e(5964).then(a.bind(a,5514)))),"v-394ce253":(0,e.RC)((()=>a.e(380).then(a.bind(a,9910)))),"v-69c4de5e":(0,e.RC)((()=>a.e(1717).then(a.bind(a,3923)))),"v-006549e4":(0,e.RC)((()=>a.e(1168).then(a.bind(a,1402)))),"v-c2ffe65e":(0,e.RC)((()=>a.e(6368).then(a.bind(a,462)))),"v-60845a92":(0,e.RC)((()=>a.e(5838).then(a.bind(a,8542)))),"v-6fdeabe4":(0,e.RC)((()=>a.e(7505).then(a.bind(a,6276)))),"v-6cdfe61c":(0,e.RC)((()=>a.e(1692).then(a.bind(a,5410)))),"v-2497784b":(0,e.RC)((()=>a.e(3089).then(a.bind(a,5829)))),"v-117b5e97":(0,e.RC)((()=>a.e(7412).then(a.bind(a,4483)))),"v-3c65068c":(0,e.RC)((()=>a.e(7920).then(a.bind(a,7190)))),"v-a4ce4834":(0,e.RC)((()=>a.e(955).then(a.bind(a,806)))),"v-493de946":(0,e.RC)((()=>a.e(2589).then(a.bind(a,2283)))),"v-c962782a":(0,e.RC)((()=>a.e(9885).then(a.bind(a,7391)))),"v-571b9622":(0,e.RC)((()=>a.e(5822).then(a.bind(a,1115)))),"v-5012795f":(0,e.RC)((()=>a.e(4505).then(a.bind(a,6313)))),"v-8caf0246":(0,e.RC)((()=>a.e(6096).then(a.bind(a,6857)))),"v-fa520c0e":(0,e.RC)((()=>a.e(8871).then(a.bind(a,1880)))),"v-f48d527e":(0,e.RC)((()=>a.e(4204).then(a.bind(a,7685)))),"v-00a6fdbc":(0,e.RC)((()=>a.e(572).then(a.bind(a,9677)))),"v-7ade95ec":(0,e.RC)((()=>a.e(7009).then(a.bind(a,5520)))),"v-11de4d87":(0,e.RC)((()=>a.e(6559).then(a.bind(a,6654)))),"v-546b4dc0":(0,e.RC)((()=>a.e(9753).then(a.bind(a,15)))),"v-3706649a":(0,e.RC)((()=>a.e(88).then(a.bind(a,8109)))),"v-8daa1a0e":(0,e.RC)((()=>a.e(2509).then(a.bind(a,1829)))),"v-74bc627b":(0,e.RC)((()=>a.e(8005).then(a.bind(a,9085)))),"v-14f724bf":(0,e.RC)((()=>a.e(8069).then(a.bind(a,8784)))),"v-14e6501c":(0,e.RC)((()=>a.e(713).then(a.bind(a,779)))),"v-744d024e":(0,e.RC)((()=>a.e(9146).then(a.bind(a,7034)))),"v-705c21a6":(0,e.RC)((()=>a.e(6888).then(a.bind(a,8099)))),"v-6629f178":(0,e.RC)((()=>a.e(158).then(a.bind(a,7984)))),"v-031dfb13":(0,e.RC)((()=>a.e(9722).then(a.bind(a,7659)))),"v-e2acc714":(0,e.RC)((()=>a.e(356).then(a.bind(a,5506)))),"v-4382d077":(0,e.RC)((()=>a.e(9740).then(a.bind(a,7072)))),"v-3279cf61":(0,e.RC)((()=>a.e(4118).then(a.bind(a,1973)))),"v-3c506944":(0,e.RC)((()=>a.e(2219).then(a.bind(a,5455))))}},9706:(n,s,a)=>{a.d(s,{T:()=>e});const e={"v-2b97a6cc":()=>a.e(7299).then(a.bind(a,1521)).then((({data:n})=>n)),"v-60490958":()=>a.e(1213).then(a.bind(a,3535)).then((({data:n})=>n)),"v-54b0cc6b":()=>a.e(688).then(a.bind(a,5451)).then((({data:n})=>n)),"v-7ee8eb88":()=>a.e(7683).then(a.bind(a,6657)).then((({data:n})=>n)),"v-5d086546":()=>a.e(9905).then(a.bind(a,9364)).then((({data:n})=>n)),"v-6eec9732":()=>a.e(5594).then(a.bind(a,2709)).then((({data:n})=>n)),"v-379809b4":()=>a.e(5964).then(a.bind(a,7617)).then((({data:n})=>n)),"v-394ce253":()=>a.e(380).then(a.bind(a,8458)).then((({data:n})=>n)),"v-69c4de5e":()=>a.e(1717).then(a.bind(a,6320)).then((({data:n})=>n)),"v-006549e4":()=>a.e(1168).then(a.bind(a,9472)).then((({data:n})=>n)),"v-c2ffe65e":()=>a.e(6368).then(a.bind(a,4877)).then((({data:n})=>n)),"v-60845a92":()=>a.e(5838).then(a.bind(a,6020)).then((({data:n})=>n)),"v-6fdeabe4":()=>a.e(7505).then(a.bind(a,1398)).then((({data:n})=>n)),"v-6cdfe61c":()=>a.e(1692).then(a.bind(a,5396)).then((({data:n})=>n)),"v-2497784b":()=>a.e(3089).then(a.bind(a,8641)).then((({data:n})=>n)),"v-117b5e97":()=>a.e(7412).then(a.bind(a,3030)).then((({data:n})=>n)),"v-3c65068c":()=>a.e(7920).then(a.bind(a,1044)).then((({data:n})=>n)),"v-a4ce4834":()=>a.e(955).then(a.bind(a,4274)).then((({data:n})=>n)),"v-493de946":()=>a.e(2589).then(a.bind(a,1184)).then((({data:n})=>n)),"v-c962782a":()=>a.e(9885).then(a.bind(a,1455)).then((({data:n})=>n)),"v-571b9622":()=>a.e(5822).then(a.bind(a,4367)).then((({data:n})=>n)),"v-5012795f":()=>a.e(4505).then(a.bind(a,5578)).then((({data:n})=>n)),"v-8caf0246":()=>a.e(6096).then(a.bind(a,7669)).then((({data:n})=>n)),"v-fa520c0e":()=>a.e(8871).then(a.bind(a,5163)).then((({data:n})=>n)),"v-f48d527e":()=>a.e(4204).then(a.bind(a,2664)).then((({data:n})=>n)),"v-00a6fdbc":()=>a.e(572).then(a.bind(a,389)).then((({data:n})=>n)),"v-7ade95ec":()=>a.e(7009).then(a.bind(a,3991)).then((({data:n})=>n)),"v-11de4d87":()=>a.e(6559).then(a.bind(a,1311)).then((({data:n})=>n)),"v-546b4dc0":()=>a.e(9753).then(a.bind(a,3866)).then((({data:n})=>n)),"v-3706649a":()=>a.e(88).then(a.bind(a,1801)).then((({data:n})=>n)),"v-8daa1a0e":()=>a.e(2509).then(a.bind(a,6464)).then((({data:n})=>n)),"v-74bc627b":()=>a.e(8005).then(a.bind(a,2988)).then((({data:n})=>n)),"v-14f724bf":()=>a.e(8069).then(a.bind(a,4770)).then((({data:n})=>n)),"v-14e6501c":()=>a.e(713).then(a.bind(a,4502)).then((({data:n})=>n)),"v-744d024e":()=>a.e(9146).then(a.bind(a,6041)).then((({data:n})=>n)),"v-705c21a6":()=>a.e(6888).then(a.bind(a,6762)).then((({data:n})=>n)),"v-6629f178":()=>a.e(158).then(a.bind(a,4141)).then((({data:n})=>n)),"v-031dfb13":()=>a.e(9722).then(a.bind(a,8332)).then((({data:n})=>n)),"v-e2acc714":()=>a.e(356).then(a.bind(a,6790)).then((({data:n})=>n)),"v-4382d077":()=>a.e(9740).then(a.bind(a,7629)).then((({data:n})=>n)),"v-3279cf61":()=>a.e(4118).then(a.bind(a,8588)).then((({data:n})=>n)),"v-3c506944":()=>a.e(2219).then(a.bind(a,3350)).then((({data:n})=>n))}},4634:(n,s,a)=>{a.d(s,{g:()=>p});var e=a(4802);const p=[["v-2b97a6cc","/axios/2019/20191102.html",{},["/axios/2019/20191102","/axios/2019/20191102.md"]],["v-60490958","/axios/2021/20210624.html",{},["/axios/2021/20210624","/axios/2021/20210624.md"]],["v-54b0cc6b","/js/2021/20210419.html",{},["/js/2021/20210419","/js/2021/20210419.md"]],["v-7ee8eb88","/js/2021/20220718.html",{},["/js/2021/20220718","/js/2021/20220718.md"]],["v-5d086546","/css/2023/20230108.html",{},["/css/2023/20230108","/css/2023/20230108.md"]],["v-6eec9732","/css/2023/20230129.html",{},["/css/2023/20230129","/css/2023/20230129.md"]],["v-379809b4","/CICD/2023/20230104.html",{},["/CICD/2023/20230104","/CICD/2023/20230104.md"]],["v-394ce253","/CICD/2023/20230105.html",{},["/CICD/2023/20230105","/CICD/2023/20230105.md"]],["v-69c4de5e","/js/2022/20220710.html",{},["/js/2022/20220710","/js/2022/20220710.md"]],["v-006549e4","/js/2022/20220801.html",{},["/js/2022/20220801","/js/2022/20220801.md"]],["v-c2ffe65e","/js/2022/20220831.html",{},["/js/2022/20220831","/js/2022/20220831.md"]],["v-60845a92","/js/2022/20221215.html",{},["/js/2022/20221215","/js/2022/20221215.md"]],["v-6fdeabe4","/html/2019/20190908.html",{},["/html/2019/20190908","/html/2019/20190908.md"]],["v-6cdfe61c","/nuxt/2023/20230210.html",{},["/nuxt/2023/20230210","/nuxt/2023/20230210.md"]],["v-2497784b","/html/2022/20220923.html",{},["/html/2022/20220923","/html/2022/20220923.md"]],["v-117b5e97","/html/2022/20221230.html",{},["/html/2022/20221230","/html/2022/20221230.md"]],["v-3c65068c","/react/2022/20220612.html",{},["/react/2022/20220612","/react/2022/20220612.md"]],["v-a4ce4834","/vue/2022/20220325.html",{},["/vue/2022/20220325","/vue/2022/20220325.md"]],["v-493de946","/vue/2022/20220930.html",{},["/vue/2022/20220930","/vue/2022/20220930.md"]],["v-c962782a","/vue/2022/20221002.html",{},["/vue/2022/20221002","/vue/2022/20221002.md"]],["v-571b9622","/three/2023/20230115.html",{},["/three/2023/20230115","/three/2023/20230115.md"]],["v-5012795f","/%E5%B0%8F%E7%A8%8B%E5%BA%8F/2022/20220730.html",{},["/小程序/2022/20220730.html","/%E5%B0%8F%E7%A8%8B%E5%BA%8F/2022/20220730","/小程序/2022/20220730.md","/%E5%B0%8F%E7%A8%8B%E5%BA%8F/2022/20220730.md"]],["v-8caf0246","/%E5%B0%8F%E7%A8%8B%E5%BA%8F/2022/20220831.html",{},["/小程序/2022/20220831.html","/%E5%B0%8F%E7%A8%8B%E5%BA%8F/2022/20220831","/小程序/2022/20220831.md","/%E5%B0%8F%E7%A8%8B%E5%BA%8F/2022/20220831.md"]],["v-fa520c0e","/%E5%B0%8F%E7%A8%8B%E5%BA%8F/2022/20220901.html",{},["/小程序/2022/20220901.html","/%E5%B0%8F%E7%A8%8B%E5%BA%8F/2022/20220901","/小程序/2022/20220901.md","/%E5%B0%8F%E7%A8%8B%E5%BA%8F/2022/20220901.md"]],["v-f48d527e","/%E5%9F%BA%E7%A1%80/2022/20220612.html",{},["/基础/2022/20220612.html","/%E5%9F%BA%E7%A1%80/2022/20220612","/基础/2022/20220612.md","/%E5%9F%BA%E7%A1%80/2022/20220612.md"]],["v-00a6fdbc","/%E5%B0%8F%E7%A8%8B%E5%BA%8F/2023/20230205.html",{},["/小程序/2023/20230205.html","/%E5%B0%8F%E7%A8%8B%E5%BA%8F/2023/20230205","/小程序/2023/20230205.md","/%E5%B0%8F%E7%A8%8B%E5%BA%8F/2023/20230205.md"]],["v-7ade95ec","/%E9%9D%A2%E8%AF%95/2022/20221016.html",{},["/面试/2022/20221016.html","/%E9%9D%A2%E8%AF%95/2022/20221016","/面试/2022/20221016.md","/%E9%9D%A2%E8%AF%95/2022/20221016.md"]],["v-11de4d87","/%E5%B7%A5%E5%85%B7/2022/20221001.html",{},["/工具/2022/20221001.html","/%E5%B7%A5%E5%85%B7/2022/20221001","/工具/2022/20221001.md","/%E5%B7%A5%E5%85%B7/2022/20221001.md"]],["v-546b4dc0","/%E5%B7%A5%E5%85%B7/2022/20221019.html",{},["/工具/2022/20221019.html","/%E5%B7%A5%E5%85%B7/2022/20221019","/工具/2022/20221019.md","/%E5%B7%A5%E5%85%B7/2022/20221019.md"]],["v-3706649a","/404.html",{},["/404"]],["v-8daa1a0e","/",{},["/index.html"]],["v-74bc627b","/about/",{},["/about/index.html"]],["v-14f724bf","/mood/",{},["/mood/index.html"]],["v-14e6501c","/link/",{},["/link/index.html"]],["v-744d024e","/tag/",{},["/tag/index.html"]],["v-705c21a6","/archive/",{},["/archive/index.html"]],["v-6629f178","/aurora-coze/",{},["/aurora-coze/index.html"]],["v-031dfb13","/register/",{},["/register/index.html"]],["v-e2acc714","/photo/",{},["/photo/index.html"]],["v-4382d077","/next-mood/",{},["/next-mood/index.html"]],["v-3279cf61","/aurora-archive/",{},["/aurora-archive/index.html"]],["v-3c506944","/aurora-music/",{},["/aurora-music/index.html"]]].reduce(((n,[s,a,p,t])=>(n.push({name:s,path:a,component:e.Y,meta:p},...t.map((n=>({path:n,redirect:a})))),n)),[{name:"404",path:"/:catchAll(.*)",component:e.Y}])},5472:(n,s,a)=>{a.d(s,{D:()=>e});const e=[{title:"axios拦截器",headers:[{level:2,title:"请求拦截器：interceptors.request",slug:"请求拦截器-interceptors-request",children:[]},{level:2,title:"响应拦截器：interceptors.response",slug:"响应拦截器-interceptors-response",children:[]},{level:2,title:"使用注意事项",slug:"使用注意事项",children:[]}],path:"/axios/2019/20191102.html",pathLocale:"/",extraFields:[]},{title:"axios的简单封装",headers:[{level:2,title:"request.js",slug:"request-js",children:[]},{level:2,title:"service.project.js",slug:"service-project-js",children:[]},{level:2,title:"原生小程序封装wx.request",slug:"原生小程序封装wx-request",children:[]}],path:"/axios/2021/20210624.html",pathLocale:"/",extraFields:[]},{title:"数组api",headers:[{level:2,title:"数组的检测",slug:"数组的检测",children:[]},{level:2,title:"数组的转换方法",slug:"数组的转换方法",children:[]},{level:2,title:"数组的增删",slug:"数组的增删",children:[]},{level:2,title:"数组重排序",slug:"数组重排序",children:[]},{level:2,title:"操作方法",slug:"操作方法",children:[]},{level:2,title:"位置方法",slug:"位置方法",children:[]},{level:2,title:"迭代方法",slug:"迭代方法",children:[]}],path:"/js/2021/20210419.html",pathLocale:"/",extraFields:[]},{title:"将数据处理成树形结构的数据",headers:[{level:2,title:"js处理方法",slug:"js处理方法",children:[]}],path:"/js/2021/20220718.html",pathLocale:"/",extraFields:[]},{title:"那些炫酷的CSS文字效果之诗词",headers:[{level:2,title:"效果一",slug:"效果一",children:[]},{level:2,title:"效果二",slug:"效果二",children:[]},{level:2,title:"效果三",slug:"效果三",children:[]},{level:2,title:"效果四",slug:"效果四",children:[]},{level:2,title:"效果五",slug:"效果五",children:[]},{level:2,title:"效果六",slug:"效果六",children:[]},{level:2,title:"效果七",slug:"效果七",children:[]},{level:2,title:"效果八",slug:"效果八",children:[]},{level:2,title:"效果九",slug:"效果九",children:[]},{level:2,title:"效果十",slug:"效果十",children:[]}],path:"/css/2023/20230108.html",pathLocale:"/",extraFields:[]},{title:"vh 存在问题？试试动态视口单位",headers:[{level:2,title:"vh 在移动端存在的问题！",slug:"vh-在移动端存在的问题",children:[]},{level:2,title:"新视口相关单位之 lvh、svh、dvh",slug:"新视口相关单位之-lvh、svh、dvh",children:[]},{level:2,title:"dvh、svh、lvh 它们的兼容性（2023-01-25）",slug:"dvh、svh、lvh-它们的兼容性-2023-01-25",children:[]}],path:"/css/2023/20230129.html",pathLocale:"/",extraFields:[]},{title:"GitHub Actions 入门教程",headers:[{level:2,title:"一、GitHub Actions 是什么？",slug:"一、github-actions-是什么",children:[]},{level:2,title:"二、基本概念",slug:"二、基本概念",children:[]},{level:2,title:"三、workflow 文件",slug:"三、workflow-文件",children:[]},{level:2,title:"四、实例：React 项目发布到 GitHub Pages",slug:"四、实例-react-项目发布到-github-pages",children:[]},{level:2,title:"五、参考链接",slug:"五、参考链接",children:[]}],path:"/CICD/2023/20230104.html",pathLocale:"/",extraFields:[]},{title:"CICD入门教程，使用Github Action给自己的项目加上CICD",headers:[{level:2,title:"为什么选择Github Action",slug:"为什么选择github-action",children:[]},{level:2,title:"Github Action初学入门",slug:"github-action初学入门",children:[]},{level:2,title:"给一个项目添加CICD流程",slug:"给一个项目添加cicd流程",children:[{level:3,title:"添加CI流程",slug:"添加ci流程",children:[]},{level:3,title:"添加CD流程",slug:"添加cd流程",children:[]},{level:3,title:"添加状态徽章",slug:"添加状态徽章",children:[]}]}],path:"/CICD/2023/20230105.html",pathLocale:"/",extraFields:[]},{title:"手写实现一个数组扁平化的函数 flat",headers:[{level:2,title:"代码",slug:"代码",children:[]}],path:"/js/2022/20220710.html",pathLocale:"/",extraFields:[]},{title:"将数据转换成数据流",headers:[],path:"/js/2022/20220801.html",pathLocale:"/",extraFields:[]},{title:"你真的熟悉a标签吗",headers:[],path:"/js/2022/20220831.html",pathLocale:"/",extraFields:[]},{title:"手写一个并发函数",headers:[],path:"/js/2022/20221215.html",pathLocale:"/",extraFields:[]},{title:"DOM的基本操作",headers:[{level:2,title:"DOM的获取",slug:"dom的获取",children:[]},{level:2,title:"遍历节点树",slug:"遍历节点树",children:[]},{level:2,title:"基于元素节点树的遍历 (遍历元素节点树)",slug:"基于元素节点树的遍历-遍历元素节点树",children:[]},{level:2,title:"复制节点",slug:"复制节点",children:[]}],path:"/html/2019/20190908.html",pathLocale:"/",extraFields:[]},{title:"nuxt3 入门教程",headers:[{level:2,title:"Nuxt3的简介",slug:"nuxt3的简介",children:[]},{level:2,title:"Nuxt3的优势介绍",slug:"nuxt3的优势介绍",children:[]},{level:2,title:"Nuxt3 的安装",slug:"nuxt3-的安装",children:[]},{level:2,title:"Nuxt3的目录结构",slug:"nuxt3的目录结构",children:[{level:3,title:"编写Hello World",slug:"编写hello-world",children:[]}]},{level:2,title:"Nuxt3页面和约定路由的使用",slug:"nuxt3页面和约定路由的使用",children:[{level:3,title:"动态路由的使用",slug:"动态路由的使用",children:[]},{level:3,title:"嵌套路由的使用",slug:"嵌套路由的使用",children:[]}]},{level:2,title:"编程式路由导航&传参",slug:"编程式路由导航-传参",children:[]},{level:2,title:"路由中间件",slug:"路由中间件",children:[{level:3,title:"匿名路由中间件",slug:"匿名路由中间件",children:[]},{level:3,title:"具名路由中间件",slug:"具名路由中间件",children:[]}]},{level:2,title:"布局模板",slug:"布局模板",children:[]},{level:2,title:"自定义组件",slug:"自定义组件",children:[]},{level:2,title:"模块化代码 Composable文件夹的试用",slug:"模块化代码-composable文件夹的试用",children:[{level:3,title:"Composable中创建time.js的编写",slug:"composable中创建time-js的编写",children:[]},{level:3,title:"composables的引入规则",slug:"composables的引入规则",children:[]}]},{level:2,title:"Nuxt3中的数据请求",slug:"nuxt3中的数据请求",children:[{level:3,title:"useAsyncData的使用",slug:"useasyncdata的使用",children:[]},{level:3,title:"useFetch的使用",slug:"usefetch的使用",children:[]}]},{level:2,title:"Nuxt3 中SEO相关的配置",slug:"nuxt3-中seo相关的配置",children:[{level:3,title:"title 和 meta 标签的作用",slug:"title-和-meta-标签的作用",children:[]}]},{level:2,title:"Nuxt3中pinia的使用",slug:"nuxt3中pinia的使用",children:[{level:3,title:"Pinia的持久化存储",slug:"pinia的持久化存储",children:[]}]},{level:2,title:"Vueuse的使用",slug:"vueuse的使用",children:[]},{level:2,title:"ssr底层原理",slug:"ssr底层原理",children:[]}],path:"/nuxt/2023/20230210.html",pathLocale:"/",extraFields:[]},{title:"使用 canvas 标签实现签名功能",headers:[],path:"/html/2022/20220923.html",pathLocale:"/",extraFields:[]},{title:"使用 canvas 标签实现图片水印",headers:[],path:"/html/2022/20221230.html",pathLocale:"/",extraFields:[]},{title:"企业级前端框架UMI3",headers:[{level:2,title:"模块一 : 框架环境和基本使用",slug:"模块一-框架环境和基本使用",children:[{level:3,title:"01 | 环境准备，快速上手",slug:"_01-环境准备-快速上手",children:[]},{level:3,title:"02 | 目录结构",slug:"_02-目录结构",children:[]},{level:3,title:"03 | 构建时配置",slug:"_03-构建时配置",children:[]},{level:3,title:"04 |  模板约定",slug:"_04-模板约定",children:[]},{level:3,title:"05 | antd, antd-mobile使用",slug:"_05-antd-antd-mobile使用",children:[]},{level:3,title:"06 | 图片和其他资源引入",slug:"_06-图片和其他资源引入",children:[]}]},{level:2,title:"模块二 : 组件书写风格与页面跳转",slug:"模块二-组件书写风格与页面跳转",children:[{level:3,title:"01 | Less 变量，混合，嵌套，父选择器",slug:"_01-less-变量-混合-嵌套-父选择器",children:[]},{level:3,title:"02 | hooks + 函数式编写组件",slug:"_02-hooks-函数式编写组件",children:[]},{level:3,title:"03 | 路由,权限,动态,约定式",slug:"_03-路由-权限-动态-约定式",children:[]},{level:3,title:"04 | 页面跳转，参数接收",slug:"_04-页面跳转-参数接收",children:[]}]},{level:2,title:"模块三 : 数据生成与请求",slug:"模块三-数据生成与请求",children:[{level:3,title:"01 |  数据模拟umi-mock",slug:"_01-数据模拟umi-mock",children:[]},{level:3,title:"02 |  数据模拟 json-server",slug:"_02-数据模拟-json-server",children:[]},{level:3,title:"03 | 反向代理",slug:"_03-反向代理",children:[]},{level:3,title:"04 |  fetch请求",slug:"_04-fetch请求",children:[]},{level:3,title:"05 |  umi-request请求",slug:"_05-umi-request请求",children:[]},{level:3,title:"06 |  useRequest请求",slug:"_06-userequest请求",children:[]}]},{level:2,title:"模块四 ：状态管理",slug:"模块四-状态管理",children:[{level:3,title:"01｜dva 介绍",slug:"_01-dva-介绍",children:[]},{level:3,title:"02 | 数据流向",slug:"_02-数据流向",children:[]},{level:3,title:"03 | 全局数据&页面数据获取和修改",slug:"_03-全局数据-页面数据获取和修改",children:[]},{level:3,title:"04 | 异步逻辑处理",slug:"_04-异步逻辑处理",children:[]},{level:3,title:"05 | 丢弃connect高阶组件，转投hooks",slug:"_05-丢弃connect高阶组件-转投hooks",children:[]},{level:3,title:"06 | subscriptions 源 获取",slug:"_06-subscriptions-源-获取",children:[]}]},{level:2,title:"模块五 ：运行时配置",slug:"模块五-运行时配置",children:[{level:3,title:"01 | 渲染前的权限校验",slug:"_01-渲染前的权限校验",children:[]},{level:3,title:"02 | 动态路由读取、添加",slug:"_02-动态路由读取、添加",children:[]},{level:3,title:"03 | 路由监听，埋点统计",slug:"_03-路由监听-埋点统计",children:[]},{level:3,title:"04 | 拦截器",slug:"_04-拦截器",children:[]}]},{level:2,title:"结束语",slug:"结束语",children:[{level:3,title:"结束语 | 未来愉快替代create-react-app 开发",slug:"结束语-未来愉快替代create-react-app-开发",children:[]}]}],path:"/react/2022/20220612.html",pathLocale:"/",extraFields:[]},{title:"尤雨溪强势推荐的Pinia",headers:[{level:2,title:"Pinia 基本使用",slug:"pinia-基本使用",children:[]},{level:2,title:"解构store",slug:"解构store",children:[{level:3,title:"ES传统方式解构(能获取到值，但是不具有响应性)",slug:"es传统方式解构-能获取到值-但是不具有响应性",children:[]},{level:3,title:"Pinia解构方法：storeToRefs",slug:"pinia解构方法-storetorefs",children:[]}]},{level:2,title:"Pinia修改数据状态",slug:"pinia修改数据状态",children:[{level:3,title:"简单数据修改",slug:"简单数据修改",children:[]},{level:3,title:"多条数据修改",slug:"多条数据修改",children:[]},{level:3,title:"通过action修改",slug:"通过action修改",children:[]}]},{level:2,title:"Pinia中的Getters",slug:"pinia中的getters",children:[]},{level:2,title:"store之间的相互调用",slug:"store之间的相互调用",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],path:"/vue/2022/20220325.html",pathLocale:"/",extraFields:[]},{title:"大文件分片上传",headers:[],path:"/vue/2022/20220930.html",pathLocale:"/",extraFields:[]},{title:"vue项目中如何配置环境变量",headers:[],path:"/vue/2022/20221002.html",pathLocale:"/",extraFields:[]},{title:"初探three",headers:[{level:2,title:"分析构成",slug:"分析构成",children:[]},{level:2,title:"容器canvas",slug:"容器canvas",children:[{level:3,title:"渲染器WebGLRenderer",slug:"渲染器webglrenderer",children:[]}]},{level:2,title:"场景Scene",slug:"场景scene",children:[]},{level:2,title:"相机OrthographicCamera or PerspectiveCamera",slug:"相机orthographiccamera-or-perspectivecamera",children:[{level:3,title:"正交相机（OrthographicCamera）",slug:"正交相机-orthographiccamera",children:[]},{level:3,title:"透视相机（PerspectiveCamera）",slug:"透视相机-perspectivecamera",children:[]}]},{level:2,title:"网格Mesh",slug:"网格mesh",children:[]},{level:2,title:"渲染场景与相机",slug:"渲染场景与相机",children:[]},{level:2,title:"操作几何体",slug:"操作几何体",children:[]},{level:2,title:"demo展示",slug:"demo展示",children:[]},{level:2,title:"轨道控制器(controls)",slug:"轨道控制器-controls",children:[]},{level:2,title:"坐标轴辅助器",slug:"坐标轴辅助器",children:[]},{level:2,title:"物体的移动，缩放，旋转",slug:"物体的移动-缩放-旋转",children:[]},{level:2,title:"时钟(clock)",slug:"时钟-clock",children:[]},{level:2,title:"动画库：gsap",slug:"动画库-gsap",children:[]},{level:2,title:"应用图形用户界面",slug:"应用图形用户界面",children:[]}],path:"/three/2023/20230115.html",pathLocale:"/",extraFields:[]},{title:"解决不同设备兼容性问题",headers:[],path:"/%E5%B0%8F%E7%A8%8B%E5%BA%8F/2022/20220730.html",pathLocale:"/",extraFields:[]},{title:"微信小程序在scroll-view标签内不能正常使用超过多行显示省略号",headers:[],path:"/%E5%B0%8F%E7%A8%8B%E5%BA%8F/2022/20220831.html",pathLocale:"/",extraFields:[]},{title:"在微信小程序中使用外部字体",headers:[],path:"/%E5%B0%8F%E7%A8%8B%E5%BA%8F/2022/20220901.html",pathLocale:"/",extraFields:[]},{title:"vscode 调式",headers:[],path:"/%E5%9F%BA%E7%A1%80/2022/20220612.html",pathLocale:"/",extraFields:[]},{title:"分包异步化",headers:[{level:2,title:"性能优化方案",slug:"性能优化方案",children:[]},{level:2,title:"分析",slug:"分析",children:[]},{level:2,title:"解决方案",slug:"解决方案",children:[{level:3,title:"方案 1：分包异步化",slug:"方案-1-分包异步化",children:[]},{level:3,title:"方案 2：分包插件异步化",slug:"方案-2-分包插件异步化",children:[]},{level:3,title:"顶层 await",slug:"顶层-await",children:[]},{level:3,title:"基础库兼容性",slug:"基础库兼容性",children:[]}]},{level:2,title:"总结",slug:"总结",children:[]}],path:"/%E5%B0%8F%E7%A8%8B%E5%BA%8F/2023/20230205.html",pathLocale:"/",extraFields:[]},{title:"JavaScript 面试知识点总结",headers:[{level:2,title:"1. 介绍 js 的基本数据类型。",slug:"_1-介绍-js-的基本数据类型。",children:[]},{level:2,title:"2. JavaScript 有几种类型的值？你能画一下他们的内存图吗？",slug:"_2-javascript-有几种类型的值-你能画一下他们的内存图吗",children:[]},{level:2,title:"3. 什么是堆？什么是栈？它们之间有什么区别和联系？",slug:"_3-什么是堆-什么是栈-它们之间有什么区别和联系",children:[]},{level:2,title:"4. 内部属性 [[Class]] 是什么？",slug:"_4-内部属性-class-是什么",children:[]},{level:2,title:"5. 介绍 js 有哪些内置对象？",slug:"_5-介绍-js-有哪些内置对象",children:[]},{level:2,title:"6. undefined 与 undeclared 的区别？",slug:"_6-undefined-与-undeclared-的区别",children:[]},{level:2,title:"7. null 和 undefined 的区别？",slug:"_7-null-和-undefined-的区别",children:[]},{level:2,title:"8. 如何获取安全的 undefined 值？",slug:"_8-如何获取安全的-undefined-值",children:[]},{level:2,title:"9. 说几条写 JavaScript 的基本规范？",slug:"_9-说几条写-javascript-的基本规范",children:[]},{level:2,title:"10. JavaScript 原型，原型链？ 有什么特点？",slug:"_10-javascript-原型-原型链-有什么特点",children:[]},{level:2,title:"11. js 获取原型的方法？",slug:"_11-js-获取原型的方法",children:[]},{level:2,title:"12. 在 js 中不同进制数字的表示方式",slug:"_12-在-js-中不同进制数字的表示方式",children:[]},{level:2,title:"13. js 中整数的安全范围是多少？",slug:"_13-js-中整数的安全范围是多少",children:[]},{level:2,title:"14. typeof NaN 的结果是什么？",slug:"_14-typeof-nan-的结果是什么",children:[]},{level:2,title:"15. isNaN 和 Number.isNaN 函数的区别？",slug:"_15-isnan-和-number-isnan-函数的区别",children:[]},{level:2,title:"16. Array 构造函数只有一个参数值时的表现？",slug:"_16-array-构造函数只有一个参数值时的表现",children:[]},{level:2,title:"17. 其他值到字符串的转换规则？",slug:"_17-其他值到字符串的转换规则",children:[]},{level:2,title:"18. 其他值到数字值的转换规则？",slug:"_18-其他值到数字值的转换规则",children:[]},{level:2,title:"19. 其他值到布尔类型的值的转换规则？",slug:"_19-其他值到布尔类型的值的转换规则",children:[]},{level:2,title:"20. {} 和 [] 的 valueOf 和 toString 的结果是什么？",slug:"_20-和-的-valueof-和-tostring-的结果是什么",children:[]},{level:2,title:"21. 什么是假值对象？",slug:"_21-什么是假值对象",children:[]},{level:2,title:"22. ~ 操作符的作用？",slug:"_22-操作符的作用",children:[]},{level:2,title:"23. 解析字符串中的数字和将字符串强制类型转换为数字的返回结果都是数字，它们之间的区别是什么？",slug:"_23-解析字符串中的数字和将字符串强制类型转换为数字的返回结果都是数字-它们之间的区别是什么",children:[]},{level:2,title:"24. + 操作符什么时候用于字符串的拼接？",slug:"_24-操作符什么时候用于字符串的拼接",children:[]},{level:2,title:"25. 什么情况下会发生布尔值的隐式强制类型转换？",slug:"_25-什么情况下会发生布尔值的隐式强制类型转换",children:[]},{level:2,title:"26. || 和 && 操作符的返回值？",slug:"_26-和-操作符的返回值",children:[]},{level:2,title:"27. Symbol 值的强制类型转换？",slug:"_27-symbol-值的强制类型转换",children:[]},{level:2,title:"28. 操作符的强制类型转换规则？",slug:"_28-操作符的强制类型转换规则",children:[]},{level:2,title:"29. 如何将字符串转化为数字，例如 '12.3b'?",slug:"_29-如何将字符串转化为数字-例如-12-3b",children:[]},{level:2,title:"30. 如何将浮点数点左边的数每三位添加一个逗号，如 12000000.11 转化为『12,000,000.11』?",slug:"_30-如何将浮点数点左边的数每三位添加一个逗号-如-12000000-11-转化为『12-000-000-11』",children:[]},{level:2,title:"31. 常用正则表达式",slug:"_31-常用正则表达式",children:[]},{level:2,title:"32. 生成随机数的各种方法？",slug:"_32-生成随机数的各种方法",children:[]},{level:2,title:"33. 如何实现数组的随机排序？",slug:"_33-如何实现数组的随机排序",children:[]},{level:2,title:"34. javascript 创建对象的几种方式？",slug:"_34-javascript-创建对象的几种方式",children:[]},{level:2,title:"35. JavaScript 继承的几种实现方式？",slug:"_35-javascript-继承的几种实现方式",children:[]},{level:2,title:"36. 寄生式组合继承的实现？",slug:"_36-寄生式组合继承的实现",children:[]},{level:2,title:"37. Javascript 的作用域链？",slug:"_37-javascript-的作用域链",children:[]},{level:2,title:"38. 谈谈 This 对象的理解。",slug:"_38-谈谈-this-对象的理解。",children:[]},{level:2,title:"39. eval 是做什么的？",slug:"_39-eval-是做什么的",children:[]},{level:2,title:"40. 什么是 DOM 和 BOM？",slug:"_40-什么是-dom-和-bom",children:[]},{level:2,title:"41. 写一个通用的事件侦听器函数。",slug:"_41-写一个通用的事件侦听器函数。",children:[]},{level:2,title:"42. 事件是什么？IE 与火狐的事件机制有什么区别？ 如何阻止冒泡？",slug:"_42-事件是什么-ie-与火狐的事件机制有什么区别-如何阻止冒泡",children:[]},{level:2,title:"43. 三种事件模型是什么？",slug:"_43-三种事件模型是什么",children:[]},{level:2,title:"44. 事件委托是什么？",slug:"_44-事件委托是什么",children:[]},{level:2,title:'45. ["1", "2", "3"].map(parseInt) 答案是多少？',slug:"_45-1-2-3-map-parseint-答案是多少",children:[]},{level:2,title:"46. 什么是闭包，为什么要用它？",slug:"_46-什么是闭包-为什么要用它",children:[]},{level:2,title:'47. javascript 代码中的 "use strict"; 是什么意思 ? 使用它区别是什么？',slug:"_47-javascript-代码中的-use-strict-是什么意思-使用它区别是什么",children:[]},{level:2,title:"48. 如何判断一个对象是否属于某个类？",slug:"_48-如何判断一个对象是否属于某个类",children:[]},{level:2,title:"49. instanceof 的作用？",slug:"_49-instanceof-的作用",children:[]},{level:2,title:"50. new 操作符具体干了什么呢？如何实现？",slug:"_50-new-操作符具体干了什么呢-如何实现",children:[]},{level:2,title:"51. Javascript 中，有一个函数，执行时对象查找时，永远不会去查找原型，这个函数是？",slug:"_51-javascript-中-有一个函数-执行时对象查找时-永远不会去查找原型-这个函数是",children:[]},{level:2,title:"52. 对于 JSON 的了解？",slug:"_52-对于-json-的了解",children:[]},{level:2,title:'53. [].forEach.call($$(""),function(a){a.style.outline="1px solid #"+((Math.random()(1<<24))).toString(16)}) 能解释一下这段代码的意思吗？',slug:"_53-foreach-call-function-a-a-style-outline-1px-solid-math-random-1-24-tostring-16-能解释一下这段代码的意思吗",children:[]},{level:2,title:"54. js 延迟加载的方式有哪些？",slug:"_54-js-延迟加载的方式有哪些",children:[]},{level:2,title:"55. Ajax 是什么? 如何创建一个 Ajax？",slug:"_55-ajax-是什么-如何创建一个-ajax",children:[]},{level:2,title:"56. 谈一谈浏览器的缓存机制？",slug:"_56-谈一谈浏览器的缓存机制",children:[]},{level:2,title:"57. Ajax 解决浏览器缓存问题？",slug:"_57-ajax-解决浏览器缓存问题",children:[]},{level:2,title:"58. 同步和异步的区别？",slug:"_58-同步和异步的区别",children:[]},{level:2,title:"59. 什么是浏览器的同源政策？",slug:"_59-什么是浏览器的同源政策",children:[]},{level:2,title:"60. 如何解决跨域问题？",slug:"_60-如何解决跨域问题",children:[]},{level:2,title:"61. 服务器代理转发时，该如何处理 cookie？",slug:"_61-服务器代理转发时-该如何处理-cookie",children:[]},{level:2,title:"62. 简单谈一下 cookie ？",slug:"_62-简单谈一下-cookie",children:[]},{level:2,title:"63. 模块化开发怎么做？",slug:"_63-模块化开发怎么做",children:[]},{level:2,title:"64. js 的几种模块规范？",slug:"_64-js-的几种模块规范",children:[]},{level:2,title:"65. AMD 和 CMD 规范的区别？",slug:"_65-amd-和-cmd-规范的区别",children:[]},{level:2,title:"66. ES6 模块与 CommonJS 模块、AMD、CMD 的差异。",slug:"_66-es6-模块与-commonjs-模块、amd、cmd-的差异。",children:[]},{level:2,title:"67. requireJS 的核心原理是什么？（如何动态加载的？如何避免多次加载的？如何 缓存的？）",slug:"_67-requirejs-的核心原理是什么-如何动态加载的-如何避免多次加载的-如何-缓存的",children:[]},{level:2,title:"68. JS 模块加载器的轮子怎么造，也就是如何实现一个模块加载器？",slug:"_68-js-模块加载器的轮子怎么造-也就是如何实现一个模块加载器",children:[]},{level:2,title:"69. ECMAScript6 怎么写 class，为什么会出现 class 这种东西?",slug:"_69-ecmascript6-怎么写-class-为什么会出现-class-这种东西",children:[]},{level:2,title:"70. documen.write 和 innerHTML 的区别？",slug:"_70-documen-write-和-innerhtml-的区别",children:[]},{level:2,title:"71. DOM 操作——怎样添加、移除、移动、复制、创建和查找节点？",slug:"_71-dom-操作——怎样添加、移除、移动、复制、创建和查找节点",children:[]},{level:2,title:"72. innerHTML 与 outerHTML 的区别？",slug:"_72-innerhtml-与-outerhtml-的区别",children:[]},{level:2,title:"73. .call() 和 .apply() 的区别？",slug:"_73-call-和-apply-的区别",children:[]},{level:2,title:"74. JavaScript 类数组对象的定义？",slug:"_74-javascript-类数组对象的定义",children:[]},{level:2,title:"75. 数组和对象有哪些原生方法，列举一下？",slug:"_75-数组和对象有哪些原生方法-列举一下",children:[]},{level:2,title:"76. 数组的 fill 方法？",slug:"_76-数组的-fill-方法",children:[]},{level:2,title:"77. [,,,] 的长度？",slug:"_77-的长度",children:[]},{level:2,title:"78. JavaScript 中的作用域与变量声明提升？",slug:"_78-javascript-中的作用域与变量声明提升",children:[]},{level:2,title:"79. 如何编写高性能的 Javascript ？",slug:"_79-如何编写高性能的-javascript",children:[]},{level:2,title:"80. 简单介绍一下 V8 引擎的垃圾回收机制",slug:"_80-简单介绍一下-v8-引擎的垃圾回收机制",children:[]},{level:2,title:"81. 哪些操作会造成内存泄漏？",slug:"_81-哪些操作会造成内存泄漏",children:[]},{level:2,title:"82. 需求：实现一个页面操作不会整页刷新的网站，并且能在浏览器前进、后退时正确响应。给出你的技术实现方案？",slug:"_82-需求-实现一个页面操作不会整页刷新的网站-并且能在浏览器前进、后退时正确响应。给出你的技术实现方案",children:[]},{level:2,title:"83. 如何判断当前脚本运行在浏览器还是 node 环境中？（阿里）",slug:"_83-如何判断当前脚本运行在浏览器还是-node-环境中-阿里",children:[]},{level:2,title:"84. 把 script 标签放在页面的最底部的 body 封闭之前和封闭之后有什么区别？浏览器会如何解析它们？",slug:"_84-把-script-标签放在页面的最底部的-body-封闭之前和封闭之后有什么区别-浏览器会如何解析它们",children:[]},{level:2,title:"85. 移动端的点击事件的有延迟，时间是多久，为什么会有？ 怎么解决这个延时？",slug:"_85-移动端的点击事件的有延迟-时间是多久-为什么会有-怎么解决这个延时",children:[]},{level:2,title:"86. 什么是“前端路由”？什么时候适合使用“前端路由”？“前端路由”有哪些优点和缺点？",slug:"_86-什么是-前端路由-什么时候适合使用-前端路由-前端路由-有哪些优点和缺点",children:[]},{level:2,title:"87. 如何测试前端代码么？ 知道 BDD, TDD, Unit Test 么？ 知道怎么测试你的前端工程么(mocha, sinon, jasmin, qUnit..)？",slug:"_87-如何测试前端代码么-知道-bdd-tdd-unit-test-么-知道怎么测试你的前端工程么-mocha-sinon-jasmin-qunit",children:[]},{level:2,title:"88. 检测浏览器版本版本有哪些方式？",slug:"_88-检测浏览器版本版本有哪些方式",children:[]},{level:2,title:"89. 什么是 Polyfill ？",slug:"_89-什么是-polyfill",children:[]},{level:2,title:"90. 使用 JS 实现获取文件扩展名？",slug:"_90-使用-js-实现获取文件扩展名",children:[]},{level:2,title:"91. 介绍一下 js 的节流与防抖？",slug:"_91-介绍一下-js-的节流与防抖",children:[]},{level:2,title:"92. Object.is() 与原来的比较操作符 “=”、“” 的区别？",slug:"_92-object-is-与原来的比较操作符-、-的区别",children:[]},{level:2,title:"93. escape,encodeURI,encodeURIComponent 有什么区别？",slug:"_93-escape-encodeuri-encodeuricomponent-有什么区别",children:[]},{level:2,title:"94. Unicode 和 UTF-8 之间的关系？",slug:"_94-unicode-和-utf-8-之间的关系",children:[]},{level:2,title:"95. js 的事件循环是什么？",slug:"_95-js-的事件循环是什么",children:[]},{level:2,title:"96. js 中的深浅拷贝实现？",slug:"_96-js-中的深浅拷贝实现",children:[]},{level:2,title:"97. 手写 call、apply 及 bind 函数",slug:"_97-手写-call、apply-及-bind-函数",children:[]},{level:2,title:"98. 函数柯里化的实现",slug:"_98-函数柯里化的实现",children:[]},{level:2,title:"99. 为什么 0.1 + 0.2 != 0.3？如何解决这个问题？",slug:"_99-为什么-0-1-0-2-0-3-如何解决这个问题",children:[]},{level:2,title:"100. 原码、反码和补码的介绍",slug:"_100-原码、反码和补码的介绍",children:[]},{level:2,title:"101. toPrecision 和 toFixed 和 Math.round 的区别？",slug:"_101-toprecision-和-tofixed-和-math-round-的区别",children:[]},{level:2,title:"102. 什么是 XSS 攻击？如何防范 XSS 攻击？",slug:"_102-什么是-xss-攻击-如何防范-xss-攻击",children:[]},{level:2,title:"103. 什么是 CSP？",slug:"_103-什么是-csp",children:[]},{level:2,title:"104. 什么是 CSRF 攻击？如何防范 CSRF 攻击？",slug:"_104-什么是-csrf-攻击-如何防范-csrf-攻击",children:[]},{level:2,title:"105. 什么是 Samesite Cookie 属性？",slug:"_105-什么是-samesite-cookie-属性",children:[]},{level:2,title:"106. 什么是点击劫持？如何防范点击劫持？",slug:"_106-什么是点击劫持-如何防范点击劫持",children:[]},{level:2,title:"107. SQL 注入攻击？",slug:"_107-sql-注入攻击",children:[]},{level:2,title:"108. 什么是 MVVM？比之 MVC 有什么区别？什么又是 MVP ？",slug:"_108-什么是-mvvm-比之-mvc-有什么区别-什么又是-mvp",children:[]},{level:2,title:"109. vue 双向数据绑定原理？",slug:"_109-vue-双向数据绑定原理",children:[]},{level:2,title:"110. Object.defineProperty 介绍？",slug:"_110-object-defineproperty-介绍",children:[]},{level:2,title:"111. 使用 Object.defineProperty() 来进行数据劫持有什么缺点？",slug:"_111-使用-object-defineproperty-来进行数据劫持有什么缺点",children:[]},{level:2,title:"112. 什么是 Virtual DOM？为什么 Virtual DOM 比原生 DOM 快？",slug:"_112-什么是-virtual-dom-为什么-virtual-dom-比原生-dom-快",children:[]},{level:2,title:"113. 如何比较两个 DOM 树的差异？",slug:"_113-如何比较两个-dom-树的差异",children:[]},{level:2,title:"114. 什么是 requestAnimationFrame ？",slug:"_114-什么是-requestanimationframe",children:[]},{level:2,title:"115. 谈谈你对 webpack 的看法",slug:"_115-谈谈你对-webpack-的看法",children:[]},{level:2,title:"116. offsetWidth/offsetHeight,clientWidth/clientHeight 与 scrollWidth/scrollHeight 的区别？",slug:"_116-offsetwidth-offsetheight-clientwidth-clientheight-与-scrollwidth-scrollheight-的区别",children:[]},{level:2,title:"117. 谈一谈你理解的函数式编程？",slug:"_117-谈一谈你理解的函数式编程",children:[]},{level:2,title:"118. 异步编程的实现方式？",slug:"_118-异步编程的实现方式",children:[]},{level:2,title:"119. Js 动画与 CSS 动画区别及相应实现",slug:"_119-js-动画与-css-动画区别及相应实现",children:[]},{level:2,title:"120. get 请求传参长度的误区",slug:"_120-get-请求传参长度的误区",children:[]},{level:2,title:"121. URL 和 URI 的区别？",slug:"_121-url-和-uri-的区别",children:[]},{level:2,title:"122. get 和 post 请求在缓存方面的区别",slug:"_122-get-和-post-请求在缓存方面的区别",children:[]},{level:2,title:"123. 图片的懒加载和预加载",slug:"_123-图片的懒加载和预加载",children:[]},{level:2,title:"124. mouseover 和 mouseenter 的区别？",slug:"_124-mouseover-和-mouseenter-的区别",children:[]},{level:2,title:"125. js 拖拽功能的实现",slug:"_125-js-拖拽功能的实现",children:[]},{level:2,title:"126. 为什么使用 setTimeout 实现 setInterval？怎么模拟？",slug:"_126-为什么使用-settimeout-实现-setinterval-怎么模拟",children:[]},{level:2,title:"127. let 和 const 的注意点？",slug:"_127-let-和-const-的注意点",children:[]},{level:2,title:"128. 什么是 rest 参数？",slug:"_128-什么是-rest-参数",children:[]},{level:2,title:"129. 什么是尾调用，使用尾调用有什么好处？",slug:"_129-什么是尾调用-使用尾调用有什么好处",children:[]},{level:2,title:"130. Symbol 类型的注意点？",slug:"_130-symbol-类型的注意点",children:[]},{level:2,title:"131. Set 和 WeakSet 结构？",slug:"_131-set-和-weakset-结构",children:[]},{level:2,title:"132. Map 和 WeakMap 结构？",slug:"_132-map-和-weakmap-结构",children:[]},{level:2,title:"133. 什么是 Proxy ？",slug:"_133-什么是-proxy",children:[]},{level:2,title:"134. Reflect 对象创建目的？",slug:"_134-reflect-对象创建目的",children:[]},{level:2,title:"135. require 模块引入的查找方式？",slug:"_135-require-模块引入的查找方式",children:[]},{level:2,title:"136. 什么是 Promise 对象，什么是 Promises/A+ 规范？",slug:"_136-什么是-promise-对象-什么是-promises-a-规范",children:[]},{level:2,title:"137. 手写一个 Promise",slug:"_137-手写一个-promise",children:[]},{level:2,title:"138. 如何检测浏览器所支持的最小字体大小？",slug:"_138-如何检测浏览器所支持的最小字体大小",children:[]},{level:2,title:"139. 怎么做 JS 代码 Error 统计？",slug:"_139-怎么做-js-代码-error-统计",children:[]},{level:2,title:"140. 单例模式模式是什么？",slug:"_140-单例模式模式是什么",children:[]},{level:2,title:"141. 策略模式是什么？",slug:"_141-策略模式是什么",children:[]},{level:2,title:"142. 代理模式是什么？",slug:"_142-代理模式是什么",children:[]},{level:2,title:"143. 中介者模式是什么？",slug:"_143-中介者模式是什么",children:[]},{level:2,title:"144. 适配器模式是什么？",slug:"_144-适配器模式是什么",children:[]},{level:2,title:"145. 观察者模式和发布订阅模式有什么不同？",slug:"_145-观察者模式和发布订阅模式有什么不同",children:[]},{level:2,title:"146. Vue 的生命周期是什么？",slug:"_146-vue-的生命周期是什么",children:[]},{level:2,title:"147. Vue 的各个生命阶段是什么？",slug:"_147-vue-的各个生命阶段是什么",children:[]},{level:2,title:"148. Vue 组件间的参数传递方式？",slug:"_148-vue-组件间的参数传递方式",children:[]},{level:2,title:"149. computed 和 watch 的差异？",slug:"_149-computed-和-watch-的差异",children:[]},{level:2,title:"150. vue-router 中的导航钩子函数",slug:"_150-vue-router-中的导航钩子函数",children:[]},{level:2,title:"151. $route 和 $router 的区别？",slug:"_151-route-和-router-的区别",children:[]},{level:2,title:"152. vue 常用的修饰符？",slug:"_152-vue-常用的修饰符",children:[]},{level:2,title:"153. vue 中 key 值的作用？",slug:"_153-vue-中-key-值的作用",children:[]},{level:2,title:"154. computed 和 watch 区别？",slug:"_154-computed-和-watch-区别",children:[]},{level:2,title:"155. keep-alive 组件有什么作用？",slug:"_155-keep-alive-组件有什么作用",children:[]},{level:2,title:"156. vue 中 mixin 和 mixins 区别？",slug:"_156-vue-中-mixin-和-mixins-区别",children:[]},{level:2,title:"157. 开发中常用的几种 Content-Type ？",slug:"_157-开发中常用的几种-content-type",children:[]},{level:2,title:"158. 如何封装一个 javascript 的类型判断函数？",slug:"_158-如何封装一个-javascript-的类型判断函数",children:[]},{level:2,title:"159. 如何判断一个对象是否为空对象？",slug:"_159-如何判断一个对象是否为空对象",children:[]},{level:2,title:"160. 使用闭包实现每隔一秒打印 1,2,3,4",slug:"_160-使用闭包实现每隔一秒打印-1-2-3-4",children:[]},{level:2,title:"161. 手写一个 jsonp",slug:"_161-手写一个-jsonp",children:[]},{level:2,title:"162. 手写一个观察者模式？",slug:"_162-手写一个观察者模式",children:[]},{level:2,title:"163. EventEmitter 实现",slug:"_163-eventemitter-实现",children:[]},{level:2,title:"164. 一道常被人轻视的前端 JS 面试题",slug:"_164-一道常被人轻视的前端-js-面试题",children:[]},{level:2,title:"165. 如何确定页面的可用性时间，什么是 Performance API？",slug:"_165-如何确定页面的可用性时间-什么是-performance-api",children:[]},{level:2,title:"166. js 中的命名规则",slug:"_166-js-中的命名规则",children:[]},{level:2,title:"167. js 语句末尾分号是否可以省略？",slug:"_167-js-语句末尾分号是否可以省略",children:[]},{level:2,title:"168. Object.assign()",slug:"_168-object-assign",children:[]},{level:2,title:"169. Math.ceil 和 Math.floor",slug:"_169-math-ceil-和-math-floor",children:[]},{level:2,title:"170. js for 循环注意点",slug:"_170-js-for-循环注意点",children:[]}],path:"/%E9%9D%A2%E8%AF%95/2022/20221016.html",pathLocale:"/",extraFields:[]},{title:"Webpack 5基础入门手册",headers:[{level:2,title:"基础使用",slug:"基础使用",children:[]},{level:2,title:"自定义 webpack 配置",slug:"自定义-webpack-配置",children:[]},{level:2,title:"配置文件",slug:"配置文件",children:[]},{level:2,title:"自动引入资源",slug:"自动引入资源",children:[]},{level:2,title:"使用 source map",slug:"使用-source-map",children:[]},{level:2,title:"使用 watch mode(观察模式)",slug:"使用-watch-mode-观察模式",children:[]},{level:2,title:"使用 webpack-dev-server",slug:"使用-webpack-dev-server",children:[]},{level:2,title:"资源模块",slug:"资源模块",children:[]},{level:2,title:"Loader(预处理加载器)",slug:"loader-预处理加载器",children:[]},{level:2,title:"抽离和压缩css",slug:"抽离和压缩css",children:[]},{level:2,title:"babel-loader",slug:"babel-loader",children:[]},{level:2,title:"代码分离",slug:"代码分离",children:[]},{level:2,title:"拆分生产环境和开发环境",slug:"拆分生产环境和开发环境",children:[{level:3,title:"公共路径",slug:"公共路径",children:[]},{level:3,title:"环境变量",slug:"环境变量",children:[]},{level:3,title:"拆分配置文件",slug:"拆分配置文件",children:[]},{level:3,title:"合并配置文件",slug:"合并配置文件",children:[]}]},{level:2,title:"模块热替换与热加载",slug:"模块热替换与热加载",children:[]},{level:2,title:"eslint",slug:"eslint",children:[{level:3,title:"结合webpack使用",slug:"结合webpack使用",children:[]}]},{level:2,title:"git-hooks 与 husky",slug:"git-hooks-与-husky",children:[{level:3,title:"提交代码前进行 eslist 检测",slug:"提交代码前进行-eslist-检测",children:[]},{level:3,title:"使用 husky 进行代码提交前 eslist 检测",slug:"使用-husky-进行代码提交前-eslist-检测",children:[]}]},{level:2,title:"Webpack 模块与解析原理",slug:"webpack-模块与解析原理",children:[]},{level:2,title:"外部扩展",slug:"外部扩展",children:[]},{level:2,title:"依赖图",slug:"依赖图",children:[]},{level:2,title:"Web Works",slug:"web-works",children:[]},{level:2,title:"TypeScript",slug:"typescript",children:[{level:3,title:"使用第三方类库",slug:"使用第三方类库",children:[]}]},{level:2,title:"多页面应用",slug:"多页面应用",children:[{level:3,title:"entry 配置",slug:"entry-配置",children:[]}]},{level:2,title:"Tree shaking",slug:"tree-shaking",children:[]},{level:2,title:"渐进式网络应用程序 PWA",slug:"渐进式网络应用程序-pwa",children:[]},{level:2,title:"Shimming 预置全局变量",slug:"shimming-预置全局变量",children:[{level:3,title:"this 指向",slug:"this-指向",children:[]}]},{level:2,title:"创建一个小轮子",slug:"创建一个小轮子",children:[{level:3,title:"如何构建一个 library",slug:"如何构建一个-library",children:[]},{level:3,title:"创建一个 webpack-numbers",slug:"创建一个-webpack-numbers",children:[]},{level:3,title:"发布到 npm package上",slug:"发布到-npm-package上",children:[]}]},{level:2,title:"dll (动态链接库)",slug:"dll-动态链接库",children:[]}],path:"/%E5%B7%A5%E5%85%B7/2022/20221001.html",pathLocale:"/",extraFields:[]},{title:"尤雨溪推荐神器 ni ，能替代 npm/yarn/pnpm ？",headers:[{level:2,title:"ni 原理",slug:"ni-原理",children:[]},{level:2,title:"使用",slug:"使用",children:[]},{level:2,title:"阅读源码",slug:"阅读源码",children:[]},{level:2,title:"主流程 runner - runCli 函数",slug:"主流程-runner-runcli-函数",children:[]},{level:2,title:"主流程 runner - run 主函数",slug:"主流程-runner-run-主函数",children:[]},{level:2,title:"根据锁文件猜测用哪个包管理器 - detect 函数",slug:"根据锁文件猜测用哪个包管理器-detect-函数",children:[]},{level:2,title:"抹平不同的包管理器的命令差异 - parseNi 函数",slug:"抹平不同的包管理器的命令差异-parseni-函数",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],path:"/%E5%B7%A5%E5%85%B7/2022/20221019.html",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/404.html",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/about/",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/mood/",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/link/",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/tag/",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/archive/",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/aurora-coze/",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/register/",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/photo/",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/next-mood/",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/aurora-archive/",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/aurora-music/",pathLocale:"/",extraFields:[]}]},5220:(n,s,a)=>{a.d(s,{H:()=>e});const e={base:"/",lang:"zh-CN",title:"星空",description:"",head:[["script",{src:"https://at.alicdn.com/t/font_2849934_v6y652peian.js"}],["link",{href:"/avatar.jpg",rel:"icon"}],["link",{rel:"stylesheet",type:"text/css",href:"//at.alicdn.com/t/font_2932340_r7zitafg82.css"}]],locales:{}}},2232:(n,s,a)=>{a.d(s,{f:()=>e});const e={navbar:[{text:"个人介绍",iconClass:"aurora-navbar-hua2",link:"/about"},{text:"page",iconClass:"aurora-navbar-a-ziyuan107",children:[{text:"标签",children:[{text:"tag",link:"/tag"}]},{text:"时间轴",children:[{text:"archive",link:"/archive"}]}]},{text:"友情链接",link:"/link",iconClass:"aurora-navbar-guide"},{text:"Github",link:"https://github.com/yuan5379/yuan5379.github.io",iconClass:"aurora-navbar-github1"}],darkMode:!1,repo:"https://github.com/yuan5379/yuan5379.github.io",repoIconClass:"aurora-navbar-github",docsRepo:"https://github.com/yuan5379/yuan5379.github.io",githubActions:!1,docsBranch:"master",repoLabel:"星空",editLink:!0,editLinkText:"edit",lastUpdated:!0,lastUpdatedText:"lastTime",logoColor:"#2c3e50",showFont:"程",heroImg:"/avatar.jpg",logo:"/avatar.jpg",lazyLoadingImg:"/ljz.gif",homePageLazyLoadingImg:"/aurora-loading.gif",customRandomSay:!1,customRandomValue:"Vuepress-theme-Aurora",socials:[{aHref:"tencent://message/?uin=1845249720",isHome:!0,show:!0,sidebar:!0,symbol:"#icon-qq"},{aHref:"javascript:;",showImgSrc:"/wechat.jpg",isHome:!0,show:!0,symbol:"#icon-weixin",sidebar:!0},{aHref:"https://github.com/yuan5379/",isHome:!0,show:!0,sidebar:!0,symbol:"#icon-github-fill"},{aHref:"https://stackoverflow.com/",isHome:!0,show:!0,symbol:"#icon-stackoverflow",sidebar:!0},{aHref:"https://www.bilibili.com/",isHome:!0,show:!0,sidebar:!0,symbol:"#icon-bilibili-1"},{aHref:"https://music.163.com/#",isHome:!0,show:!0,symbol:"#icon-wangyiyunyinle",sidebar:!0}],logoTitle:"星空",headTitle:"this is headTitle",description:"vuepress-theme-Aurora是一款简洁，美观，功能强大的静态主题",keyword:"vuepress主题,vuepress theme,生活琐事,二次元博客,简约博客,博客主题,静态主题",slideTime:3e5,randomSaw:"https://international.v1.hitokoto.cn/?c=b&max_length=45",about:[{bgImg:"/bg/763311.jpg",bar:!1,title:"我?",describe:["是一名来自江西乐平的前端工程师","喜欢听音乐,什么类型都可","喜欢技术,coding","目前正在学习three.js",'最喜欢的电影是"忠犬八公的故事",梦想以后独居也能有一只"Hachi"',"......"],tag:["coding","番剧","电影","安静","音乐","小说","宅"],showTag:!0},{bar:!1,title:"未来规划",describe:["高级前端工程师","赚money","......"],tag:["忘记过去，展望未来"],showTag:!0},{bgImg:"/bg/3.jpg",bar:!0,title:"技  能",describe:[{name:"HTML5",score:87},{name:"javascript",score:85},{name:"css",score:80},{name:"vue",score:82},{name:"react",score:72},{name:"uni-app",score:76},{name:"webpack",score:70},{name:"three.js",score:30}],showTag:!1}],randomColor:["#ffcad4","#d8e2dc","#8d99ae","#b8f2e6","#84c7d0","#aed9e0","#00b4d8","#caf0f8","#fbc4ab","#fdc5f5","#84dcc6","#a9def9","#fcf6bd","#f0a6ca","#b9faf8","#42a5f5","#ff9800","#b39ddb","#6d45bb","#b388ff","#1565c0","#26c6da","#5e548e","#90f1ef","#5b5f97","#bbe6e4","#42bfdd","#72ddf7","#8093f1","#9ed8d8","#7ea8be","#ef90b3","#b892ef","#c0b9dd","#c0d9dd","#75c9c8","#ded9e2","#b5e2fa","#62b6cb","#5fa8d3","#0fa3b1","#b5e2fa","#5fa8d3","#62b6cb","#b892ff"],maxFontColorArr:8,fontColor:["#2c3e50","#42a5f5","#8093f1","#FF6EC7","#FF7F00","#8FBC8F","#EAADEA","#3299CC","#CDCDCD","#CC3299","#FF7F00","#2F4F4F"],friendLinks:[{title:"我的朋友",links:[{title:"XI溪",url:"http://www.xiaoxuya.top",logo:"https://www.xiaoxuya.top/img/logo.png",describe:"人生若只是初见,何事秋风悲画扇",cover:"/friendImg/image-20211106100103898.png?x-oss-process=style/pictureProcess1"},{title:"左眼会陪右眼哭の博客",url:"http://qkongtao.cn/",logo:"http://qiniu.qkongtao.cn/2020/12/d11-e1628358435552.png",describe:"干嘛这么想不开，要在脸上贴个输字！",cover:"/friendImg/image-20211106101057042.png?x-oss-process=style/pictureProcess1"},{title:"[ Blog We]",url:"https://blogwe.com/",logo:"https://blogwe.com/favicon.ico",describe:"博客大全-做最好的博客导航！",cover:"/friendImg/image-20211106100344348.png?x-oss-process=style/pictureProcess1"},{title:"I Am I",url:"https://5ime.cn",logo:"https://cdn.jsdelivr.net/gh/5ime/img/avatar.jpg",describe:"永远相信美好的事情即将发生",cover:"/friendImg/image-20211106100424035.png?x-oss-process=style/pictureProcess1"},{title:"Davinci的红茶馆",url:"https://davincievans.top/",logo:"https://cdn.jsdelivr.net/gh/DavinciEvans/Imgs-bed@master/gallery/avatar.jpg",describe:"You are all stardust.",cover:"/friendImg/image-20211106100502873.png?x-oss-process=style/pictureProcess1"},{title:"皮皮凛の小窝",url:"https://owomoe.net/",logo:"https://cdn.jsdelivr.net/gh/AyagawaSeirin/Assets/img/logo.jpg",describe:"永远相信美好的事情即将发生~",cover:"/friendImg/image-20211106100608395.png?x-oss-process=style/pictureProcess1"},{title:"月月月子喵",url:"https://haozi.moe",logo:"https://haozi.moe/css/images/logo_christmas.png",describe:"可爱的月子酱",cover:"/friendImg/image-20211106100009647.png?x-oss-process=style/pictureProcess1"}]},{title:"大佬",links:[{title:"XI溪",url:"http://www.xiaoxuya.top",logo:"https://www.xiaoxuya.top/img/logo.png",describe:"人生若只是初见,何事秋风悲画扇",cover:"/friendImg/image-20211106100103898.png?x-oss-process=style/pictureProcess1"},{title:"左眼会陪右眼哭の博客",url:"http://qkongtao.cn/",logo:"http://qiniu.qkongtao.cn/2020/12/d11-e1628358435552.png",describe:"干嘛这么想不开，要在脸上贴个输字！",cover:"/friendImg/image-20211106101057042.png?x-oss-process=style/pictureProcess1"},{title:"皮皮凛の小窝",url:"https://owomoe.net/",logo:"https://cdn.jsdelivr.net/gh/AyagawaSeirin/Assets/img/logo.jpg",describe:"永远相信美好的事情即将发生~",cover:"/friendImg/image-20211106100608395.png?x-oss-process=style/pictureProcess1"},{title:"月月月子喵",url:"https://haozi.moe",logo:"https://haozi.moe/css/images/logo_christmas.png",describe:"可爱的月子酱",cover:"/friendImg/image-20211106100009647.png?x-oss-process=style/pictureProcess1"}]},{title:"小伙伴",links:[{title:"XI溪",url:"http://www.xiaoxuya.top",logo:"https://www.xiaoxuya.top/img/logo.png",describe:"人生若只是初见,何事秋风悲画扇",cover:"/friendImg/image-20211106100103898.png?x-oss-process=style/pictureProcess1"},{title:"[ Blog We]",url:"https://blogwe.com/",logo:"https://blogwe.com/favicon.ico",describe:"博客大全-做最好的博客导航！",cover:"/friendImg/image-20211106100344348.png?x-oss-process=style/pictureProcess1"},{title:"Davinci的红茶馆",url:"https://davincievans.top/",logo:"https://cdn.jsdelivr.net/gh/DavinciEvans/Imgs-bed@master/gallery/avatar.jpg",describe:"You are all stardust.",cover:"/friendImg/image-20211106100502873.png?x-oss-process=style/pictureProcess1"},{title:"皮皮凛の小窝",url:"https://owomoe.net/",logo:"https://cdn.jsdelivr.net/gh/AyagawaSeirin/Assets/img/logo.jpg",describe:"永远相信美好的事情即将发生~",cover:"/friendImg/image-20211106100608395.png?x-oss-process=style/pictureProcess1"}]}],siteInformation:{title:"星空",url:"https://yuan5379.github.io/",logo:"/avatar.jpg",describe:"vuepress-theme-Aurora是一款简洁，美观，功能强大的静态主题",cover:"/my-cover.png",contact:"email: yuan537900@126.com, qq:1845249720",otherDescribe:["申请友链请按照下面格式，在此页面留言，我看到就会进行添加","博客名称    博客地址      博客描述      博客logo","友链申请要求","拒绝涉政/涉黄/太多广告/盈利性站点","站点能正常访问"]},fontFamily:["-apple-system","hlt","tzt","sst","lf","xsf","lsf","cgt"],footer:["Copyright © by qsyyke All Rights Reserved.","<a target='_blank' href='http://www.beian.gov.cn/portal/registerSystemInfo?recordcode=53060202000142' style='display:inline-block;text-decoration:none;height:20px;line-height:20px;'><img src='' style='float:left;'/><p style='float:left;height:20px;line-height:20px;margin: 0px 0px 0px 5px;'>滇公网安备 53060202000142号</p></a>"],isShowFooter:!0,isShowThemeCopyright:!0,isShowRunTime:!0,startRunTime:"8/7/2021 12:22:00",prefixRuntime:"小破站已运行",message:["暂无公告"],recommendPageLength:30,recommendNoTitle:"`╮(￣▽￣)╭`",tagNoTitle:"暂时还没有标题哟",mood:"青衫烟雨客",isFitter:!0,defaultBorderRadius:10,defaultOpacity:1,isHomePageFollow:!1,defaultBlur:1,split:"~",donate:{donateImg:["/aurora/wxpay.png","/aurora/zfbpay.jpg"],articlePage:!1,aboutPage:!1,donateProduct:[{name:"奶茶",img:"/aurora/nc.jpeg",price:18,prefix:"$"},{name:"全味奶茶",img:"/aurora/image-20210911233612031.png",price:11,prefix:"￥"}],donateList:[{name:"初尘",msg:"主题太棒了",img:"/aurora/nc.jpeg",price:7,prefix:"￥"}]},comment:{showComment:!1,serverURL:"https://aurora-local-7hrjb6mp8-qsyyke.vercel.app/",emojis:["https://cdn.jsdelivr.net/gh/walinejs/emojis@1.0.0/alus","https://cdn.jsdelivr.net/gh/walinejs/emojis@1.0.0/bilibili","https://cdn.jsdelivr.net/gh/walinejs/emojis@1.0.0/tieba","https://cdn.jsdelivr.net/gh/walinejs/emojis@1.0.0/weibo"],avatar:"monsterid"},poster:{description:"vuepress-theme-Aurora是一款简洁，美观，功能强大的静态主题",author:"星空",preBlog:"Aurora",suffixBlog:" theme",avatar:"/avatar.jpg"},showOnlineMood:!1,showMoodEdit:!1,addMood:{siteName:"localhost:8080",appId:"q4LlYVTTk2r39sNrJr7BL9A6p",appKey:"VxezWTppppyX2LTx4TUK8w6e2"},customTopImg:{custom:!0,page:["/bg/555260.png","/bg/404901.png","/bg/734386.png"],friend:["/bg/669.png","/bg/5332.png"],tag:["/bg/763311.png"],mood:["/bg/5849.png"]},homeWps:["/bg/404901.png","/bg/734386.png","/bg/5332.png","/bg/2.jpg","/bg/3.jpg","/bg/4.jpg","/bg/5.jpg","https://w.wallhaven.cc/full/v9/wallhaven-v9v3r5.jpg","https://w.wallhaven.cc/full/z8/wallhaven-z8dg9y.png","https://w.wallhaven.cc/full/6o/wallhaven-6op786.jpg","https://w.wallhaven.cc/full/8o/wallhaven-8oky1j.jpg","https://w.wallhaven.cc/full/pk/wallhaven-pkvw9p.jpg","https://w.wallhaven.cc/full/9m/wallhaven-9m7kwd.png"],homeWpsMobile:["/bg/4.jpg","/bg/5.jpg"],pageSize:4,githubUrl:"https://github.com/yuan5379/yuan5379.github.io",latestPageSize:6,showHomePageImg:!1,sidebarCatalogLevel:3,homePageImgApi:"https://www.dmoe.cc/random.php?return=text?time=-Infinity",mobileCutText:"星空",sidebarTag:"categories",showAddMood:!0,postImgApi:"https://picture.cco.vin/pic/rmimg?type=bing",articleH2Icon:"🌸",articleH3Icon:"🐳",articleH4Icon:"⛄",sidebarAvatar:"/avatar.jpg",sugCountPerMin:300,showRecommend:!0,articlePagination:!0,global:{sidebar:{showStatus:!0,perData:!1,social:!1,friendLink:!0,navbar:!1,latestPage:!0,message:!1,tag:!0,siteData:!1},footer:!1},excludePath:["/footer.html","/v1.3.0/","/plugin/","/node.html","/style.html"],categoriesIncludeFolderName:!1,wave:{showWave:!0},bubble:{show:!0,bubbleNumber:.14,bubbleAlpha:.6,alphaChangeSpeed:1e-5,size:.4,sizeChangeSpeed:2e-4,riseSpeed:.4,color:"255,255,255"},leanCloud:{appId:"2A2Dyd2AffrnldhwftlEddVn-MdYXbMMI",appKey:"qHYTbb91iOPLelyC9lpbXxLH",masterKey:"eUwfvS3luIPnPiHS5SpEhDYr"},showPageMeta:!0,randomSayApi:{method:"GET",urlApi:"https://v1.hitokoto.cn/?encode=text&c=a"},afDianUrl:"https://afdian.net/@qsyyke",homeTopText:"置顶",sidebarDesc:"喜欢动漫，Coding目前是一名工作三年的前端工程师,坐标江西乐平",customTagName:"tags",showAboutPageBubble:!1,locales:{"/":{selectLanguageName:"English"}},selectLanguageText:"Languages",selectLanguageAriaLabel:"Select language",sidebar:"auto",sidebarDepth:2,contributors:!0,contributorsText:"Contributors",notFound:["There's nothing here.","How did we get here?","That's a Four-Oh-Four.","Looks like we've got some broken links."],backToHome:"Take me home",openInNewWindow:"open in new window"}},4125:(n,s,a)=>{a.d(s,{Z:()=>e});const e=[{data:{key:"v-2b97a6cc",path:"/axios/2019/20191102.html",title:"axios拦截器",lang:"zh-CN",frontmatter:{title:"axios拦截器",date:"2019-11-02T00:00:00.000Z",tags:["axios"],categories:["axios"]},excerpt:"",headers:[{level:2,title:"请求拦截器：interceptors.request",slug:"请求拦截器-interceptors-request",children:[]},{level:2,title:"响应拦截器：interceptors.response",slug:"响应拦截器-interceptors-response",children:[]},{level:2,title:"使用注意事项",slug:"使用注意事项",children:[]}],git:{updatedTime:null,contributors:[]}},key:"v-2b97a6cc",path:"/axios/2019/20191102.html",title:"axios拦截器",lang:"zh-CN",frontmatter:{title:"axios拦截器",date:"2019-11-02T00:00:00.000Z",tags:["axios"],categories:["axios"]},excerpt:"",headers:[{level:2,title:"请求拦截器：interceptors.request",slug:"请求拦截器-interceptors-request",children:[]},{level:2,title:"响应拦截器：interceptors.response",slug:"响应拦截器-interceptors-response",children:[]},{level:2,title:"使用注意事项",slug:"使用注意事项",children:[]}],content:"\r\naxios本身有两种拦截器:请求拦截器、响应拦截器  \r\n\r\n## 请求拦截器：interceptors.request\r\n\taxios每次开始请求时先执行此逻辑，进行axios出发前的配置，也可以做检查工作\r\n\r\n\t检查ok的情况下就开始向服务器端发请求\r\n\r\n```js\r\n// 请求拦截器\r\naxios.interceptors.request.use(function (config) {\r\n  // 放置业务逻辑代码\r\n  return config;\r\n}, function (error) {\r\n  // axios发生错误的处理\r\n  return Promise.reject(error);\r\n});\r\n\r\n```\r\n\t\r\n\t\t\r\n## 响应拦截器：interceptors.response\r\n\taxios完成与服务器端交互回到客户端后就执行此处逻辑，在这个地方可以做一些后续收尾事宜，例如判断axios请求是否成功\r\n```js\r\n// 响应拦截器\r\naxios.interceptors.response.use(function (response) {\r\n  // 放置业务逻辑代码\r\n  // response是服务器端返回来的数据信息，与Promise获得数据一致\r\n  return response;\r\n}, function (error) {\r\n  // axios请求服务器端发生错误的处理\r\n  return Promise.reject(error);\r\n});\r\n\r\n```\r\n\t\t\r\n\t\t\r\n## 使用注意事项\r\n\t1.各个拦截器的第一个函数参数需要设置为 “箭头函数” ，使得内部this与外部保持一致，都是Vue实例\r\n\t2.拦截器需要写请求之前\r\n",contentRendered:'<p>axios本身有两种拦截器:请求拦截器、响应拦截器</p>\n<h2 id="请求拦截器-interceptors-request" tabindex="-1"><a class="header-anchor" href="#请求拦截器-interceptors-request" aria-hidden="true">#</a> 请求拦截器：interceptors.request</h2>\n<pre><code>axios每次开始请求时先执行此逻辑，进行axios出发前的配置，也可以做检查工作\n\n检查ok的情况下就开始向服务器端发请求\n</code></pre>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 请求拦截器</span>\naxios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 放置业务逻辑代码</span>\n  <span class="token keyword">return</span> config<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// axios发生错误的处理</span>\n  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="响应拦截器-interceptors-response" tabindex="-1"><a class="header-anchor" href="#响应拦截器-interceptors-response" aria-hidden="true">#</a> 响应拦截器：interceptors.response</h2>\n<pre><code>axios完成与服务器端交互回到客户端后就执行此处逻辑，在这个地方可以做一些后续收尾事宜，例如判断axios请求是否成功\n</code></pre>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 响应拦截器</span>\naxios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 放置业务逻辑代码</span>\n  <span class="token comment">// response是服务器端返回来的数据信息，与Promise获得数据一致</span>\n  <span class="token keyword">return</span> response<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// axios请求服务器端发生错误的处理</span>\n  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="使用注意事项" tabindex="-1"><a class="header-anchor" href="#使用注意事项" aria-hidden="true">#</a> 使用注意事项</h2>\n<pre><code>1.各个拦截器的第一个函数参数需要设置为 “箭头函数” ，使得内部this与外部保持一致，都是Vue实例\n2.拦截器需要写请求之前\n</code></pre>\n',date:"2019-11-02",deps:[],hoistedTags:[],links:[],pathInferred:"/axios/2019/20191102.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"20191102",filePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/axios/2019/20191102.md",filePathRelative:"axios/2019/20191102.md",componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/axios/2019/20191102.html.vue",componentFilePathRelative:"pages/axios/2019/20191102.html.vue",componentFileChunkName:"v-2b97a6cc",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/axios/2019/20191102.html.js",dataFilePathRelative:"pages/axios/2019/20191102.html.js",dataFileChunkName:"v-2b97a6cc",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/axios/2019/20191102.html",htmlFilePathRelative:"axios/2019/20191102.html"},{data:{key:"v-60490958",path:"/axios/2021/20210624.html",title:"axios的简单封装",lang:"zh-CN",frontmatter:{title:"axios的简单封装",date:"2021-06-24T00:00:00.000Z",tags:["axios"],categories:["axios"]},excerpt:"",headers:[{level:2,title:"request.js",slug:"request-js",children:[]},{level:2,title:"service.project.js",slug:"service-project-js",children:[]},{level:2,title:"原生小程序封装wx.request",slug:"原生小程序封装wx-request",children:[]}],git:{updatedTime:null,contributors:[]}},key:"v-60490958",path:"/axios/2021/20210624.html",title:"axios的简单封装",lang:"zh-CN",frontmatter:{title:"axios的简单封装",date:"2021-06-24T00:00:00.000Z",tags:["axios"],categories:["axios"]},excerpt:"",headers:[{level:2,title:"request.js",slug:"request-js",children:[]},{level:2,title:"service.project.js",slug:"service-project-js",children:[]},{level:2,title:"原生小程序封装wx.request",slug:"原生小程序封装wx-request",children:[]}],content:"\r\n\r\n项目开发时，我们通常会封装一下axios请求文件，以便后期维护时方便\r\n\r\n## request.js\r\n```js\r\nimport request from 'axios'\r\nimport qs from 'qs'\r\nimport helper from './helper'\r\nimport { Loading } from 'element-ui'\r\nlet loadingInstance\r\nlet loadingnum = 0\r\nconst showLoading = () => {\r\n  loadingInstance = Loading.service({ fullscreen: true })\r\n}\r\nconst hideLoading = () => {\r\n  loadingInstance.close()\r\n}\r\nrequest.defaults.withCredentials = false\r\nclass Request {\r\n  constructor () {\r\n    // 公共参数\r\n    request.defaults.params\r\n    // 最大请求时间\r\n    request.defaults.timeout = 120 * 1000\r\n    // http code\r\n    request.defaults.validateStatus = status => {\r\n      return status >= 200 && status < 300\r\n    }\r\n    // 赋予内部\r\n    this.instance = request\r\n  }\r\n\r\n  // 设置token\r\n  setToken () {\r\n    this.instance.defaults.headers.common['cmtoken'] = sessionStorage.getItem('login') ? JSON.parse(sessionStorage.getItem('login')).cmtoken : ''\r\n  }\r\n\r\n  /*\r\n     * @apiGet 公共get请求\r\n     * @apiPost 公共post请求\r\n     * @apiJson post参数json格式\r\n     * @apiFile 公共上传\r\n     * @url 必填\r\n     * @params 必填\r\n     * */\r\n\r\n  apiGet (url, params, config) {\r\n    showLoading()\r\n    loadingnum++\r\n    return new Promise((resolve, reject) => {\r\n      this.instance.get(`${url}`, {\r\n        params,\r\n        headers: {\r\n          token: 'e7d07cc4378d1fe196bb7ceb02558e16bbbcdfd1ccc20a85731e5eabf1b09b26'\r\n        },\r\n        ...config\r\n      }).then((res) => {\r\n        loadingnum--\r\n        if (!loadingnum) {\r\n          hideLoading()\r\n        }\r\n        resolve(res.data)\r\n      }).catch((error) => {\r\n        loadingnum--\r\n        if (!loadingnum) {\r\n          hideLoading()\r\n        }\r\n        reject(error)\r\n        helper.E('网络异常')\r\n      })\r\n    })\r\n  }\r\n\r\n  apiPost (url, params) {\r\n    showLoading()\r\n    return new Promise((resolve, reject) => {\r\n      this.instance.post(`${url}`, qs.stringify(params)).then((res) => {\r\n        hideLoading()\r\n        resolve(res.data)\r\n      }).catch((error) => {\r\n        reject(error)\r\n        hideLoading()\r\n        helper.E('网络异常')\r\n      })\r\n    })\r\n  }\r\n\r\n  apiJson (url, params, config) {\r\n    showLoading()\r\n    loadingnum++\r\n    this.setToken()\r\n    return new Promise((resolve, reject) => {\r\n      this.instance.post(`${url}`, params, { headers: { 'Content-Type': 'application/json' }, ...config }).then((res) => {\r\n        loadingnum--\r\n        if (!loadingnum) {\r\n          hideLoading()\r\n        }\r\n        resolve(res.data)\r\n      }).catch((error) => {\r\n        loadingnum--\r\n        if (!loadingnum) {\r\n          hideLoading()\r\n        }\r\n        reject(error)\r\n        helper.E('网络异常')\r\n      })\r\n    })\r\n  }\r\n  apiPut (params) {\r\n    showLoading()\r\n    // this.setToken()\r\n    // let reader = new FileReader();\r\n    // reader.readAsArrayBuffer(params.file); //转化二进制流，异步方法\r\n    // reader.onload = (e) => { };\r\n    return new Promise((resolve, reject) => {\r\n      this.instance.put(params.url, params.file, { headers: { 'Content-Type': 'application/octet-stream;charset=utf-8' } }).then((res) => {\r\n        hideLoading()\r\n        resolve(res.data)\r\n      }).catch((error) => {\r\n        reject(error)\r\n        hideLoading()\r\n        helper.E('网络异常')\r\n      })\r\n    })\r\n  }\r\n  apiFile (url, fileKey, file) {\r\n    showLoading()\r\n    this.setToken()\r\n    const formData = new FormData()\r\n    formData.append(fileKey, file)\r\n\r\n    return new Promise((resolve, reject) => {\r\n      this.instance.post(url, formData, { headers: { 'Content-Type': 'multipart/form-data' } }).then((res) => {\r\n        hideLoading()\r\n        resolve(res.data)\r\n\r\n        // this.checkResCode(res)\r\n      }).catch(error => {\r\n        hideLoading()\r\n        reject(error)\r\n        helper.E('网络异常')\r\n      })\r\n    })\r\n  }\r\n}\r\n\r\nexport default new Request()\r\n\r\n```\r\n\r\n## service.project.js\r\n\r\n```js\r\n// 使用案例\r\n\r\nimport request from './request'\r\nimport { Message } from 'element-ui'\r\n\r\nasync function req ({\r\n  url,\r\n  method = 'post',\r\n  params = {},\r\n  config = {}\r\n}) {\r\n  const map = {\r\n    post: request.apiJson,\r\n    get: request.apiGet\r\n  }\r\n\r\n  if (url.startsWith('/customer') || url.startsWith('/file')) {\r\n    url = process.env.VUE_APP_CM_URL + url // 0803分支上的原来设置 测试\r\n    // url = 'https://cm.gewings.cn' + url // 客服生产\r\n  } else if (url.startsWith('/ecard')) {\r\n    url = process.env.VUE_APP_MP_URL + url\r\n    // url = '' + url // 本地\r\n  } else if (url.startsWith('/jchd')) {\r\n    let newurl = url.split('/jchd')[1]\r\n    url = process.env.VUE_APP_JC_URL + newurl\r\n    // url = 'https://cloud-marketing-test-temp.oss-cn-shanghai.aliyuncs.com' + newurl // 本地\r\n  } else {\r\n    url = '/api-pla' + url\r\n  }\r\n  const res = await map[method].call(request,\r\n    url,\r\n    params,\r\n    config\r\n  )\r\n\r\n  if (url.includes('/file/download')) {\r\n    return res\r\n  }\r\n\r\n  if (url.includes('/ecard/file/')) {\r\n    return res\r\n  }\r\n  if (url.includes('oss-cn')) {\r\n    return res\r\n  }\r\n\r\n  const { errcode } = res\r\n  // eslint-disable-next-line eqeqeq\r\n  if (errcode == 0) {\r\n    return res\r\n  }\r\n    \r\n  Message.error(res.errmsg || '请求失败')\r\n  throw new Error('request failed')\r\n}\r\n\r\nfunction reqPost (url, params, config) {\r\n  return req({\r\n    url,\r\n    params,\r\n    method: 'post',\r\n    config\r\n  })\r\n}\r\n\r\nfunction reqGet (url, params, config) {\r\n  return req({\r\n    url,\r\n    params,\r\n    method: 'get',\r\n    config\r\n  })\r\n}\r\n\r\nconst sysMgmt = {\r\n  addDeptList (data) {\r\n    return reqPost('/infra/add_dept_list', data)\r\n  },\r\n}\r\n\r\nexport default {\r\n  sysMgmt,\r\n  ......\r\n}\r\n```\r\n\r\n## 原生小程序封装wx.request\r\n\r\n```js\r\nconst handleFail = (config, errmsg) => {\r\n    if (config.isShowToast) {\r\n        wx.showToast({\r\n            icon: 'none',\r\n            title: errmsg || '请求失败',\r\n        })\r\n    }\r\n    config && config.fail && config.fail(errmsg)\r\n}\r\n\r\nconst BASE_URLS = {\r\n    INFRA: 'https://bcard.erp.dahuahome.com' // 生产\r\n    // INFRA: 'https://mingpian-test.gewings.cn' // 测试\r\n}\r\n\r\nexport const request = (url, baseUrl = 'INFRA', method = 'get', data, config) => {\r\n    wx.request({\r\n        url: `${ BASE_URLS[baseUrl] + url}`,\r\n        data,\r\n        enableCache: true,\r\n        enableHttp2: true,\r\n        enableQuic: true,\r\n        header: {\r\n            token: '001449eae7d0b6df6afd6951b218bdf47c9523bb2ddebac053159a5216888e3b'\r\n        },\r\n        method,\r\n        timeout: 300000,\r\n        success: ({\r\n            data\r\n        }) => {\r\n            if (data && data.errcode === 0) {\r\n                config && config.success && config.success(data)\r\n                return\r\n            }\r\n            config.isShowToast = true\r\n            handleFail(config, data)\r\n        },\r\n        fail: ({\r\n            errmsg\r\n        }) => {\r\n            config.isShowToast = true\r\n            handleFail(config, errmsg)\r\n        },\r\n        complete: (res) => {},\r\n    })\r\n}\r\n```\r\n\r\n```js\r\nimport { request } from '../api/request.js'\r\n\r\nexport const getUserPhone = (data, config) => {\r\n    request('/applet/ecard/login_by_user_applet_code', 'INFRA', 'post', data, config)\r\n}\r\n\r\n......\r\n```\r\n\r\n",contentRendered:'<p>项目开发时，我们通常会封装一下axios请求文件，以便后期维护时方便</p>\n<h2 id="request-js" tabindex="-1"><a class="header-anchor" href="#request-js" aria-hidden="true">#</a> request.js</h2>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">import</span> request <span class="token keyword">from</span> <span class="token string">\'axios\'</span>\n<span class="token keyword">import</span> qs <span class="token keyword">from</span> <span class="token string">\'qs\'</span>\n<span class="token keyword">import</span> helper <span class="token keyword">from</span> <span class="token string">\'./helper\'</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Loading <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'element-ui\'</span>\n<span class="token keyword">let</span> loadingInstance\n<span class="token keyword">let</span> loadingnum <span class="token operator">=</span> <span class="token number">0</span>\n<span class="token keyword">const</span> <span class="token function-variable function">showLoading</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  loadingInstance <span class="token operator">=</span> Loading<span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">fullscreen</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> <span class="token function-variable function">hideLoading</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  loadingInstance<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\nrequest<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>withCredentials <span class="token operator">=</span> <span class="token boolean">false</span>\n<span class="token keyword">class</span> <span class="token class-name">Request</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 公共参数</span>\n    request<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>params\n    <span class="token comment">// 最大请求时间</span>\n    request<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>timeout <span class="token operator">=</span> <span class="token number">120</span> <span class="token operator">*</span> <span class="token number">1000</span>\n    <span class="token comment">// http code</span>\n    request<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span><span class="token function-variable function">validateStatus</span> <span class="token operator">=</span> <span class="token parameter">status</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> status <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> status <span class="token operator">&lt;</span> <span class="token number">300</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 赋予内部</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>instance <span class="token operator">=</span> request\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 设置token</span>\n  <span class="token function">setToken</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>instance<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>common<span class="token punctuation">[</span><span class="token string">\'cmtoken\'</span><span class="token punctuation">]</span> <span class="token operator">=</span> sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">\'login\'</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">\'login\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cmtoken <span class="token operator">:</span> <span class="token string">\'\'</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">/*\n     * @apiGet 公共get请求\n     * @apiPost 公共post请求\n     * @apiJson post参数json格式\n     * @apiFile 公共上传\n     * @url 必填\n     * @params 必填\n     * */</span>\n\n  <span class="token function">apiGet</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> params<span class="token punctuation">,</span> config</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">showLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    loadingnum<span class="token operator">++</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        params<span class="token punctuation">,</span>\n        <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token literal-property property">token</span><span class="token operator">:</span> <span class="token string">\'e7d07cc4378d1fe196bb7ceb02558e16bbbcdfd1ccc20a85731e5eabf1b09b26\'</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token operator">...</span>config\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        loadingnum<span class="token operator">--</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>loadingnum<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token function">hideLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n        <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        loadingnum<span class="token operator">--</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>loadingnum<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token function">hideLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n        <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>\n        helper<span class="token punctuation">.</span><span class="token constant">E</span><span class="token punctuation">(</span><span class="token string">\'网络异常\'</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">apiPost</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">showLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> qs<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token function">hideLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>\n        <span class="token function">hideLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        helper<span class="token punctuation">.</span><span class="token constant">E</span><span class="token punctuation">(</span><span class="token string">\'网络异常\'</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">apiJson</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> params<span class="token punctuation">,</span> config</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">showLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    loadingnum<span class="token operator">++</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> params<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">\'Content-Type\'</span><span class="token operator">:</span> <span class="token string">\'application/json\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token operator">...</span>config <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        loadingnum<span class="token operator">--</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>loadingnum<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token function">hideLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n        <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        loadingnum<span class="token operator">--</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>loadingnum<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token function">hideLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n        <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>\n        helper<span class="token punctuation">.</span><span class="token constant">E</span><span class="token punctuation">(</span><span class="token string">\'网络异常\'</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">apiPut</span> <span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">showLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token comment">// this.setToken()</span>\n    <span class="token comment">// let reader = new FileReader();</span>\n    <span class="token comment">// reader.readAsArrayBuffer(params.file); //转化二进制流，异步方法</span>\n    <span class="token comment">// reader.onload = (e) => { };</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span>url<span class="token punctuation">,</span> params<span class="token punctuation">.</span>file<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">\'Content-Type\'</span><span class="token operator">:</span> <span class="token string">\'application/octet-stream;charset=utf-8\'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token function">hideLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>\n        <span class="token function">hideLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        helper<span class="token punctuation">.</span><span class="token constant">E</span><span class="token punctuation">(</span><span class="token string">\'网络异常\'</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">apiFile</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> fileKey<span class="token punctuation">,</span> file</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">showLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">const</span> formData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>fileKey<span class="token punctuation">,</span> file<span class="token punctuation">)</span>\n\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> formData<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">\'Content-Type\'</span><span class="token operator">:</span> <span class="token string">\'multipart/form-data\'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token function">hideLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span>\n\n        <span class="token comment">// this.checkResCode(res)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token function">hideLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>\n        helper<span class="token punctuation">.</span><span class="token constant">E</span><span class="token punctuation">(</span><span class="token string">\'网络异常\'</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Request</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br><span class="line-number">135</span><br><span class="line-number">136</span><br><span class="line-number">137</span><br><span class="line-number">138</span><br><span class="line-number">139</span><br><span class="line-number">140</span><br><span class="line-number">141</span><br><span class="line-number">142</span><br><span class="line-number">143</span><br></div></div><h2 id="service-project-js" tabindex="-1"><a class="header-anchor" href="#service-project-js" aria-hidden="true">#</a> service.project.js</h2>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 使用案例</span>\n\n<span class="token keyword">import</span> request <span class="token keyword">from</span> <span class="token string">\'./request\'</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Message <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'element-ui\'</span>\n\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">req</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  url<span class="token punctuation">,</span>\n  method <span class="token operator">=</span> <span class="token string">\'post\'</span><span class="token punctuation">,</span>\n  params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  config <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">post</span><span class="token operator">:</span> request<span class="token punctuation">.</span>apiJson<span class="token punctuation">,</span>\n    <span class="token literal-property property">get</span><span class="token operator">:</span> request<span class="token punctuation">.</span>apiGet\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">\'/customer\'</span><span class="token punctuation">)</span> <span class="token operator">||</span> url<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">\'/file\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    url <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">VUE_APP_CM_URL</span> <span class="token operator">+</span> url <span class="token comment">// 0803分支上的原来设置 测试</span>\n    <span class="token comment">// url = \'https://cm.gewings.cn\' + url // 客服生产</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">\'/ecard\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    url <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">VUE_APP_MP_URL</span> <span class="token operator">+</span> url\n    <span class="token comment">// url = \'\' + url // 本地</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">\'/jchd\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> newurl <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">\'/jchd\'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>\n    url <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">VUE_APP_JC_URL</span> <span class="token operator">+</span> newurl\n    <span class="token comment">// url = \'https://cloud-marketing-test-temp.oss-cn-shanghai.aliyuncs.com\' + newurl // 本地</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    url <span class="token operator">=</span> <span class="token string">\'/api-pla\'</span> <span class="token operator">+</span> url\n  <span class="token punctuation">}</span>\n  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> map<span class="token punctuation">[</span>method<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>\n    url<span class="token punctuation">,</span>\n    params<span class="token punctuation">,</span>\n    config\n  <span class="token punctuation">)</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">\'/file/download\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> res\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">\'/ecard/file/\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> res\n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">\'oss-cn\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> res\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> errcode <span class="token punctuation">}</span> <span class="token operator">=</span> res\n  <span class="token comment">// eslint-disable-next-line eqeqeq</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>errcode <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> res\n  <span class="token punctuation">}</span>\n    \n  Message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>errmsg <span class="token operator">||</span> <span class="token string">\'请求失败\'</span><span class="token punctuation">)</span>\n  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">\'request failed\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">reqPost</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> params<span class="token punctuation">,</span> config</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">req</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    url<span class="token punctuation">,</span>\n    params<span class="token punctuation">,</span>\n    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">\'post\'</span><span class="token punctuation">,</span>\n    config\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">reqGet</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> params<span class="token punctuation">,</span> config</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">req</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    url<span class="token punctuation">,</span>\n    params<span class="token punctuation">,</span>\n    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">\'get\'</span><span class="token punctuation">,</span>\n    config\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> sysMgmt <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function">addDeptList</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">reqPost</span><span class="token punctuation">(</span><span class="token string">\'/infra/add_dept_list\'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  sysMgmt<span class="token punctuation">,</span>\n  <span class="token operator">...</span><span class="token operator">...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br></div></div><h2 id="原生小程序封装wx-request" tabindex="-1"><a class="header-anchor" href="#原生小程序封装wx-request" aria-hidden="true">#</a> 原生小程序封装wx.request</h2>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">handleFail</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">config<span class="token punctuation">,</span> errmsg</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>isShowToast<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        wx<span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n            <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">\'none\'</span><span class="token punctuation">,</span>\n            <span class="token literal-property property">title</span><span class="token operator">:</span> errmsg <span class="token operator">||</span> <span class="token string">\'请求失败\'</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    config <span class="token operator">&amp;&amp;</span> config<span class="token punctuation">.</span>fail <span class="token operator">&amp;&amp;</span> config<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span>errmsg<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> <span class="token constant">BASE_URLS</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token constant">INFRA</span><span class="token operator">:</span> <span class="token string">\'https://bcard.erp.dahuahome.com\'</span> <span class="token comment">// 生产</span>\n    <span class="token comment">// INFRA: \'https://mingpian-test.gewings.cn\' // 测试</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> request <span class="token operator">=</span> <span class="token punctuation">(</span>url<span class="token punctuation">,</span> baseUrl <span class="token operator">=</span> <span class="token string">\'INFRA\'</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token string">\'get\'</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> config<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    wx<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span> <span class="token constant">BASE_URLS</span><span class="token punctuation">[</span>baseUrl<span class="token punctuation">]</span> <span class="token operator">+</span> url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n        data<span class="token punctuation">,</span>\n        <span class="token literal-property property">enableCache</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">enableHttp2</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">enableQuic</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">header</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token literal-property property">token</span><span class="token operator">:</span> <span class="token string">\'001449eae7d0b6df6afd6951b218bdf47c9523bb2ddebac053159a5216888e3b\'</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        method<span class="token punctuation">,</span>\n        <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">300000</span><span class="token punctuation">,</span>\n        <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>\n            data\n        <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">.</span>errcode <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                config <span class="token operator">&amp;&amp;</span> config<span class="token punctuation">.</span>success <span class="token operator">&amp;&amp;</span> config<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>\n                <span class="token keyword">return</span>\n            <span class="token punctuation">}</span>\n            config<span class="token punctuation">.</span>isShowToast <span class="token operator">=</span> <span class="token boolean">true</span>\n            <span class="token function">handleFail</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> data<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token function-variable function">fail</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>\n            errmsg\n        <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n            config<span class="token punctuation">.</span>isShowToast <span class="token operator">=</span> <span class="token boolean">true</span>\n            <span class="token function">handleFail</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> errmsg<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token function-variable function">complete</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> request <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'../api/request.js\'</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">getUserPhone</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> config</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token function">request</span><span class="token punctuation">(</span><span class="token string">\'/applet/ecard/login_by_user_applet_code\'</span><span class="token punctuation">,</span> <span class="token string">\'INFRA\'</span><span class="token punctuation">,</span> <span class="token string">\'post\'</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> config<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token operator">...</span><span class="token operator">...</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>',date:"2021-06-24",deps:[],hoistedTags:[],links:[],pathInferred:"/axios/2021/20210624.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"20210624",filePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/axios/2021/20210624.md",filePathRelative:"axios/2021/20210624.md",componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/axios/2021/20210624.html.vue",componentFilePathRelative:"pages/axios/2021/20210624.html.vue",componentFileChunkName:"v-60490958",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/axios/2021/20210624.html.js",dataFilePathRelative:"pages/axios/2021/20210624.html.js",dataFileChunkName:"v-60490958",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/axios/2021/20210624.html",htmlFilePathRelative:"axios/2021/20210624.html"},{data:{key:"v-54b0cc6b",path:"/js/2021/20210419.html",title:"数组api",lang:"zh-CN",frontmatter:{title:"数组api",date:"2021-04-19T00:00:00.000Z",tags:["数组"],categories:["js"]},excerpt:"",headers:[{level:2,title:"数组的检测",slug:"数组的检测",children:[]},{level:2,title:"数组的转换方法",slug:"数组的转换方法",children:[]},{level:2,title:"数组的增删",slug:"数组的增删",children:[]},{level:2,title:"数组重排序",slug:"数组重排序",children:[]},{level:2,title:"操作方法",slug:"操作方法",children:[]},{level:2,title:"位置方法",slug:"位置方法",children:[]},{level:2,title:"迭代方法",slug:"迭代方法",children:[]}],git:{updatedTime:null,contributors:[]}},key:"v-54b0cc6b",path:"/js/2021/20210419.html",title:"数组api",lang:"zh-CN",frontmatter:{title:"数组api",date:"2021-04-19T00:00:00.000Z",tags:["数组"],categories:["js"]},excerpt:"",headers:[{level:2,title:"数组的检测",slug:"数组的检测",children:[]},{level:2,title:"数组的转换方法",slug:"数组的转换方法",children:[]},{level:2,title:"数组的增删",slug:"数组的增删",children:[]},{level:2,title:"数组重排序",slug:"数组重排序",children:[]},{level:2,title:"操作方法",slug:"操作方法",children:[]},{level:2,title:"位置方法",slug:"位置方法",children:[]},{level:2,title:"迭代方法",slug:"迭代方法",children:[]}],content:"\r\n数组是js中最常用的类型之一,它的每一项可以保存任何类型的数据,大小也是可以动态调整的,可以随着数据的添加自动增长.\r\n以下是一些常用的数组方法以及应用场景\r\n\r\n## 数组的检测\r\n\r\n对于检测某个对象是否是数组的问题,可以使用 **instcnceof, isArray**\r\n\r\ninstanceof: \r\n```js\r\nif (value instanceof Array){\r\n\t// 如果是数组,则执行某些操作\r\n}\r\n```\r\nisArray:\r\n```js\r\nif (Array.isArray(value)){\r\n\t// 如果是数组,则执行某些操作\r\n}\r\n```\r\n\r\n当然我们还可以通过原型去判断,例如使用 **Object.prototype.toString.call()**\r\n\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210302090922368.png)\r\n\r\n## 数组的转换方法\r\n将数组转换成字符串可以使用 **toString()** 和 **join()** 两个方法都是不改变原数组,返回新的结果\r\n\r\ntoString() 会返回由数组中每个值的字符串形式拼接成的以逗号分隔的字符串\r\n```js\r\nlet arr = [1,2,3,4]\r\nconsole.log(arr.toString()) //\"1,2,3,4\"\r\n```\r\n join() 接收一个参数,用作返回字符串的分隔符,当不添加参数时,则默认使用逗号分隔\r\n```js\r\nlet arr = [1,2,3,4]\r\nconsole.log(arr.join())  // \"1,2,3,4\"\r\nconsole.log(arr.join('|'))  // \"1|2|3|4\"\r\nconsole.log(arr.join(':'))  // \"1:2:3:4\"\r\nconsole.log(arr.join(','))  // \"1,2,3,4\"\r\n```\r\n## 数组的增删\r\n数组的增:  **unshift()**, **push()**\r\n\r\n    unshift()是从数组的最前边,也就是下标为0的一边往数组中推入值,并返回数组的长度\r\n    push()是从数组的最尾端往数组中推入值,并返回数组的长度\r\n\r\n数组的删: **shift()**, **pop()**\r\n\r\n    shift()可以移除数组的第一项,并返回被删除的项\r\n    pop()可以移除数组的最后一项,并返回被删除的项\r\n\r\n## 数组重排序\r\n对于数组的重排序 可以使用 **reverse()**, **sort()**\r\n\r\nreverse()可以反转数组项的顺序(改变原数组)\r\n```js\r\nlet arr = [1,2,3,4,5]\r\narr.reverse()\r\nconsole.log(arr)  // [5,4,3,2,1]\r\n```\r\nsort()方法在默认情况下按升序进行排列\r\n```js\r\nlet arr = [5,4,2,3,1]\r\narr.sort()\r\nconsole.log(arr)  // [1,2,3,4,5]\r\n```\r\n当然sort()方法是调用每一项的toString()方法,然后比较得到的字符串,因为可能会产生对数字项排序不准确的情况,对于这种情况,sort()可以通过接收一个比较函数做参数来解决\r\n```js\r\nfunction compare(val1,val2){\r\n    if (val1 < val2){\r\n        return -1\r\n    } else if (val1 > val2){\r\n        return 1\r\n    } else {\r\n        return 0\r\n    }\r\n}\r\n\r\n```\r\n## 操作方法\r\n所谓操作方法是只操作包含在数组中的项的方法,如: **concat()**,**slice()**, **splice()**\r\n\r\n**concat()** 可以基于当前数组的所有项创建一个新数组,参数作为新数组中的项,不会改变原数组\r\n```js\r\nlet arr = [1,3,4,5]\r\nlet arr1 = arr.concat('name','age',[6,7,8])\r\nconsole.log(arr) // [1, 3, 4, 5]\r\nconsole.log(arr1) // [1, 3, 4, 5, \"name\", \"age\", 6, 7, 8]\r\n```\r\n**slice()** 可以基于当前数组的一个或者多个项创建一个新数组,不会影响原数组,接收一或两个参数(start, end).\r\n```js\r\nlet arr = [1,3,4,5]\r\nlet arr1 = arr.slice(1)\r\nlet arr2 = arr.slice(1,2)\r\nconsole.log(arr1)  // [3, 4, 5]\r\nconsole.log(arr2)  // [3] 需要注意的一点,slice不会包含结束位置的项\r\n```\r\n**splice()** 的作用相比较数组的其他方法,算是非常强大了,它可以用于 **删除,插入,替换**\r\n\r\nsplice可以接收三个或多个参数,第一个参数为起始位置,第二个为要删除的项数,第三到第n个参数为需要插入的项\r\n```js\r\nlet arr = [1,3,4,5]\r\nlet arr1 = arr.splice(0,2)  // 从0位开始,删除两位\r\n\r\nlet arr2 = [1,3,4,5]\r\nlet arr3 = arr2.splice(0,0,6,7)  // 从0位开始,删除0位,插入6,7\r\n\r\nlet arr4 = [1,3,4,5] \r\nlet arr5 = arr4.splice(0,2,8,9)  // 从0位开始,删除2位,插入8,9\r\nconsole.log(arr)  // [4, 5]\r\nconsole.log(arr,arr1)  // [4, 5], [1, 3]\r\nconsole.log(arr2,arr3)  // [6, 7, 1, 3, 4, 5],[]\r\nconsole.log(arr4,arr5)  // [8, 9, 4, 5], [1, 3]\r\n```\r\n从上面的例子可以看出,splice()会改变原数组,并返回删除的项组成的新数组\r\n\r\n## 位置方法\r\n查找数组中某一项可以使用数组的位置方法: **indexOf()**, **lastIndexOf()**\r\n两个方法都接收两个参数: 要查找的项和查找的起点位置的索引(可选),indexOf是从开头查找,lastIndexOf是从末尾开始查找,两个方法都会返回查询项在数组中的位置,在没找到的情况下会返回-1\r\n\r\n```js\r\nlet arr = ['name','age','张三','李四','张三']\r\nconsole.log(arr.indexOf('张三'))  // 2  \r\nconsole.log(arr.indexOf('张三',3))  // 4  \r\nconsole.log(arr.lastIndexOf('张三'))  // 4\r\nconsole.log(arr.lastIndexOf('张三',3))  // 2\r\n```\r\n\r\n## 迭代方法\r\n    every() 对每一项的运行给定一个函数,如果对每一项返回为true,则返回true\r\n    filter() 对每一项的运行给定一个函数,最后返回由true的项组成的新数组\r\n    forEach() 对每一项的运行给定一个函数,此方法没有返回值\r\n    map() 对每一项的运行给定一个函数,返回每次函数调用结果组成的数组\r\n    some() 对每一项的运行给定一个函数,如果函数对任一项返回true,则返回true\r\n",contentRendered:'<p>数组是js中最常用的类型之一,它的每一项可以保存任何类型的数据,大小也是可以动态调整的,可以随着数据的添加自动增长.\n以下是一些常用的数组方法以及应用场景</p>\n<h2 id="数组的检测" tabindex="-1"><a class="header-anchor" href="#数组的检测" aria-hidden="true">#</a> 数组的检测</h2>\n<p>对于检测某个对象是否是数组的问题,可以使用 <strong>instcnceof, isArray</strong></p>\n<p>instanceof:</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t<span class="token comment">// 如果是数组,则执行某些操作</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>isArray:</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t<span class="token comment">// 如果是数组,则执行某些操作</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>当然我们还可以通过原型去判断,例如使用 <strong>Object.prototype.toString.call()</strong></p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="在这里插入图片描述" originSrc="https://img-blog.csdnimg.cn/20210302090922368.png" data="aurora"></p>\n<h2 id="数组的转换方法" tabindex="-1"><a class="header-anchor" href="#数组的转换方法" aria-hidden="true">#</a> 数组的转换方法</h2>\n<p>将数组转换成字符串可以使用 <strong>toString()</strong> 和 <strong>join()</strong> 两个方法都是不改变原数组,返回新的结果</p>\n<p>toString() 会返回由数组中每个值的字符串形式拼接成的以逗号分隔的字符串</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//"1,2,3,4"</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>join() 接收一个参数,用作返回字符串的分隔符,当不添加参数时,则默认使用逗号分隔</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// "1,2,3,4"</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">\'|\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// "1|2|3|4"</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">\':\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// "1:2:3:4"</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">\',\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// "1,2,3,4"</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="数组的增删" tabindex="-1"><a class="header-anchor" href="#数组的增删" aria-hidden="true">#</a> 数组的增删</h2>\n<p>数组的增:  <strong>unshift()</strong>, <strong>push()</strong></p>\n<pre><code>unshift()是从数组的最前边,也就是下标为0的一边往数组中推入值,并返回数组的长度\npush()是从数组的最尾端往数组中推入值,并返回数组的长度\n</code></pre>\n<p>数组的删: <strong>shift()</strong>, <strong>pop()</strong></p>\n<pre><code>shift()可以移除数组的第一项,并返回被删除的项\npop()可以移除数组的最后一项,并返回被删除的项\n</code></pre>\n<h2 id="数组重排序" tabindex="-1"><a class="header-anchor" href="#数组重排序" aria-hidden="true">#</a> 数组重排序</h2>\n<p>对于数组的重排序 可以使用 <strong>reverse()</strong>, <strong>sort()</strong></p>\n<p>reverse()可以反转数组项的顺序(改变原数组)</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>\narr<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>  <span class="token comment">// [5,4,3,2,1]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>sort()方法在默认情况下按升序进行排列</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>\narr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>  <span class="token comment">// [1,2,3,4,5]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>当然sort()方法是调用每一项的toString()方法,然后比较得到的字符串,因为可能会产生对数字项排序不准确的情况,对于这种情况,sort()可以通过接收一个比较函数做参数来解决</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token parameter">val1<span class="token punctuation">,</span>val2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>val1 <span class="token operator">&lt;</span> val2<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>val1 <span class="token operator">></span> val2<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token number">1</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token number">0</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="操作方法" tabindex="-1"><a class="header-anchor" href="#操作方法" aria-hidden="true">#</a> 操作方法</h2>\n<p>所谓操作方法是只操作包含在数组中的项的方法,如: <strong>concat()</strong>,<strong>slice()</strong>, <strong>splice()</strong></p>\n<p><strong>concat()</strong> 可以基于当前数组的所有项创建一个新数组,参数作为新数组中的项,不会改变原数组</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>\n<span class="token keyword">let</span> arr1 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">\'name\'</span><span class="token punctuation">,</span><span class="token string">\'age\'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">// [1, 3, 4, 5]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span> <span class="token comment">// [1, 3, 4, 5, "name", "age", 6, 7, 8]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><strong>slice()</strong> 可以基于当前数组的一个或者多个项创建一个新数组,不会影响原数组,接收一或两个参数(start, end).</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>\n<span class="token keyword">let</span> arr1 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token keyword">let</span> arr2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span>  <span class="token comment">// [3, 4, 5]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span>  <span class="token comment">// [3] 需要注意的一点,slice不会包含结束位置的项</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><strong>splice()</strong> 的作用相比较数组的其他方法,算是非常强大了,它可以用于 <strong>删除,插入,替换</strong></p>\n<p>splice可以接收三个或多个参数,第一个参数为起始位置,第二个为要删除的项数,第三到第n个参数为需要插入的项</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>\n<span class="token keyword">let</span> arr1 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment">// 从0位开始,删除两位</span>\n\n<span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>\n<span class="token keyword">let</span> arr3 <span class="token operator">=</span> arr2<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span>  <span class="token comment">// 从0位开始,删除0位,插入6,7</span>\n\n<span class="token keyword">let</span> arr4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span> \n<span class="token keyword">let</span> arr5 <span class="token operator">=</span> arr4<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span>  <span class="token comment">// 从0位开始,删除2位,插入8,9</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>  <span class="token comment">// [4, 5]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>arr1<span class="token punctuation">)</span>  <span class="token comment">// [4, 5], [1, 3]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">,</span>arr3<span class="token punctuation">)</span>  <span class="token comment">// [6, 7, 1, 3, 4, 5],[]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr4<span class="token punctuation">,</span>arr5<span class="token punctuation">)</span>  <span class="token comment">// [8, 9, 4, 5], [1, 3]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>从上面的例子可以看出,splice()会改变原数组,并返回删除的项组成的新数组</p>\n<h2 id="位置方法" tabindex="-1"><a class="header-anchor" href="#位置方法" aria-hidden="true">#</a> 位置方法</h2>\n<p>查找数组中某一项可以使用数组的位置方法: <strong>indexOf()</strong>, <strong>lastIndexOf()</strong>\n两个方法都接收两个参数: 要查找的项和查找的起点位置的索引(可选),indexOf是从开头查找,lastIndexOf是从末尾开始查找,两个方法都会返回查询项在数组中的位置,在没找到的情况下会返回-1</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'name\'</span><span class="token punctuation">,</span><span class="token string">\'age\'</span><span class="token punctuation">,</span><span class="token string">\'张三\'</span><span class="token punctuation">,</span><span class="token string">\'李四\'</span><span class="token punctuation">,</span><span class="token string">\'张三\'</span><span class="token punctuation">]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">\'张三\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 2  </span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">\'张三\'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 4  </span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">\'张三\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 4</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">\'张三\'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 2</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="迭代方法" tabindex="-1"><a class="header-anchor" href="#迭代方法" aria-hidden="true">#</a> 迭代方法</h2>\n<pre><code>every() 对每一项的运行给定一个函数,如果对每一项返回为true,则返回true\nfilter() 对每一项的运行给定一个函数,最后返回由true的项组成的新数组\nforEach() 对每一项的运行给定一个函数,此方法没有返回值\nmap() 对每一项的运行给定一个函数,返回每次函数调用结果组成的数组\nsome() 对每一项的运行给定一个函数,如果函数对任一项返回true,则返回true\n</code></pre>\n',date:"2021-04-19",deps:[],hoistedTags:[],links:[],pathInferred:"/js/2021/20210419.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"20210419",filePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/js/2021/20210419.md",filePathRelative:"js/2021/20210419.md",componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/js/2021/20210419.html.vue",componentFilePathRelative:"pages/js/2021/20210419.html.vue",componentFileChunkName:"v-54b0cc6b",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/js/2021/20210419.html.js",dataFilePathRelative:"pages/js/2021/20210419.html.js",dataFileChunkName:"v-54b0cc6b",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/js/2021/20210419.html",htmlFilePathRelative:"js/2021/20210419.html"},{data:{key:"v-7ee8eb88",path:"/js/2021/20220718.html",title:"将数据处理成树形结构的数据",lang:"zh-CN",frontmatter:{title:"将数据处理成树形结构的数据",date:"2022-07-18T00:00:00.000Z",tags:["算法"],categories:["js"]},excerpt:"",headers:[{level:2,title:"js处理方法",slug:"js处理方法",children:[]}],git:{updatedTime:null,contributors:[]}},key:"v-7ee8eb88",path:"/js/2021/20220718.html",title:"将数据处理成树形结构的数据",lang:"zh-CN",frontmatter:{title:"将数据处理成树形结构的数据",date:"2022-07-18T00:00:00.000Z",tags:["算法"],categories:["js"]},excerpt:"",headers:[{level:2,title:"js处理方法",slug:"js处理方法",children:[]}],content:"\r\n案例环境为vue2，不过主要是 js 方面，所以问题不大\r\n\r\n## js处理方法\r\n\r\n后端返回的数据类型：\r\n\r\n1. 为Array[object]类型，一个数组每一项是个对象\r\n\r\n```js\r\n// 发送请求给后端，后端返回数据\r\n// res.dept_list:我们需要转换的数据\r\nexport function getDeptTree () {\r\n  return getDeptListApi().then((res) => {\r\n    return listToTree(res.dept_list || [], '0', {\r\n      id: 'deptId',\r\n      parentId: 'parentId'\r\n    })\r\n  })\r\n}\r\n\r\n// 转换函数\r\n// 如果不需要排列可以将 sort 这个函数去掉\r\n// parentId：对应父级的id \r\n// parentIp：需要放在根目录的节点对应的id\r\nexport function listToTree (\r\n  list,\r\n  parentIp = null,\r\n  { parentId = 'parentId', id = 'id' } = { parentId: 'parentId', id: 'id' }\r\n) {\r\n  return list.sort((a, b) => a.orderNum - b.orderNum)\r\n    .filter(item => item[parentId] === parentIp)\r\n    .map(item => ({\r\n      ...item,\r\n      children: listToTree(list, item[id], { parentId, id })\r\n    }))\r\n}\r\n\r\n```\r\n",contentRendered:'<p>案例环境为vue2，不过主要是 js 方面，所以问题不大</p>\n<h2 id="js处理方法" tabindex="-1"><a class="header-anchor" href="#js处理方法" aria-hidden="true">#</a> js处理方法</h2>\n<p>后端返回的数据类型：</p>\n<ol>\n<li>为Array[object]类型，一个数组每一项是个对象</li>\n</ol>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 发送请求给后端，后端返回数据</span>\n<span class="token comment">// res.dept_list:我们需要转换的数据</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getDeptTree</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">getDeptListApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">listToTree</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>dept_list <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">\'0\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">\'deptId\'</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">parentId</span><span class="token operator">:</span> <span class="token string">\'parentId\'</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 转换函数</span>\n<span class="token comment">// 如果不需要排列可以将 sort 这个函数去掉</span>\n<span class="token comment">// parentId：对应父级的id </span>\n<span class="token comment">// parentIp：需要放在根目录的节点对应的id</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">listToTree</span> <span class="token punctuation">(</span>\n  list<span class="token punctuation">,</span>\n  parentIp <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> parentId <span class="token operator">=</span> <span class="token string">\'parentId\'</span><span class="token punctuation">,</span> id <span class="token operator">=</span> <span class="token string">\'id\'</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">parentId</span><span class="token operator">:</span> <span class="token string">\'parentId\'</span><span class="token punctuation">,</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">\'id\'</span> <span class="token punctuation">}</span>\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a<span class="token punctuation">.</span>orderNum <span class="token operator">-</span> b<span class="token punctuation">.</span>orderNum<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> item<span class="token punctuation">[</span>parentId<span class="token punctuation">]</span> <span class="token operator">===</span> parentIp<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token operator">...</span>item<span class="token punctuation">,</span>\n      <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token function">listToTree</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> item<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> parentId<span class="token punctuation">,</span> id <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div>',date:"2022-07-18",deps:[],hoistedTags:[],links:[],pathInferred:"/js/2021/20220718.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"20220718",filePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/js/2021/20220718.md",filePathRelative:"js/2021/20220718.md",componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/js/2021/20220718.html.vue",componentFilePathRelative:"pages/js/2021/20220718.html.vue",componentFileChunkName:"v-7ee8eb88",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/js/2021/20220718.html.js",dataFilePathRelative:"pages/js/2021/20220718.html.js",dataFileChunkName:"v-7ee8eb88",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/js/2021/20220718.html",htmlFilePathRelative:"js/2021/20220718.html"},{data:{key:"v-5d086546",path:"/css/2023/20230108.html",title:"那些炫酷的CSS文字效果之诗词",lang:"zh-CN",frontmatter:{title:"那些炫酷的CSS文字效果之诗词",date:"2023-01-08T00:00:00.000Z",tags:["css"],categories:["css"]},excerpt:"",headers:[{level:2,title:"效果一",slug:"效果一",children:[]},{level:2,title:"效果二",slug:"效果二",children:[]},{level:2,title:"效果三",slug:"效果三",children:[]},{level:2,title:"效果四",slug:"效果四",children:[]},{level:2,title:"效果五",slug:"效果五",children:[]},{level:2,title:"效果六",slug:"效果六",children:[]},{level:2,title:"效果七",slug:"效果七",children:[]},{level:2,title:"效果八",slug:"效果八",children:[]},{level:2,title:"效果九",slug:"效果九",children:[]},{level:2,title:"效果十",slug:"效果十",children:[]}],git:{updatedTime:null,contributors:[]}},key:"v-5d086546",path:"/css/2023/20230108.html",title:"那些炫酷的CSS文字效果之诗词",lang:"zh-CN",frontmatter:{title:"那些炫酷的CSS文字效果之诗词",date:"2023-01-08T00:00:00.000Z",tags:["css"],categories:["css"]},excerpt:"",headers:[{level:2,title:"效果一",slug:"效果一",children:[]},{level:2,title:"效果二",slug:"效果二",children:[]},{level:2,title:"效果三",slug:"效果三",children:[]},{level:2,title:"效果四",slug:"效果四",children:[]},{level:2,title:"效果五",slug:"效果五",children:[]},{level:2,title:"效果六",slug:"效果六",children:[]},{level:2,title:"效果七",slug:"效果七",children:[]},{level:2,title:"效果八",slug:"效果八",children:[]},{level:2,title:"效果九",slug:"效果九",children:[]},{level:2,title:"效果十",slug:"效果十",children:[]}],content:"\r\n::: tip\r\n\r\n不知不觉已经迈入2023年，今年是兔年，想到兔子就会联想到玉兔，中秋，胡萝卜，兔子不吃窝边草，这就越扯越远了，今天的主题是用纯CSS来实现各种不错的文字效果，文字则摘录古诗词中有关《兔》相关的诗词，让我们一边欣赏古诗词的同时一边走进CSS的世界。\r\n\r\n:::\r\n\r\n## 效果一\r\n\r\n> 兔苑词才去不还，兰亭水石空明月。 —— 陈陶 《 将进酒 》\r\n\r\n![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9b76d6bb444f4eabadf971d22ddc79f8~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp)\r\n\r\n文字从清晰到模糊到彻底看不见，给人一种若隐若现的朦胧美，其核心代码就是在`animation`动画中设置`filter`的`blur`，即高斯模糊，当设置的数值过大时，文字会模糊到消失不见。\r\n\r\n```css\r\nfilter: blur(1.5rem);\r\n\r\n```\r\n\r\n## 效果二\r\n\r\n> 三五明月满，四五蟾兔缺。 —— 佚名 《 孟冬寒气至 》\r\n\r\n![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/575616bed93f4934bb2b2650bd167fe7~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp)\r\n\r\n这里主要用到了svg的到文本标签text，并结合`stroke`和`fill`属性制作空心文字，最后结合`animation`动画调整`stroke`和`fill`的数值就实现了上图的效果。\r\n\r\n```css\r\n@keyframes textAnimate {\r\n  0% {\r\n    stroke-dasharray: 0 50%;\r\n    stroke-dashoffset:  20%;\r\n    fill:hsl(66, 71%, 61%)\r\n  }\r\n  \r\n  100% {\r\n    stroke-dasharray: 50% 0;\r\n    stroke-dashoffstet: -20%;\r\n    fill: hsla(189, 68%, 75%,0%)\r\n  }\r\n}\r\n\r\n```\r\n\r\n## 效果三\r\n\r\n> 不睹行人迹，但见狐兔兴。 —— 范云 《 渡黄河 》\r\n\r\n![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0496196dccca42b9adff964939b8cfcc~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp)\r\n\r\n此效果主要是设置`background-clip: text`将背景色应用到文字区域，再通过`animation`动画不断调整`background-position`使其背景动起来。\r\n\r\n```css\r\nbackground: linear-gradient(150deg, rgba(155,93,229,1) 0%, rgba(241,91,181,1) 20%, rgba(254,228,64,1) 40%, rgba(0,187,249,1) 60%, rgba(0,245,212,1) 80%);\r\nbackground-size: 20% 20%;\r\nbackground-color: #840b2a;\r\n-webkit-background-clip: text;\r\n-webkit-text-fill-color: transparent;\r\nanimation: gradient 5s linear infinite;\r\n\r\n```\r\n\r\n## 效果四\r\n\r\n> 兔走乌飞不住，人生几度三台。 —— 晏殊 《 清平乐 》\r\n\r\n![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7f08608a72814873a050e8a6ec187666~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp)\r\n\r\n这个效果主要是通过设置`text-shadow`，再通过`animation`动画不断调整每个阴影部分的位置和颜色。\r\n\r\n```css\r\ntext-shadow:\r\n      4px -4px 0 hsla(0, 100%, 50%, 1), \r\n      3px -3px 0 hsla(0, 100%, 50%, 1), \r\n      2px -2px 0 hsla(0, 100%, 50%, 1), \r\n      1px -1px 0 hsla(0, 100%, 50%, 1),\r\n      -4px 4px 0 hsla(180, 100%, 50%, 1), \r\n      -3px 3px 0 hsla(180, 100%, 50%, 1), \r\n      -2px 2px 0 hsla(180, 100%, 50%, 1), \r\n      -1px 1px 0 hsla(180, 100%, 50%, 1)\r\n    ;\r\n\r\n```\r\n\r\n## 效果五\r\n\r\n> 明月三五前，看看玉兔圆。\r\n\r\n![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/744f7d5927ee4cb5b7ff6aaeb7c68556~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp)\r\n\r\n此效果和效果三类似，设置`background-clip: text`将背景色应用到文字区域，比较有特色的是将文字设置了不同的颜色并有倾斜切割的感觉，主要是通过设置`linear-gradient`中的`transparent`透明色实现，核心代码如下：\r\n\r\n```css\r\nbackground: linear-gradient(219deg, \r\n        var(--color-1) 19%, \r\n        transparent 19%,transparent 20%, \r\n        var(--color-2) 20%, var(--color-2)  39%,\r\n        transparent 39%,transparent 40%, \r\n        var(--color-3) 40%,var(--color-3) 59% ,\r\n        transparent 59%,transparent 60%, \r\n        var(--color-4) 60%, var(--color-4) 79%,\r\n        transparent 79%, transparent 80%, \r\n        var(--color-5) 80%);\r\nbackground-clip: text;\r\n\r\n```\r\n\r\n## 效果六\r\n\r\n> 白兔捣药成，问言与谁餐。 —— 李白 《 古朗月行》\r\n\r\n![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3a05462f83544583a6de81a6786e6251~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp)\r\n\r\n这里的效果不是很明显，当文字过大的时候比较明显，其实就是和抖音logo的效果比较类似，会有红色和蓝色两个颜色的抖动效果，两个颜色是由两个伪元素的`text-shadow`实现，抖动的效果是通过设置`clip:rect`并设置随机的位置，所以我们看到的画面中出现的位置都不是重复的。\r\n\r\n```css\r\n&::after{\r\n  content:attr(data-text);\r\n  position:absolute;\r\n  width: 100%;\r\n  left:50%;\r\n  transform: translateX(-50%);\r\n  text-shadow:-2px 0 red;\r\n  top:20px;\r\n  color:white;\r\n  background:black;\r\n  overflow:hidden;\r\n  clip:rect(0,900px,0,0); \r\n  animation:noise-anim 2s infinite linear alternate-reverse;\r\n}\r\n\r\n@keyframes noise-anim{\r\n  $steps:20;\r\n  @for $i from 0 through $steps{\r\n    #{percentage($i*(1/$steps))}{\r\n      clip:rect(random(100)+px,9999px,random(100)+px,0);\r\n    }\r\n  }\r\n}\r\n\r\n```\r\n\r\n## 效果七\r\n\r\n> 兔月半轮明。 —— 隋 江总《关山月》\r\n\r\n![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c792155353e94229a7eff1631e354ace~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp)\r\n\r\n这个没有特殊的效果，就是一个纯静态的文字阴影，但是比一般的文字阴影更具有冲击感，所以也列举出来了，核心就是设置不同位置的不同参数文字阴影，以下只贴出了一部分代码。\r\n\r\n```css\r\ntext-shadow: \r\n      1px -1px 0 #767676, \r\n      -1px 2px 1px #737272, \r\n      -2px 4px 1px #767474, \r\n      -3px 6px 1px #787777, \r\n      -4px 8px 1px #7b7a7a, \r\n      -5px 10px 1px #7f7d7d, \r\n      -6px 12px 1px #828181, \r\n      -7px 14px 1px #868585, \r\n      ...\r\n\r\n```\r\n\r\n为方便大家理解，我修改了不同位置的颜色，看这个图大家就容易理解为什么可以实现了，随着越到后面设置的颜色就越淡，阴影效果就出来了。 ![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/60d2c989575a4762a9173718a5aa559c~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp)\r\n\r\n## 效果八\r\n\r\n> 兔饥食山林，兔渴饮川泽。 —— 宋 秦观《和裴仲谟放兔行》\r\n\r\n![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/508fc58d20ce49ce83f9fed782106824~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp)\r\n\r\n这里是将文字变成一缕白烟飞走了，看着还是很有意境的感觉。核心实现逻辑是给每个文字设置平移，旋转，倾斜，放大，透明度，文字阴影，然后从左往右给每个文字设置延迟执行动画的时间。这里仔细看可以发现每个文字运动的效果并不是完全一样，这里是通过奇偶选择器设置了不同的`transform`属性值。\r\n\r\n```css\r\n@keyframes smoky {\r\n  60% {\r\n    text-shadow: 0 0 40px whitesmoke;\r\n  }\r\n  to {\r\n    transform:\r\n      translate3d(15rem,-8rem,0)\r\n      rotate(-40deg)\r\n      skewX(70deg)\r\n      scale(1.5);\r\n    text-shadow: 0 0 20px whitesmoke;\r\n    opacity: 0;\r\n  }\r\n}\r\n\r\n```\r\n\r\n## 效果九\r\n\r\n> 茕茕白兔，东走西顾。  —— 汉 佚名 《古艳歌》\r\n\r\n![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/90618846c10e4486b2ee09ced7995d34~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp)\r\n\r\n这个效果看着和效果三是不是有点类似，核心也是设置`background-clip: text`将背景色应用到文字区域，但是这里的背景动画看着比较复杂，但其实代码比较简单，就是设置了一张gif的背景图，这个在实际项目中大家可以看其复杂度灵活运用。\r\n\r\n## 效果十\r\n\r\n> 有兔斯首，炮之燔之。 —— 先秦 佚名《瓠叶》\r\n\r\n![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dd34294101d74550a9fd380a1d352365~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp)\r\n\r\n这个效果的gif图不是很逼真，大家可以看在线的效果，这里并没有用到`background-clip: text`，而是用到了`mix-blend-mode`混合模式，这里用到了`multiply`和`color-dodge`两个混合模式，图中的白色区域的移动是通过设置`translate`平移使画面动起来了。\r\n\r\n```css\r\n.gradient {\r\n    background: linear-gradient(45deg, red, gold, lightgreen, gold, red);\r\n    mix-blend-mode: multiply;\r\n}\r\n\r\n.spotlight {\r\n    background: \r\n        radial-gradient(\r\n            circle,\r\n            white,\r\n            transparent 25%\r\n        ) center / 25% 25%,\r\n        radial-gradient(\r\n            circle,\r\n            white,\r\n            black 25%\r\n        ) center / 12.5% 12.5%;\r\n    animation: light 5s linear infinite;\r\n    mix-blend-mode: color-dodge;\r\n}\r\n```",contentRendered:'<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>不知不觉已经迈入2023年，今年是兔年，想到兔子就会联想到玉兔，中秋，胡萝卜，兔子不吃窝边草，这就越扯越远了，今天的主题是用纯CSS来实现各种不错的文字效果，文字则摘录古诗词中有关《兔》相关的诗词，让我们一边欣赏古诗词的同时一边走进CSS的世界。</p>\n</div>\n<h2 id="效果一" tabindex="-1"><a class="header-anchor" href="#效果一" aria-hidden="true">#</a> 效果一</h2>\n<blockquote>\n<p>兔苑词才去不还，兰亭水石空明月。 —— 陈陶 《 将进酒 》</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9b76d6bb444f4eabadf971d22ddc79f8~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" data="aurora"></p>\n<p>文字从清晰到模糊到彻底看不见，给人一种若隐若现的朦胧美，其核心代码就是在<code>animation</code>动画中设置<code>filter</code>的<code>blur</code>，即高斯模糊，当设置的数值过大时，文字会模糊到消失不见。</p>\n<div class="language-css ext-css line-numbers-mode"><pre v-pre class="language-css"><code><span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">blur</span><span class="token punctuation">(</span>1.5rem<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="效果二" tabindex="-1"><a class="header-anchor" href="#效果二" aria-hidden="true">#</a> 效果二</h2>\n<blockquote>\n<p>三五明月满，四五蟾兔缺。 —— 佚名 《 孟冬寒气至 》</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/575616bed93f4934bb2b2650bd167fe7~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" data="aurora"></p>\n<p>这里主要用到了svg的到文本标签text，并结合<code>stroke</code>和<code>fill</code>属性制作空心文字，最后结合<code>animation</code>动画调整<code>stroke</code>和<code>fill</code>的数值就实现了上图的效果。</p>\n<div class="language-css ext-css line-numbers-mode"><pre v-pre class="language-css"><code><span class="token atrule"><span class="token rule">@keyframes</span> textAnimate</span> <span class="token punctuation">{</span>\n  <span class="token selector">0%</span> <span class="token punctuation">{</span>\n    <span class="token property">stroke-dasharray</span><span class="token punctuation">:</span> 0 50%<span class="token punctuation">;</span>\n    <span class="token property">stroke-dashoffset</span><span class="token punctuation">:</span>  20%<span class="token punctuation">;</span>\n    <span class="token property">fill</span><span class="token punctuation">:</span><span class="token function">hsl</span><span class="token punctuation">(</span>66<span class="token punctuation">,</span> 71%<span class="token punctuation">,</span> 61%<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  \n  <span class="token selector">100%</span> <span class="token punctuation">{</span>\n    <span class="token property">stroke-dasharray</span><span class="token punctuation">:</span> 50% 0<span class="token punctuation">;</span>\n    <span class="token property">stroke-dashoffstet</span><span class="token punctuation">:</span> -20%<span class="token punctuation">;</span>\n    <span class="token property">fill</span><span class="token punctuation">:</span> <span class="token function">hsla</span><span class="token punctuation">(</span>189<span class="token punctuation">,</span> 68%<span class="token punctuation">,</span> 75%<span class="token punctuation">,</span>0%<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="效果三" tabindex="-1"><a class="header-anchor" href="#效果三" aria-hidden="true">#</a> 效果三</h2>\n<blockquote>\n<p>不睹行人迹，但见狐兔兴。 —— 范云 《 渡黄河 》</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0496196dccca42b9adff964939b8cfcc~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" data="aurora"></p>\n<p>此效果主要是设置<code>background-clip: text</code>将背景色应用到文字区域，再通过<code>animation</code>动画不断调整<code>background-position</code>使其背景动起来。</p>\n<div class="language-css ext-css line-numbers-mode"><pre v-pre class="language-css"><code><span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>150deg<span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>155<span class="token punctuation">,</span>93<span class="token punctuation">,</span>229<span class="token punctuation">,</span>1<span class="token punctuation">)</span> 0%<span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>241<span class="token punctuation">,</span>91<span class="token punctuation">,</span>181<span class="token punctuation">,</span>1<span class="token punctuation">)</span> 20%<span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>254<span class="token punctuation">,</span>228<span class="token punctuation">,</span>64<span class="token punctuation">,</span>1<span class="token punctuation">)</span> 40%<span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span>187<span class="token punctuation">,</span>249<span class="token punctuation">,</span>1<span class="token punctuation">)</span> 60%<span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span>245<span class="token punctuation">,</span>212<span class="token punctuation">,</span>1<span class="token punctuation">)</span> 80%<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token property">background-size</span><span class="token punctuation">:</span> 20% 20%<span class="token punctuation">;</span>\n<span class="token property">background-color</span><span class="token punctuation">:</span> #840b2a<span class="token punctuation">;</span>\n<span class="token property">-webkit-background-clip</span><span class="token punctuation">:</span> text<span class="token punctuation">;</span>\n<span class="token property">-webkit-text-fill-color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span>\n<span class="token property">animation</span><span class="token punctuation">:</span> gradient 5s linear infinite<span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="效果四" tabindex="-1"><a class="header-anchor" href="#效果四" aria-hidden="true">#</a> 效果四</h2>\n<blockquote>\n<p>兔走乌飞不住，人生几度三台。 —— 晏殊 《 清平乐 》</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7f08608a72814873a050e8a6ec187666~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" data="aurora"></p>\n<p>这个效果主要是通过设置<code>text-shadow</code>，再通过<code>animation</code>动画不断调整每个阴影部分的位置和颜色。</p>\n<div class="language-css ext-css line-numbers-mode"><pre v-pre class="language-css"><code><span class="token property">text-shadow</span><span class="token punctuation">:</span>\n      4px -4px 0 <span class="token function">hsla</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 100%<span class="token punctuation">,</span> 50%<span class="token punctuation">,</span> 1<span class="token punctuation">)</span><span class="token punctuation">,</span> \n      3px -3px 0 <span class="token function">hsla</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 100%<span class="token punctuation">,</span> 50%<span class="token punctuation">,</span> 1<span class="token punctuation">)</span><span class="token punctuation">,</span> \n      2px -2px 0 <span class="token function">hsla</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 100%<span class="token punctuation">,</span> 50%<span class="token punctuation">,</span> 1<span class="token punctuation">)</span><span class="token punctuation">,</span> \n      1px -1px 0 <span class="token function">hsla</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 100%<span class="token punctuation">,</span> 50%<span class="token punctuation">,</span> 1<span class="token punctuation">)</span><span class="token punctuation">,</span>\n      -4px 4px 0 <span class="token function">hsla</span><span class="token punctuation">(</span>180<span class="token punctuation">,</span> 100%<span class="token punctuation">,</span> 50%<span class="token punctuation">,</span> 1<span class="token punctuation">)</span><span class="token punctuation">,</span> \n      -3px 3px 0 <span class="token function">hsla</span><span class="token punctuation">(</span>180<span class="token punctuation">,</span> 100%<span class="token punctuation">,</span> 50%<span class="token punctuation">,</span> 1<span class="token punctuation">)</span><span class="token punctuation">,</span> \n      -2px 2px 0 <span class="token function">hsla</span><span class="token punctuation">(</span>180<span class="token punctuation">,</span> 100%<span class="token punctuation">,</span> 50%<span class="token punctuation">,</span> 1<span class="token punctuation">)</span><span class="token punctuation">,</span> \n      -1px 1px 0 <span class="token function">hsla</span><span class="token punctuation">(</span>180<span class="token punctuation">,</span> 100%<span class="token punctuation">,</span> 50%<span class="token punctuation">,</span> 1<span class="token punctuation">)</span>\n    <span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="效果五" tabindex="-1"><a class="header-anchor" href="#效果五" aria-hidden="true">#</a> 效果五</h2>\n<blockquote>\n<p>明月三五前，看看玉兔圆。</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/744f7d5927ee4cb5b7ff6aaeb7c68556~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" data="aurora"></p>\n<p>此效果和效果三类似，设置<code>background-clip: text</code>将背景色应用到文字区域，比较有特色的是将文字设置了不同的颜色并有倾斜切割的感觉，主要是通过设置<code>linear-gradient</code>中的<code>transparent</code>透明色实现，核心代码如下：</p>\n<div class="language-css ext-css line-numbers-mode"><pre v-pre class="language-css"><code><span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>219deg<span class="token punctuation">,</span> \n        <span class="token function">var</span><span class="token punctuation">(</span>--color-1<span class="token punctuation">)</span> 19%<span class="token punctuation">,</span> \n        transparent 19%<span class="token punctuation">,</span>transparent 20%<span class="token punctuation">,</span> \n        <span class="token function">var</span><span class="token punctuation">(</span>--color-2<span class="token punctuation">)</span> 20%<span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--color-2<span class="token punctuation">)</span>  39%<span class="token punctuation">,</span>\n        transparent 39%<span class="token punctuation">,</span>transparent 40%<span class="token punctuation">,</span> \n        <span class="token function">var</span><span class="token punctuation">(</span>--color-3<span class="token punctuation">)</span> 40%<span class="token punctuation">,</span><span class="token function">var</span><span class="token punctuation">(</span>--color-3<span class="token punctuation">)</span> 59% <span class="token punctuation">,</span>\n        transparent 59%<span class="token punctuation">,</span>transparent 60%<span class="token punctuation">,</span> \n        <span class="token function">var</span><span class="token punctuation">(</span>--color-4<span class="token punctuation">)</span> 60%<span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--color-4<span class="token punctuation">)</span> 79%<span class="token punctuation">,</span>\n        transparent 79%<span class="token punctuation">,</span> transparent 80%<span class="token punctuation">,</span> \n        <span class="token function">var</span><span class="token punctuation">(</span>--color-5<span class="token punctuation">)</span> 80%<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token property">background-clip</span><span class="token punctuation">:</span> text<span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="效果六" tabindex="-1"><a class="header-anchor" href="#效果六" aria-hidden="true">#</a> 效果六</h2>\n<blockquote>\n<p>白兔捣药成，问言与谁餐。 —— 李白 《 古朗月行》</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3a05462f83544583a6de81a6786e6251~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" data="aurora"></p>\n<p>这里的效果不是很明显，当文字过大的时候比较明显，其实就是和抖音logo的效果比较类似，会有红色和蓝色两个颜色的抖动效果，两个颜色是由两个伪元素的<code>text-shadow</code>实现，抖动的效果是通过设置<code>clip:rect</code>并设置随机的位置，所以我们看到的画面中出现的位置都不是重复的。</p>\n<div class="language-css ext-css line-numbers-mode"><pre v-pre class="language-css"><code><span class="token selector">&amp;::after</span><span class="token punctuation">{</span>\n  <span class="token property">content</span><span class="token punctuation">:</span><span class="token function">attr</span><span class="token punctuation">(</span>data-text<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span>\n  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>\n  <span class="token property">left</span><span class="token punctuation">:</span>50%<span class="token punctuation">;</span>\n  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>-50%<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token property">text-shadow</span><span class="token punctuation">:</span>-2px 0 red<span class="token punctuation">;</span>\n  <span class="token property">top</span><span class="token punctuation">:</span>20px<span class="token punctuation">;</span>\n  <span class="token property">color</span><span class="token punctuation">:</span>white<span class="token punctuation">;</span>\n  <span class="token property">background</span><span class="token punctuation">:</span>black<span class="token punctuation">;</span>\n  <span class="token property">overflow</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span>\n  <span class="token property">clip</span><span class="token punctuation">:</span><span class="token function">rect</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span>900px<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token property">animation</span><span class="token punctuation">:</span>noise-anim 2s infinite linear alternate-reverse<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token atrule"><span class="token rule">@keyframes</span> noise-anim</span><span class="token punctuation">{</span>\n  $<span class="token property">steps</span><span class="token punctuation">:</span>20<span class="token punctuation">;</span>\n  <span class="token atrule"><span class="token rule">@for</span> $i from 0 through $steps</span><span class="token punctuation">{</span>\n    <span class="token selector">#</span><span class="token punctuation">{</span><span class="token function">percentage</span><span class="token punctuation">(</span>$i*<span class="token punctuation">(</span>1/$steps<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">{</span>\n      <span class="token property">clip</span><span class="token punctuation">:</span><span class="token function">rect</span><span class="token punctuation">(</span><span class="token function">random</span><span class="token punctuation">(</span>100<span class="token punctuation">)</span>+px<span class="token punctuation">,</span>9999px<span class="token punctuation">,</span><span class="token function">random</span><span class="token punctuation">(</span>100<span class="token punctuation">)</span>+px<span class="token punctuation">,</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h2 id="效果七" tabindex="-1"><a class="header-anchor" href="#效果七" aria-hidden="true">#</a> 效果七</h2>\n<blockquote>\n<p>兔月半轮明。 —— 隋 江总《关山月》</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c792155353e94229a7eff1631e354ace~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" data="aurora"></p>\n<p>这个没有特殊的效果，就是一个纯静态的文字阴影，但是比一般的文字阴影更具有冲击感，所以也列举出来了，核心就是设置不同位置的不同参数文字阴影，以下只贴出了一部分代码。</p>\n<div class="language-css ext-css line-numbers-mode"><pre v-pre class="language-css"><code><span class="token property">text-shadow</span><span class="token punctuation">:</span> \n      1px -1px 0 #767676<span class="token punctuation">,</span> \n      -1px 2px 1px #737272<span class="token punctuation">,</span> \n      -2px 4px 1px #767474<span class="token punctuation">,</span> \n      -3px 6px 1px #787777<span class="token punctuation">,</span> \n      -4px 8px 1px #7b7a7a<span class="token punctuation">,</span> \n      -5px 10px 1px #7f7d7d<span class="token punctuation">,</span> \n      -6px 12px 1px #828181<span class="token punctuation">,</span> \n      -7px 14px 1px #868585<span class="token punctuation">,</span> \n      ...\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>为方便大家理解，我修改了不同位置的颜色，看这个图大家就容易理解为什么可以实现了，随着越到后面设置的颜色就越淡，阴影效果就出来了。 <img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/60d2c989575a4762a9173718a5aa559c~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" data="aurora"></p>\n<h2 id="效果八" tabindex="-1"><a class="header-anchor" href="#效果八" aria-hidden="true">#</a> 效果八</h2>\n<blockquote>\n<p>兔饥食山林，兔渴饮川泽。 —— 宋 秦观《和裴仲谟放兔行》</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/508fc58d20ce49ce83f9fed782106824~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" data="aurora"></p>\n<p>这里是将文字变成一缕白烟飞走了，看着还是很有意境的感觉。核心实现逻辑是给每个文字设置平移，旋转，倾斜，放大，透明度，文字阴影，然后从左往右给每个文字设置延迟执行动画的时间。这里仔细看可以发现每个文字运动的效果并不是完全一样，这里是通过奇偶选择器设置了不同的<code>transform</code>属性值。</p>\n<div class="language-css ext-css line-numbers-mode"><pre v-pre class="language-css"><code><span class="token atrule"><span class="token rule">@keyframes</span> smoky</span> <span class="token punctuation">{</span>\n  <span class="token selector">60%</span> <span class="token punctuation">{</span>\n    <span class="token property">text-shadow</span><span class="token punctuation">:</span> 0 0 40px whitesmoke<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token selector">to</span> <span class="token punctuation">{</span>\n    <span class="token property">transform</span><span class="token punctuation">:</span>\n      <span class="token function">translate3d</span><span class="token punctuation">(</span>15rem<span class="token punctuation">,</span>-8rem<span class="token punctuation">,</span>0<span class="token punctuation">)</span>\n      <span class="token function">rotate</span><span class="token punctuation">(</span>-40deg<span class="token punctuation">)</span>\n      <span class="token function">skewX</span><span class="token punctuation">(</span>70deg<span class="token punctuation">)</span>\n      <span class="token function">scale</span><span class="token punctuation">(</span>1.5<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token property">text-shadow</span><span class="token punctuation">:</span> 0 0 20px whitesmoke<span class="token punctuation">;</span>\n    <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="效果九" tabindex="-1"><a class="header-anchor" href="#效果九" aria-hidden="true">#</a> 效果九</h2>\n<blockquote>\n<p>茕茕白兔，东走西顾。  —— 汉 佚名 《古艳歌》</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/90618846c10e4486b2ee09ced7995d34~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" data="aurora"></p>\n<p>这个效果看着和效果三是不是有点类似，核心也是设置<code>background-clip: text</code>将背景色应用到文字区域，但是这里的背景动画看着比较复杂，但其实代码比较简单，就是设置了一张gif的背景图，这个在实际项目中大家可以看其复杂度灵活运用。</p>\n<h2 id="效果十" tabindex="-1"><a class="header-anchor" href="#效果十" aria-hidden="true">#</a> 效果十</h2>\n<blockquote>\n<p>有兔斯首，炮之燔之。 —— 先秦 佚名《瓠叶》</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dd34294101d74550a9fd380a1d352365~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" data="aurora"></p>\n<p>这个效果的gif图不是很逼真，大家可以看在线的效果，这里并没有用到<code>background-clip: text</code>，而是用到了<code>mix-blend-mode</code>混合模式，这里用到了<code>multiply</code>和<code>color-dodge</code>两个混合模式，图中的白色区域的移动是通过设置<code>translate</code>平移使画面动起来了。</p>\n<div class="language-css ext-css line-numbers-mode"><pre v-pre class="language-css"><code><span class="token selector">.gradient</span> <span class="token punctuation">{</span>\n    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>45deg<span class="token punctuation">,</span> red<span class="token punctuation">,</span> gold<span class="token punctuation">,</span> lightgreen<span class="token punctuation">,</span> gold<span class="token punctuation">,</span> red<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token property">mix-blend-mode</span><span class="token punctuation">:</span> multiply<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">.spotlight</span> <span class="token punctuation">{</span>\n    <span class="token property">background</span><span class="token punctuation">:</span> \n        <span class="token function">radial-gradient</span><span class="token punctuation">(</span>\n            circle<span class="token punctuation">,</span>\n            white<span class="token punctuation">,</span>\n            transparent 25%\n        <span class="token punctuation">)</span> center / 25% 25%<span class="token punctuation">,</span>\n        <span class="token function">radial-gradient</span><span class="token punctuation">(</span>\n            circle<span class="token punctuation">,</span>\n            white<span class="token punctuation">,</span>\n            black 25%\n        <span class="token punctuation">)</span> center / 12.5% 12.5%<span class="token punctuation">;</span>\n    <span class="token property">animation</span><span class="token punctuation">:</span> light 5s linear infinite<span class="token punctuation">;</span>\n    <span class="token property">mix-blend-mode</span><span class="token punctuation">:</span> color-dodge<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div>',date:"2023-01-08",deps:[],hoistedTags:[],links:[],pathInferred:"/css/2023/20230108.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"20230108",filePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/css/2023/20230108.md",filePathRelative:"css/2023/20230108.md",componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/css/2023/20230108.html.vue",componentFilePathRelative:"pages/css/2023/20230108.html.vue",componentFileChunkName:"v-5d086546",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/css/2023/20230108.html.js",dataFilePathRelative:"pages/css/2023/20230108.html.js",dataFileChunkName:"v-5d086546",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/css/2023/20230108.html",htmlFilePathRelative:"css/2023/20230108.html"},{data:{key:"v-6eec9732",path:"/css/2023/20230129.html",title:"vh 存在问题？试试动态视口单位",lang:"zh-CN",frontmatter:{title:"vh 存在问题？试试动态视口单位",date:"2023-01-29T00:00:00.000Z",tags:["css"],categories:["css"]},excerpt:"",headers:[{level:2,title:"vh 在移动端存在的问题！",slug:"vh-在移动端存在的问题",children:[]},{level:2,title:"新视口相关单位之 lvh、svh、dvh",slug:"新视口相关单位之-lvh、svh、dvh",children:[]},{level:2,title:"dvh、svh、lvh 它们的兼容性（2023-01-25）",slug:"dvh、svh、lvh-它们的兼容性-2023-01-25",children:[]}],git:{updatedTime:null,contributors:[]}},key:"v-6eec9732",path:"/css/2023/20230129.html",title:"vh 存在问题？试试动态视口单位",lang:"zh-CN",frontmatter:{title:"vh 存在问题？试试动态视口单位",date:"2023-01-29T00:00:00.000Z",tags:["css"],categories:["css"]},excerpt:"",headers:[{level:2,title:"vh 在移动端存在的问题！",slug:"vh-在移动端存在的问题",children:[]},{level:2,title:"新视口相关单位之 lvh、svh、dvh",slug:"新视口相关单位之-lvh、svh、dvh",children:[]},{level:2,title:"dvh、svh、lvh 它们的兼容性（2023-01-25）",slug:"dvh、svh、lvh-它们的兼容性-2023-01-25",children:[]}],content:"\r\n::: tip\r\n\r\n大部分同学都知道，在 CSS 世界中，有 vw、vh、vmax、vmin 这几个与视口 Viewport 相关的单位。\r\n正常而言：\r\n1. 1vw 等于1/100的视口宽度 （Viewport Width）\r\n2. 1vh 等于1/100的视口高度 （Viewport Height）\r\n3. vmin — vmin 的值是当前 vw 和 vh 中较小的值\r\n4. vmax — vw 和 vh 中较大的值\r\n\r\n:::\r\n\r\n## vh 在移动端存在的问题！\r\n\r\n但是，在移动端，情况就不太一样了。**100vh 不总是等于一屏幕的高度**。有的时候，100vh 高度会出现滚动条。\r\n\r\n根因在于：\r\n\r\n1. 很多浏览器，在计算 100vh 的高度的时候，会把地址栏等相关控件的高度计算在内2\r\n2. 同时，很多时候，由于会弹出软键盘等操作，在弹出的过程中，`100vh` 的计算值并不会实时发生变化！\r\n\r\n这也就变相导致了许多基于 `100vh` 想实现的效果无形中会产生很多问题。\r\n\r\n![img](https://web-dev.imgix.net/image/AeNB0cHNDkYPUYzDuv8gInYA9rY2/bWbl71iEuR5Gu9a2eAxD.png?auto=format&w=1600)\r\n\r\n## 新视口相关单位之 lvh、svh、dvh\r\n\r\n为了解决上述的问题，规范新推出了三类单位，分别是：\r\n\r\n1. The large viewport units（大视口单位）：`lvw`,`lvh`, `lvi`, `lvb`, `lvmin`, and `lvmax`\r\n2. The small viewport units（小视口单位）：`svw`, `svh`, `svi`, `svb`, `svmin`, and `svmax`\r\n3. The dynamic viewport units（动态视口单位）：`dvw`, `dvh`, `dvi`, `dvb`, `dvmin`, and `dvmax`\r\n\r\n别看看上去很多，其实很好记忆，vw/vw/vmax/vmin 的前缀是 v，而：\r\n\r\n1. 大视口单位的前缀是 `lv`，意为 large viewport\r\n2. 小视口单位的前缀是 `sv`，意为 small viewport\r\n3. 动态视口单位的前缀是 `dv`，意为 dynamic viewport\r\n\r\n这里我们着重关注 `lvh`、`svh`、`dvh`。它们三者与 `vw` 有什么异同呢？\r\n\r\n先来看大视口与小视口，规范对它们的定义是：\r\n\r\n1. **Large Viewport**: The viewport sized assuming any UA interfaces that are dynamically expanded and retracted to be retracted.\r\n2. **Small Viewport**: The viewport sized assuming any UA interfaces that are dynamically expanded and retracted to be expanded.\r\n\r\n翻译一下：\r\n\r\n1. 大视口（Large Viewport）：视口大小假设任何动态扩展和缩回的 UA 界面都没有展开\r\n2. 小视口（Small Viewport）：视口大小假设任何动态扩展和缩回的 UA 界面都展开了\r\n\r\n![img](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1b23db58e216467ba5f2e542c1fb1967~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?)\r\n\r\n因此，对应到高度之上，其状态大致如下：\r\n\r\n![img](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ea6ab4dee50646b2a887318ade837367~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?)\r\n\r\n理解了大视口与小视口之后，再理解动态视口就轻松了些。\r\n\r\n简单而言，动态视口的意思是：\r\n\r\n1. 动态工具栏展开时，动态视口等于小视口的大小\r\n2. 当动态工具栏被缩回时，动态视口等于大视口的大小\r\n\r\n因此，也就能得到下面这张图：\r\n\r\n![img](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e8195ba51c544d2bb41878417db2ef36~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?)\r\n\r\n其中，`dvh`、`dvw`、`dvmax`、`dvmin` 对标 `vh`、`vw`、`vmax`、`vmin` 比较好理解。\r\n\r\n剩下，`dvi` 和 `dvb` 解释一下。其实，在之前也有 `vi` 和 `vb` 两个单位：\r\n\r\n1. `vi`：vi 代表 Viewport Inline，代表文档的内联方向。在水平书写方向上，这对应于视口的宽度，而在垂直书写方向上，这表示视口的高度。记住 inline 方向的简单方法是记住它与文本的方向相同。\r\n2. `vb`：vb 代表 Viewport block，代表文档的块方向。这与 vi 水平书写方向相反，这将对应于视口高度，而在垂直文档中，这将表示视口的宽度。\r\n\r\n理解了 `vi` 与 `vb`，`dvi` 与 `dvb` 也就很好理解了，它们分别表示动态视口下的 Viewport Inline 与 Viewport block。同理去理解大视口、小视口下的 `lvi`、`lvb`、`dvi`、`dvb`。\r\n\r\n## dvh、svh、lvh 它们的兼容性（2023-01-25）\r\n\r\n截止到书写本文的时间，它们已经被 Chrome 108+ 支持，而 firefox、Safari 在更早的阶段，就已经开始支持这些新单位了。\r\n\r\n看看 CanIUse：\r\n\r\n![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6fc48b9a92cd4de987d8c8b0db2f936d~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?)\r\n\r\n**因此，在不久的将来，全面使用 dvh 替代 vh，能有效的减少非常多因为 vh 在移动端的表现而引起的问题**。",contentRendered:'<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>大部分同学都知道，在 CSS 世界中，有 vw、vh、vmax、vmin 这几个与视口 Viewport 相关的单位。\n正常而言：</p>\n<ol>\n<li>1vw 等于1/100的视口宽度 （Viewport Width）</li>\n<li>1vh 等于1/100的视口高度 （Viewport Height）</li>\n<li>vmin — vmin 的值是当前 vw 和 vh 中较小的值</li>\n<li>vmax — vw 和 vh 中较大的值</li>\n</ol>\n</div>\n<h2 id="vh-在移动端存在的问题" tabindex="-1"><a class="header-anchor" href="#vh-在移动端存在的问题" aria-hidden="true">#</a> vh 在移动端存在的问题！</h2>\n<p>但是，在移动端，情况就不太一样了。<strong>100vh 不总是等于一屏幕的高度</strong>。有的时候，100vh 高度会出现滚动条。</p>\n<p>根因在于：</p>\n<ol>\n<li>很多浏览器，在计算 100vh 的高度的时候，会把地址栏等相关控件的高度计算在内2</li>\n<li>同时，很多时候，由于会弹出软键盘等操作，在弹出的过程中，<code>100vh</code> 的计算值并不会实时发生变化！</li>\n</ol>\n<p>这也就变相导致了许多基于 <code>100vh</code> 想实现的效果无形中会产生很多问题。</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://web-dev.imgix.net/image/AeNB0cHNDkYPUYzDuv8gInYA9rY2/bWbl71iEuR5Gu9a2eAxD.png?auto=format&amp;w=1600" data="aurora"></p>\n<h2 id="新视口相关单位之-lvh、svh、dvh" tabindex="-1"><a class="header-anchor" href="#新视口相关单位之-lvh、svh、dvh" aria-hidden="true">#</a> 新视口相关单位之 lvh、svh、dvh</h2>\n<p>为了解决上述的问题，规范新推出了三类单位，分别是：</p>\n<ol>\n<li>The large viewport units（大视口单位）：<code>lvw</code>,<code>lvh</code>, <code>lvi</code>, <code>lvb</code>, <code>lvmin</code>, and <code>lvmax</code></li>\n<li>The small viewport units（小视口单位）：<code>svw</code>, <code>svh</code>, <code>svi</code>, <code>svb</code>, <code>svmin</code>, and <code>svmax</code></li>\n<li>The dynamic viewport units（动态视口单位）：<code>dvw</code>, <code>dvh</code>, <code>dvi</code>, <code>dvb</code>, <code>dvmin</code>, and <code>dvmax</code></li>\n</ol>\n<p>别看看上去很多，其实很好记忆，vw/vw/vmax/vmin 的前缀是 v，而：</p>\n<ol>\n<li>大视口单位的前缀是 <code>lv</code>，意为 large viewport</li>\n<li>小视口单位的前缀是 <code>sv</code>，意为 small viewport</li>\n<li>动态视口单位的前缀是 <code>dv</code>，意为 dynamic viewport</li>\n</ol>\n<p>这里我们着重关注 <code>lvh</code>、<code>svh</code>、<code>dvh</code>。它们三者与 <code>vw</code> 有什么异同呢？</p>\n<p>先来看大视口与小视口，规范对它们的定义是：</p>\n<ol>\n<li><strong>Large Viewport</strong>: The viewport sized assuming any UA interfaces that are dynamically expanded and retracted to be retracted.</li>\n<li><strong>Small Viewport</strong>: The viewport sized assuming any UA interfaces that are dynamically expanded and retracted to be expanded.</li>\n</ol>\n<p>翻译一下：</p>\n<ol>\n<li>大视口（Large Viewport）：视口大小假设任何动态扩展和缩回的 UA 界面都没有展开</li>\n<li>小视口（Small Viewport）：视口大小假设任何动态扩展和缩回的 UA 界面都展开了</li>\n</ol>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1b23db58e216467ba5f2e542c1fb1967~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?" data="aurora"></p>\n<p>因此，对应到高度之上，其状态大致如下：</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ea6ab4dee50646b2a887318ade837367~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?" data="aurora"></p>\n<p>理解了大视口与小视口之后，再理解动态视口就轻松了些。</p>\n<p>简单而言，动态视口的意思是：</p>\n<ol>\n<li>动态工具栏展开时，动态视口等于小视口的大小</li>\n<li>当动态工具栏被缩回时，动态视口等于大视口的大小</li>\n</ol>\n<p>因此，也就能得到下面这张图：</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e8195ba51c544d2bb41878417db2ef36~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?" data="aurora"></p>\n<p>其中，<code>dvh</code>、<code>dvw</code>、<code>dvmax</code>、<code>dvmin</code> 对标 <code>vh</code>、<code>vw</code>、<code>vmax</code>、<code>vmin</code> 比较好理解。</p>\n<p>剩下，<code>dvi</code> 和 <code>dvb</code> 解释一下。其实，在之前也有 <code>vi</code> 和 <code>vb</code> 两个单位：</p>\n<ol>\n<li><code>vi</code>：vi 代表 Viewport Inline，代表文档的内联方向。在水平书写方向上，这对应于视口的宽度，而在垂直书写方向上，这表示视口的高度。记住 inline 方向的简单方法是记住它与文本的方向相同。</li>\n<li><code>vb</code>：vb 代表 Viewport block，代表文档的块方向。这与 vi 水平书写方向相反，这将对应于视口高度，而在垂直文档中，这将表示视口的宽度。</li>\n</ol>\n<p>理解了 <code>vi</code> 与 <code>vb</code>，<code>dvi</code> 与 <code>dvb</code> 也就很好理解了，它们分别表示动态视口下的 Viewport Inline 与 Viewport block。同理去理解大视口、小视口下的 <code>lvi</code>、<code>lvb</code>、<code>dvi</code>、<code>dvb</code>。</p>\n<h2 id="dvh、svh、lvh-它们的兼容性-2023-01-25" tabindex="-1"><a class="header-anchor" href="#dvh、svh、lvh-它们的兼容性-2023-01-25" aria-hidden="true">#</a> dvh、svh、lvh 它们的兼容性（2023-01-25）</h2>\n<p>截止到书写本文的时间，它们已经被 Chrome 108+ 支持，而 firefox、Safari 在更早的阶段，就已经开始支持这些新单位了。</p>\n<p>看看 CanIUse：</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6fc48b9a92cd4de987d8c8b0db2f936d~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?" data="aurora"></p>\n<p><strong>因此，在不久的将来，全面使用 dvh 替代 vh，能有效的减少非常多因为 vh 在移动端的表现而引起的问题</strong>。</p>\n',date:"2023-01-29",deps:[],hoistedTags:[],links:[],pathInferred:"/css/2023/20230129.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"20230129",filePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/css/2023/20230129.md",filePathRelative:"css/2023/20230129.md",componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/css/2023/20230129.html.vue",componentFilePathRelative:"pages/css/2023/20230129.html.vue",componentFileChunkName:"v-6eec9732",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/css/2023/20230129.html.js",dataFilePathRelative:"pages/css/2023/20230129.html.js",dataFileChunkName:"v-6eec9732",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/css/2023/20230129.html",htmlFilePathRelative:"css/2023/20230129.html"},{data:{key:"v-379809b4",path:"/CICD/2023/20230104.html",title:"GitHub Actions 入门教程",lang:"zh-CN",frontmatter:{title:"GitHub Actions 入门教程",date:"2023-01-04T00:00:00.000Z",tags:["CICD"],categories:["CICD"]},excerpt:"",headers:[{level:2,title:"一、GitHub Actions 是什么？",slug:"一、github-actions-是什么",children:[]},{level:2,title:"二、基本概念",slug:"二、基本概念",children:[]},{level:2,title:"三、workflow 文件",slug:"三、workflow-文件",children:[]},{level:2,title:"四、实例：React 项目发布到 GitHub Pages",slug:"四、实例-react-项目发布到-github-pages",children:[]},{level:2,title:"五、参考链接",slug:"五、参考链接",children:[]}],git:{updatedTime:null,contributors:[]}},key:"v-379809b4",path:"/CICD/2023/20230104.html",title:"GitHub Actions 入门教程",lang:"zh-CN",frontmatter:{title:"GitHub Actions 入门教程",date:"2023-01-04T00:00:00.000Z",tags:["CICD"],categories:["CICD"]},excerpt:"",headers:[{level:2,title:"一、GitHub Actions 是什么？",slug:"一、github-actions-是什么",children:[]},{level:2,title:"二、基本概念",slug:"二、基本概念",children:[]},{level:2,title:"三、workflow 文件",slug:"三、workflow-文件",children:[]},{level:2,title:"四、实例：React 项目发布到 GitHub Pages",slug:"四、实例-react-项目发布到-github-pages",children:[]},{level:2,title:"五、参考链接",slug:"五、参考链接",children:[]}],content:'\r\n::: tip\r\n\r\nGitHub Actions 是 GitHub 的持续集成服务，于2018年10月推出。这些天，我一直在试用，觉得它非常强大，有创意，本文是一个简单教程，演示如何使用 GitHub Actions 自动发布一个 React 应用到 GitHub Pages。\r\n\r\n:::\r\n\r\n## 一、GitHub Actions 是什么？\r\n\r\n大家知道，持续集成由很多操作组成，比如抓取代码、运行测试、登录远程服务器，发布到第三方服务等等。GitHub 把这些操作就称为 actions。\r\n\r\n很多操作在不同项目里面是类似的，完全可以共享。GitHub 注意到了这一点，想出了一个很妙的点子，允许开发者把每个操作写成独立的脚本文件，存放到代码仓库，使得其他开发者可以引用。\r\n\r\n如果你需要某个 action，不必自己写复杂的脚本，直接引用他人写好的 action 即可，整个持续集成过程，就变成了一个 actions 的组合。这就是 GitHub Actions 最特别的地方。\r\n\r\nGitHub 做了一个[官方市场](https://github.com/marketplace?type=actions)，可以搜索到他人提交的 actions。另外，还有一个 [awesome actions](https://github.com/sdras/awesome-actions) 的仓库，也可以找到不少 action。\r\n\r\n![img](https://www.wangbase.com/blogimg/asset/201909/bg2019091105.jpg)\r\n\r\n上面说了，每个 action 就是一个独立脚本，因此可以做成代码仓库，使用`userName/repoName`的语法引用 action。比如，`actions/setup-node`就表示`github.com/actions/setup-node`这个[仓库](https://github.com/actions/setup-node)，它代表一个 action，作用是安装 Node.js。事实上，GitHub 官方的 actions 都放在 [github.com/actions](https://github.com/actions) 里面。\r\n\r\n既然 actions 是代码仓库，当然就有版本的概念，用户可以引用某个具体版本的 action。下面都是合法的 action 引用，用的就是 Git 的指针概念，详见[官方文档](https://help.github.com/en/articles/about-actions#versioning-your-action)。\r\n\r\n```bash\r\nactions/setup-node@74bc508 # 指向一个 commit\r\nactions/setup-node@v1.0    # 指向一个标签\r\nactions/setup-node@master  # 指向一个分支\r\n```\r\n\r\n## 二、基本概念\r\n\r\nGitHub Actions 有一些自己的术语。\r\n\r\n（1）**workflow** （工作流程）：持续集成一次运行的过程，就是一个 workflow。\r\n\r\n（2）**job** （任务）：一个 workflow 由一个或多个 jobs 构成，含义是一次持续集成的运行，可以完成多个任务。\r\n\r\n（3）**step**（步骤）：每个 job 由多个 step 构成，一步步完成。\r\n\r\n（4）**action** （动作）：每个 step 可以依次执行一个或多个命令（action）。\r\n\r\n## 三、workflow 文件\r\n\r\nGitHub Actions 的配置文件叫做 workflow 文件，存放在代码仓库的`.github/workflows`目录。\r\n\r\nworkflow 文件采用 [YAML 格式](https://www.ruanyifeng.com/blog/2016/07/yaml.html)，文件名可以任意取，但是后缀名统一为`.yml`，比如`foo.yml`。一个库可以有多个 workflow 文件。GitHub 只要发现`.github/workflows`目录里面有`.yml`文件，就会自动运行该文件。\r\n\r\nworkflow 文件的配置字段非常多，详见[官方文档](https://help.github.com/en/articles/workflow-syntax-for-github-actions)。下面是一些基本字段。\r\n\r\n**（1）`name`**\r\n\r\n`name`字段是 workflow 的名称。如果省略该字段，默认为当前 workflow 的文件名。\r\n\r\n```bash\r\nname: GitHub Actions Demo\r\n```\r\n\r\n**（2）`on`**\r\n\r\n`on`字段指定触发 workflow 的条件，通常是某些事件。\r\n\r\n```bash\r\non: push\r\n```\r\n\r\n上面代码指定，`push`事件触发 workflow。\r\n\r\n`on`字段也可以是事件的数组。\r\n\r\n```bash\r\non: [push, pull_request]\r\n```\r\n\r\n上面代码指定，`push`事件或`pull_request`事件都可以触发 workflow。\r\n\r\n完整的事件列表，请查看[官方文档](https://help.github.com/en/articles/events-that-trigger-workflows)。除了代码库事件，GitHub Actions 也支持外部事件触发，或者定时运行。\r\n\r\n**（3）`on..`**\r\n\r\n指定触发事件时，可以限定分支或标签。\r\n\r\n```bash\r\non:\r\n  push:\r\n    branches:    \r\n      - master\r\n```\r\n\r\n上面代码指定，只有`master`分支发生`push`事件时，才会触发 workflow。\r\n\r\n**（4）`jobs..name`**\r\n\r\nworkflow 文件的主体是`jobs`字段，表示要执行的一项或多项任务。\r\n\r\n`jobs`字段里面，需要写出每一项任务的`job_id`，具体名称自定义。`job_id`里面的`name`字段是任务的说明。\r\n\r\n```javascript\r\njobs:\r\n  my_first_job:\r\n    name: My first job\r\n  my_second_job:\r\n    name: My second job\r\n```\r\n\r\n上面代码的`jobs`字段包含两项任务，`job_id`分别是`my_first_job`和`my_second_job`。\r\n\r\n**（5）`jobs..needs`**\r\n\r\n`needs`字段指定当前任务的依赖关系，即运行顺序。\r\n\r\n```javascript\r\njobs:\r\n  job1:\r\n  job2:\r\n    needs: job1\r\n  job3:\r\n    needs: [job1, job2]\r\n```\r\n\r\n上面代码中，`job1`必须先于`job2`完成，而`job3`等待`job1`和`job2`的完成才能运行。因此，这个 workflow 的运行顺序依次为：`job1`、`job2`、`job3`。\r\n\r\n**（6）`jobs..runs-on`**\r\n\r\n`runs-on`字段指定运行所需要的虚拟机环境。它是必填字段。目前可用的虚拟机如下。\r\n\r\n> - `ubuntu-latest`，`ubuntu-18.04`或`ubuntu-16.04`\r\n> - `windows-latest`，`windows-2019`或`windows-2016`\r\n> - `macOS-latest`或`macOS-10.14`\r\n\r\n下面代码指定虚拟机环境为`ubuntu-18.04`。\r\n\r\n```javascript\r\nruns-on: ubuntu-18.04\r\n```\r\n\r\n**（7）`jobs..steps`**\r\n\r\n`steps`字段指定每个 Job 的运行步骤，可以包含一个或多个步骤。每个步骤都可以指定以下三个字段。\r\n\r\n> - `jobs..steps.name`：步骤名称。\r\n> - `jobs..steps.run`：该步骤运行的命令或者 action。\r\n> - `jobs..steps.env`：该步骤所需的环境变量。\r\n\r\n下面是一个完整的 workflow 文件的范例。\r\n\r\n```javascript\r\nname: Greeting from Mona\r\non: push\r\n\r\njobs:\r\n  my-job:\r\n    name: My Job\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n    - name: Print a greeting\r\n      env:\r\n        MY_VAR: Hi there! My name is\r\n        FIRST_NAME: Mona\r\n        MIDDLE_NAME: The\r\n        LAST_NAME: Octocat\r\n      run: |\r\n        echo $MY_VAR $FIRST_NAME $MIDDLE_NAME $LAST_NAME.\r\n```\r\n\r\n上面代码中，`steps`字段只包括一个步骤。该步骤先注入四个环境变量，然后执行一条 Bash 命令。\r\n\r\n## 四、实例：React 项目发布到 GitHub Pages\r\n\r\n下面是一个实例，通过 GitHub Actions 构建一个 React 项目，并发布到 GitHub Pages。最终代码都在[这个仓库](https://github.com/ruanyf/github-actions-demo)里面，发布后的参考网址为[ruanyf.github.io/github-actions-demo](https://ruanyf.github.io/github-actions-demo)。\r\n\r\n第一步，GitHub Actions 目前还处在测试阶段，需要到[这个网址](https://github.com/features/actions/signup/)申请测试资格。申请以后，可能需要几天才能通过。据说，2019年11月就会放开。\r\n\r\n获得资格后，仓库顶部的菜单会出现`Actions`一项。\r\n\r\n![img](https://www.wangbase.com/blogimg/asset/201909/bg2019091106.jpg)\r\n\r\n第二步，这个示例需要将构建成果发到 GitHub 仓库，因此需要 GitHub 密钥。按照[官方文档](https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line)，生成一个密钥。然后，将这个密钥储存到当前仓库的`Settings/Secrets`里面。\r\n\r\n![img](https://www.wangbase.com/blogimg/asset/201909/bg2019091107.jpg)\r\n\r\n上图是储存秘密的环境变量的地方。环境变量的名字可以随便起，这里用的是`ACCESS_TOKEN`。如果你不用这个名字，后面脚本里的变量名也要跟着改。\r\n\r\n第三步，本地计算机使用[`create-react-app`](https://github.com/facebook/create-react-app)，生成一个标准的 React 应用。\r\n\r\n```bash\r\n$ npx create-react-app github-actions-demo\r\n$ cd github-actions-demo\r\n```\r\n\r\n然后，打开`package.json`文件，加一个`homepage`字段，表示该应用发布后的根目录（参见[官方文档](https://create-react-app.dev/docs/deployment#building-for-relative-paths)）。\r\n\r\n```javascript\r\n"homepage": "https://[username].github.io/github-actions-demo",\r\n```\r\n\r\n上面代码中，将`[username]`替换成你的 GitHub 用户名，参见[范例](https://github.com/ruanyf/github-actions-demo/blob/master/package.json#L10)。\r\n\r\n第四步，在这个仓库的`.github/workflows`目录，生成一个 workflow 文件，名字可以随便取，这个示例是`ci.yml`。\r\n\r\n我们选用一个别人已经写好的 action：[JamesIves/github-pages-deploy-action](https://github.com/marketplace/actions/deploy-to-github-pages)，它提供了 workflow 的范例文件，直接拷贝过来就行了（查看[源码](https://github.com/ruanyf/github-actions-demo/blob/master/.github/workflows/ci.yml)）。\r\n\r\n```javascript\r\nname: GitHub Actions Build and Deploy Demo\r\non:\r\n  push:\r\n    branches:\r\n      - master\r\njobs:\r\n  build-and-deploy:\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n    - name: Checkout\r\n      uses: actions/checkout@master\r\n\r\n    - name: Build and Deploy\r\n      uses: JamesIves/github-pages-deploy-action@master\r\n      env:\r\n        ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}\r\n        BRANCH: gh-pages\r\n        FOLDER: build\r\n        BUILD_SCRIPT: npm install && npm run build\r\n```\r\n\r\n上面这个 workflow 文件的要点如下。\r\n\r\n> 1. 整个流程在`master`分支发生`push`事件时触发。\r\n> 2. 只有一个`job`，运行在虚拟机环境`ubuntu-latest`。\r\n> 3. 第一步是获取源码，使用的 action 是`actions/checkout`。\r\n> 4. 第二步是构建和部署，使用的 action 是`JamesIves/github-pages-deploy-action`。\r\n> 5. 第二步需要四个环境变量，分别为 GitHub 密钥、发布分支、构建成果所在目录、构建脚本。其中，只有 GitHub 密钥是秘密变量，需要写在双括号里面，其他三个都可以直接写在文件里。\r\n\r\n第五步，保存上面的文件后，将整个仓库推送到 GitHub。\r\n\r\nGitHub 发现了 workflow 文件以后，就会自动运行。你可以在网站上实时查看[运行日志](https://github.com/ruanyf/github-actions-demo/commit/24fbf6a875351297f31434fd44bc3146accf9e59/checks)，日志默认保存30天。\r\n\r\n![img](https://www.wangbase.com/blogimg/asset/201909/bg2019091108.jpg)\r\n\r\n等到 workflow 运行结束，访问 [GitHub Page](https://ruanyf.github.io/github-actions-demo/)，会看到构建成果已经发上网了。\r\n\r\n![img](https://www.wangbase.com/blogimg/asset/201909/bg2019091109.jpg)\r\n\r\n以后，每次修改后推送源码，GitHub Actions 都会自动运行，将构建产物发布到网页。\r\n\r\n## 五、参考链接\r\n\r\n- [GitHub Pages 官方文档](https://help.github.com/en/categories/automating-your-workflow-with-github-actions)\r\n- [Github Actions for web apps](https://lukeboyle.com/blog-posts/2019/08/github-actions-for-web-apps/), Luke Boyle\r\n- [My First Week With GitHub Actions](https://medium.com/@adam.zolyak/my-first-week-with-github-actions-5d92de4c4851), Adam Zolyak\r\n- [阮一峰](http://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html)',contentRendered:'<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>GitHub Actions 是 GitHub 的持续集成服务，于2018年10月推出。这些天，我一直在试用，觉得它非常强大，有创意，本文是一个简单教程，演示如何使用 GitHub Actions 自动发布一个 React 应用到 GitHub Pages。</p>\n</div>\n<h2 id="一、github-actions-是什么" tabindex="-1"><a class="header-anchor" href="#一、github-actions-是什么" aria-hidden="true">#</a> 一、GitHub Actions 是什么？</h2>\n<p>大家知道，持续集成由很多操作组成，比如抓取代码、运行测试、登录远程服务器，发布到第三方服务等等。GitHub 把这些操作就称为 actions。</p>\n<p>很多操作在不同项目里面是类似的，完全可以共享。GitHub 注意到了这一点，想出了一个很妙的点子，允许开发者把每个操作写成独立的脚本文件，存放到代码仓库，使得其他开发者可以引用。</p>\n<p>如果你需要某个 action，不必自己写复杂的脚本，直接引用他人写好的 action 即可，整个持续集成过程，就变成了一个 actions 的组合。这就是 GitHub Actions 最特别的地方。</p>\n<p>GitHub 做了一个<a href="https://github.com/marketplace?type=actions" target="_blank" rel="noopener noreferrer">官方市场<ExternalLinkIcon/></a>，可以搜索到他人提交的 actions。另外，还有一个 <a href="https://github.com/sdras/awesome-actions" target="_blank" rel="noopener noreferrer">awesome actions<ExternalLinkIcon/></a> 的仓库，也可以找到不少 action。</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://www.wangbase.com/blogimg/asset/201909/bg2019091105.jpg" data="aurora"></p>\n<p>上面说了，每个 action 就是一个独立脚本，因此可以做成代码仓库，使用<code>userName/repoName</code>的语法引用 action。比如，<code>actions/setup-node</code>就表示<code>github.com/actions/setup-node</code>这个<a href="https://github.com/actions/setup-node" target="_blank" rel="noopener noreferrer">仓库<ExternalLinkIcon/></a>，它代表一个 action，作用是安装 Node.js。事实上，GitHub 官方的 actions 都放在 <a href="https://github.com/actions" target="_blank" rel="noopener noreferrer">github.com/actions<ExternalLinkIcon/></a> 里面。</p>\n<p>既然 actions 是代码仓库，当然就有版本的概念，用户可以引用某个具体版本的 action。下面都是合法的 action 引用，用的就是 Git 的指针概念，详见<a href="https://help.github.com/en/articles/about-actions#versioning-your-action" target="_blank" rel="noopener noreferrer">官方文档<ExternalLinkIcon/></a>。</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code>actions/setup-node@74bc508 <span class="token comment"># 指向一个 commit</span>\nactions/setup-node@v1.0    <span class="token comment"># 指向一个标签</span>\nactions/setup-node@master  <span class="token comment"># 指向一个分支</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="二、基本概念" tabindex="-1"><a class="header-anchor" href="#二、基本概念" aria-hidden="true">#</a> 二、基本概念</h2>\n<p>GitHub Actions 有一些自己的术语。</p>\n<p>（1）<strong>workflow</strong> （工作流程）：持续集成一次运行的过程，就是一个 workflow。</p>\n<p>（2）<strong>job</strong> （任务）：一个 workflow 由一个或多个 jobs 构成，含义是一次持续集成的运行，可以完成多个任务。</p>\n<p>（3）<strong>step</strong>（步骤）：每个 job 由多个 step 构成，一步步完成。</p>\n<p>（4）<strong>action</strong> （动作）：每个 step 可以依次执行一个或多个命令（action）。</p>\n<h2 id="三、workflow-文件" tabindex="-1"><a class="header-anchor" href="#三、workflow-文件" aria-hidden="true">#</a> 三、workflow 文件</h2>\n<p>GitHub Actions 的配置文件叫做 workflow 文件，存放在代码仓库的<code>.github/workflows</code>目录。</p>\n<p>workflow 文件采用 <a href="https://www.ruanyifeng.com/blog/2016/07/yaml.html" target="_blank" rel="noopener noreferrer">YAML 格式<ExternalLinkIcon/></a>，文件名可以任意取，但是后缀名统一为<code>.yml</code>，比如<code>foo.yml</code>。一个库可以有多个 workflow 文件。GitHub 只要发现<code>.github/workflows</code>目录里面有<code>.yml</code>文件，就会自动运行该文件。</p>\n<p>workflow 文件的配置字段非常多，详见<a href="https://help.github.com/en/articles/workflow-syntax-for-github-actions" target="_blank" rel="noopener noreferrer">官方文档<ExternalLinkIcon/></a>。下面是一些基本字段。</p>\n<p><strong>（1）<code>name</code></strong></p>\n<p><code>name</code>字段是 workflow 的名称。如果省略该字段，默认为当前 workflow 的文件名。</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code>name: GitHub Actions Demo\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><strong>（2）<code>on</code></strong></p>\n<p><code>on</code>字段指定触发 workflow 的条件，通常是某些事件。</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code>on: push\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>上面代码指定，<code>push</code>事件触发 workflow。</p>\n<p><code>on</code>字段也可以是事件的数组。</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code>on: <span class="token punctuation">[</span>push, pull_request<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>上面代码指定，<code>push</code>事件或<code>pull_request</code>事件都可以触发 workflow。</p>\n<p>完整的事件列表，请查看<a href="https://help.github.com/en/articles/events-that-trigger-workflows" target="_blank" rel="noopener noreferrer">官方文档<ExternalLinkIcon/></a>。除了代码库事件，GitHub Actions 也支持外部事件触发，或者定时运行。</p>\n<p><strong>（3）<code>on..</code></strong></p>\n<p>指定触发事件时，可以限定分支或标签。</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code>on:\n  push:\n    branches:    \n      - master\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>上面代码指定，只有<code>master</code>分支发生<code>push</code>事件时，才会触发 workflow。</p>\n<p><strong>（4）<code>jobs..name</code></strong></p>\n<p>workflow 文件的主体是<code>jobs</code>字段，表示要执行的一项或多项任务。</p>\n<p><code>jobs</code>字段里面，需要写出每一项任务的<code>job_id</code>，具体名称自定义。<code>job_id</code>里面的<code>name</code>字段是任务的说明。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token literal-property property">jobs</span><span class="token operator">:</span>\n  <span class="token literal-property property">my_first_job</span><span class="token operator">:</span>\n    <span class="token literal-property property">name</span><span class="token operator">:</span> My first job\n  <span class="token literal-property property">my_second_job</span><span class="token operator">:</span>\n    <span class="token literal-property property">name</span><span class="token operator">:</span> My second job\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>上面代码的<code>jobs</code>字段包含两项任务，<code>job_id</code>分别是<code>my_first_job</code>和<code>my_second_job</code>。</p>\n<p><strong>（5）<code>jobs..needs</code></strong></p>\n<p><code>needs</code>字段指定当前任务的依赖关系，即运行顺序。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token literal-property property">jobs</span><span class="token operator">:</span>\n  <span class="token literal-property property">job1</span><span class="token operator">:</span>\n  <span class="token literal-property property">job2</span><span class="token operator">:</span>\n    <span class="token literal-property property">needs</span><span class="token operator">:</span> job1\n  <span class="token literal-property property">job3</span><span class="token operator">:</span>\n    <span class="token literal-property property">needs</span><span class="token operator">:</span> <span class="token punctuation">[</span>job1<span class="token punctuation">,</span> job2<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>上面代码中，<code>job1</code>必须先于<code>job2</code>完成，而<code>job3</code>等待<code>job1</code>和<code>job2</code>的完成才能运行。因此，这个 workflow 的运行顺序依次为：<code>job1</code>、<code>job2</code>、<code>job3</code>。</p>\n<p><strong>（6）<code>jobs..runs-on</code></strong></p>\n<p><code>runs-on</code>字段指定运行所需要的虚拟机环境。它是必填字段。目前可用的虚拟机如下。</p>\n<blockquote>\n<ul>\n<li><code>ubuntu-latest</code>，<code>ubuntu-18.04</code>或<code>ubuntu-16.04</code></li>\n<li><code>windows-latest</code>，<code>windows-2019</code>或<code>windows-2016</code></li>\n<li><code>macOS-latest</code>或<code>macOS-10.14</code></li>\n</ul>\n</blockquote>\n<p>下面代码指定虚拟机环境为<code>ubuntu-18.04</code>。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>runs<span class="token operator">-</span>on<span class="token operator">:</span> ubuntu<span class="token operator">-</span><span class="token number">18.04</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><strong>（7）<code>jobs..steps</code></strong></p>\n<p><code>steps</code>字段指定每个 Job 的运行步骤，可以包含一个或多个步骤。每个步骤都可以指定以下三个字段。</p>\n<blockquote>\n<ul>\n<li><code>jobs..steps.name</code>：步骤名称。</li>\n<li><code>jobs..steps.run</code>：该步骤运行的命令或者 action。</li>\n<li><code>jobs..steps.env</code>：该步骤所需的环境变量。</li>\n</ul>\n</blockquote>\n<p>下面是一个完整的 workflow 文件的范例。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token literal-property property">name</span><span class="token operator">:</span> Greeting from Mona\n<span class="token literal-property property">on</span><span class="token operator">:</span> push\n\n<span class="token literal-property property">jobs</span><span class="token operator">:</span>\n  my<span class="token operator">-</span>job<span class="token operator">:</span>\n    <span class="token literal-property property">name</span><span class="token operator">:</span> My Job\n    runs<span class="token operator">-</span>on<span class="token operator">:</span> ubuntu<span class="token operator">-</span>latest\n    <span class="token literal-property property">steps</span><span class="token operator">:</span>\n    <span class="token operator">-</span> name<span class="token operator">:</span> Print a greeting\n      <span class="token literal-property property">env</span><span class="token operator">:</span>\n        <span class="token constant">MY_VAR</span><span class="token operator">:</span> Hi there<span class="token operator">!</span> My name is\n        <span class="token constant">FIRST_NAME</span><span class="token operator">:</span> Mona\n        <span class="token constant">MIDDLE_NAME</span><span class="token operator">:</span> The\n        <span class="token constant">LAST_NAME</span><span class="token operator">:</span> Octocat\n      <span class="token literal-property property">run</span><span class="token operator">:</span> <span class="token operator">|</span>\n        echo $<span class="token constant">MY_VAR</span> $<span class="token constant">FIRST_NAME</span> $<span class="token constant">MIDDLE_NAME</span> $<span class="token constant">LAST_NAME</span><span class="token punctuation">.</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>上面代码中，<code>steps</code>字段只包括一个步骤。该步骤先注入四个环境变量，然后执行一条 Bash 命令。</p>\n<h2 id="四、实例-react-项目发布到-github-pages" tabindex="-1"><a class="header-anchor" href="#四、实例-react-项目发布到-github-pages" aria-hidden="true">#</a> 四、实例：React 项目发布到 GitHub Pages</h2>\n<p>下面是一个实例，通过 GitHub Actions 构建一个 React 项目，并发布到 GitHub Pages。最终代码都在<a href="https://github.com/ruanyf/github-actions-demo" target="_blank" rel="noopener noreferrer">这个仓库<ExternalLinkIcon/></a>里面，发布后的参考网址为<a href="https://ruanyf.github.io/github-actions-demo" target="_blank" rel="noopener noreferrer">ruanyf.github.io/github-actions-demo<ExternalLinkIcon/></a>。</p>\n<p>第一步，GitHub Actions 目前还处在测试阶段，需要到<a href="https://github.com/features/actions/signup/" target="_blank" rel="noopener noreferrer">这个网址<ExternalLinkIcon/></a>申请测试资格。申请以后，可能需要几天才能通过。据说，2019年11月就会放开。</p>\n<p>获得资格后，仓库顶部的菜单会出现<code>Actions</code>一项。</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://www.wangbase.com/blogimg/asset/201909/bg2019091106.jpg" data="aurora"></p>\n<p>第二步，这个示例需要将构建成果发到 GitHub 仓库，因此需要 GitHub 密钥。按照<a href="https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line" target="_blank" rel="noopener noreferrer">官方文档<ExternalLinkIcon/></a>，生成一个密钥。然后，将这个密钥储存到当前仓库的<code>Settings/Secrets</code>里面。</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://www.wangbase.com/blogimg/asset/201909/bg2019091107.jpg" data="aurora"></p>\n<p>上图是储存秘密的环境变量的地方。环境变量的名字可以随便起，这里用的是<code>ACCESS_TOKEN</code>。如果你不用这个名字，后面脚本里的变量名也要跟着改。</p>\n<p>第三步，本地计算机使用<a href="https://github.com/facebook/create-react-app" target="_blank" rel="noopener noreferrer"><code>create-react-app</code><ExternalLinkIcon/></a>，生成一个标准的 React 应用。</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code>$ npx create-react-app github-actions-demo\n$ <span class="token builtin class-name">cd</span> github-actions-demo\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>然后，打开<code>package.json</code>文件，加一个<code>homepage</code>字段，表示该应用发布后的根目录（参见<a href="https://create-react-app.dev/docs/deployment#building-for-relative-paths" target="_blank" rel="noopener noreferrer">官方文档<ExternalLinkIcon/></a>）。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token string-property property">"homepage"</span><span class="token operator">:</span> <span class="token string">"https://[username].github.io/github-actions-demo"</span><span class="token punctuation">,</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>上面代码中，将<code>[username]</code>替换成你的 GitHub 用户名，参见<a href="https://github.com/ruanyf/github-actions-demo/blob/master/package.json#L10" target="_blank" rel="noopener noreferrer">范例<ExternalLinkIcon/></a>。</p>\n<p>第四步，在这个仓库的<code>.github/workflows</code>目录，生成一个 workflow 文件，名字可以随便取，这个示例是<code>ci.yml</code>。</p>\n<p>我们选用一个别人已经写好的 action：<a href="https://github.com/marketplace/actions/deploy-to-github-pages" target="_blank" rel="noopener noreferrer">JamesIves/github-pages-deploy-action<ExternalLinkIcon/></a>，它提供了 workflow 的范例文件，直接拷贝过来就行了（查看<a href="https://github.com/ruanyf/github-actions-demo/blob/master/.github/workflows/ci.yml" target="_blank" rel="noopener noreferrer">源码<ExternalLinkIcon/></a>）。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token literal-property property">name</span><span class="token operator">:</span> GitHub Actions Build and Deploy Demo\n<span class="token literal-property property">on</span><span class="token operator">:</span>\n  <span class="token literal-property property">push</span><span class="token operator">:</span>\n    <span class="token literal-property property">branches</span><span class="token operator">:</span>\n      <span class="token operator">-</span> master\n<span class="token literal-property property">jobs</span><span class="token operator">:</span>\n  build<span class="token operator">-</span>and<span class="token operator">-</span>deploy<span class="token operator">:</span>\n    runs<span class="token operator">-</span>on<span class="token operator">:</span> ubuntu<span class="token operator">-</span>latest\n    <span class="token literal-property property">steps</span><span class="token operator">:</span>\n    <span class="token operator">-</span> name<span class="token operator">:</span> Checkout\n      <span class="token literal-property property">uses</span><span class="token operator">:</span> actions<span class="token operator">/</span>checkout@master\n\n    <span class="token operator">-</span> name<span class="token operator">:</span> Build and Deploy\n      <span class="token literal-property property">uses</span><span class="token operator">:</span> JamesIves<span class="token operator">/</span>github<span class="token operator">-</span>pages<span class="token operator">-</span>deploy<span class="token operator">-</span>action@master\n      <span class="token literal-property property">env</span><span class="token operator">:</span>\n        <span class="token constant">ACCESS_TOKEN</span><span class="token operator">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets<span class="token punctuation">.</span><span class="token constant">ACCESS_TOKEN</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>\n        <span class="token constant">BRANCH</span><span class="token operator">:</span> gh<span class="token operator">-</span>pages\n        <span class="token constant">FOLDER</span><span class="token operator">:</span> build\n        <span class="token constant">BUILD_SCRIPT</span><span class="token operator">:</span> npm install <span class="token operator">&amp;&amp;</span> npm run build\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>上面这个 workflow 文件的要点如下。</p>\n<blockquote>\n<ol>\n<li>整个流程在<code>master</code>分支发生<code>push</code>事件时触发。</li>\n<li>只有一个<code>job</code>，运行在虚拟机环境<code>ubuntu-latest</code>。</li>\n<li>第一步是获取源码，使用的 action 是<code>actions/checkout</code>。</li>\n<li>第二步是构建和部署，使用的 action 是<code>JamesIves/github-pages-deploy-action</code>。</li>\n<li>第二步需要四个环境变量，分别为 GitHub 密钥、发布分支、构建成果所在目录、构建脚本。其中，只有 GitHub 密钥是秘密变量，需要写在双括号里面，其他三个都可以直接写在文件里。</li>\n</ol>\n</blockquote>\n<p>第五步，保存上面的文件后，将整个仓库推送到 GitHub。</p>\n<p>GitHub 发现了 workflow 文件以后，就会自动运行。你可以在网站上实时查看<a href="https://github.com/ruanyf/github-actions-demo/commit/24fbf6a875351297f31434fd44bc3146accf9e59/checks" target="_blank" rel="noopener noreferrer">运行日志<ExternalLinkIcon/></a>，日志默认保存30天。</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://www.wangbase.com/blogimg/asset/201909/bg2019091108.jpg" data="aurora"></p>\n<p>等到 workflow 运行结束，访问 <a href="https://ruanyf.github.io/github-actions-demo/" target="_blank" rel="noopener noreferrer">GitHub Page<ExternalLinkIcon/></a>，会看到构建成果已经发上网了。</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://www.wangbase.com/blogimg/asset/201909/bg2019091109.jpg" data="aurora"></p>\n<p>以后，每次修改后推送源码，GitHub Actions 都会自动运行，将构建产物发布到网页。</p>\n<h2 id="五、参考链接" tabindex="-1"><a class="header-anchor" href="#五、参考链接" aria-hidden="true">#</a> 五、参考链接</h2>\n<ul>\n<li><a href="https://help.github.com/en/categories/automating-your-workflow-with-github-actions" target="_blank" rel="noopener noreferrer">GitHub Pages 官方文档<ExternalLinkIcon/></a></li>\n<li><a href="https://lukeboyle.com/blog-posts/2019/08/github-actions-for-web-apps/" target="_blank" rel="noopener noreferrer">Github Actions for web apps<ExternalLinkIcon/></a>, Luke Boyle</li>\n<li><a href="https://medium.com/@adam.zolyak/my-first-week-with-github-actions-5d92de4c4851" target="_blank" rel="noopener noreferrer">My First Week With GitHub Actions<ExternalLinkIcon/></a>, Adam Zolyak</li>\n<li><a href="http://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html" target="_blank" rel="noopener noreferrer">阮一峰<ExternalLinkIcon/></a></li>\n</ul>\n',date:"2023-01-04",deps:[],hoistedTags:[],links:[],pathInferred:"/CICD/2023/20230104.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"20230104",filePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/CICD/2023/20230104.md",filePathRelative:"CICD/2023/20230104.md",componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/CICD/2023/20230104.html.vue",componentFilePathRelative:"pages/CICD/2023/20230104.html.vue",componentFileChunkName:"v-379809b4",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/CICD/2023/20230104.html.js",dataFilePathRelative:"pages/CICD/2023/20230104.html.js",dataFileChunkName:"v-379809b4",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/CICD/2023/20230104.html",htmlFilePathRelative:"CICD/2023/20230104.html"},{data:{key:"v-394ce253",path:"/CICD/2023/20230105.html",title:"CICD入门教程，使用Github Action给自己的项目加上CICD",lang:"zh-CN",frontmatter:{title:"CICD入门教程，使用Github Action给自己的项目加上CICD",date:"2023-01-05T00:00:00.000Z",tags:["CICD"],categories:["CICD"]},excerpt:"",headers:[{level:2,title:"为什么选择Github Action",slug:"为什么选择github-action",children:[]},{level:2,title:"Github Action初学入门",slug:"github-action初学入门",children:[]},{level:2,title:"给一个项目添加CICD流程",slug:"给一个项目添加cicd流程",children:[{level:3,title:"添加CI流程",slug:"添加ci流程",children:[]},{level:3,title:"添加CD流程",slug:"添加cd流程",children:[]},{level:3,title:"添加状态徽章",slug:"添加状态徽章",children:[]}]}],git:{updatedTime:null,contributors:[]}},key:"v-394ce253",path:"/CICD/2023/20230105.html",title:"CICD入门教程，使用Github Action给自己的项目加上CICD",lang:"zh-CN",frontmatter:{title:"CICD入门教程，使用Github Action给自己的项目加上CICD",date:"2023-01-05T00:00:00.000Z",tags:["CICD"],categories:["CICD"]},excerpt:"",headers:[{level:2,title:"为什么选择Github Action",slug:"为什么选择github-action",children:[]},{level:2,title:"Github Action初学入门",slug:"github-action初学入门",children:[]},{level:2,title:"给一个项目添加CICD流程",slug:"给一个项目添加cicd流程",children:[{level:3,title:"添加CI流程",slug:"添加ci流程",children:[]},{level:3,title:"添加CD流程",slug:"添加cd流程",children:[]},{level:3,title:"添加状态徽章",slug:"添加状态徽章",children:[]}]}],content:'\r\n::: tip\r\n\r\n这是一篇属于面向前端的关于CICD和Github Action的入门文章，其旨在：\r\n\r\n1. 入门掌握Github Action的用法\r\n2. 学习CI和CD的含义及其实现细节\r\n3. 基于Github Action展示如何给自己手上的项目添加CICD的流程\r\n\r\n:::\r\n\r\n## 为什么选择Github Action\r\n\r\n`Github Action`在**开源项目**是免费使用的，而在**私有项目**方面的计费会根据你购买的服务而不同,`Github Action`对于其他的**CICD 工具**及其没被选为本文实现方式的原因如下所示：\r\n\r\n- **`Gitlab CI`**：与`Gitlab`高度绑定，项目放在`Gitlab`就谈不上开源了\r\n- **`Travic CI`**：限时免费，过后按进程收费\r\n- **`Drone CI`**：执行任务时，国内机器从`Github`拉取仓库代码时会偶尔超时，从而导致任务失败\r\n- **`Jenkins CI`**：除了存在与`Drone CI`一样的缺点外，自身比较重量，占用宿主机较多资源\r\n\r\n## Github Action初学入门\r\n\r\n当我们想往自己的项目里接入**Github Actions**时，要在根项目目录里新建`.github/workflows`目录。然后通过编写`yml`格式文件定义**Workflow(工作流程)去实现`CI`。在阅读`yml`文件之前，我们要先搞懂在Workflow**中一些比较重要的概念：\r\n\r\n- **Event(触发事件)**：指触发 **Workflow(工作流程)** 运行的事件。\r\n- **Job(作业)**：一个**工作流程**中包含一个或多个**Job**，这些**Job**默认情况下并行运行，但我们也可以通过设置让其按顺序执行。每个**Job**都在指定的环境(虚拟机或容器)里开启一个**Runner**(可以理解为一个进程)运行，包含多个**Step(步骤)**。\r\n- **Step(步骤)**：**Job**的组成部分，用于定义每一部的工作内容。每个**Step**在运行器环境中以其单独的进程运行，且可以访问工作区和文件系统。\r\n\r\n以下图的`Workflow`作为例子，我们可以更直观地看懂**Event**、**Job**以及**Step**两者的关系：\r\n\r\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/27deef91333747ab8f7e09bd2649b5bb~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?)\r\n\r\n*在`Github Action`中， **Job** 和 **Step** 以及 **Workflow** 都有资源占用以及时间限制，超出限制就会直接取消运行，关于这些限制可看[Usage limits](https://link.juejin.cn?target=https%3A%2F%2Fdocs.github.com%2Fcn%2Factions%2Flearn-github-actions%2Fusage-limits-billing-and-administration%23usage-limits)。*\r\n\r\n下面我们用`Github`的官方教程中的一个`Workflow`例子来学习：\r\n\r\n```yml\r\n# 指定工作流程的名称\r\nname: learn-github-actions\r\n# 指定此工作流程的触发事件Event。 此示例使用 推送 事件，即执行push后，触发该流水线的执行\r\non: [push]\r\n# 存放 learn-github-actions 工作流程中的所有Job\r\njobs:\r\n  # 指定一个Job的名称为check-bats-version\r\n  check-bats-version:\r\n    # 指定该Job在最新版本的 Ubuntu Linux 的 Runner(运行器)上运行\r\n    runs-on: ubuntu-latest\r\n    # 存放 check-bats-version 作业中的所有Step\r\n    steps:\r\n      # step-no.1: 运行actions/checkout@v3操作，操作一般用uses来调用，\r\n      # 一般用于处理一些复杂又频繁的操作例如拉取分支，安装插件\r\n      # 此处 actions/checkout 操作是从仓库拉取代码到Runner里的操作\r\n      - uses: actions/checkout@v3\r\n      # step-no.2: actions/setup-node@v3 操作来安装指定版本的 Node.js，此处指定安装的版本为v14\r\n      - uses: actions/setup-node@v3\r\n        with:\r\n          node-version: "14"\r\n      # step-no.3: 运行命令行下载bats依赖到全局环境中\r\n      - run: npm install -g bats\r\n      # step-no.4: 运行命令行查看bats依赖的版本\r\n      - run: bats -v\r\n```\r\n\r\n## 给一个项目添加CICD流程\r\n\r\n### 添加CI流程\r\n\r\n#### CI的概念\r\n\r\n**CI**的全称是**Continuous Integration**，直译为**可持续集成**，而普遍对其的解释是**频繁地（一天多次）将代码集成到主干**。对于这个解释我们要搞懂其中的两个概念：\r\n\r\n1. **主干**：是指包含多个已上和即将上线的特性的分支。\r\n2. **集成**：是指把含新特性的分支合并(`merge`)到**主干**上的行为\r\n\r\n我们借`github flow`分支管理策略作为例子来更加深入了解`CI`及上面的两个概念：\r\n\r\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e231ae5101154085bcb13b18443c5e2d~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?)\r\n\r\n`github flow`在开发新特性的运行模式如下所示：\r\n\r\n1. 基于`master`创建新的分支`feature`进行开发。注意这需要保证`master`的代码和特性永远是最稳定的。\r\n2. 开发期间，定期提交更改(`commit and push change`)到远程仓库的`feature`分支\r\n3. 在编码以及自测完成后，通过创建`pull request`去对`master`发起合并`feature`的请求\r\n4. `pull request`在经过审核确认可行后合并到`master`分支\r\n5. 删除已合并的特性分支`feature`\r\n\r\n更多详细细节可看[GitHub flow](https://link.juejin.cn?target=https%3A%2F%2Fdocs.github.com%2Fcn%2Fget-started%2Fquickstart%2Fgithub-flow)。\r\n\r\n在`github Flow`模型中，**主干**指`master`分支，广义上是一个包含多个已上和即将上线的特性的分支；**集成**指的是在`pull request`通过后把特性分支`merge`合并到**主干**，也就是`master`分支上。\r\n\r\n阮一峰老师的[持续集成是什么？](https://link.juejin.cn?target=https%3A%2F%2Fwww.ruanyifeng.com%2Fblog%2F2015%2F09%2Fcontinuous-integration.html)里说到过：\r\n\r\n> 持续集成的目的，就是让产品可以快速迭代，同时还能保持高质量。它的核心措施是，代码集成到主干之前，必须通过自动化测试。只要有一个测试用例失败，就不能集成。\r\n\r\n而`github flow`模型**保证高质量的核心措施**是：在**集成**前通过`pull request`，从而触发审核（审核可以是一系列的自动化校验测试以及代码审核**Code Review**），在审核通过后再合并到**主干**，从而保证**主干**的稳定性。\r\n\r\n下面我们就按照`github flow`模型的机制，在开头创建的项目上添加`CI`流程。\r\n\r\n#### 在项目中实现CI\r\n\r\n根据上面所说的`github flow`模型**保证高质量的核心措施**可知，我们要定义的执行`CI`的**Workflow**（下称**CI Workflow**）的**Event**是`master`分支的`pull request`事件。而`Job`和`Step`的话没具体说明，而我们可以把目前最普遍的 **代码测试（Test）** 和 **代码扫描（Lint）** 加入其中。\r\n\r\n其实现思路是，首先要借助一些第三方插件，在`package.json`中的`scripts`定义可以执行**代码测试（Test）\\**和\\**代码扫描（Lint）\\**的命令，然后在把这些命令行加到\\**CI Workflow**的**Step**里。\r\n\r\n具体流程图如下所示：\r\n\r\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8cd2441838274ff39f63af4fccb134a4~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?)\r\n\r\n#### 代码扫描命令实现\r\n\r\n一般公司里都会通过类似`Sonar`这类代码质量管理插件来保证代码质量。不过我们也可以通过前端样式三剑侠：`eslint`+`prettier`+`stylelint`来简单保证。这里我直接使用本人比较喜好和经常使用的`umi`的代码规范：[**@umijs/fabric**](https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fumijs%2Ffabric)来规定三剑侠的规则了，使用方式如下所示：\r\n\r\n**.eslintrc.js**\r\n\r\n```js\r\nmodule.exports = {\r\n  extends: [require.resolve("@umijs/fabric/dist/eslint")],\r\n};\r\n\r\n```\r\n\r\n**.prettierrc.js**\r\n\r\n```js\r\nconst fabric = require("@umijs/fabric");\r\n\r\nmodule.exports = {\r\n  ...fabric.prettier,\r\n};\r\n\r\n```\r\n\r\n**.stylelintrc.js**\r\n\r\n```js\r\nconst fabric = require("@umijs/fabric");\r\n\r\nmodule.exports = {\r\n  ...fabric.stylelint,\r\n};\r\n\r\n```\r\n\r\n然后在`package.json`的`script`上加上对应的执行命令即可：\r\n\r\n```json\r\n"scripts": {\r\n  "dev": "vite",\r\n  "build": "tsc && vite build",\r\n  "preview": "vite preview",\r\n  "lint": "npm run lint:js && npm run lint:style && npm run lint:prettier",\r\n  "lint:js": "eslint --cache --ext .js,.jsx,.ts,.tsx ./src",\r\n  "lint:prettier": "prettier --check \\"src/**/*\\" --end-of-line auto",\r\n  "lint:style": "stylelint --fix \'src/**/*.{css,scss,less}\' --cache"\r\n}\r\n\r\n```\r\n\r\n这样子就完成了**代码扫描**部分了。通过`yarn run lint`执行后的效果如下所示：\r\n\r\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ed18411c0d2c41108d62ab0fd1716779~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?)\r\n\r\n#### 自动化测试命令实现\r\n\r\n前端测试主要有**单元测试（Unit Test）**、**集成测试（Integration Test）**、**UI 测试（UI Test）**。由于项目里只有一个页面组件，且本章节的重点是实现`CI`而不是**前端自动化测试**，因此这里用**单元测试**来实现一下：\r\n\r\n为了多写点测试用例给测试代码加点内容，我给页面对应组件`App.tsx`加了个`props`，代码如下所示：\r\n\r\n**App.tsx**\r\n\r\n```tsx\r\nimport type { FC } from "react";\r\nimport { useState } from "react";\r\nimport logo from "./logo.svg";\r\nimport "./App.css";\r\n\r\ninterface Props {\r\n  value: string;\r\n}\r\n\r\nconst App: FC<Props> = ({ value }) => {\r\n  const [count, setCount] = useState(0);\r\n\r\n  return (\r\n    <div className="App">\r\n      <header className="App-header">\r\n        <img src={logo} className="App-logo" alt="logo" />\r\n        <p>Hello Vite + React!!!!!!!!</p>\r\n        <p>\r\n          {/*\r\n            测试代码中需要获取的DOM元素用role属性标记，这里的role属性只会在测试代码中用到，\r\n            这样子就可以避免代码因需求改动时，因DOM属性改变导致测试不通过。有利于TDD（测试驱动开发）开发的进行\r\n          */}\r\n          <button\r\n            role="button"\r\n            type="button"\r\n            onClick={() => setCount((v) => v + 1)}\r\n          >\r\n            count is: {count}\r\n          </button>\r\n        </p>\r\n        <p role="props">{value}</p>\r\n      </header>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n\r\n```\r\n\r\n这里采用`ts-jest`+`@testing-library`来编写测试代码（当然对于`React`还有别的选择，例如`ts-jest`+`enzyme`），测试代码如下所示：\r\n\r\n**App.test.tsx**\r\n\r\n```ts\r\nimport React from "react";\r\nimport { render, screen, fireEvent } from "@testing-library/react";\r\nimport App from "./App";\r\n\r\ntest("props is avaliable", () => {\r\n  const value = "123";\r\n  // 为了多写点测试用例，我给App组件加了个prop\r\n  render(<App value={value} />);\r\n  expect(screen.getByRole("props")).toHaveTextContent(value);\r\n});\r\n\r\ntest("click of button is avaliable", () => {\r\n  render(<App value="123" />);\r\n  fireEvent.click(screen.getByRole("button"));\r\n  expect(screen.getByRole("button")).toHaveTextContent(`count is: 1`);\r\n});\r\n\r\n```\r\n\r\n`jest.config.js`的配置比较复杂，可以从[此处](https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2FHitotsubashi%2Fcicd-study%2Fblob%2Fmain%2Fjest.config.js)查看。配置好后运行`yarn test`后控制台输出如下所示：\r\n\r\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/916b1e12446b45f796f1cc376d635af1~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?)\r\n\r\n#### 配置**CI Workflow**\r\n\r\n在项目根目录里的`.github/workflows`文件夹上新建`ci.yml`，代码如下所示：\r\n\r\n**ci.yml**\r\n\r\n```yml\r\nname: CI\r\n# Event设置为main分支的pull request事件，\r\n# 这里的main分支相当于master分支，github项目新建是把main设置为默认分支，我懒得改了所以就保持这样吧\r\non:\r\n  pull_request:\r\n    branches: main\r\njobs:\r\n  # 只需要定义一个job并命名为CI\r\n  CI:\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n      # 拉取项目代码\r\n      - name: Checkout repository\r\n        uses: actions/checkout@v2\r\n      # 给当前环境下载node\r\n      - name: Use Node.js\r\n        uses: actions/setup-node@v3\r\n        with:\r\n          node-version: "16.x"\r\n      # 检查缓存\r\n      # 如果key命中缓存则直接将缓存的文件还原到 path 目录，从而减少流水线运行时间\r\n      # 若 key 没命中缓存时，在当前Job成功完成时将自动创建一个新缓存\r\n      - name: Cache\r\n        # 缓存命中结果会存储在steps.[id].outputs.cache-hit里，该变量在继后的step中可读\r\n        id: cache-dependencies\r\n        uses: actions/cache@v3\r\n        with:\r\n          # 缓存文件目录的路径\r\n          path: |\r\n            **/node_modules\r\n          # key中定义缓存标志位的生成方式。runner.OS指当前环境的系统。外加对yarn.lock内容生成哈希码作为key值，如果yarn.lock改变则代表依赖有变化。\r\n          # 这里用yarn.lock而不是package.json是因为package.json中还有version和description之类的描述项目但和依赖无关的属性\r\n          key: ${{runner.OS}}-${{hashFiles(\'**/yarn.lock\')}}\r\n      # 安装依赖\r\n      - name: Installing Dependencies\r\n        # 如果缓存标志位没命中，则执行该step。否则就跳过该step\r\n        if: steps.cache-dependencies.outputs.cache-hit != \'true\'\r\n        run: yarn install\r\n      # 运行代码扫描\r\n      - name: Running Lint\r\n        # 通过前面章节定义的命令行执行代码扫描\r\n        run: yarn lint\r\n      # 运行自动化测试\r\n      - name: Running Test\r\n        # 通过前面章节定义的命令行执行自动化测试\r\n        run: yarn test\r\n\r\n```\r\n\r\n关于上面的`Cahe`步骤中，7 天内未被访问的任何缓存条目将会被删除。 可以存储的缓存数没有限制，但存储库中所有缓存的总大小限制为 10 GB。更多内容请看[缓存依赖项以加快工作流程](https://link.juejin.cn?target=https%3A%2F%2Fdocs.github.com%2Fcn%2Factions%2Fusing-workflows%2Fcaching-dependencies-to-speed-up-workflows)。\r\n\r\n------\r\n\r\n当创建`pull request`合并到主干时，**CI Workflow**触发运行，此时可以看到下面的情况：\r\n\r\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/da87fc3688394d11a1be7391721250e1~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?)\r\n\r\n当**CI Workflow**运行完成时，其效果如下所示：\r\n\r\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9f59410d312a4dc8aa517701f98a94b7~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?)\r\n\r\n我们可以通过点击`Details`查看执行详细信息，如下所示：\r\n\r\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0a907606f73e4894a13fc72d4f9bb731~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?)\r\n\r\n也可以点开每个`step`查看控制台输出信息：\r\n\r\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/69118f7b049d4ec0ba3746493be1a653~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?)\r\n\r\n确认代码安全可靠后就可以点击`Merge pull request`来把新代码**集成**到**主干**上。从而基于`CI`完成一次**bug 修复**或**新特性迭代**。\r\n\r\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dcecb9fa1df148f291d0ce40fe88a5f6~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?)\r\n\r\n合并成功后，可以点击`Delete branch`以删除已合并的特性分支。\r\n\r\n#### 补充\r\n\r\n部分`DevOps`平台中的`CI`流程比上面我们实现的流程里多一个阶段：**编译并整理产物**，即基于当前版本的代码打包构建产物。在这篇文章中我把这个阶段放在`CD`流程里。\r\n\r\n### 添加CD流程\r\n\r\n#### CD的概念\r\n\r\n`CD`指的是 **持续交付（Continuous delivery）** 或者 **持续部署（continuous deployment）** 或者是两者的并集，我们借用[AWS 中对持续交付说明](https://link.juejin.cn?target=https%3A%2F%2Faws.amazon.com%2Fcn%2Fdevops%2Fcontinuous-delivery%2F)来说明下这两者的解释，如下：\r\n\r\n> ![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/539a9328755340e69a1fa5d50abd3bb5~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?) 采用持续交付时，系统会构建并测试每一个代码变更，然后将其推送到非生产测试环境或临时环境中。生产部署前可能存在多个并行测试阶段。**持续交付与持续部署之间的区别在于，需要手动批准才能更新到生产环境。对于持续部署，生产会在没有明确批准的情况下自动发生。**\r\n\r\n从上面的解释中可知其有三个步骤：\r\n\r\n1. 生成制品\r\n2. 自动部署到测试环境以校验其稳定性\r\n3. 部署到生产环境（自动的是**持续部署**，手动的是**持续交付**）\r\n\r\n基于本文是以入门为主，且很多读者也就只有一个服务器来直接部署自己的小项目，因此本章节的`CD`实现中，我们以**持续部署（continuous deployment）** 且跳过上面第二步来实现，也就是生成制品后直接自动部署到生产环境。\r\n\r\n------\r\n\r\n其实对于**持续交付（Continuous delivery）** 和 **持续部署（continuous deployment）** ，不同`DevOps`平台有不同的解释，而不同的企业和项目也有不同的实现方式。但本质上不会有太大区别，而我们也没必要去花时间咬文嚼字，借用**Red Hat**对[ **CICD**说明 ](https://link.juejin.cn?target=https%3A%2F%2Fwww.redhat.com%2Fzh%2Ftopics%2Fdevops%2Fwhat-is-ci-cd)里的一句话总结，如下：\r\n\r\n> CI/CD 既可能仅指持续集成和持续交付构成的关联环节，也可以指持续集成、持续交付和持续部署这三项构成的关联环节。更为复杂的是，有时"持续交付"也包含了持续部署流程。\r\n>\r\n> 归根结底，我们没必要纠结于这些语义，您只需记得 CI/CD 其实就是一个流程（通常形象地表述为管道），用于实现应用开发中的高度持续自动化和持续监控。因案例而异，该术语的具体含义取决于 CI/CD 管道的自动化程度。许多企业最开始先添加 CI，然后逐步实现交付和部署的自动化（例如作为云原生应用的一部分）。\r\n\r\n#### 在项目中实现CD\r\n\r\n这是我们在本章节要实现的`CD`机制的流程图：\r\n\r\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/34de1e458c6e4f5f9429ca6251272a77~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?)\r\n\r\n#### 先前准备\r\n\r\n在编写**CD Workflow**前，我们要准备以下东西：\r\n\r\n1. 内置`nginx`的服务器一台：用于部署制品\r\n2. 服务器的密钥对：用于提供给流水线通过 ssh 免密登录到服务器进行部署\r\n3. `Github`里的**Personal Access Token**：用于提供给流水线免密登录`github`账号进行发布制品的操作\r\n4. 把步骤 2 和步骤 3 及其他关于机器的信息都放在对应仓库的**Secret**里\r\n\r\n下面对上述需要准备的东西逐一讲解：\r\n\r\n1. **准备一台服务器，在里面启动`nginx`服务。**\r\n\r\n   读者可以直接通过`apt`下载`nginx`到指定目录后启动。我个人习惯以`docker`启动容器以开启`nginx`服务。因此我直接通过下面的`docker-compose.yml`去创建启动`nginx`容器：\r\n\r\n   ```yml\r\n   # 指定docker-compose解析的版本\r\n   version: "3"\r\n   services:\r\n     pure-nginx:\r\n       image: nginx:latest\r\n       # 指定容器名\r\n       container_name: pure-nginx\r\n       restart: always\r\n       # 指定持久卷，格式为 宿主机目录路径:容器目录路径\r\n       # CD Workflow会通过密钥登录该服务器，然后把生成的制品放在/data/www里，在此之后直接访问宿主机的ip即可访问到项目页面\r\n       volumes:\r\n         - /data/www:/usr/share/nginx/html\r\n       ports:\r\n         - 80:80\r\n   \r\n   ```\r\n\r\n2. **创建服务器的密钥对：用于提供给流水线通过 ssh 免密登录到服务器进行部署**\r\n\r\n   每个平台都有创建密钥的教程，例如我的机器是腾讯云的，因此参考[这篇文章](https://link.juejin.cn?target=https%3A%2F%2Fcloud.tencent.com%2Fdocument%2Fproduct%2F1207%2F44573)去创建密钥，密钥分公钥和私钥。公钥存放在服务器上，私钥我们自己下载保存。在配置`CD Workflow`的免密登录机器的**步骤 step**之前，大家也可以参考这篇文章[使用密钥登录](https://link.juejin.cn?target=https%3A%2F%2Fcloud.tencent.com%2Fdocument%2Fproduct%2F1207%2F44643)，使用`VSCode`中的[Remote - SSH](https://link.juejin.cn?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dms-vscode-remote.remote-ssh)通过配置私钥尝试是否可以免密登录机器，如果成功后就可以放心交给流水线去登录。\r\n\r\n3. **创建`Github`里的 Personal Access Token ：用于提供给流水线免密登录`github`账号进行发布制品的操作**\r\n\r\n   参考`Github`官方文档[Creating a personal access token](https://link.juejin.cn?target=https%3A%2F%2Fdocs.github.com%2Fcn%2Fauthentication%2Fkeeping-your-account-and-data-secure%2Fcreating-a-personal-access-token)创建**Personal Access Token**。\r\n\r\n   在上述文档里的第 8 步 **Select scopes** 时直接点击`repo`即可，其余的可不选，如下所示：\r\n\r\n   ![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/64beb416e2ef41beb21ea45994ff9dcc~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?)\r\n\r\n4. **把步骤 2 和步骤 3 及其他关于机器的信息都放在`github`仓库的 Secret 里**\r\n\r\n   **Secret**是一些相对机密重要的信息，这些信息在 **Workflow** 里面需要用到，但又不能以明文的形式直接写在文件里以免泄露。此时我们可以放在**Secret**里，在 **Workflow** 运行时这些**Secret**会以环境变量的形式注入到`Runner`里\r\n\r\n   在如图所示的页面下点击右上角的`New repository secret`去创建`secret`，在接下来要创建的`CD Workflow`中需要用到如图红字标记所示的四个**Secret**。\r\n\r\n   ![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bc7dfad31cd2485490a1170dd9548701~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?)\r\n\r\n#### 配置**CD Workflow**\r\n\r\n这里我们把执行`CD`的**Workflow**（下称**CD Workflow**）的**Event**定义为`master`分支的`push`事件，因为**CD Workflow**的执行是在`Merge pull request`完成后的，而合并行为会触发**主干**的`push`事件。\r\n\r\n接下来在`.github/workflows`里新建`cd.yml`来定义**CD Workflow**，代码如下所示：\r\n\r\n```yml\r\nname: CD\r\non:\r\n  # 以主干的push事件作为触发条件\r\n  push:\r\n    branches: main\r\njobs:\r\n  CD:\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n      # 拉取代码\r\n      - name: Checkout repository\r\n        uses: actions/checkout@v2\r\n      # 下载Node\r\n      - name: Use Node.js\r\n        uses: actions/setup-node@v3\r\n        with:\r\n          node-version: "16.x"\r\n      # 添加缓存，逻辑和CI Workflow里的一样\r\n      - name: Cache\r\n        id: cache-dependencies\r\n        uses: actions/cache@v3\r\n        with:\r\n          path: |\r\n            **/node_modules\r\n          key: ${{runner.OS}}-${{hashFiles(\'**/yarn.lock\')}}\r\n      # 安装依赖。命中缓存则跳过此步\r\n      - name: Installing Dependencies\r\n        if: steps.cache-dependencies.outputs.cache-hit != \'true\'\r\n        run: yarn install\r\n      # 从package.json里获取version属性的值\r\n      # 在CD Workflow中会给每个生成的制品打上标签，而标签取值于version值\r\n      - name: Read Version\r\n        # 读取出来的值会放在steps.[id].outputs.value供其他步骤step读取\r\n        id: version\r\n        uses: ashley-taylor/read-json-property-action@v1.0\r\n        with:\r\n          path: ./package.json\r\n          property: version\r\n      # 打包生成制品，且把制品压缩到assets.zip压缩包里\r\n      - name: Building\r\n        run: |\r\n          yarn build\r\n          zip -r assets ./dist/**\r\n      # 基于当前commit进行版本发布(Create a release)，tag_name是v前缀加上package.json的version值\r\n      - name: Create GitHub Release\r\n        # 此步骤中，版本发布后会返回对应的url，以供下面上传制品的步骤中读取使用\r\n        id: create_release\r\n        uses: actions/create-release@v1\r\n        env:\r\n          # GITHUB_TOKEN是准备工作步骤三申请的Personal Access Token\r\n          GITHUB_TOKEN: ${{ secrets.PROJECT_ACCESS_TOKEN }}\r\n        with:\r\n          tag_name: v${{steps.version.outputs.value}}\r\n          release_name: v${{steps.version.outputs.value}}\r\n          draft: false\r\n          prerelease: false\r\n      # 把assets.zip上传到仓库对应的发布版本Release上\r\n      - name: Update Release Asset\r\n        id: upload-release-asset\r\n        uses: actions/upload-release-asset@v1\r\n        env:\r\n          GITHUB_TOKEN: ${{ secrets.PROJECT_ACCESS_TOKEN }}\r\n        with:\r\n          upload_url: ${{ steps.create_release.outputs.upload_url }}\r\n          asset_path: ./assets.zip\r\n          asset_name: assets.zip\r\n          asset_content_type: application/zip\r\n      # 把制品上传到部署机器\r\n      - name: Upload to Deploy Server\r\n        uses: easingthemes/ssh-deploy@v2.0.7\r\n        env:\r\n          # SSH_PRIVATE_KEY为准备工作步骤三中生成密钥对里的私钥\r\n          SSH_PRIVATE_KEY: ${{ secrets.DEPLOY_TOKEN }}\r\n          # 指定当前目录中要上传的内容\r\n          SOURCE: "dist/"\r\n          # 指定上传到部署机器的哪个目录下\r\n          TARGET: "/data/www"\r\n          # 上传前指令，此处用于清空TARGET下的文件\r\n          ARGS: "-avzr --delete"\r\n          # REMOTE_HOST为机器的公网IP\r\n          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}\r\n          # REMOTE_USER为登录机器时用到账号名\r\n          REMOTE_USER: ${{secrets.REMOTE_USER}}\r\n\r\n```\r\n\r\n这样子就完成了**CD Workflow**的流程了，运行效果如下所示：\r\n\r\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a9aa0c1c9e3b48fba193017b9de0898f~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?)\r\n\r\n在**CD Workflow**运行完成后，可以输入自己机器的公网 IP 查看部署的项目。**注意：每次提 pr 时要确保 package.json 中的 version 值有变化，不然 CD Workflow 会在 Create GitHub Release 的步骤里报已存在 Tag 的错误。**\r\n\r\n**关于 CD Workflow 细节补充：**\r\n\r\n1. *为什么要获取`package.json`中`version`值，有什么作用?*\r\n\r\n   `version`值在**CD Workflow**主要用于版本发布，此过程需要填写指定的`tag_name`。发布的版本如下所示：\r\n\r\n   ![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6b2f57ce89f64881be4635e41ce2a9f1~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?)\r\n\r\n   点进去后可以看到当前项目的所有版本，如下所示：\r\n\r\n   ![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/62b357bd98724867946a81b3a45ab151~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?)\r\n\r\n   我们也可以在通过[VSCode GitGraph 插件](https://link.juejin.cn?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dmhutchie.git-graph)来看到自己发布的版本标签（commit 写的有点随便，不要介意），如下所示：\r\n\r\n   ![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/97aa18a6e64045ed9d1246bf5798db92~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?)\r\n\r\n   在每次**主干**更新后进行版本发布不仅符合开源项目的更新流程，而且利于我们之后部署特定**发布版本**的制品（可看下面**深入章节的回滚流程**）。\r\n\r\n2. 为什么要有 **Update Release Asset** 这个步骤？\r\n\r\n   首先，把制品放在对应的**发布版本**上是很常见的开源行为，读者也可以把制品下载下来放到`nginx`直接查看页面效果。其次也是很重要的，是为了**回滚（下面深入篇会写回滚机制的实现）\\**的实现，回滚需要快速获取前一个\\**发布版本**的制品覆盖到部署机器上。因此需要我们把每个制品都存放在对应的**发布版本**以实现持久化。\r\n\r\n3. *为什么 **Update Release Asset(上传制品)** 阶段不使用[`actions/upload-artifact`](https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Factions%2Fupload-artifact)：*\r\n\r\n   首先在**Release**中上传制品是很多开源项目中常见的操作，其次`actions/upload-artifact`中存在两个缺点：\r\n\r\n   1. 上传的制品只能供同一个`Workflow`的不同`Job`中使用。换言之，不同`Workflow`是不能使用这个制品的，这样子我们就不利于我们在不同的流程去调用这个制品。例如**回滚（下面深入篇会写回滚机制的实现）**，在当前部署机器上的项目存在问题时，我们可以通过回滚迅速把前一个稳定的版本的制品覆盖到部署机器上。\r\n   2. 上传的制品最多只存在 90 天，不能做到持久化。\r\n\r\n   因此这里没选择`actions/upload-artifact`。\r\n\r\n### 添加状态徽章\r\n\r\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1c002a4f5f8946d7a77a2eac0721475f~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?)\r\n\r\n我们可以在项目的`README.md`中加了`CI`和`CD`两个状态徽章来代表这个项目已成功实现了`CI`和`CD`的流程，如上图所示。这两个状态徽章是根据你指定的**Workflow**的名称和最近一次运行的结果动态变化的。如果对应的流水线并没有运行记录，则效果如图上的`E2E-Test`状态徽章所示。\r\n\r\n徽章可以直接以下面的格式来插入到自己的`README.md`上：\r\n\r\n```md\r\n![example workflow](https://github.com/<OWNER>/<REPOSITORY>/actions/workflows/<WORKFLOW_FILE>/badge.svg)\r\n\r\n```\r\n\r\n例如我的`CI`和`CD`徽章分别如下所示：\r\n\r\n```md\r\n![CI](https://github.com/Hitotsubashi/cicd-study/actions/workflows/ci.yml/badge.svg)\r\n\r\n![CD](https://github.com/Hitotsubashi/cicd-study/actions/workflows/cd.yml/badge.svg)\r\n\r\n```\r\n\r\n关于更多有关工作流程状态徽章的可看官方文档[添加工作流程状态徽章](https://link.juejin.cn?target=https%3A%2F%2Fdocs.github.com%2Fcn%2Factions%2Fmonitoring-and-troubleshooting-workflows%2Fadding-a-workflow-status-badge)\r\n\r\n文章转载于[掘金](https://juejin.cn/post/7113562222852309023)',contentRendered:'<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>这是一篇属于面向前端的关于CICD和Github Action的入门文章，其旨在：</p>\n<ol>\n<li>入门掌握Github Action的用法</li>\n<li>学习CI和CD的含义及其实现细节</li>\n<li>基于Github Action展示如何给自己手上的项目添加CICD的流程</li>\n</ol>\n</div>\n<h2 id="为什么选择github-action" tabindex="-1"><a class="header-anchor" href="#为什么选择github-action" aria-hidden="true">#</a> 为什么选择Github Action</h2>\n<p><code>Github Action</code>在<strong>开源项目</strong>是免费使用的，而在<strong>私有项目</strong>方面的计费会根据你购买的服务而不同,<code>Github Action</code>对于其他的<strong>CICD 工具</strong>及其没被选为本文实现方式的原因如下所示：</p>\n<ul>\n<li><strong><code>Gitlab CI</code></strong>：与<code>Gitlab</code>高度绑定，项目放在<code>Gitlab</code>就谈不上开源了</li>\n<li><strong><code>Travic CI</code></strong>：限时免费，过后按进程收费</li>\n<li><strong><code>Drone CI</code></strong>：执行任务时，国内机器从<code>Github</code>拉取仓库代码时会偶尔超时，从而导致任务失败</li>\n<li><strong><code>Jenkins CI</code></strong>：除了存在与<code>Drone CI</code>一样的缺点外，自身比较重量，占用宿主机较多资源</li>\n</ul>\n<h2 id="github-action初学入门" tabindex="-1"><a class="header-anchor" href="#github-action初学入门" aria-hidden="true">#</a> Github Action初学入门</h2>\n<p>当我们想往自己的项目里接入<strong>Github Actions</strong>时，要在根项目目录里新建<code>.github/workflows</code>目录。然后通过编写<code>yml</code>格式文件定义<strong>Workflow(工作流程)去实现<code>CI</code>。在阅读<code>yml</code>文件之前，我们要先搞懂在Workflow</strong>中一些比较重要的概念：</p>\n<ul>\n<li><strong>Event(触发事件)</strong>：指触发 <strong>Workflow(工作流程)</strong> 运行的事件。</li>\n<li><strong>Job(作业)</strong>：一个<strong>工作流程</strong>中包含一个或多个<strong>Job</strong>，这些<strong>Job</strong>默认情况下并行运行，但我们也可以通过设置让其按顺序执行。每个<strong>Job</strong>都在指定的环境(虚拟机或容器)里开启一个<strong>Runner</strong>(可以理解为一个进程)运行，包含多个<strong>Step(步骤)</strong>。</li>\n<li><strong>Step(步骤)</strong>：<strong>Job</strong>的组成部分，用于定义每一部的工作内容。每个<strong>Step</strong>在运行器环境中以其单独的进程运行，且可以访问工作区和文件系统。</li>\n</ul>\n<p>以下图的<code>Workflow</code>作为例子，我们可以更直观地看懂<strong>Event</strong>、<strong>Job</strong>以及<strong>Step</strong>两者的关系：</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image.png" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/27deef91333747ab8f7e09bd2649b5bb~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?" data="aurora"></p>\n<p><em>在<code>Github Action</code>中， <strong>Job</strong> 和 <strong>Step</strong> 以及 <strong>Workflow</strong> 都有资源占用以及时间限制，超出限制就会直接取消运行，关于这些限制可看<a href="https://link.juejin.cn?target=https%3A%2F%2Fdocs.github.com%2Fcn%2Factions%2Flearn-github-actions%2Fusage-limits-billing-and-administration%23usage-limits" target="_blank" rel="noopener noreferrer">Usage limits<ExternalLinkIcon/></a>。</em></p>\n<p>下面我们用<code>Github</code>的官方教程中的一个<code>Workflow</code>例子来学习：</p>\n<div class="language-yaml ext-yml line-numbers-mode"><pre v-pre class="language-yaml"><code><span class="token comment"># 指定工作流程的名称</span>\n<span class="token key atrule">name</span><span class="token punctuation">:</span> learn<span class="token punctuation">-</span>github<span class="token punctuation">-</span>actions\n<span class="token comment"># 指定此工作流程的触发事件Event。 此示例使用 推送 事件，即执行push后，触发该流水线的执行</span>\n<span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>push<span class="token punctuation">]</span>\n<span class="token comment"># 存放 learn-github-actions 工作流程中的所有Job</span>\n<span class="token key atrule">jobs</span><span class="token punctuation">:</span>\n  <span class="token comment"># 指定一个Job的名称为check-bats-version</span>\n  <span class="token key atrule">check-bats-version</span><span class="token punctuation">:</span>\n    <span class="token comment"># 指定该Job在最新版本的 Ubuntu Linux 的 Runner(运行器)上运行</span>\n    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest\n    <span class="token comment"># 存放 check-bats-version 作业中的所有Step</span>\n    <span class="token key atrule">steps</span><span class="token punctuation">:</span>\n      <span class="token comment"># step-no.1: 运行actions/checkout@v3操作，操作一般用uses来调用，</span>\n      <span class="token comment"># 一般用于处理一些复杂又频繁的操作例如拉取分支，安装插件</span>\n      <span class="token comment"># 此处 actions/checkout 操作是从仓库拉取代码到Runner里的操作</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v3\n      <span class="token comment"># step-no.2: actions/setup-node@v3 操作来安装指定版本的 Node.js，此处指定安装的版本为v14</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>node@v3\n        <span class="token key atrule">with</span><span class="token punctuation">:</span>\n          <span class="token key atrule">node-version</span><span class="token punctuation">:</span> <span class="token string">"14"</span>\n      <span class="token comment"># step-no.3: 运行命令行下载bats依赖到全局环境中</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">run</span><span class="token punctuation">:</span> npm install <span class="token punctuation">-</span>g bats\n      <span class="token comment"># step-no.4: 运行命令行查看bats依赖的版本</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">run</span><span class="token punctuation">:</span> bats <span class="token punctuation">-</span>v\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h2 id="给一个项目添加cicd流程" tabindex="-1"><a class="header-anchor" href="#给一个项目添加cicd流程" aria-hidden="true">#</a> 给一个项目添加CICD流程</h2>\n<h3 id="添加ci流程" tabindex="-1"><a class="header-anchor" href="#添加ci流程" aria-hidden="true">#</a> 添加CI流程</h3>\n<h4 id="ci的概念" tabindex="-1"><a class="header-anchor" href="#ci的概念" aria-hidden="true">#</a> CI的概念</h4>\n<p><strong>CI</strong>的全称是<strong>Continuous Integration</strong>，直译为<strong>可持续集成</strong>，而普遍对其的解释是<strong>频繁地（一天多次）将代码集成到主干</strong>。对于这个解释我们要搞懂其中的两个概念：</p>\n<ol>\n<li><strong>主干</strong>：是指包含多个已上和即将上线的特性的分支。</li>\n<li><strong>集成</strong>：是指把含新特性的分支合并(<code>merge</code>)到<strong>主干</strong>上的行为</li>\n</ol>\n<p>我们借<code>github flow</code>分支管理策略作为例子来更加深入了解<code>CI</code>及上面的两个概念：</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image.png" originSrc="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e231ae5101154085bcb13b18443c5e2d~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?" data="aurora"></p>\n<p><code>github flow</code>在开发新特性的运行模式如下所示：</p>\n<ol>\n<li>基于<code>master</code>创建新的分支<code>feature</code>进行开发。注意这需要保证<code>master</code>的代码和特性永远是最稳定的。</li>\n<li>开发期间，定期提交更改(<code>commit and push change</code>)到远程仓库的<code>feature</code>分支</li>\n<li>在编码以及自测完成后，通过创建<code>pull request</code>去对<code>master</code>发起合并<code>feature</code>的请求</li>\n<li><code>pull request</code>在经过审核确认可行后合并到<code>master</code>分支</li>\n<li>删除已合并的特性分支<code>feature</code></li>\n</ol>\n<p>更多详细细节可看<a href="https://link.juejin.cn?target=https%3A%2F%2Fdocs.github.com%2Fcn%2Fget-started%2Fquickstart%2Fgithub-flow" target="_blank" rel="noopener noreferrer">GitHub flow<ExternalLinkIcon/></a>。</p>\n<p>在<code>github Flow</code>模型中，<strong>主干</strong>指<code>master</code>分支，广义上是一个包含多个已上和即将上线的特性的分支；<strong>集成</strong>指的是在<code>pull request</code>通过后把特性分支<code>merge</code>合并到<strong>主干</strong>，也就是<code>master</code>分支上。</p>\n<p>阮一峰老师的<a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.ruanyifeng.com%2Fblog%2F2015%2F09%2Fcontinuous-integration.html" target="_blank" rel="noopener noreferrer">持续集成是什么？<ExternalLinkIcon/></a>里说到过：</p>\n<blockquote>\n<p>持续集成的目的，就是让产品可以快速迭代，同时还能保持高质量。它的核心措施是，代码集成到主干之前，必须通过自动化测试。只要有一个测试用例失败，就不能集成。</p>\n</blockquote>\n<p>而<code>github flow</code>模型<strong>保证高质量的核心措施</strong>是：在<strong>集成</strong>前通过<code>pull request</code>，从而触发审核（审核可以是一系列的自动化校验测试以及代码审核<strong>Code Review</strong>），在审核通过后再合并到<strong>主干</strong>，从而保证<strong>主干</strong>的稳定性。</p>\n<p>下面我们就按照<code>github flow</code>模型的机制，在开头创建的项目上添加<code>CI</code>流程。</p>\n<h4 id="在项目中实现ci" tabindex="-1"><a class="header-anchor" href="#在项目中实现ci" aria-hidden="true">#</a> 在项目中实现CI</h4>\n<p>根据上面所说的<code>github flow</code>模型<strong>保证高质量的核心措施</strong>可知，我们要定义的执行<code>CI</code>的<strong>Workflow</strong>（下称<strong>CI Workflow</strong>）的<strong>Event</strong>是<code>master</code>分支的<code>pull request</code>事件。而<code>Job</code>和<code>Step</code>的话没具体说明，而我们可以把目前最普遍的 <strong>代码测试（Test）</strong> 和 <strong>代码扫描（Lint）</strong> 加入其中。</p>\n<p>其实现思路是，首先要借助一些第三方插件，在<code>package.json</code>中的<code>scripts</code>定义可以执行<strong>代码测试（Test）**和**代码扫描（Lint）**的命令，然后在把这些命令行加到**CI Workflow</strong>的<strong>Step</strong>里。</p>\n<p>具体流程图如下所示：</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image.png" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8cd2441838274ff39f63af4fccb134a4~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?" data="aurora"></p>\n<h4 id="代码扫描命令实现" tabindex="-1"><a class="header-anchor" href="#代码扫描命令实现" aria-hidden="true">#</a> 代码扫描命令实现</h4>\n<p>一般公司里都会通过类似<code>Sonar</code>这类代码质量管理插件来保证代码质量。不过我们也可以通过前端样式三剑侠：<code>eslint</code>+<code>prettier</code>+<code>stylelint</code>来简单保证。这里我直接使用本人比较喜好和经常使用的<code>umi</code>的代码规范：<a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fumijs%2Ffabric" target="_blank" rel="noopener noreferrer"><strong>@umijs/fabric</strong><ExternalLinkIcon/></a>来规定三剑侠的规则了，使用方式如下所示：</p>\n<p><strong>.eslintrc.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span>require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"@umijs/fabric/dist/eslint"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><strong>.prettierrc.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> fabric <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"@umijs/fabric"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token operator">...</span>fabric<span class="token punctuation">.</span>prettier<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><strong>.stylelintrc.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> fabric <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"@umijs/fabric"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token operator">...</span>fabric<span class="token punctuation">.</span>stylelint<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>然后在<code>package.json</code>的<code>script</code>上加上对应的执行命令即可：</p>\n<div class="language-json ext-json line-numbers-mode"><pre v-pre class="language-json"><code><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token property">"dev"</span><span class="token operator">:</span> <span class="token string">"vite"</span><span class="token punctuation">,</span>\n  <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"tsc &amp;&amp; vite build"</span><span class="token punctuation">,</span>\n  <span class="token property">"preview"</span><span class="token operator">:</span> <span class="token string">"vite preview"</span><span class="token punctuation">,</span>\n  <span class="token property">"lint"</span><span class="token operator">:</span> <span class="token string">"npm run lint:js &amp;&amp; npm run lint:style &amp;&amp; npm run lint:prettier"</span><span class="token punctuation">,</span>\n  <span class="token property">"lint:js"</span><span class="token operator">:</span> <span class="token string">"eslint --cache --ext .js,.jsx,.ts,.tsx ./src"</span><span class="token punctuation">,</span>\n  <span class="token property">"lint:prettier"</span><span class="token operator">:</span> <span class="token string">"prettier --check \\"src/**/*\\" --end-of-line auto"</span><span class="token punctuation">,</span>\n  <span class="token property">"lint:style"</span><span class="token operator">:</span> <span class="token string">"stylelint --fix \'src/**/*.{css,scss,less}\' --cache"</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>这样子就完成了<strong>代码扫描</strong>部分了。通过<code>yarn run lint</code>执行后的效果如下所示：</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image.png" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ed18411c0d2c41108d62ab0fd1716779~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?" data="aurora"></p>\n<h4 id="自动化测试命令实现" tabindex="-1"><a class="header-anchor" href="#自动化测试命令实现" aria-hidden="true">#</a> 自动化测试命令实现</h4>\n<p>前端测试主要有<strong>单元测试（Unit Test）</strong>、<strong>集成测试（Integration Test）</strong>、<strong>UI 测试（UI Test）</strong>。由于项目里只有一个页面组件，且本章节的重点是实现<code>CI</code>而不是<strong>前端自动化测试</strong>，因此这里用<strong>单元测试</strong>来实现一下：</p>\n<p>为了多写点测试用例给测试代码加点内容，我给页面对应组件<code>App.tsx</code>加了个<code>props</code>，代码如下所示：</p>\n<p><strong>App.tsx</strong></p>\n<div class="language-tsx ext-tsx line-numbers-mode"><pre v-pre class="language-tsx"><code><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> <span class="token constant">FC</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> logo <span class="token keyword">from</span> <span class="token string">"./logo.svg"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">"./App.css"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">Props</span> <span class="token punctuation">{</span>\n  value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> App<span class="token operator">:</span> <span class="token constant">FC</span><span class="token operator">&lt;</span>Props<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> value <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>App<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>App-header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>logo<span class="token punctuation">}</span></span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>App-logo<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logo<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">Hello Vite + React!!!!!!!!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">\n          </span><span class="token punctuation">{</span><span class="token comment">/*\n            测试代码中需要获取的DOM元素用role属性标记，这里的role属性只会在测试代码中用到，\n            这样子就可以避免代码因需求改动时，因DOM属性改变导致测试不通过。有利于TDD（测试驱动开发）开发的进行\n          */</span><span class="token punctuation">}</span><span class="token plain-text">\n          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>\n            <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span>\n            <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span>\n            <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setCount</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">=></span> v <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>\n          <span class="token punctuation">></span></span><span class="token plain-text">\n            count is: </span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token plain-text">\n          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>props<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>value<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><p>这里采用<code>ts-jest</code>+<code>@testing-library</code>来编写测试代码（当然对于<code>React</code>还有别的选择，例如<code>ts-jest</code>+<code>enzyme</code>），测试代码如下所示：</p>\n<p><strong>App.test.tsx</strong></p>\n<div class="language-typescript ext-ts line-numbers-mode"><pre v-pre class="language-typescript"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> render<span class="token punctuation">,</span> screen<span class="token punctuation">,</span> fireEvent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@testing-library/react"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">"./App"</span><span class="token punctuation">;</span>\n\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"props is avaliable"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span>\n  <span class="token comment">// 为了多写点测试用例，我给App组件加了个prop</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App value<span class="token operator">=</span><span class="token punctuation">{</span>value<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">expect</span><span class="token punctuation">(</span>screen<span class="token punctuation">.</span><span class="token function">getByRole</span><span class="token punctuation">(</span><span class="token string">"props"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveTextContent</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"click of button is avaliable"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App value<span class="token operator">=</span><span class="token string">"123"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  fireEvent<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span>screen<span class="token punctuation">.</span><span class="token function">getByRole</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">expect</span><span class="token punctuation">(</span>screen<span class="token punctuation">.</span><span class="token function">getByRole</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveTextContent</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">count is: 1</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p><code>jest.config.js</code>的配置比较复杂，可以从<a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2FHitotsubashi%2Fcicd-study%2Fblob%2Fmain%2Fjest.config.js" target="_blank" rel="noopener noreferrer">此处<ExternalLinkIcon/></a>查看。配置好后运行<code>yarn test</code>后控制台输出如下所示：</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image.png" originSrc="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/916b1e12446b45f796f1cc376d635af1~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?" data="aurora"></p>\n<h4 id="配置ci-workflow" tabindex="-1"><a class="header-anchor" href="#配置ci-workflow" aria-hidden="true">#</a> 配置<strong>CI Workflow</strong></h4>\n<p>在项目根目录里的<code>.github/workflows</code>文件夹上新建<code>ci.yml</code>，代码如下所示：</p>\n<p><strong>ci.yml</strong></p>\n<div class="language-yaml ext-yml line-numbers-mode"><pre v-pre class="language-yaml"><code><span class="token key atrule">name</span><span class="token punctuation">:</span> CI\n<span class="token comment"># Event设置为main分支的pull request事件，</span>\n<span class="token comment"># 这里的main分支相当于master分支，github项目新建是把main设置为默认分支，我懒得改了所以就保持这样吧</span>\n<span class="token key atrule">on</span><span class="token punctuation">:</span>\n  <span class="token key atrule">pull_request</span><span class="token punctuation">:</span>\n    <span class="token key atrule">branches</span><span class="token punctuation">:</span> main\n<span class="token key atrule">jobs</span><span class="token punctuation">:</span>\n  <span class="token comment"># 只需要定义一个job并命名为CI</span>\n  <span class="token key atrule">CI</span><span class="token punctuation">:</span>\n    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest\n    <span class="token key atrule">steps</span><span class="token punctuation">:</span>\n      <span class="token comment"># 拉取项目代码</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Checkout repository\n        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v2\n      <span class="token comment"># 给当前环境下载node</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Use Node.js\n        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>node@v3\n        <span class="token key atrule">with</span><span class="token punctuation">:</span>\n          <span class="token key atrule">node-version</span><span class="token punctuation">:</span> <span class="token string">"16.x"</span>\n      <span class="token comment"># 检查缓存</span>\n      <span class="token comment"># 如果key命中缓存则直接将缓存的文件还原到 path 目录，从而减少流水线运行时间</span>\n      <span class="token comment"># 若 key 没命中缓存时，在当前Job成功完成时将自动创建一个新缓存</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Cache\n        <span class="token comment"># 缓存命中结果会存储在steps.[id].outputs.cache-hit里，该变量在继后的step中可读</span>\n        <span class="token key atrule">id</span><span class="token punctuation">:</span> cache<span class="token punctuation">-</span>dependencies\n        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/cache@v3\n        <span class="token key atrule">with</span><span class="token punctuation">:</span>\n          <span class="token comment"># 缓存文件目录的路径</span>\n          <span class="token key atrule">path</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">\n            **/node_modules</span>\n          <span class="token comment"># key中定义缓存标志位的生成方式。runner.OS指当前环境的系统。外加对yarn.lock内容生成哈希码作为key值，如果yarn.lock改变则代表依赖有变化。</span>\n          <span class="token comment"># 这里用yarn.lock而不是package.json是因为package.json中还有version和description之类的描述项目但和依赖无关的属性</span>\n          <span class="token key atrule">key</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span>runner.OS<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">-</span>$<span class="token punctuation">{</span><span class="token punctuation">{</span>hashFiles(\'<span class="token important">**/yarn.lock\')</span><span class="token punctuation">}</span><span class="token punctuation">}</span>\n      <span class="token comment"># 安装依赖</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Installing Dependencies\n        <span class="token comment"># 如果缓存标志位没命中，则执行该step。否则就跳过该step</span>\n        <span class="token key atrule">if</span><span class="token punctuation">:</span> steps.cache<span class="token punctuation">-</span>dependencies.outputs.cache<span class="token punctuation">-</span>hit <span class="token tag">!=</span> \'true\'\n        <span class="token key atrule">run</span><span class="token punctuation">:</span> yarn install\n      <span class="token comment"># 运行代码扫描</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Running Lint\n        <span class="token comment"># 通过前面章节定义的命令行执行代码扫描</span>\n        <span class="token key atrule">run</span><span class="token punctuation">:</span> yarn lint\n      <span class="token comment"># 运行自动化测试</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Running Test\n        <span class="token comment"># 通过前面章节定义的命令行执行自动化测试</span>\n        <span class="token key atrule">run</span><span class="token punctuation">:</span> yarn test\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br></div></div><p>关于上面的<code>Cahe</code>步骤中，7 天内未被访问的任何缓存条目将会被删除。 可以存储的缓存数没有限制，但存储库中所有缓存的总大小限制为 10 GB。更多内容请看<a href="https://link.juejin.cn?target=https%3A%2F%2Fdocs.github.com%2Fcn%2Factions%2Fusing-workflows%2Fcaching-dependencies-to-speed-up-workflows" target="_blank" rel="noopener noreferrer">缓存依赖项以加快工作流程<ExternalLinkIcon/></a>。</p>\n<hr>\n<p>当创建<code>pull request</code>合并到主干时，<strong>CI Workflow</strong>触发运行，此时可以看到下面的情况：</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image.png" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/da87fc3688394d11a1be7391721250e1~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?" data="aurora"></p>\n<p>当<strong>CI Workflow</strong>运行完成时，其效果如下所示：</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image.png" originSrc="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9f59410d312a4dc8aa517701f98a94b7~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?" data="aurora"></p>\n<p>我们可以通过点击<code>Details</code>查看执行详细信息，如下所示：</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image.png" originSrc="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0a907606f73e4894a13fc72d4f9bb731~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?" data="aurora"></p>\n<p>也可以点开每个<code>step</code>查看控制台输出信息：</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image.png" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/69118f7b049d4ec0ba3746493be1a653~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?" data="aurora"></p>\n<p>确认代码安全可靠后就可以点击<code>Merge pull request</code>来把新代码<strong>集成</strong>到<strong>主干</strong>上。从而基于<code>CI</code>完成一次<strong>bug 修复</strong>或<strong>新特性迭代</strong>。</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image.png" originSrc="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dcecb9fa1df148f291d0ce40fe88a5f6~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?" data="aurora"></p>\n<p>合并成功后，可以点击<code>Delete branch</code>以删除已合并的特性分支。</p>\n<h4 id="补充" tabindex="-1"><a class="header-anchor" href="#补充" aria-hidden="true">#</a> 补充</h4>\n<p>部分<code>DevOps</code>平台中的<code>CI</code>流程比上面我们实现的流程里多一个阶段：<strong>编译并整理产物</strong>，即基于当前版本的代码打包构建产物。在这篇文章中我把这个阶段放在<code>CD</code>流程里。</p>\n<h3 id="添加cd流程" tabindex="-1"><a class="header-anchor" href="#添加cd流程" aria-hidden="true">#</a> 添加CD流程</h3>\n<h4 id="cd的概念" tabindex="-1"><a class="header-anchor" href="#cd的概念" aria-hidden="true">#</a> CD的概念</h4>\n<p><code>CD</code>指的是 <strong>持续交付（Continuous delivery）</strong> 或者 <strong>持续部署（continuous deployment）</strong> 或者是两者的并集，我们借用<a href="https://link.juejin.cn?target=https%3A%2F%2Faws.amazon.com%2Fcn%2Fdevops%2Fcontinuous-delivery%2F" target="_blank" rel="noopener noreferrer">AWS 中对持续交付说明<ExternalLinkIcon/></a>来说明下这两者的解释，如下：</p>\n<blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image.png" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/539a9328755340e69a1fa5d50abd3bb5~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?" data="aurora"> 采用持续交付时，系统会构建并测试每一个代码变更，然后将其推送到非生产测试环境或临时环境中。生产部署前可能存在多个并行测试阶段。<strong>持续交付与持续部署之间的区别在于，需要手动批准才能更新到生产环境。对于持续部署，生产会在没有明确批准的情况下自动发生。</strong></p>\n</blockquote>\n<p>从上面的解释中可知其有三个步骤：</p>\n<ol>\n<li>生成制品</li>\n<li>自动部署到测试环境以校验其稳定性</li>\n<li>部署到生产环境（自动的是<strong>持续部署</strong>，手动的是<strong>持续交付</strong>）</li>\n</ol>\n<p>基于本文是以入门为主，且很多读者也就只有一个服务器来直接部署自己的小项目，因此本章节的<code>CD</code>实现中，我们以<strong>持续部署（continuous deployment）</strong> 且跳过上面第二步来实现，也就是生成制品后直接自动部署到生产环境。</p>\n<hr>\n<p>其实对于<strong>持续交付（Continuous delivery）</strong> 和 <strong>持续部署（continuous deployment）</strong> ，不同<code>DevOps</code>平台有不同的解释，而不同的企业和项目也有不同的实现方式。但本质上不会有太大区别，而我们也没必要去花时间咬文嚼字，借用<strong>Red Hat</strong>对<a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.redhat.com%2Fzh%2Ftopics%2Fdevops%2Fwhat-is-ci-cd" target="_blank" rel="noopener noreferrer"> <strong>CICD</strong>说明 <ExternalLinkIcon/></a>里的一句话总结，如下：</p>\n<blockquote>\n<p>CI/CD 既可能仅指持续集成和持续交付构成的关联环节，也可以指持续集成、持续交付和持续部署这三项构成的关联环节。更为复杂的是，有时&quot;持续交付&quot;也包含了持续部署流程。</p>\n<p>归根结底，我们没必要纠结于这些语义，您只需记得 CI/CD 其实就是一个流程（通常形象地表述为管道），用于实现应用开发中的高度持续自动化和持续监控。因案例而异，该术语的具体含义取决于 CI/CD 管道的自动化程度。许多企业最开始先添加 CI，然后逐步实现交付和部署的自动化（例如作为云原生应用的一部分）。</p>\n</blockquote>\n<h4 id="在项目中实现cd" tabindex="-1"><a class="header-anchor" href="#在项目中实现cd" aria-hidden="true">#</a> 在项目中实现CD</h4>\n<p>这是我们在本章节要实现的<code>CD</code>机制的流程图：</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image.png" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/34de1e458c6e4f5f9429ca6251272a77~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?" data="aurora"></p>\n<h4 id="先前准备" tabindex="-1"><a class="header-anchor" href="#先前准备" aria-hidden="true">#</a> 先前准备</h4>\n<p>在编写<strong>CD Workflow</strong>前，我们要准备以下东西：</p>\n<ol>\n<li>内置<code>nginx</code>的服务器一台：用于部署制品</li>\n<li>服务器的密钥对：用于提供给流水线通过 ssh 免密登录到服务器进行部署</li>\n<li><code>Github</code>里的<strong>Personal Access Token</strong>：用于提供给流水线免密登录<code>github</code>账号进行发布制品的操作</li>\n<li>把步骤 2 和步骤 3 及其他关于机器的信息都放在对应仓库的<strong>Secret</strong>里</li>\n</ol>\n<p>下面对上述需要准备的东西逐一讲解：</p>\n<ol>\n<li>\n<p><strong>准备一台服务器，在里面启动<code>nginx</code>服务。</strong></p>\n<p>读者可以直接通过<code>apt</code>下载<code>nginx</code>到指定目录后启动。我个人习惯以<code>docker</code>启动容器以开启<code>nginx</code>服务。因此我直接通过下面的<code>docker-compose.yml</code>去创建启动<code>nginx</code>容器：</p>\n<div class="language-yaml ext-yml line-numbers-mode"><pre v-pre class="language-yaml"><code><span class="token comment"># 指定docker-compose解析的版本</span>\n<span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"3"</span>\n<span class="token key atrule">services</span><span class="token punctuation">:</span>\n  <span class="token key atrule">pure-nginx</span><span class="token punctuation">:</span>\n    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>latest\n    <span class="token comment"># 指定容器名</span>\n    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> pure<span class="token punctuation">-</span>nginx\n    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always\n    <span class="token comment"># 指定持久卷，格式为 宿主机目录路径:容器目录路径</span>\n    <span class="token comment"># CD Workflow会通过密钥登录该服务器，然后把生成的制品放在/data/www里，在此之后直接访问宿主机的ip即可访问到项目页面</span>\n    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> /data/www<span class="token punctuation">:</span>/usr/share/nginx/html\n    <span class="token key atrule">ports</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> <span class="token datetime number">80:80</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div></li>\n<li>\n<p><strong>创建服务器的密钥对：用于提供给流水线通过 ssh 免密登录到服务器进行部署</strong></p>\n<p>每个平台都有创建密钥的教程，例如我的机器是腾讯云的，因此参考<a href="https://link.juejin.cn?target=https%3A%2F%2Fcloud.tencent.com%2Fdocument%2Fproduct%2F1207%2F44573" target="_blank" rel="noopener noreferrer">这篇文章<ExternalLinkIcon/></a>去创建密钥，密钥分公钥和私钥。公钥存放在服务器上，私钥我们自己下载保存。在配置<code>CD Workflow</code>的免密登录机器的<strong>步骤 step</strong>之前，大家也可以参考这篇文章<a href="https://link.juejin.cn?target=https%3A%2F%2Fcloud.tencent.com%2Fdocument%2Fproduct%2F1207%2F44643" target="_blank" rel="noopener noreferrer">使用密钥登录<ExternalLinkIcon/></a>，使用<code>VSCode</code>中的<a href="https://link.juejin.cn?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dms-vscode-remote.remote-ssh" target="_blank" rel="noopener noreferrer">Remote - SSH<ExternalLinkIcon/></a>通过配置私钥尝试是否可以免密登录机器，如果成功后就可以放心交给流水线去登录。</p>\n</li>\n<li>\n<p><strong>创建<code>Github</code>里的 Personal Access Token ：用于提供给流水线免密登录<code>github</code>账号进行发布制品的操作</strong></p>\n<p>参考<code>Github</code>官方文档<a href="https://link.juejin.cn?target=https%3A%2F%2Fdocs.github.com%2Fcn%2Fauthentication%2Fkeeping-your-account-and-data-secure%2Fcreating-a-personal-access-token" target="_blank" rel="noopener noreferrer">Creating a personal access token<ExternalLinkIcon/></a>创建<strong>Personal Access Token</strong>。</p>\n<p>在上述文档里的第 8 步 <strong>Select scopes</strong> 时直接点击<code>repo</code>即可，其余的可不选，如下所示：</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image.png" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/64beb416e2ef41beb21ea45994ff9dcc~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?" data="aurora"></p>\n</li>\n<li>\n<p><strong>把步骤 2 和步骤 3 及其他关于机器的信息都放在<code>github</code>仓库的 Secret 里</strong></p>\n<p><strong>Secret</strong>是一些相对机密重要的信息，这些信息在 <strong>Workflow</strong> 里面需要用到，但又不能以明文的形式直接写在文件里以免泄露。此时我们可以放在<strong>Secret</strong>里，在 <strong>Workflow</strong> 运行时这些<strong>Secret</strong>会以环境变量的形式注入到<code>Runner</code>里</p>\n<p>在如图所示的页面下点击右上角的<code>New repository secret</code>去创建<code>secret</code>，在接下来要创建的<code>CD Workflow</code>中需要用到如图红字标记所示的四个<strong>Secret</strong>。</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image.png" originSrc="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bc7dfad31cd2485490a1170dd9548701~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?" data="aurora"></p>\n</li>\n</ol>\n<h4 id="配置cd-workflow" tabindex="-1"><a class="header-anchor" href="#配置cd-workflow" aria-hidden="true">#</a> 配置<strong>CD Workflow</strong></h4>\n<p>这里我们把执行<code>CD</code>的<strong>Workflow</strong>（下称<strong>CD Workflow</strong>）的<strong>Event</strong>定义为<code>master</code>分支的<code>push</code>事件，因为<strong>CD Workflow</strong>的执行是在<code>Merge pull request</code>完成后的，而合并行为会触发<strong>主干</strong>的<code>push</code>事件。</p>\n<p>接下来在<code>.github/workflows</code>里新建<code>cd.yml</code>来定义<strong>CD Workflow</strong>，代码如下所示：</p>\n<div class="language-yaml ext-yml line-numbers-mode"><pre v-pre class="language-yaml"><code><span class="token key atrule">name</span><span class="token punctuation">:</span> CD\n<span class="token key atrule">on</span><span class="token punctuation">:</span>\n  <span class="token comment"># 以主干的push事件作为触发条件</span>\n  <span class="token key atrule">push</span><span class="token punctuation">:</span>\n    <span class="token key atrule">branches</span><span class="token punctuation">:</span> main\n<span class="token key atrule">jobs</span><span class="token punctuation">:</span>\n  <span class="token key atrule">CD</span><span class="token punctuation">:</span>\n    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest\n    <span class="token key atrule">steps</span><span class="token punctuation">:</span>\n      <span class="token comment"># 拉取代码</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Checkout repository\n        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v2\n      <span class="token comment"># 下载Node</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Use Node.js\n        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>node@v3\n        <span class="token key atrule">with</span><span class="token punctuation">:</span>\n          <span class="token key atrule">node-version</span><span class="token punctuation">:</span> <span class="token string">"16.x"</span>\n      <span class="token comment"># 添加缓存，逻辑和CI Workflow里的一样</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Cache\n        <span class="token key atrule">id</span><span class="token punctuation">:</span> cache<span class="token punctuation">-</span>dependencies\n        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/cache@v3\n        <span class="token key atrule">with</span><span class="token punctuation">:</span>\n          <span class="token key atrule">path</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">\n            **/node_modules</span>\n          <span class="token key atrule">key</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span>runner.OS<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">-</span>$<span class="token punctuation">{</span><span class="token punctuation">{</span>hashFiles(\'<span class="token important">**/yarn.lock\')</span><span class="token punctuation">}</span><span class="token punctuation">}</span>\n      <span class="token comment"># 安装依赖。命中缓存则跳过此步</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Installing Dependencies\n        <span class="token key atrule">if</span><span class="token punctuation">:</span> steps.cache<span class="token punctuation">-</span>dependencies.outputs.cache<span class="token punctuation">-</span>hit <span class="token tag">!=</span> \'true\'\n        <span class="token key atrule">run</span><span class="token punctuation">:</span> yarn install\n      <span class="token comment"># 从package.json里获取version属性的值</span>\n      <span class="token comment"># 在CD Workflow中会给每个生成的制品打上标签，而标签取值于version值</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Read Version\n        <span class="token comment"># 读取出来的值会放在steps.[id].outputs.value供其他步骤step读取</span>\n        <span class="token key atrule">id</span><span class="token punctuation">:</span> version\n        <span class="token key atrule">uses</span><span class="token punctuation">:</span> ashley<span class="token punctuation">-</span>taylor/read<span class="token punctuation">-</span>json<span class="token punctuation">-</span>property<span class="token punctuation">-</span>action@v1.0\n        <span class="token key atrule">with</span><span class="token punctuation">:</span>\n          <span class="token key atrule">path</span><span class="token punctuation">:</span> ./package.json\n          <span class="token key atrule">property</span><span class="token punctuation">:</span> version\n      <span class="token comment"># 打包生成制品，且把制品压缩到assets.zip压缩包里</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Building\n        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">\n          yarn build\n          zip -r assets ./dist/**</span>\n      <span class="token comment"># 基于当前commit进行版本发布(Create a release)，tag_name是v前缀加上package.json的version值</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Create GitHub Release\n        <span class="token comment"># 此步骤中，版本发布后会返回对应的url，以供下面上传制品的步骤中读取使用</span>\n        <span class="token key atrule">id</span><span class="token punctuation">:</span> create_release\n        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/create<span class="token punctuation">-</span>release@v1\n        <span class="token key atrule">env</span><span class="token punctuation">:</span>\n          <span class="token comment"># GITHUB_TOKEN是准备工作步骤三申请的Personal Access Token</span>\n          <span class="token key atrule">GITHUB_TOKEN</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.PROJECT_ACCESS_TOKEN <span class="token punctuation">}</span><span class="token punctuation">}</span>\n        <span class="token key atrule">with</span><span class="token punctuation">:</span>\n          <span class="token key atrule">tag_name</span><span class="token punctuation">:</span> v$<span class="token punctuation">{</span><span class="token punctuation">{</span>steps.version.outputs.value<span class="token punctuation">}</span><span class="token punctuation">}</span>\n          <span class="token key atrule">release_name</span><span class="token punctuation">:</span> v$<span class="token punctuation">{</span><span class="token punctuation">{</span>steps.version.outputs.value<span class="token punctuation">}</span><span class="token punctuation">}</span>\n          <span class="token key atrule">draft</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>\n          <span class="token key atrule">prerelease</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>\n      <span class="token comment"># 把assets.zip上传到仓库对应的发布版本Release上</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Update Release Asset\n        <span class="token key atrule">id</span><span class="token punctuation">:</span> upload<span class="token punctuation">-</span>release<span class="token punctuation">-</span>asset\n        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/upload<span class="token punctuation">-</span>release<span class="token punctuation">-</span>asset@v1\n        <span class="token key atrule">env</span><span class="token punctuation">:</span>\n          <span class="token key atrule">GITHUB_TOKEN</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.PROJECT_ACCESS_TOKEN <span class="token punctuation">}</span><span class="token punctuation">}</span>\n        <span class="token key atrule">with</span><span class="token punctuation">:</span>\n          <span class="token key atrule">upload_url</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> steps.create_release.outputs.upload_url <span class="token punctuation">}</span><span class="token punctuation">}</span>\n          <span class="token key atrule">asset_path</span><span class="token punctuation">:</span> ./assets.zip\n          <span class="token key atrule">asset_name</span><span class="token punctuation">:</span> assets.zip\n          <span class="token key atrule">asset_content_type</span><span class="token punctuation">:</span> application/zip\n      <span class="token comment"># 把制品上传到部署机器</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Upload to Deploy Server\n        <span class="token key atrule">uses</span><span class="token punctuation">:</span> easingthemes/ssh<span class="token punctuation">-</span>deploy@v2.0.7\n        <span class="token key atrule">env</span><span class="token punctuation">:</span>\n          <span class="token comment"># SSH_PRIVATE_KEY为准备工作步骤三中生成密钥对里的私钥</span>\n          <span class="token key atrule">SSH_PRIVATE_KEY</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.DEPLOY_TOKEN <span class="token punctuation">}</span><span class="token punctuation">}</span>\n          <span class="token comment"># 指定当前目录中要上传的内容</span>\n          <span class="token key atrule">SOURCE</span><span class="token punctuation">:</span> <span class="token string">"dist/"</span>\n          <span class="token comment"># 指定上传到部署机器的哪个目录下</span>\n          <span class="token key atrule">TARGET</span><span class="token punctuation">:</span> <span class="token string">"/data/www"</span>\n          <span class="token comment"># 上传前指令，此处用于清空TARGET下的文件</span>\n          <span class="token key atrule">ARGS</span><span class="token punctuation">:</span> <span class="token string">"-avzr --delete"</span>\n          <span class="token comment"># REMOTE_HOST为机器的公网IP</span>\n          <span class="token key atrule">REMOTE_HOST</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.REMOTE_HOST <span class="token punctuation">}</span><span class="token punctuation">}</span>\n          <span class="token comment"># REMOTE_USER为登录机器时用到账号名</span>\n          <span class="token key atrule">REMOTE_USER</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span>secrets.REMOTE_USER<span class="token punctuation">}</span><span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br></div></div><p>这样子就完成了<strong>CD Workflow</strong>的流程了，运行效果如下所示：</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image.png" originSrc="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a9aa0c1c9e3b48fba193017b9de0898f~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?" data="aurora"></p>\n<p>在<strong>CD Workflow</strong>运行完成后，可以输入自己机器的公网 IP 查看部署的项目。<strong>注意：每次提 pr 时要确保 package.json 中的 version 值有变化，不然 CD Workflow 会在 Create GitHub Release 的步骤里报已存在 Tag 的错误。</strong></p>\n<p><strong>关于 CD Workflow 细节补充：</strong></p>\n<ol>\n<li>\n<p><em>为什么要获取<code>package.json</code>中<code>version</code>值，有什么作用?</em></p>\n<p><code>version</code>值在<strong>CD Workflow</strong>主要用于版本发布，此过程需要填写指定的<code>tag_name</code>。发布的版本如下所示：</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image.png" originSrc="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6b2f57ce89f64881be4635e41ce2a9f1~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?" data="aurora"></p>\n<p>点进去后可以看到当前项目的所有版本，如下所示：</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image.png" originSrc="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/62b357bd98724867946a81b3a45ab151~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?" data="aurora"></p>\n<p>我们也可以在通过<a href="https://link.juejin.cn?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dmhutchie.git-graph" target="_blank" rel="noopener noreferrer">VSCode GitGraph 插件<ExternalLinkIcon/></a>来看到自己发布的版本标签（commit 写的有点随便，不要介意），如下所示：</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image.png" originSrc="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/97aa18a6e64045ed9d1246bf5798db92~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?" data="aurora"></p>\n<p>在每次<strong>主干</strong>更新后进行版本发布不仅符合开源项目的更新流程，而且利于我们之后部署特定<strong>发布版本</strong>的制品（可看下面<strong>深入章节的回滚流程</strong>）。</p>\n</li>\n<li>\n<p>为什么要有 <strong>Update Release Asset</strong> 这个步骤？</p>\n<p>首先，把制品放在对应的<strong>发布版本</strong>上是很常见的开源行为，读者也可以把制品下载下来放到<code>nginx</code>直接查看页面效果。其次也是很重要的，是为了<strong>回滚（下面深入篇会写回滚机制的实现）**的实现，回滚需要快速获取前一个**发布版本</strong>的制品覆盖到部署机器上。因此需要我们把每个制品都存放在对应的<strong>发布版本</strong>以实现持久化。</p>\n</li>\n<li>\n<p><em>为什么 <strong>Update Release Asset(上传制品)</strong> 阶段不使用<a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Factions%2Fupload-artifact" target="_blank" rel="noopener noreferrer"><code>actions/upload-artifact</code><ExternalLinkIcon/></a>：</em></p>\n<p>首先在<strong>Release</strong>中上传制品是很多开源项目中常见的操作，其次<code>actions/upload-artifact</code>中存在两个缺点：</p>\n<ol>\n<li>上传的制品只能供同一个<code>Workflow</code>的不同<code>Job</code>中使用。换言之，不同<code>Workflow</code>是不能使用这个制品的，这样子我们就不利于我们在不同的流程去调用这个制品。例如<strong>回滚（下面深入篇会写回滚机制的实现）</strong>，在当前部署机器上的项目存在问题时，我们可以通过回滚迅速把前一个稳定的版本的制品覆盖到部署机器上。</li>\n<li>上传的制品最多只存在 90 天，不能做到持久化。</li>\n</ol>\n<p>因此这里没选择<code>actions/upload-artifact</code>。</p>\n</li>\n</ol>\n<h3 id="添加状态徽章" tabindex="-1"><a class="header-anchor" href="#添加状态徽章" aria-hidden="true">#</a> 添加状态徽章</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image.png" originSrc="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1c002a4f5f8946d7a77a2eac0721475f~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?" data="aurora"></p>\n<p>我们可以在项目的<code>README.md</code>中加了<code>CI</code>和<code>CD</code>两个状态徽章来代表这个项目已成功实现了<code>CI</code>和<code>CD</code>的流程，如上图所示。这两个状态徽章是根据你指定的<strong>Workflow</strong>的名称和最近一次运行的结果动态变化的。如果对应的流水线并没有运行记录，则效果如图上的<code>E2E-Test</code>状态徽章所示。</p>\n<p>徽章可以直接以下面的格式来插入到自己的<code>README.md</code>上：</p>\n<div class="language-markdown ext-md line-numbers-mode"><pre v-pre class="language-markdown"><code><span class="token url"><span class="token operator">!</span>[<span class="token content">example workflow</span>](<span class="token url">https://github.com/&lt;OWNER>/&lt;REPOSITORY>/actions/workflows/&lt;WORKFLOW_FILE>/badge.svg</span>)</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>例如我的<code>CI</code>和<code>CD</code>徽章分别如下所示：</p>\n<div class="language-markdown ext-md line-numbers-mode"><pre v-pre class="language-markdown"><code><span class="token url"><span class="token operator">!</span>[<span class="token content">CI</span>](<span class="token url">https://github.com/Hitotsubashi/cicd-study/actions/workflows/ci.yml/badge.svg</span>)</span>\n\n<span class="token url"><span class="token operator">!</span>[<span class="token content">CD</span>](<span class="token url">https://github.com/Hitotsubashi/cicd-study/actions/workflows/cd.yml/badge.svg</span>)</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>关于更多有关工作流程状态徽章的可看官方文档<a href="https://link.juejin.cn?target=https%3A%2F%2Fdocs.github.com%2Fcn%2Factions%2Fmonitoring-and-troubleshooting-workflows%2Fadding-a-workflow-status-badge" target="_blank" rel="noopener noreferrer">添加工作流程状态徽章<ExternalLinkIcon/></a></p>\n<p>文章转载于<a href="https://juejin.cn/post/7113562222852309023" target="_blank" rel="noopener noreferrer">掘金<ExternalLinkIcon/></a></p>\n',date:"2023-01-05",deps:[],hoistedTags:[],links:[],pathInferred:"/CICD/2023/20230105.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"20230105",filePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/CICD/2023/20230105.md",filePathRelative:"CICD/2023/20230105.md",componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/CICD/2023/20230105.html.vue",componentFilePathRelative:"pages/CICD/2023/20230105.html.vue",componentFileChunkName:"v-394ce253",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/CICD/2023/20230105.html.js",dataFilePathRelative:"pages/CICD/2023/20230105.html.js",dataFileChunkName:"v-394ce253",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/CICD/2023/20230105.html",htmlFilePathRelative:"CICD/2023/20230105.html"},{data:{key:"v-69c4de5e",path:"/js/2022/20220710.html",title:"手写实现一个数组扁平化的函数 flat",lang:"zh-CN",frontmatter:{title:"手写实现一个数组扁平化的函数 flat",date:"2022-07-10T00:00:00.000Z",tags:["js"],categories:["js"]},excerpt:"",headers:[{level:2,title:"代码",slug:"代码",children:[]}],git:{updatedTime:null,contributors:[]}},key:"v-69c4de5e",path:"/js/2022/20220710.html",title:"手写实现一个数组扁平化的函数 flat",lang:"zh-CN",frontmatter:{title:"手写实现一个数组扁平化的函数 flat",date:"2022-07-10T00:00:00.000Z",tags:["js"],categories:["js"]},excerpt:"",headers:[{level:2,title:"代码",slug:"代码",children:[]}],content:"\r\n::: tip\r\n\r\n手写实现数组中的`falt`扁平化数组方法\r\n\r\n:::\r\n\r\n## 代码\r\n\r\n```js\r\nfunction flatten (list, depth = 1) {\r\n  if (depth === 0) return list\r\n  return list.reduce((a, b) => a.concat(Array.isArray(b) ? flatten(b, depth - 1) : b), [])\r\n}\r\nconst b = flatten([1, 2, 3, [4, [5, 6]]], 2)\r\n\r\nconsole.log(b)\r\n```\r\n\r\n",contentRendered:'<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>手写实现数组中的<code>falt</code>扁平化数组方法</p>\n</div>\n<h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">flatten</span> <span class="token punctuation">(</span><span class="token parameter">list<span class="token punctuation">,</span> depth <span class="token operator">=</span> <span class="token number">1</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>depth <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> list\n  <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">flatten</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> depth <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token function">flatten</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>',date:"2022-07-10",deps:[],hoistedTags:[],links:[],pathInferred:"/js/2022/20220710.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"20220710",filePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/js/2022/20220710.md",filePathRelative:"js/2022/20220710.md",componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/js/2022/20220710.html.vue",componentFilePathRelative:"pages/js/2022/20220710.html.vue",componentFileChunkName:"v-69c4de5e",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/js/2022/20220710.html.js",dataFilePathRelative:"pages/js/2022/20220710.html.js",dataFileChunkName:"v-69c4de5e",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/js/2022/20220710.html",htmlFilePathRelative:"js/2022/20220710.html"},{data:{key:"v-006549e4",path:"/js/2022/20220801.html",title:"将数据转换成数据流",lang:"zh-CN",frontmatter:{title:"将数据转换成数据流",date:"2022-08-01T00:00:00.000Z",tags:["js"],categories:["js"]},excerpt:"",headers:[],git:{updatedTime:null,contributors:[]}},key:"v-006549e4",path:"/js/2022/20220801.html",title:"将数据转换成数据流",lang:"zh-CN",frontmatter:{title:"将数据转换成数据流",date:"2022-08-01T00:00:00.000Z",tags:["js"],categories:["js"]},excerpt:"",headers:[],content:"\r\n::: tip\r\n\r\n我们在开发项目时，很多时候会碰到需要将数据转换成数据流上传到服务器上或者下载文件到本地\r\n\r\n:::\r\n\r\n# 下载文件\r\n\r\n```js\r\nDownload () { // 请求后端返回数据流\r\n      getstaffexcel().then(data => {\r\n        this.downloadFile(data, '员工信息表.xlsx')\r\n      })\r\n    },\r\n // new Blob([content])：将数据转换成数据流\r\ndownloadFile (content, filename) {\r\n      var a = document.createElement('a')// 创建a标签\r\n      var blob = new Blob([content])\r\n      var url = window.URL.createObjectURL(blob)//创建url\r\n      a.href = url\r\n      a.download = filename\r\n      a.click()//模拟点击\r\n      window.URL.revokeObjectURL(url)//销毁url\r\n }\r\n```\r\n\r\n# 上传文件\r\n\r\n```js\r\n// content:需要上传的数据 \r\n// filename：上传数据时，文件叫什么名，例如 员工信息.xslx\r\nposthtml (content, filename) {\r\n      var blob = new Blob([content]) // 将数据转换成数据流\r\n      const fd = new FormData()  \r\n      fd.append('file', blob, filename)\r\n      fd.append('name', filename)\r\n      fd.append('md5', '')\r\n    // uploadFile：上传文件接口，返回的是上传文件的在线链接\r\n      uploadFile(fd).then(({fileInfo}) => {\r\n        this.form.contentUrl = fileInfo.url\r\n        this.addexciting()\r\n      })\r\n    },\r\n  // 如果使用组件库中的上传组件，下面示例\r\n  // handleUpload：为上传组件中定义的函数\r\n  handleUpload (options) {\r\n      // options:上传文件的信息\r\n      const fd = new FormData()\r\n      fd.append('file', options.file, options.file.name)\r\n      fd.append('name', options.file.name)\r\n      fd.append('md5', '')\r\n      importStaffs(fd).then(() => {\r\n        this.$message({\r\n          message: '上传成功',\r\n          type: 'success'\r\n        })\r\n      })\r\n    },\r\n \r\n```\r\n\r\n",contentRendered:'<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>我们在开发项目时，很多时候会碰到需要将数据转换成数据流上传到服务器上或者下载文件到本地</p>\n</div>\n<h1 id="下载文件" tabindex="-1"><a class="header-anchor" href="#下载文件" aria-hidden="true">#</a> 下载文件</h1>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token function">Download</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 请求后端返回数据流</span>\n      <span class="token function">getstaffexcel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">downloadFile</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">\'员工信息表.xlsx\'</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n <span class="token comment">// new Blob([content])：将数据转换成数据流</span>\n<span class="token function">downloadFile</span> <span class="token punctuation">(</span><span class="token parameter">content<span class="token punctuation">,</span> filename</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">var</span> a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">\'a\'</span><span class="token punctuation">)</span><span class="token comment">// 创建a标签</span>\n      <span class="token keyword">var</span> blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>content<span class="token punctuation">]</span><span class="token punctuation">)</span>\n      <span class="token keyword">var</span> url <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span><span class="token comment">//创建url</span>\n      a<span class="token punctuation">.</span>href <span class="token operator">=</span> url\n      a<span class="token punctuation">.</span>download <span class="token operator">=</span> filename\n      a<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//模拟点击</span>\n      window<span class="token punctuation">.</span><span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">revokeObjectURL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token comment">//销毁url</span>\n <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h1 id="上传文件" tabindex="-1"><a class="header-anchor" href="#上传文件" aria-hidden="true">#</a> 上传文件</h1>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// content:需要上传的数据 </span>\n<span class="token comment">// filename：上传数据时，文件叫什么名，例如 员工信息.xslx</span>\n<span class="token function">posthtml</span> <span class="token punctuation">(</span><span class="token parameter">content<span class="token punctuation">,</span> filename</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">var</span> blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>content<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 将数据转换成数据流</span>\n      <span class="token keyword">const</span> fd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  \n      fd<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">\'file\'</span><span class="token punctuation">,</span> blob<span class="token punctuation">,</span> filename<span class="token punctuation">)</span>\n      fd<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">\'name\'</span><span class="token punctuation">,</span> filename<span class="token punctuation">)</span>\n      fd<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">\'md5\'</span><span class="token punctuation">,</span> <span class="token string">\'\'</span><span class="token punctuation">)</span>\n    <span class="token comment">// uploadFile：上传文件接口，返回的是上传文件的在线链接</span>\n      <span class="token function">uploadFile</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>fileInfo<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>form<span class="token punctuation">.</span>contentUrl <span class="token operator">=</span> fileInfo<span class="token punctuation">.</span>url\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addexciting</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">// 如果使用组件库中的上传组件，下面示例</span>\n  <span class="token comment">// handleUpload：为上传组件中定义的函数</span>\n  <span class="token function">handleUpload</span> <span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// options:上传文件的信息</span>\n      <span class="token keyword">const</span> fd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      fd<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">\'file\'</span><span class="token punctuation">,</span> options<span class="token punctuation">.</span>file<span class="token punctuation">,</span> options<span class="token punctuation">.</span>file<span class="token punctuation">.</span>name<span class="token punctuation">)</span>\n      fd<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">\'name\'</span><span class="token punctuation">,</span> options<span class="token punctuation">.</span>file<span class="token punctuation">.</span>name<span class="token punctuation">)</span>\n      fd<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">\'md5\'</span><span class="token punctuation">,</span> <span class="token string">\'\'</span><span class="token punctuation">)</span>\n      <span class="token function">importStaffs</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$message</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n          <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">\'上传成功\'</span><span class="token punctuation">,</span>\n          <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">\'success\'</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div>',date:"2022-08-01",deps:[],hoistedTags:[],links:[],pathInferred:"/js/2022/20220801.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"20220801",filePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/js/2022/20220801.md",filePathRelative:"js/2022/20220801.md",componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/js/2022/20220801.html.vue",componentFilePathRelative:"pages/js/2022/20220801.html.vue",componentFileChunkName:"v-006549e4",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/js/2022/20220801.html.js",dataFilePathRelative:"pages/js/2022/20220801.html.js",dataFileChunkName:"v-006549e4",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/js/2022/20220801.html",htmlFilePathRelative:"js/2022/20220801.html"},{data:{key:"v-c2ffe65e",path:"/js/2022/20220831.html",title:"你真的熟悉a标签吗",lang:"zh-CN",frontmatter:{title:"你真的熟悉a标签吗",date:"2022-08-31T00:00:00.000Z",tags:["js"],categories:["js"]},excerpt:"",headers:[],git:{updatedTime:null,contributors:[]}},key:"v-c2ffe65e",path:"/js/2022/20220831.html",title:"你真的熟悉a标签吗",lang:"zh-CN",frontmatter:{title:"你真的熟悉a标签吗",date:"2022-08-31T00:00:00.000Z",tags:["js"],categories:["js"]},excerpt:"",headers:[],content:'\r\n::: tip\r\n\r\na标签对于我们来说应该不陌生，但是你真的了解a标签吗，这一篇就来讲讲a标签能做哪些事情\r\n\r\n:::\r\n\r\n# 拨打电话\r\n\r\n```js\r\n1. 在页面上写按钮或链接，点击实现拨打电话功能。\r\n<a href="tel:11111111111">点击可拨打电话：11111111111</a>\r\n2. 在js代码中（有逻辑判断的情况）实现拨打电话的功能。\r\nwindow.location.href = \'tel:11111111111\';\r\n```\r\n\r\n# 发送短信\r\n\r\n```js\r\n1. 在页面上写按钮或链接，点击实现拨打电话功能。\r\n<a href="sms:11111111111?body=duanxin">点击可发送短信</a>\r\n```\r\n\r\n# 发送邮件\r\n\r\n```js\r\n<a href="mailto:123456@123456.com?subject=testing&body=youjian">点击可发送短信</a>\r\n```\r\n\r\n',contentRendered:'<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>a标签对于我们来说应该不陌生，但是你真的了解a标签吗，这一篇就来讲讲a标签能做哪些事情</p>\n</div>\n<h1 id="拨打电话" tabindex="-1"><a class="header-anchor" href="#拨打电话" aria-hidden="true">#</a> 拨打电话</h1>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token number">1.</span> 在页面上写按钮或链接，点击实现拨打电话功能。\n<span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"tel:11111111111"</span><span class="token operator">></span>点击可拨打电话：<span class="token number">11111111111</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>\n<span class="token number">2.</span> 在js代码中（有逻辑判断的情况）实现拨打电话的功能。\nwindow<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">\'tel:11111111111\'</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h1 id="发送短信" tabindex="-1"><a class="header-anchor" href="#发送短信" aria-hidden="true">#</a> 发送短信</h1>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token number">1.</span> 在页面上写按钮或链接，点击实现拨打电话功能。\n<span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"sms:11111111111?body=duanxin"</span><span class="token operator">></span>点击可发送短信<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h1 id="发送邮件" tabindex="-1"><a class="header-anchor" href="#发送邮件" aria-hidden="true">#</a> 发送邮件</h1>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"mailto:123456@123456.com?subject=testing&amp;body=youjian"</span><span class="token operator">></span>点击可发送短信<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',date:"2022-08-31",deps:[],hoistedTags:[],links:[],pathInferred:"/js/2022/20220831.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"20220831",filePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/js/2022/20220831.md",filePathRelative:"js/2022/20220831.md",componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/js/2022/20220831.html.vue",componentFilePathRelative:"pages/js/2022/20220831.html.vue",componentFileChunkName:"v-c2ffe65e",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/js/2022/20220831.html.js",dataFilePathRelative:"pages/js/2022/20220831.html.js",dataFileChunkName:"v-c2ffe65e",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/js/2022/20220831.html",htmlFilePathRelative:"js/2022/20220831.html"},{data:{key:"v-60845a92",path:"/js/2022/20221215.html",title:"手写一个并发函数",lang:"zh-CN",frontmatter:{title:"手写一个并发函数",date:"2022-12-15T00:00:00.000Z",tags:["js"],categories:["js"]},excerpt:"",headers:[],git:{updatedTime:null,contributors:[]}},key:"v-60845a92",path:"/js/2022/20221215.html",title:"手写一个并发函数",lang:"zh-CN",frontmatter:{title:"手写一个并发函数",date:"2022-12-15T00:00:00.000Z",tags:["js"],categories:["js"]},excerpt:"",headers:[],content:"\r\n::: tip\r\n\r\n并发控制在我们项目开发中很常见，今天来手写一个并发函数\r\n\r\n:::\r\n\r\n# 代码实现\r\n\r\n```js\r\n/**\r\n * \r\n * @param {string[]} urls 待请求的 url 数组\r\n * @param {number} maxNum 最大并发数 \r\n * @returns \r\n */\r\nfunction ComplicatedBy(urls,maxNum) {\r\n  return new Promise((resolve) => {\r\n      if (urls.length === 0) {\r\n         resolve([])\r\n         return\r\n      }\r\n      const results = [] // 存储成功的数组\r\n      let index = 0 // 当前请求数组的下标\r\n      let count = 0 // 当前请求完成的数量\r\n      async function request() {\r\n        if (index === urls.length) {\r\n          return\r\n        }\r\n        const url = urls[index]\r\n        const i = index // 记录放在 results 哪一个位置\r\n        index++\r\n        try {\r\n           const resp = await fetch(url)\r\n           results[i] = resp\r\n        } catch (error) {\r\n           results[i] = error\r\n        } finally {\r\n          count++\r\n          if (count === urls.length) {\r\n             resolve(results)\r\n          }\r\n          request()\r\n        }\r\n      }\r\n      // 控制并发数\r\n      for (let index = 0; index < maxNum; index++) {\r\n        request()\r\n      }\r\n  })\r\n}\r\n```\r\n",contentRendered:'<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>并发控制在我们项目开发中很常见，今天来手写一个并发函数</p>\n</div>\n<h1 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现" aria-hidden="true">#</a> 代码实现</h1>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token doc-comment comment">/**\n * \n * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">urls</span> 待请求的 url 数组\n * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">maxNum</span> 最大并发数 \n * <span class="token keyword">@returns</span> \n */</span>\n<span class="token keyword">function</span> <span class="token function">ComplicatedBy</span><span class="token punctuation">(</span><span class="token parameter">urls<span class="token punctuation">,</span>maxNum</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>urls<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n         <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n         <span class="token keyword">return</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">const</span> results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 存储成功的数组</span>\n      <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// 当前请求数组的下标</span>\n      <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// 当前请求完成的数量</span>\n      <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">===</span> urls<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">return</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">const</span> url <span class="token operator">=</span> urls<span class="token punctuation">[</span>index<span class="token punctuation">]</span>\n        <span class="token keyword">const</span> i <span class="token operator">=</span> index <span class="token comment">// 记录放在 results 哪一个位置</span>\n        index<span class="token operator">++</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n           <span class="token keyword">const</span> resp <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>\n           results<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> resp\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n           results<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> error\n        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>\n          count<span class="token operator">++</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">===</span> urls<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n             <span class="token function">resolve</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span>\n          <span class="token punctuation">}</span>\n          <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n      <span class="token comment">// 控制并发数</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> maxNum<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div>',date:"2022-12-15",deps:[],hoistedTags:[],links:[],pathInferred:"/js/2022/20221215.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"20221215",filePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/js/2022/20221215.md",filePathRelative:"js/2022/20221215.md",componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/js/2022/20221215.html.vue",componentFilePathRelative:"pages/js/2022/20221215.html.vue",componentFileChunkName:"v-60845a92",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/js/2022/20221215.html.js",dataFilePathRelative:"pages/js/2022/20221215.html.js",dataFileChunkName:"v-60845a92",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/js/2022/20221215.html",htmlFilePathRelative:"js/2022/20221215.html"},{data:{key:"v-6fdeabe4",path:"/html/2019/20190908.html",title:"DOM的基本操作",lang:"zh-CN",frontmatter:{title:"DOM的基本操作",date:"2019-09-08T00:00:00.000Z",tags:["html"],categories:["html"]},excerpt:"",headers:[{level:2,title:"DOM的获取",slug:"dom的获取",children:[]},{level:2,title:"遍历节点树",slug:"遍历节点树",children:[]},{level:2,title:"基于元素节点树的遍历 (遍历元素节点树)",slug:"基于元素节点树的遍历-遍历元素节点树",children:[]},{level:2,title:"复制节点",slug:"复制节点",children:[]}],git:{updatedTime:null,contributors:[]}},key:"v-6fdeabe4",path:"/html/2019/20190908.html",title:"DOM的基本操作",lang:"zh-CN",frontmatter:{title:"DOM的基本操作",date:"2019-09-08T00:00:00.000Z",tags:["html"],categories:["html"]},excerpt:"",headers:[{level:2,title:"DOM的获取",slug:"dom的获取",children:[]},{level:2,title:"遍历节点树",slug:"遍历节点树",children:[]},{level:2,title:"基于元素节点树的遍历 (遍历元素节点树)",slug:"基于元素节点树的遍历-遍历元素节点树",children:[]},{level:2,title:"复制节点",slug:"复制节点",children:[]}],content:"\r\n## DOM的获取\r\n```js\r\n查看元素节点:\r\n\t1.  document.getElementById(' ') 通过id标识，来获取(查找)到需要的元素\r\n\t    ie8以下id是不区分大小写的\r\n\t\r\n\t2.  document.getElementsByTagName(' ')  \r\n\t    最主流的用法，兼容性最好\r\n\t    通过标签名来获取元素，意为获取文档中所有该标签\r\n\t    返回值是一个伪数组，哪怕只有一个也是伪数组\r\n\t\t\r\n\t3.  document.getElementsByClassName(' ')  \r\n\t    通过类名来获取元素，意为获取文档中所有具有该类名的标签\r\n\t    返回值是一个伪数组，哪怕只有一个也是伪数组\r\n\t    弊端: 兼容性不好，并不是所有浏览器都可以使用\r\n\t\r\n\t4.  document.getElementsByName(' ')  \r\n\t    并不常用，因为只有部分标签的name属性可以生效，一般是表单标签\r\n\t    通过name来获取元素\r\n\t    返回值是一个伪数组，哪怕只有一个也是伪数组\r\n\t\r\n\t5.  document.querySelector(' ')\r\n\t    通过css选择器来获取元素\r\n\t    返回值是一个具体的标签\r\n\t    弊端: 该方法并不是实时的，标签该表不会实时更新输出\r\n\t\t\r\n\t6.  document.querySelectorAll(' ')\r\n\t    通过css选择器来获取元素\r\n\t    返回值是一个伪数组\r\n\t    弊端: 该方法并不是实时的，标签该表不会实时更新输出\r\n\t    可以用来保存父本\r\n\r\n```\r\n\t\t\t\r\n##  遍历节点树\r\n\t1.  parentNode 父节点(最顶端的parentNode为#document)\r\n\t\r\n\t2.  childNodes 选择所有的子节点(包括文本、注释、元素等)\r\n\t\r\n\t3.  firstChild 选择第一个子节点\r\n\t    lastChild 选择最后一个子节点\r\n\t\r\n\t4.  nextSibling 后一个兄弟节点\r\n\t    previousSibling 前一个兄弟节点\r\n\t\r\n##  基于元素节点树的遍历 (遍历元素节点树)\r\n\t1.  parentElement 返回当前元素的父元素节点(ie不兼容)\r\n\t\r\n\t2.  children 返回当前元素的所有子元素  返回值为伪数组\r\n\t\r\n\t3.  firstElementChild 返回当前元素的第一个子元素节点(ie不兼容)\r\n\t\r\n\t4.  lastElementChild 返回当前元素的最后一个子元素节点(ie不兼容)\r\n\t\r\n\t5.  nextElementSibling 当前元素的下一个兄弟元素节点(ie不兼容)\r\n\t\r\n\t6.  previousSibling 当前元素的前一个兄弟节点(ie不兼容)\r\n\r\n## 复制节点\r\n\r\n    格式: 节点.cloneNode();\r\n\t参数: true: 表示深克隆，克隆元素和内部结构, false: 表示浅克隆，只克隆元素自身结构\r\n\r\n",contentRendered:'<h2 id="dom的获取" tabindex="-1"><a class="header-anchor" href="#dom的获取" aria-hidden="true">#</a> DOM的获取</h2>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token literal-property property">查看元素节点</span><span class="token operator">:</span>\n\t<span class="token number">1.</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">\' \'</span><span class="token punctuation">)</span> <span class="token function">通过id标识，来获取</span><span class="token punctuation">(</span>查找<span class="token punctuation">)</span>到需要的元素\n\t    ie8以下id是不区分大小写的\n\t\n\t<span class="token number">2.</span>  document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">\' \'</span><span class="token punctuation">)</span>  \n\t    最主流的用法，兼容性最好\n\t    通过标签名来获取元素，意为获取文档中所有该标签\n\t    返回值是一个伪数组，哪怕只有一个也是伪数组\n\t\t\n\t<span class="token number">3.</span>  document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">\' \'</span><span class="token punctuation">)</span>  \n\t    通过类名来获取元素，意为获取文档中所有具有该类名的标签\n\t    返回值是一个伪数组，哪怕只有一个也是伪数组\n\t    <span class="token literal-property property">弊端</span><span class="token operator">:</span> 兼容性不好，并不是所有浏览器都可以使用\n\t\n\t<span class="token number">4.</span>  document<span class="token punctuation">.</span><span class="token function">getElementsByName</span><span class="token punctuation">(</span><span class="token string">\' \'</span><span class="token punctuation">)</span>  \n\t    并不常用，因为只有部分标签的name属性可以生效，一般是表单标签\n\t    通过name来获取元素\n\t    返回值是一个伪数组，哪怕只有一个也是伪数组\n\t\n\t<span class="token number">5.</span>  document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">\' \'</span><span class="token punctuation">)</span>\n\t    通过css选择器来获取元素\n\t    返回值是一个具体的标签\n\t    <span class="token literal-property property">弊端</span><span class="token operator">:</span> 该方法并不是实时的，标签该表不会实时更新输出\n\t\t\n\t<span class="token number">6.</span>  document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">\' \'</span><span class="token punctuation">)</span>\n\t    通过css选择器来获取元素\n\t    返回值是一个伪数组\n\t    <span class="token literal-property property">弊端</span><span class="token operator">:</span> 该方法并不是实时的，标签该表不会实时更新输出\n\t    可以用来保存父本\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><h2 id="遍历节点树" tabindex="-1"><a class="header-anchor" href="#遍历节点树" aria-hidden="true">#</a> 遍历节点树</h2>\n<pre><code>1.  parentNode 父节点(最顶端的parentNode为#document)\n\n2.  childNodes 选择所有的子节点(包括文本、注释、元素等)\n\n3.  firstChild 选择第一个子节点\n    lastChild 选择最后一个子节点\n\n4.  nextSibling 后一个兄弟节点\n    previousSibling 前一个兄弟节点\n</code></pre>\n<h2 id="基于元素节点树的遍历-遍历元素节点树" tabindex="-1"><a class="header-anchor" href="#基于元素节点树的遍历-遍历元素节点树" aria-hidden="true">#</a> 基于元素节点树的遍历 (遍历元素节点树)</h2>\n<pre><code>1.  parentElement 返回当前元素的父元素节点(ie不兼容)\n\n2.  children 返回当前元素的所有子元素  返回值为伪数组\n\n3.  firstElementChild 返回当前元素的第一个子元素节点(ie不兼容)\n\n4.  lastElementChild 返回当前元素的最后一个子元素节点(ie不兼容)\n\n5.  nextElementSibling 当前元素的下一个兄弟元素节点(ie不兼容)\n\n6.  previousSibling 当前元素的前一个兄弟节点(ie不兼容)\n</code></pre>\n<h2 id="复制节点" tabindex="-1"><a class="header-anchor" href="#复制节点" aria-hidden="true">#</a> 复制节点</h2>\n<pre><code>格式: 节点.cloneNode();\n参数: true: 表示深克隆，克隆元素和内部结构, false: 表示浅克隆，只克隆元素自身结构\n</code></pre>\n',date:"2019-09-08",deps:[],hoistedTags:[],links:[],pathInferred:"/html/2019/20190908.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"20190908",filePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/html/2019/20190908.md",filePathRelative:"html/2019/20190908.md",componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/html/2019/20190908.html.vue",componentFilePathRelative:"pages/html/2019/20190908.html.vue",componentFileChunkName:"v-6fdeabe4",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/html/2019/20190908.html.js",dataFilePathRelative:"pages/html/2019/20190908.html.js",dataFileChunkName:"v-6fdeabe4",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/html/2019/20190908.html",htmlFilePathRelative:"html/2019/20190908.html"},{data:{key:"v-6cdfe61c",path:"/nuxt/2023/20230210.html",title:"nuxt3 入门教程",lang:"zh-CN",frontmatter:{title:"nuxt3 入门教程",date:"2023-02-10T00:00:00.000Z",tags:["nuxt"],categories:["vue"]},excerpt:"",headers:[{level:2,title:"Nuxt3的简介",slug:"nuxt3的简介",children:[]},{level:2,title:"Nuxt3的优势介绍",slug:"nuxt3的优势介绍",children:[]},{level:2,title:"Nuxt3 的安装",slug:"nuxt3-的安装",children:[]},{level:2,title:"Nuxt3的目录结构",slug:"nuxt3的目录结构",children:[{level:3,title:"编写Hello World",slug:"编写hello-world",children:[]}]},{level:2,title:"Nuxt3页面和约定路由的使用",slug:"nuxt3页面和约定路由的使用",children:[{level:3,title:"动态路由的使用",slug:"动态路由的使用",children:[]},{level:3,title:"嵌套路由的使用",slug:"嵌套路由的使用",children:[]}]},{level:2,title:"编程式路由导航&传参",slug:"编程式路由导航-传参",children:[]},{level:2,title:"路由中间件",slug:"路由中间件",children:[{level:3,title:"匿名路由中间件",slug:"匿名路由中间件",children:[]},{level:3,title:"具名路由中间件",slug:"具名路由中间件",children:[]}]},{level:2,title:"布局模板",slug:"布局模板",children:[]},{level:2,title:"自定义组件",slug:"自定义组件",children:[]},{level:2,title:"模块化代码 Composable文件夹的试用",slug:"模块化代码-composable文件夹的试用",children:[{level:3,title:"Composable中创建time.js的编写",slug:"composable中创建time-js的编写",children:[]},{level:3,title:"composables的引入规则",slug:"composables的引入规则",children:[]}]},{level:2,title:"Nuxt3中的数据请求",slug:"nuxt3中的数据请求",children:[{level:3,title:"useAsyncData的使用",slug:"useasyncdata的使用",children:[]},{level:3,title:"useFetch的使用",slug:"usefetch的使用",children:[]}]},{level:2,title:"Nuxt3 中SEO相关的配置",slug:"nuxt3-中seo相关的配置",children:[{level:3,title:"title 和 meta 标签的作用",slug:"title-和-meta-标签的作用",children:[]}]},{level:2,title:"Nuxt3中pinia的使用",slug:"nuxt3中pinia的使用",children:[{level:3,title:"Pinia的持久化存储",slug:"pinia的持久化存储",children:[]}]},{level:2,title:"Vueuse的使用",slug:"vueuse的使用",children:[]},{level:2,title:"ssr底层原理",slug:"ssr底层原理",children:[]}],git:{updatedTime:null,contributors:[]}},key:"v-6cdfe61c",path:"/nuxt/2023/20230210.html",title:"nuxt3 入门教程",lang:"zh-CN",frontmatter:{title:"nuxt3 入门教程",date:"2023-02-10T00:00:00.000Z",tags:["nuxt"],categories:["vue"]},excerpt:"",headers:[{level:2,title:"Nuxt3的简介",slug:"nuxt3的简介",children:[]},{level:2,title:"Nuxt3的优势介绍",slug:"nuxt3的优势介绍",children:[]},{level:2,title:"Nuxt3 的安装",slug:"nuxt3-的安装",children:[]},{level:2,title:"Nuxt3的目录结构",slug:"nuxt3的目录结构",children:[{level:3,title:"编写Hello World",slug:"编写hello-world",children:[]}]},{level:2,title:"Nuxt3页面和约定路由的使用",slug:"nuxt3页面和约定路由的使用",children:[{level:3,title:"动态路由的使用",slug:"动态路由的使用",children:[]},{level:3,title:"嵌套路由的使用",slug:"嵌套路由的使用",children:[]}]},{level:2,title:"编程式路由导航&传参",slug:"编程式路由导航-传参",children:[]},{level:2,title:"路由中间件",slug:"路由中间件",children:[{level:3,title:"匿名路由中间件",slug:"匿名路由中间件",children:[]},{level:3,title:"具名路由中间件",slug:"具名路由中间件",children:[]}]},{level:2,title:"布局模板",slug:"布局模板",children:[]},{level:2,title:"自定义组件",slug:"自定义组件",children:[]},{level:2,title:"模块化代码 Composable文件夹的试用",slug:"模块化代码-composable文件夹的试用",children:[{level:3,title:"Composable中创建time.js的编写",slug:"composable中创建time-js的编写",children:[]},{level:3,title:"composables的引入规则",slug:"composables的引入规则",children:[]}]},{level:2,title:"Nuxt3中的数据请求",slug:"nuxt3中的数据请求",children:[{level:3,title:"useAsyncData的使用",slug:"useasyncdata的使用",children:[]},{level:3,title:"useFetch的使用",slug:"usefetch的使用",children:[]}]},{level:2,title:"Nuxt3 中SEO相关的配置",slug:"nuxt3-中seo相关的配置",children:[{level:3,title:"title 和 meta 标签的作用",slug:"title-和-meta-标签的作用",children:[]}]},{level:2,title:"Nuxt3中pinia的使用",slug:"nuxt3中pinia的使用",children:[{level:3,title:"Pinia的持久化存储",slug:"pinia的持久化存储",children:[]}]},{level:2,title:"Vueuse的使用",slug:"vueuse的使用",children:[]},{level:2,title:"ssr底层原理",slug:"ssr底层原理",children:[]}],content:'\r\n::: tip\r\n\r\n我们开发 toc 项目时，例如电商网站，往往需要考虑seo和首屏优化，这篇我们将讲述如何使用 nuxt3 实现服务器渲染，从而优化seo和首屏加载时间\r\n\r\n:::\r\n\r\n## Nuxt3的简介\r\n\r\nNuxt3是基于Vue3发布的SSR框架，也是Vue全家桶系列的一员。如果你了解Nuxt2，应该也了解Nuxt3的使命和用途。但是如果你不了解，你需要先知道两个概念。\r\n\r\n- SPA应用：也就是单页应用，这些多是在客户端的应用，不能进行SEO优化（搜索引擎优化）。\r\n- SSR应用：在服务端进行渲染，渲染完成后返回给客户端，每个页面有独立的URL，对SEO友好。\r\n\r\n所以如果你开发的应用是企业网站、商品展示 、博客这类型的展示型网站，就需要使用搜索引擎喜欢的SSR应用。当我们明白这两个概念后，再来看Nuxt3的使命。因为Vue开发的应用默认是单页应用（SPA应用），但如果你想针对于搜索优化，就需要使用Vue的SSR模式开发，而[Nuxt3](https://nuxt.com/)就是Vue的SSR开发的框架。\r\n![img](https://img.jspang.com/ArticleImages/20220323_Nuxt003.png)\r\n\r\n## Nuxt3的优势介绍\r\n\r\n![img](https://img.jspang.com/ArticleImages/20220323_Nuxt002.png) 这是一张Nuxt3官网的图片，列出Nuxt3的新特性，一共12个。我们快速来解读一下。\r\n\r\n- 更轻量：以现代浏览器为基础的情况下，服务器部署和客户端产物最多减小75倍。\r\n- 更快：用动态服务端代码来优化冷启动。\r\n- Hybird：增量动态生成和其他高级模式现在都成为可能。\r\n- Suspense: 导航前后可在任何组件中获取数据。\r\n- Composition API : 使用Composition API 和 Nuxt3的composables 实现真正的可复用性。\r\n- Nuxt CLI ： 权限的零依赖体验，助你轻松搭建项目和集成模块。\r\n- Nuxt Devtools ：专属调试工具，更多的信息和快速修复，在浏览器中高效工作。\r\n- Nuxt Kit ：全新的基于 TypeScript 和跨版本兼容的模块开发。\r\n- Webpack5 ： 更快的构建速度和更小的构建包，并且零配置。\r\n- Vite：用Vite作为你的打包器，体验轻量级的快速HMR。\r\n- Vue3 ： 完全支持Vue3语法，这一点特别关键。\r\n- TypeScript：由原生TypeScript和ESM构成，没有额外配置步骤。\r\n\r\n## Nuxt3 的安装\r\n\r\n```\r\nnpx nuxi init <project-name>\r\n```\r\n\r\n> 注意：`npx`是npm从5.2版开始增加的命令，所以说你的 npm 最小版本也要是5.2版本。查看npm版本的命令如下。\r\n\r\n```\r\nnpm -v\r\n```\r\n\r\n如果你安装失败，或者安装很慢的话你需要多试几次，其实这个是国内网络问题造成的，道理就和你上不了Google是一样的。所以你可以使用科学上网解决这个问题。一般获取不到内容，就会得到下面一段警告。\r\n\r\n```\r\ncould not fetch remote https://github.com/nuxt/starter\r\nMake sure you have installed git correctly   \r\n```\r\n\r\n直到出现下面的文字就算安装成功了。\r\n![Nuxt3安装成功页面](https://img.jspang.com/ArticleImages/20220323_Nuxt004.png)\r\n\r\n如果一直安装失败的话，下载Nuxt3的文件包，然后再用yarn命令进行安装\r\n\r\n```html\r\nhttps://github.com/nuxt/starter/tree/v3\r\n```\r\n\r\n打开网址可以看到，这个就是最简单的Nuxt3项目的目录，这时候你可以Clone下来，但我发现Clone还是会报错，意思是无法找到仓库位置。那这时候我只能用最原始的下载ZIP（Download ZIP）的方式了。\r\n下载完成后，再使用yarn命令进行安装。\r\n\r\n```html\r\nyarn install\r\n```\r\n\r\n稍等一会，就可以安装成功了。安装成功以后，再使用\r\n\r\n```html\r\nyarn dev\r\n```\r\n\r\n然后打开浏览器，输入`http://localhost:3000`，就可以看到下面的页面了。 ![img](https://img.jspang.com/ArticleImages/20220323_Nuxt001.png)\r\n\r\n## Nuxt3的目录结构\r\n\r\n默认的项目里就如下几个文件和目录\r\n\r\n```JSON\r\n- .nuxt               // 自动生成的目录，用于展示结果\r\n- node_modules        // 项目依赖包存放目录\r\n- .gitignore          // Git的配置目录，比如一些文件不用Git管理就可以在这个文件中配置\r\n- app.vue             // 项目入口文件，你可以在这里配置路由的出口\r\n- nuxt.config.ts      // nuxt项目的配置文件 ，这个里边可以配置Nuxt项目的方法面面\r\n- package-lock.json   // 锁定安装时包的版本，以保证其他人在 npm install时和你保持一致\r\n- package.json        // 包的配置文件和项目的启动调式命令配置\r\n- README.md           // 项目的说明文件\r\n- tsconfig.json       // TypeScript的配置文件\r\n \r\n```\r\n\r\n随着我们的开发目录也会越来越多，比如常用的还有下面三个目录。\r\n\r\n```JSON\r\n- pages               // 开发的页面目录\r\n- components          // 组件目录\r\n- assets              // 静态资源目录\r\n- layouts             // 项目布局目录\r\n```\r\n\r\n好了，现在我们对Nuxt3的基础目录了解后，接下来我们试着去作一个HelloWorld的程序。\r\n\r\n### 编写Hello World\r\n\r\n通过上面的介绍，我们知道了`App.vue` 这个文件是项目的入口文件。用VSCode打开文件，可以看到文件的基础结构。\r\n\r\n```html\r\n<template>\r\n  <div>\r\n    <NuxtWelcome /> \r\n  </div>\r\n</template>\r\n```\r\n\r\n其中`<NuxtWelcome />` 就是一个框架自带的组件，我们直接删除就可以，不用纠结删除这个组件。删除后，在 `\\components` 目录下新建一个文件，叫做`HelloWorld.vue` 然后编写下面的代码。\r\n\r\n```html\r\n<template>\r\n  <div class="">\r\n    <h1>Hello World</h1>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport {} from "vue";\r\n<\/script>\r\n\r\n<style scoped></style>\r\n```\r\n\r\n然后再回到`app.vue`文件中直接写入这个 `HelloWorld`组件，回到浏览器，就可以看到 HelloWord 效果了。\r\n\r\n```html\r\n<template>\r\n  <div>\r\n    <hello-world />\r\n  </div>\r\n</template>\r\n```\r\n\r\n## Nuxt3页面和约定路由的使用\r\n\r\nNuxt3的一个特点就是**约定式开发**，讲究的是约定大于配置。如果你熟悉 **umi** 的话，那你可以很快的了解并上手\r\n\r\n- 在 **components** 文件夹下的 vue 文件，无需引入，可以直接在 app.vue 中使用\r\n\r\n```vue\r\n<template>\r\n  <div>\r\n    <h1>Welcome to the homepage</h1>\r\n    <AppAlert> // components/AppAlert 文件\r\n      This is an auto-imported component.\r\n    </AppAlert>\r\n  </div>\r\n</template>\r\n```\r\n\r\n- 在 **pages** 文件夹下的 vue 文件，每一个文件`pages/`代表显示其内容的不同路径。要使用页面，请创建`pages/index.vue`文件并将  `<NuxtPage/>` 添加到app.vue，这样你就可以刷新浏览器，看到 **pages/index** 文件中的内容了\r\n\r\n```vue\r\n<template>\r\n  <div>\r\n    <NuxtPage/>\r\n  </div>\r\n</template>\r\n\r\n```\r\n\r\n当我们在 **pages** 文件夹下有多个文件，需要来回跳转时，我们可以借助 **NuxtLink ** 标签来进行路由跳转\r\n\r\n```vue\r\n<template>\r\n  <div>\r\n    <NuxtPage/>\r\n    <NuxtLink to="/demo1">前往Demo</NuxtLink> \x3c!-- 这样就可以跳转到 pages/Demo1 文件页面了 --\x3e \r\n  </div>\r\n</template>\r\n\r\n```\r\n\r\n### 动态路由的使用\r\n\r\n我们在 **pages** 文件夹下创建的文件中，文件名中用`[ ]`扩起来就可以了，例demo2-[id].vue，这样我们就创建了一个动态路由\r\n\r\n```vue\r\n// demo2-[id].vue\r\n\r\n<template>\r\n  <div class="">获取的id:{{ $route.params.id }}</div>\r\n</template>\r\n```\r\n\r\n```vue\r\n<template>\r\n    <NuxtLink to="/demo1-34">前往demo2</NuxtLink>\r\n</template>\r\n```\r\n\r\n如果想传递多个参数，需要建立一个文件夹，然后在文件夹上使用`[ ]`来确定参数。比如我们要传递一个name的参数过来。就需要把目录和文件建立成这样。\r\n\r\n```JSON\r\n-|  pages/\r\n---| index.vue\r\n---| goods-[name]/\r\n-----| demo2-[id].vue\r\n```\r\n\r\n然后修改一些`demo2-[id].vue`的文件，修改获取的参数。\r\n\r\n```html\r\n<template>\r\n  <div class="">获取的id:{{ id }}</div>\r\n  <div class="">获取的name:{{ name }}</div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from "vue";\r\nconst route = useRoute();\r\nconst id = ref(route.params.id);\r\nconst name = ref(route.params.name);\r\n<\/script>\r\n\r\n<style scoped></style>\r\n```\r\n\r\n再到`index.vue` 修改链接，传递两个参数。\r\n\r\n```html\r\n<NuxtLink to="/goods-zhangsan/demo2-38">Demo2.vue</NuxtLink>\r\n```\r\n\r\n完成后再到浏览器中查看结果，可以看到已经接收到了两个参数\r\n\r\n### 嵌套路由的使用\r\n\r\n嵌套路由的建立非常容易，用一句话解释为：目录和文件名同名，就制作了一个嵌套路由。\r\n制作一个嵌套路由页面一般需要三步：\r\n\r\n1. 建立嵌套路由的文件夹（约定大于配置）\r\n2. 创建和文件夹相同名称的文件（父页面）\r\n3. 在新建文件夹下任意创建子页面\r\n\r\n```text\r\n|--pages/\r\n|----parent/\r\n|------child.vue\r\n|----parent.vue\r\n```\r\n\r\n先在`\\pages`目录下，新建一个文件夹 `parent` ，然后在 `pages` 目录下再建立一个`parent.vue`的文件\r\n\r\n```vue\r\nparent.vue 页面\r\n<template>\r\n  <div class="">Parent Page</div>\r\n  \x3c!-- 子页面的出口--\x3e\r\n  <NuxtChild></NuxtChild>\r\n</template>\r\n```\r\n\r\n这里的  `NuxtChild`  就是嵌套路由的出口，所以如果是嵌套路由，就必须要加上这个标签。这是Nuxt的一个内置组件。 有了父页面之后，在新建的parent文件夹下，再建立一个 `child.vue`子页面。然后编写代码。\r\n\r\n```html\r\n<template>\r\n  <div class="">Child Page</div>\r\n</template>\r\n```\r\n\r\n然后为了看到效果，我们还需要一个路由链接过来。直接到`index.uve`增加路由链接。\r\n\r\n```html\r\n<NuxtLink to="/parent/child">/parent/child</NuxtLink>\r\n```\r\n\r\n多个子页面的制作与制作一个单页面是相同的。在`\\pages\\parent\\`文件夹下面再新建一个文件 `two.vue`。然后编写代码。\r\n\r\n```html\r\n<template>\r\n  <div class="">Two Page</div>\r\n</template>\r\n```\r\n\r\n写完后再到`index.vue`页面，增加导航路由。\r\n\r\n```html\r\n<NuxtLink to="/parent/two">/parent/two</NuxtLink>\r\n```\r\n\r\n## 编程式路由导航&传参\r\n\r\n`navigateTo`是一个路由器帮助函数，允许以编程方式在您的 Nuxt 应用程序中导航用户。如下面的例子，**注意：确保在调用它时始终使用`await`or`return`结果**\r\n\r\n```vue\r\n<template>\r\n  <div @click="codego">编程式导航</div>\r\n</template>\r\n\r\n<script setup>\r\nconst codego = async () => {\r\n  await navigateTo({\r\n    path: "/demo2",\r\n    params: {\r\n      id: 1,\r\n      sort: "asc",\r\n    },\r\n  });\r\n};\r\n<\/script>\r\n```\r\n\r\n必须使用 **params** 进行传参，否则会报错\r\n\r\n## 路由中间件\r\n\r\nNuxt 提供了一个可自定义的路由中间件框架，您可以在整个应用程序中使用它，非常适合在导航到特定路由之前提取要运行的代码。路由中间件分为三种：\r\n\r\n1. 匿名（或内联）路由中间件，直接在使用它们的页面中定义。\r\n2. 具名路由中间件，放在`middleware/`目录下，页面使用时会异步导入自动加载。（**注意**：路由中间件名称被规范化为 kebab-case，因此`someMiddleware`变为`some-middleware`。）\r\n3. 全局路由中间件，放在`middleware/`目录下（带后缀`.global`），每次路由变化都会自动运行。\r\n\r\n### 匿名路由中间件\r\n\r\n使用 `definePageMeta` 来实现匿名路由中间件，该`validate`属性接受`route`作为参数。您可以返回一个布尔值来确定这是否是要使用此页面呈现的有效路由。如果您返回`false`，并且找不到另一个匹配项，这将导致 404 错误。也可以直接返回一个带`statusCode`/的对象`statusMessage`来立即响应错误（不会检查其他匹配项）。\r\n\r\n```vue\r\n<template>\r\n  <div>id:{{ id }}</div>\r\n  <div>name:{{ name }}</div>\r\n  <NuxtLink to="/">前往index</NuxtLink>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from "vue";\r\nconst route = useRoute();\r\nconst id = ref(route.params.id);\r\nconst name = ref(route.params.name);\r\ndefinePageMeta({\r\n  validate: async (route) => {\r\n     // 通过就 return true\r\n    // 不通过时可以使用下面的代码\r\n    throw createError({ statusCode: 404, statusMessage: \'拒绝访问\' })\r\n  },\r\n});\r\n<\/script>\r\n<style lang="scss" scoped>\r\n</style>\r\n```\r\n\r\n### 具名路由中间件\r\n\r\n在 middleware 文件夹下创建一个 js 文件，例如 auth.js \r\n\r\n```js\r\nexport default defineNuxtRouteMiddleware((to, from) => {\r\n     console.log(to); // 目标路由信息\r\n     console.log(from);  // 来时路由信息\r\n  })\r\n  \r\n```\r\n\r\n```vue\r\n<template>\r\n  <div>hello world</div>\r\n</template>\r\n\r\n<script setup>\r\ndefinePageMeta({\r\n  middleware: \'auth\' // 使用哪一个路由中间件\r\n})\r\n<\/script>\r\n```\r\n\r\n## 布局模板\r\n\r\n布局模板的作用就是你先定义好一个布局页面，然后提取一些通用的UI或代码到可重用的模板中，提高代码复用性，从而降低代码的复杂度，让代码重用性提高。\r\n\r\n新建一个文件夹`layouts\\`然后再里边写编写一个 `defalut.vue`文件，代码如下。\r\n\r\n```vue\r\n<template>\r\n  <div>\r\n    我是布局模板，default.vue\r\n    <slot />\r\n  </div>\r\n</template>\r\n```\r\n\r\n上边这段代码就相当于你创建了一个布局模板。有了这个模板后，可以在任何你想要使用的页面中用`NuxtLayout`标签为页面赋予模板中的内容。\r\n\r\n```vue\r\n<template>\r\n  <NuxtLayout name="default">\r\n    <div>\r\n      我是插槽里面的内容\r\n    </div>\r\n  </NuxtLayout>\r\n</template>\r\n```\r\n\r\n如果想使用多个插槽的话，可以给插槽具名，你可以在页面中通过 `<template #xxx >` 的形式来指定对应的模板插槽\r\n\r\n```vue\r\n<template>\r\n  <div>\r\n    我是布局模板，default.vue\r\n    <slot name="one" />\r\n    <slot name="two" />\r\n  </div>\r\n</template>\r\n```\r\n\r\n```vue\r\n<template>\r\n  <NuxtLayout name="default">\r\n    <template #one>\r\n      我是one中的内容\r\n    </template>\r\n    <template #two> 我是two中的内容 </template>\r\n  </NuxtLayout>\r\n</template>\r\n```\r\n\r\n## 自定义组件\r\n\r\nNuxt3的所有自定义组件，必须写在`components`目录下，写在这个目录下他会自动加载到页面中，而不用我们自己不断的重复引入到每个页面中。比如现在要创建一个`TheFooter`的组件，我们在项目跟目录建立一个文件夹`components` ，然后建立一个文件`TheFooter.vue`。\r\n\r\n```vue\r\n<template>\r\n  <h1>The Footer Box</h1>\r\n</template>\r\n```\r\n\r\n```vue\r\n<template>\r\n      <TheFooter />  // 这样就可以直接使用自定义组件\r\n</template>\r\n```\r\n\r\n在实际工作中组件会非常多，所以会把组件分门别类的放置。那这种有层级的组件，我们要如何引用那。比如在` components`文件夹下面，新建一个 `test`文件夹，然后在test文件夹下面再创建一个 `MyButton.vue`文件。\r\n\r\n```html\r\n<template>\r\n  <div class=""><button>MyButton</button></div>\r\n</template>\r\n```\r\n\r\n写完这个组件后，最关键的一步，就是在页面里如何引用到这个组件。方法很简单，只要在这个页面的前面加上文件夹的名称就可以了\r\n\r\n```html\r\n<TestMyButton />\r\n```\r\n\r\n## 模块化代码 Composable文件夹的试用\r\n\r\n在开发中我们经常会有一些通用的业务逻辑代码，需要模块化管理，这时候就可以试用`Composable` 这个文件夹来编写。比如我们常用的显示当前时间，这种常用的通用代码，就可以编写成一个单独的代码段，然后在每个页面进行使用。\r\n\r\n### Composable中创建time.js的编写\r\n\r\n新建一个文件夹`composables` 然后在文件夹里边，新建一个文件`time.js` ，然后编写下面的代码。这段代码你一定编写过，所以就不给大家讲解里边的具体含义了。你可以直接复制这段代码。\r\n\r\n```javascript\r\nexport  const getTime=()=>{\r\n  const timezone = 8;\r\n  const offset_GMT = new Date().getTimezoneOffset();\r\n  const nowDate = new Date().getTime();\r\n  const today = new Date(nowDate + offset_GMT * 60 * 1000 + timezone * 60 * 60 * 1000);\r\n  const date = today.getFullYear() + "-" + twoDigits(today.getMonth() + 1) + "-" + twoDigits(today.getDate());\r\n  const time = twoDigits(today.getHours()) + ":" + twoDigits(today.getMinutes()) + ":" + twoDigits(today.getSeconds());\r\n  const timeString =\'当前时间：\' + date + \'  \' + time;\r\n\r\n  return timeString;\r\n\r\n}\r\n\r\nfunction twoDigits(val) {\r\n  if (val < 10) return "0" + val;\r\n  return val;\r\n}\r\n```\r\n\r\n写完之后，如何在页面中使用呢？在`pages` 文件夹下面，新建一个`\\pages\\demo3.vue` 的文件，然后你就可以直接在这个页面中使用刚才写的获得时间的方法了。\r\n\r\n```html\r\n<template>\r\n  <div class="">{{ time }}</div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from "vue";\r\nconst time = ref(getTime());\r\n<\/script>\r\n\r\n<style scoped></style>\r\n```\r\n\r\n打开浏览器就可以获得当前时间了。 你可以把任何你在项目中经常使用的代码，封装到这个文件夹里，实现代码的复用。这个文件夹的功能和组件很相似，只是组件是UI部分的代码复用，而这个是业务逻辑代码的复用。\r\n\r\n### composables的引入规则\r\n\r\n`composables` 文件夹的引入规则是，**只有顶层文件会被引入**。也就是说我们如果在这个文件下再新建一个文件夹，是不会被引入到 页面中实现代码复用的。 比如下面的文件格式就没办法引入。\r\n\r\n```html\r\n--|composables\r\n----|test\r\n------|test.js\r\n```\r\n\r\n但是有一种是例外的，就是我们可以写成下面的这种形式。\r\n\r\n```html\r\n--|composables\r\n----|test\r\n------|index.js\r\n```\r\n\r\n我们这里测试一下，新建一个`\\test` 文件夹，然后在它的下面再创建一个`index.js` 文件。写入下面的代码。\r\n\r\n```javascript\r\nexport const test = ()=>{\r\n  console.log(\'index\')\r\n}\r\n```\r\n\r\n然后回到`Demo3.vue` 页面使用`test( )` 方法，结果是可以使用这个方法的。\r\n\r\n```html\r\n<template>\r\n  <div class="">{{ time }}</div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from "vue";\r\nconst time = ref(getTime());\r\ntest();\r\n<\/script>\r\n```\r\n\r\n## Nuxt3中的数据请求\r\n\r\nNuxt3中提供了四种方法：`useAsyncData` 、`useFetch` 、`useLazyFetch` 、`useLazyAsyncData` 。提供的四个方法，都是获取后台数据的，但是使用场景和使用方法有所不同。\r\n\r\n### useAsyncData的使用\r\n\r\n使用`useAsyncData` 异步获取数据，它可以使用在页面中，组件和插件中。我们先通过这个方法来获取一下服务端的数据。 在pages文件夹下，新建一个页面，然后编写下面的代码。\r\n\r\n```html\r\n<template>\r\n  <div class=""></div>\r\n</template>\r\n\r\n<script setup>\r\nimport {} from "vue";\r\n// 第一个参数是一个字符串，相当于给这个请求起一个名字\r\nconst res = await useAsyncData("getList", () =>\r\n  $fetch("请求地址")\r\n);\r\nconsole.log(res);\r\n<\/script>\r\n\r\n<style scoped></style>\r\n```\r\n\r\n$fetch( )方法是nuxt3提供的内置方法，我们直接可以使用。打开浏览器的调试面包，在`终端`里可以看到返回值是一个对象，对象里有四个属性。\r\n\r\n- data: 返回的数据，我们需要的服务器数据就在这个属性里。\r\n- error：是否存在错误，如果存在错误，可以在这个属性中获得，返回的是一个对象。\r\n- pending：这次请求的状态，返回的是布尔值。\r\n- refresh：这个返回的是一个函数，可以用来刷新 handler 函数返回的数据。\r\n\r\n这个方法的一个特点是，它可以进行很多选项的配置，但是在真实开发中，其实我们用的不多。最常用的就是`lazy` 选项，比如我们设置成`true` 就是需要数据都返回后，才会显示出来 ，简单说就是会阻塞页面。默认是false。 比如要设置lazy为true，就可以这样写。因为我们的数据太少，所以基本看不出来效果。\r\n\r\n```javascript\r\nconst res = await useAsyncData(\r\n  "getList",\r\n  () => $fetch("请求地址"),\r\n  {\r\n    lazy: true,\r\n  }\r\n);\r\n```\r\n\r\n这个可配置的选项`option` 其实还是挺多的，有七项。如果想详细了解的，可以到[官方](https://v3.nuxtjs.org/api/composables/use-async-data)去看一下\r\n\r\n### useFetch的使用\r\n\r\n`useFetch` 可以理解为所有的都选择默认配置的`useAsyncData` 方法。比如还是上面的请求，我们就可以写成下面的形式。\r\n\r\n```js\r\nconst res = await useFetch("请求地址");\r\n```\r\n\r\n这样我们依然可以获取数据，当然也是可以传递参数和配置请求方法的。比如我们要设置请求方法是get，传递id是1, 就可以写成下面的形式。\r\n\r\n```javascript\r\nconst res = await useFetch("http://121.36.81.61:8000/getTenArticleList", {\r\n  method: "get",\r\n  id: 1,\r\n});\r\n```\r\n\r\n`useLazyAsyncData` 和`useLazyFetch` 。他们只是把配置选项中的`Lazy` 设置成了true， 也就是会阻塞页面。\r\n\r\n## Nuxt3 中SEO相关的配置\r\n\r\n使用Nuxt3框架解决的主要问题就是要对搜索引擎友好，那为什么搜索引擎可以搜到我想要的网站？这要归功于HTML中的`Mate`标签和`title` 标签。\r\n\r\n### title 和 meta 标签的作用\r\n\r\n**title标签**：主要是为了告诉搜索引擎我们的网站标题是什么，然后搜索引擎才会根据你提供的的title给你打上tag，用户在搜索的时候才会搜索到你。 \r\n\r\n**meta标签**：这个标签根据name的不同有很多种，和SEO相关的主要是`name=description` 和`name=keywords` 这两种，如果不设置这两个标签，对SEO的效果就会有所影响。 所以我们在开发需要SEO的网站时，对这两个标签一定要进行设置。你可以用两种方法对meta标签进行设置。 \r\n\r\n1.使用useHead( )方法 \r\n\r\n```vue\r\n<template>\r\n  <div class="">Demo Page</div>\r\n</template>\r\n\r\n<script setup>\r\nuseHead({\r\n  title: " 星空的博客  ",\r\n  viewport: "width=device-width,initial-scale=1,maximum-scale=1 ",\r\n  charset: "utf-8",\r\n  meta: [\r\n    { name: "description", content: "星空的前端博客" },\r\n    { name: "keywords", content: "星空" },\r\n  ],\r\n});\r\n<\/script>\r\n```\r\n\r\n2.直接在模板中使用标签\r\n\r\n```vue\r\n<template>\r\n  <div class="">\r\n    <Head>\r\n      <Title>{{ title }}</Title>\r\n      <Meta name="description" :content="title" />\r\n    </Head>\r\n    <div>技术胖的博客</div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from "vue";\r\nconst title = ref("星空的博客");\r\n<\/script>\r\n```\r\n\r\n从代码中可以看到，我们直接使用了`Head`标签，然后在里边还可以使用`Meta`标签和`Title`标签，可以设置这两个标签后，关于SEO的设置就都可以作了。 我们使用Nuxt的意义就在于可以有很好的SEO效果，所以在你开发的时候，一定要对页面进行标题、描述和关键词的设置和编写。 \r\n\r\n## Nuxt3中pinia的使用\r\n\r\n**1. 安装：**\r\n\r\n```bash\r\nyarn add pinia @pinia/nuxt\r\n```\r\n\r\n**2. 配置 `nuxt.config.js`**\r\n\r\n```ts\r\n// nuxt.config.js\r\nexport default defineNuxtConfig({\r\n  // ... 其他配置\r\n  modules: [\r\n    // ...\r\n    \'@pinia/nuxt\',\r\n  ],\r\n})\r\n```\r\n\r\n我们可以利用composables目录的自动导入功能，在该目录下创建store目录用于存放pinia的store文件，另外在composables目录下创建store.ts文件（文件名可自拟）\r\n\r\n```json\r\n-|  composables/\r\n--| store/    \r\n---| users/\r\n-----| index.js\r\n---| index.js\r\n```\r\n\r\n 我们可以在 **store** 文件夹下创建多个文件夹，每个文件夹代表一个模块，最后我们通过 **store** 文件夹下的 **index.js** 文件引入所有的模块，例如下面例子\r\n\r\n```js\r\n/composables/store/users/index.js\r\nexport const user = defineStore("user", {\r\n    state: () => {\r\n        return {\r\n            name: "Dragon Wu",\r\n            age: 100,\r\n            sex: "male",\r\n            token: "xxx"\r\n        }\r\n    }\r\n})\r\n```\r\n\r\n```js\r\n /composables/store/index.js索引所有store\r\nimport {user} from "./user/index"\r\n....\r\n//模块\r\nconst stores = {\r\n    user\r\n    ....\r\n}\r\n \r\nexport default stores\r\n```\r\n\r\n```js\r\n/composables/store.js自动导入，方便直接调用\r\nimport stores from "./store/index"\r\n \r\nexport const useStore = stores\r\n```\r\n\r\n想使用哪个模块就使用哪个模块，例如我想使用 user 模块\r\n\r\n```vue\r\n<template>\r\n  <div>\r\n    <span>{{ user.name }}</span>\r\n    <span>{{ user.age }}</span>\r\n    <span>{{ user.sex }}</span>\r\n    <span>{{ user.token }}</span>\r\n  </div>\r\n</template>\r\n \r\n<script lang="ts" setup>\r\nconst user = useStore.user()\r\n<\/script>\r\n```\r\n\r\n其他的方法和正常使用 **pinia** 一样\r\n\r\n### Pinia的持久化存储\r\n\r\npinia默认是不会自动持久化存储的，当页面刷新时数据还是会丢失，此时需要使用自动持久化插件，Nuxt3的使用方法参考插件[官网文档](https://prazdevs.github.io/pinia-plugin-persistedstate/frameworks/nuxt-3.html)\r\n\r\n## Vueuse的使用\r\n\r\n`VueUse` 是一个基于 `Composition API` 的实用函数集合。\r\n\r\n一句话：它就是一个工具函数包；\r\n\r\n**1. 安装：**\r\n\r\n```bash\r\nyarn add @vueuse/nuxt @vueuse/core\r\n```\r\n\r\n**2. 配置 `nuxt.config.js`**\r\n\r\n```ts\r\n// nuxt.config.js\r\nexport default defineNuxtConfig({\r\n  // ... 其他配置\r\n  modules: [\r\n    // ...\r\n    \'@vueuse/nuxt\',\r\n  ],\r\n})\r\n```\r\n\r\n**3. 使用 VueUse 函数：**\r\n\r\n```xml\r\n<script setup lang="ts">\r\nconst { x, y } = useMouse()\r\n<\/script>\r\n\r\n<template>\r\n  <div>pos: {{x}}, {{y}}</div>\r\n</template>\r\n```\r\n\r\n## ssr底层原理\r\n\r\n```js\r\nlet server = require(\'express\')();\r\nconst Vue = require(\'vue\');\r\n// nuxt中利用 vue-server-renderer 实现服务端渲染\r\nconst renderer = require(\'vue-server-renderer\').createRenderer()\r\n\r\nserver.get(\'/api/home\', (req, res) => {\r\n\r\n  //0. 根据req，参数，兜库 \r\n\r\n  //1. 创建一个Vue实例\r\n\r\n  const app = new Vue({\r\n    data: {\r\n      url: req.url\r\n    },\r\n    template: `<div>hello ssr123,你访问的是{{url}}</div>`\r\n  })\r\n\r\n  // 服务端渲染\r\n  renderer.renderToString(app).then(\r\n    html => res.send(\r\n      `\r\n      <!DOCTYPE html>\r\n      <html lang="zh">\r\n      <head>\r\n        <meta charset="UTF-8">\r\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\r\n        <meta http-equiv="X-UA-Compatible" content="ie=edge">\r\n        <title></title>\r\n      </head>\r\n      <body>\r\n        ${html}\r\n      </body>\r\n      </html>\r\n    `\r\n    )\r\n  ).catch(\r\n    err => console.log(err)\r\n  )\r\n})\r\n\r\nserver.listen(3000) \r\n\r\n```\r\n\r\n',contentRendered:'<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>我们开发 toc 项目时，例如电商网站，往往需要考虑seo和首屏优化，这篇我们将讲述如何使用 nuxt3 实现服务器渲染，从而优化seo和首屏加载时间</p>\n</div>\n<h2 id="nuxt3的简介" tabindex="-1"><a class="header-anchor" href="#nuxt3的简介" aria-hidden="true">#</a> Nuxt3的简介</h2>\n<p>Nuxt3是基于Vue3发布的SSR框架，也是Vue全家桶系列的一员。如果你了解Nuxt2，应该也了解Nuxt3的使命和用途。但是如果你不了解，你需要先知道两个概念。</p>\n<ul>\n<li>SPA应用：也就是单页应用，这些多是在客户端的应用，不能进行SEO优化（搜索引擎优化）。</li>\n<li>SSR应用：在服务端进行渲染，渲染完成后返回给客户端，每个页面有独立的URL，对SEO友好。</li>\n</ul>\n<p>所以如果你开发的应用是企业网站、商品展示 、博客这类型的展示型网站，就需要使用搜索引擎喜欢的SSR应用。当我们明白这两个概念后，再来看Nuxt3的使命。因为Vue开发的应用默认是单页应用（SPA应用），但如果你想针对于搜索优化，就需要使用Vue的SSR模式开发，而<a href="https://nuxt.com/" target="_blank" rel="noopener noreferrer">Nuxt3<ExternalLinkIcon/></a>就是Vue的SSR开发的框架。\n<img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://img.jspang.com/ArticleImages/20220323_Nuxt003.png" data="aurora"></p>\n<h2 id="nuxt3的优势介绍" tabindex="-1"><a class="header-anchor" href="#nuxt3的优势介绍" aria-hidden="true">#</a> Nuxt3的优势介绍</h2>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://img.jspang.com/ArticleImages/20220323_Nuxt002.png" data="aurora"> 这是一张Nuxt3官网的图片，列出Nuxt3的新特性，一共12个。我们快速来解读一下。</p>\n<ul>\n<li>更轻量：以现代浏览器为基础的情况下，服务器部署和客户端产物最多减小75倍。</li>\n<li>更快：用动态服务端代码来优化冷启动。</li>\n<li>Hybird：增量动态生成和其他高级模式现在都成为可能。</li>\n<li>Suspense: 导航前后可在任何组件中获取数据。</li>\n<li>Composition API : 使用Composition API 和 Nuxt3的composables 实现真正的可复用性。</li>\n<li>Nuxt CLI ： 权限的零依赖体验，助你轻松搭建项目和集成模块。</li>\n<li>Nuxt Devtools ：专属调试工具，更多的信息和快速修复，在浏览器中高效工作。</li>\n<li>Nuxt Kit ：全新的基于 TypeScript 和跨版本兼容的模块开发。</li>\n<li>Webpack5 ： 更快的构建速度和更小的构建包，并且零配置。</li>\n<li>Vite：用Vite作为你的打包器，体验轻量级的快速HMR。</li>\n<li>Vue3 ： 完全支持Vue3语法，这一点特别关键。</li>\n<li>TypeScript：由原生TypeScript和ESM构成，没有额外配置步骤。</li>\n</ul>\n<h2 id="nuxt3-的安装" tabindex="-1"><a class="header-anchor" href="#nuxt3-的安装" aria-hidden="true">#</a> Nuxt3 的安装</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>npx nuxi init &lt;project-name>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><blockquote>\n<p>注意：<code>npx</code>是npm从5.2版开始增加的命令，所以说你的 npm 最小版本也要是5.2版本。查看npm版本的命令如下。</p>\n</blockquote>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>npm -v\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>如果你安装失败，或者安装很慢的话你需要多试几次，其实这个是国内网络问题造成的，道理就和你上不了Google是一样的。所以你可以使用科学上网解决这个问题。一般获取不到内容，就会得到下面一段警告。</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>could not fetch remote https://github.com/nuxt/starter\nMake sure you have installed git correctly   \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>直到出现下面的文字就算安装成功了。\n<img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="Nuxt3安装成功页面" originSrc="https://img.jspang.com/ArticleImages/20220323_Nuxt004.png" data="aurora"></p>\n<p>如果一直安装失败的话，下载Nuxt3的文件包，然后再用yarn命令进行安装</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code>https://github.com/nuxt/starter/tree/v3\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>打开网址可以看到，这个就是最简单的Nuxt3项目的目录，这时候你可以Clone下来，但我发现Clone还是会报错，意思是无法找到仓库位置。那这时候我只能用最原始的下载ZIP（Download ZIP）的方式了。\n下载完成后，再使用yarn命令进行安装。</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code>yarn install\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>稍等一会，就可以安装成功了。安装成功以后，再使用</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code>yarn dev\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>然后打开浏览器，输入<code>http://localhost:3000</code>，就可以看到下面的页面了。 <img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://img.jspang.com/ArticleImages/20220323_Nuxt001.png" data="aurora"></p>\n<h2 id="nuxt3的目录结构" tabindex="-1"><a class="header-anchor" href="#nuxt3的目录结构" aria-hidden="true">#</a> Nuxt3的目录结构</h2>\n<p>默认的项目里就如下几个文件和目录</p>\n<div class="language-JSON ext-JSON line-numbers-mode"><pre v-pre class="language-JSON"><code>- .nuxt               // 自动生成的目录，用于展示结果\n- node_modules        // 项目依赖包存放目录\n- .gitignore          // Git的配置目录，比如一些文件不用Git管理就可以在这个文件中配置\n- app.vue             // 项目入口文件，你可以在这里配置路由的出口\n- nuxt.config.ts      // nuxt项目的配置文件 ，这个里边可以配置Nuxt项目的方法面面\n- package-lock.json   // 锁定安装时包的版本，以保证其他人在 npm install时和你保持一致\n- package.json        // 包的配置文件和项目的启动调式命令配置\n- README.md           // 项目的说明文件\n- tsconfig.json       // TypeScript的配置文件\n \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>随着我们的开发目录也会越来越多，比如常用的还有下面三个目录。</p>\n<div class="language-JSON ext-JSON line-numbers-mode"><pre v-pre class="language-JSON"><code>- pages               // 开发的页面目录\n- components          // 组件目录\n- assets              // 静态资源目录\n- layouts             // 项目布局目录\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>好了，现在我们对Nuxt3的基础目录了解后，接下来我们试着去作一个HelloWorld的程序。</p>\n<h3 id="编写hello-world" tabindex="-1"><a class="header-anchor" href="#编写hello-world" aria-hidden="true">#</a> 编写Hello World</h3>\n<p>通过上面的介绍，我们知道了<code>App.vue</code> 这个文件是项目的入口文件。用VSCode打开文件，可以看到文件的基础结构。</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NuxtWelcome</span> <span class="token punctuation">/></span></span> \n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>其中<code>&lt;NuxtWelcome /&gt;</code> 就是一个框架自带的组件，我们直接删除就可以，不用纠结删除这个组件。删除后，在 <code>\\components</code> 目录下新建一个文件，叫做<code>HelloWorld.vue</code> 然后编写下面的代码。</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">import</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>然后再回到<code>app.vue</code>文件中直接写入这个 <code>HelloWorld</code>组件，回到浏览器，就可以看到 HelloWord 效果了。</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hello-world</span> <span class="token punctuation">/></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="nuxt3页面和约定路由的使用" tabindex="-1"><a class="header-anchor" href="#nuxt3页面和约定路由的使用" aria-hidden="true">#</a> Nuxt3页面和约定路由的使用</h2>\n<p>Nuxt3的一个特点就是<strong>约定式开发</strong>，讲究的是约定大于配置。如果你熟悉 <strong>umi</strong> 的话，那你可以很快的了解并上手</p>\n<ul>\n<li>在 <strong>components</strong> 文件夹下的 vue 文件，无需引入，可以直接在 app.vue 中使用</li>\n</ul>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Welcome to the homepage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AppAlert</span><span class="token punctuation">></span></span> // components/AppAlert 文件\n      This is an auto-imported component.\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>AppAlert</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ul>\n<li>在 <strong>pages</strong> 文件夹下的 vue 文件，每一个文件<code>pages/</code>代表显示其内容的不同路径。要使用页面，请创建<code>pages/index.vue</code>文件并将  <code>&lt;NuxtPage/&gt;</code> 添加到app.vue，这样你就可以刷新浏览器，看到 <strong>pages/index</strong> 文件中的内容了</li>\n</ul>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NuxtPage</span><span class="token punctuation">/></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>当我们在 <strong>pages</strong> 文件夹下有多个文件，需要来回跳转时，我们可以借助 **NuxtLink ** 标签来进行路由跳转</p>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NuxtPage</span><span class="token punctuation">/></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NuxtLink</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/demo1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>前往Demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>NuxtLink</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!-- 这样就可以跳转到 pages/Demo1 文件页面了 --\x3e</span> \n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="动态路由的使用" tabindex="-1"><a class="header-anchor" href="#动态路由的使用" aria-hidden="true">#</a> 动态路由的使用</h3>\n<p>我们在 <strong>pages</strong> 文件夹下创建的文件中，文件名中用<code>[ ]</code>扩起来就可以了，例demo2-[id].vue，这样我们就创建了一个动态路由</p>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code>// demo2-[id].vue\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>获取的id:{{ $route.params.id }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NuxtLink</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/demo1-34<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>前往demo2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>NuxtLink</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>如果想传递多个参数，需要建立一个文件夹，然后在文件夹上使用<code>[ ]</code>来确定参数。比如我们要传递一个name的参数过来。就需要把目录和文件建立成这样。</p>\n<div class="language-JSON ext-JSON line-numbers-mode"><pre v-pre class="language-JSON"><code>-|  pages/\n---| index.vue\n---| goods-[name]/\n-----| demo2-[id].vue\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>然后修改一些<code>demo2-[id].vue</code>的文件，修改获取的参数。</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>获取的id:{{ id }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>获取的name:{{ name }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> route <span class="token operator">=</span> <span class="token function">useRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> id <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span>route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span>route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>再到<code>index.vue</code> 修改链接，传递两个参数。</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NuxtLink</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/goods-zhangsan/demo2-38<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Demo2.vue<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>NuxtLink</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>完成后再到浏览器中查看结果，可以看到已经接收到了两个参数</p>\n<h3 id="嵌套路由的使用" tabindex="-1"><a class="header-anchor" href="#嵌套路由的使用" aria-hidden="true">#</a> 嵌套路由的使用</h3>\n<p>嵌套路由的建立非常容易，用一句话解释为：目录和文件名同名，就制作了一个嵌套路由。\n制作一个嵌套路由页面一般需要三步：</p>\n<ol>\n<li>建立嵌套路由的文件夹（约定大于配置）</li>\n<li>创建和文件夹相同名称的文件（父页面）</li>\n<li>在新建文件夹下任意创建子页面</li>\n</ol>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>|--pages/\n|----parent/\n|------child.vue\n|----parent.vue\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>先在<code>\\pages</code>目录下，新建一个文件夹 <code>parent</code> ，然后在 <code>pages</code> 目录下再建立一个<code>parent.vue</code>的文件</p>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code>parent.vue 页面\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Parent Page<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token comment">&lt;!-- 子页面的出口--\x3e</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NuxtChild</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>NuxtChild</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>这里的  <code>NuxtChild</code>  就是嵌套路由的出口，所以如果是嵌套路由，就必须要加上这个标签。这是Nuxt的一个内置组件。 有了父页面之后，在新建的parent文件夹下，再建立一个 <code>child.vue</code>子页面。然后编写代码。</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Child Page<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>然后为了看到效果，我们还需要一个路由链接过来。直接到<code>index.uve</code>增加路由链接。</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NuxtLink</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/parent/child<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>/parent/child<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>NuxtLink</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>多个子页面的制作与制作一个单页面是相同的。在<code>\\pages\\parent\\</code>文件夹下面再新建一个文件 <code>two.vue</code>。然后编写代码。</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Two Page<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>写完后再到<code>index.vue</code>页面，增加导航路由。</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NuxtLink</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/parent/two<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>/parent/two<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>NuxtLink</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="编程式路由导航-传参" tabindex="-1"><a class="header-anchor" href="#编程式路由导航-传参" aria-hidden="true">#</a> 编程式路由导航&amp;传参</h2>\n<p><code>navigateTo</code>是一个路由器帮助函数，允许以编程方式在您的 Nuxt 应用程序中导航用户。如下面的例子，<strong>注意：确保在调用它时始终使用<code>await</code>or<code>return</code>结果</strong></p>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>codego<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>编程式导航<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">const</span> <span class="token function-variable function">codego</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">await</span> <span class="token function">navigateTo</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/demo2"</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">sort</span><span class="token operator">:</span> <span class="token string">"asc"</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>必须使用 <strong>params</strong> 进行传参，否则会报错</p>\n<h2 id="路由中间件" tabindex="-1"><a class="header-anchor" href="#路由中间件" aria-hidden="true">#</a> 路由中间件</h2>\n<p>Nuxt 提供了一个可自定义的路由中间件框架，您可以在整个应用程序中使用它，非常适合在导航到特定路由之前提取要运行的代码。路由中间件分为三种：</p>\n<ol>\n<li>匿名（或内联）路由中间件，直接在使用它们的页面中定义。</li>\n<li>具名路由中间件，放在<code>middleware/</code>目录下，页面使用时会异步导入自动加载。（<strong>注意</strong>：路由中间件名称被规范化为 kebab-case，因此<code>someMiddleware</code>变为<code>some-middleware</code>。）</li>\n<li>全局路由中间件，放在<code>middleware/</code>目录下（带后缀<code>.global</code>），每次路由变化都会自动运行。</li>\n</ol>\n<h3 id="匿名路由中间件" tabindex="-1"><a class="header-anchor" href="#匿名路由中间件" aria-hidden="true">#</a> 匿名路由中间件</h3>\n<p>使用 <code>definePageMeta</code> 来实现匿名路由中间件，该<code>validate</code>属性接受<code>route</code>作为参数。您可以返回一个布尔值来确定这是否是要使用此页面呈现的有效路由。如果您返回<code>false</code>，并且找不到另一个匹配项，这将导致 404 错误。也可以直接返回一个带<code>statusCode</code>/的对象<code>statusMessage</code>来立即响应错误（不会检查其他匹配项）。</p>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>id:{{ id }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>name:{{ name }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NuxtLink</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>前往index<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>NuxtLink</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> route <span class="token operator">=</span> <span class="token function">useRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> id <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span>route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span>route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">definePageMeta</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token function-variable function">validate</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">route</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n     <span class="token comment">// 通过就 return true</span>\n    <span class="token comment">// 不通过时可以使用下面的代码</span>\n    <span class="token keyword">throw</span> <span class="token function">createError</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">statusCode</span><span class="token operator">:</span> <span class="token number">404</span><span class="token punctuation">,</span> <span class="token literal-property property">statusMessage</span><span class="token operator">:</span> <span class="token string">\'拒绝访问\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scss<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h3 id="具名路由中间件" tabindex="-1"><a class="header-anchor" href="#具名路由中间件" aria-hidden="true">#</a> 具名路由中间件</h3>\n<p>在 middleware 文件夹下创建一个 js 文件，例如 auth.js</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineNuxtRouteMiddleware</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> <span class="token keyword">from</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 目标路由信息</span>\n     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 来时路由信息</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n<span class="token function">definePageMeta</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">middleware</span><span class="token operator">:</span> <span class="token string">\'auth\'</span> <span class="token comment">// 使用哪一个路由中间件</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="布局模板" tabindex="-1"><a class="header-anchor" href="#布局模板" aria-hidden="true">#</a> 布局模板</h2>\n<p>布局模板的作用就是你先定义好一个布局页面，然后提取一些通用的UI或代码到可重用的模板中，提高代码复用性，从而降低代码的复杂度，让代码重用性提高。</p>\n<p>新建一个文件夹<code>layouts\\</code>然后再里边写编写一个 <code>defalut.vue</code>文件，代码如下。</p>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n    我是布局模板，default.vue\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token punctuation">/></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>上边这段代码就相当于你创建了一个布局模板。有了这个模板后，可以在任何你想要使用的页面中用<code>NuxtLayout</code>标签为页面赋予模板中的内容。</p>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NuxtLayout</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>default<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n      我是插槽里面的内容\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>NuxtLayout</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>如果想使用多个插槽的话，可以给插槽具名，你可以在页面中通过 <code>&lt;template #xxx &gt;</code> 的形式来指定对应的模板插槽</p>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n    我是布局模板，default.vue\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>one<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>two<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NuxtLayout</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>default<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#one</span><span class="token punctuation">></span></span>\n      我是one中的内容\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#two</span><span class="token punctuation">></span></span> 我是two中的内容 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>NuxtLayout</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="自定义组件" tabindex="-1"><a class="header-anchor" href="#自定义组件" aria-hidden="true">#</a> 自定义组件</h2>\n<p>Nuxt3的所有自定义组件，必须写在<code>components</code>目录下，写在这个目录下他会自动加载到页面中，而不用我们自己不断的重复引入到每个页面中。比如现在要创建一个<code>TheFooter</code>的组件，我们在项目跟目录建立一个文件夹<code>components</code> ，然后建立一个文件<code>TheFooter.vue</code>。</p>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>The Footer Box<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TheFooter</span> <span class="token punctuation">/></span></span>  // 这样就可以直接使用自定义组件\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>在实际工作中组件会非常多，所以会把组件分门别类的放置。那这种有层级的组件，我们要如何引用那。比如在<code> components</code>文件夹下面，新建一个 <code>test</code>文件夹，然后在test文件夹下面再创建一个 <code>MyButton.vue</code>文件。</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>MyButton<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>写完这个组件后，最关键的一步，就是在页面里如何引用到这个组件。方法很简单，只要在这个页面的前面加上文件夹的名称就可以了</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TestMyButton</span> <span class="token punctuation">/></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="模块化代码-composable文件夹的试用" tabindex="-1"><a class="header-anchor" href="#模块化代码-composable文件夹的试用" aria-hidden="true">#</a> 模块化代码 Composable文件夹的试用</h2>\n<p>在开发中我们经常会有一些通用的业务逻辑代码，需要模块化管理，这时候就可以试用<code>Composable</code> 这个文件夹来编写。比如我们常用的显示当前时间，这种常用的通用代码，就可以编写成一个单独的代码段，然后在每个页面进行使用。</p>\n<h3 id="composable中创建time-js的编写" tabindex="-1"><a class="header-anchor" href="#composable中创建time-js的编写" aria-hidden="true">#</a> Composable中创建time.js的编写</h3>\n<p>新建一个文件夹<code>composables</code> 然后在文件夹里边，新建一个文件<code>time.js</code> ，然后编写下面的代码。这段代码你一定编写过，所以就不给大家讲解里边的具体含义了。你可以直接复制这段代码。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">export</span>  <span class="token keyword">const</span> <span class="token function-variable function">getTime</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">{</span>\n  <span class="token keyword">const</span> timezone <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> offset_GMT <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTimezoneOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> nowDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> today <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>nowDate <span class="token operator">+</span> offset_GMT <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span> <span class="token operator">+</span> timezone <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> date <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> <span class="token function">twoDigits</span><span class="token punctuation">(</span>today<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> <span class="token function">twoDigits</span><span class="token punctuation">(</span>today<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> time <span class="token operator">=</span> <span class="token function">twoDigits</span><span class="token punctuation">(</span>today<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> <span class="token function">twoDigits</span><span class="token punctuation">(</span>today<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> <span class="token function">twoDigits</span><span class="token punctuation">(</span>today<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> timeString <span class="token operator">=</span><span class="token string">\'当前时间：\'</span> <span class="token operator">+</span> date <span class="token operator">+</span> <span class="token string">\'  \'</span> <span class="token operator">+</span> time<span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> timeString<span class="token punctuation">;</span>\n\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">twoDigits</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">"0"</span> <span class="token operator">+</span> val<span class="token punctuation">;</span>\n  <span class="token keyword">return</span> val<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>写完之后，如何在页面中使用呢？在<code>pages</code> 文件夹下面，新建一个<code>\\pages\\demo3.vue</code> 的文件，然后你就可以直接在这个页面中使用刚才写的获得时间的方法了。</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{ time }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> time <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>打开浏览器就可以获得当前时间了。 你可以把任何你在项目中经常使用的代码，封装到这个文件夹里，实现代码的复用。这个文件夹的功能和组件很相似，只是组件是UI部分的代码复用，而这个是业务逻辑代码的复用。</p>\n<h3 id="composables的引入规则" tabindex="-1"><a class="header-anchor" href="#composables的引入规则" aria-hidden="true">#</a> composables的引入规则</h3>\n<p><code>composables</code> 文件夹的引入规则是，<strong>只有顶层文件会被引入</strong>。也就是说我们如果在这个文件下再新建一个文件夹，是不会被引入到 页面中实现代码复用的。 比如下面的文件格式就没办法引入。</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code>--|composables\n----|test\n------|test.js\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>但是有一种是例外的，就是我们可以写成下面的这种形式。</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code>--|composables\n----|test\n------|index.js\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>我们这里测试一下，新建一个<code>\\test</code> 文件夹，然后在它的下面再创建一个<code>index.js</code> 文件。写入下面的代码。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">test</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'index\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>然后回到<code>Demo3.vue</code> 页面使用<code>test( )</code> 方法，结果是可以使用这个方法的。</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{ time }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> time <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="nuxt3中的数据请求" tabindex="-1"><a class="header-anchor" href="#nuxt3中的数据请求" aria-hidden="true">#</a> Nuxt3中的数据请求</h2>\n<p>Nuxt3中提供了四种方法：<code>useAsyncData</code> 、<code>useFetch</code> 、<code>useLazyFetch</code> 、<code>useLazyAsyncData</code> 。提供的四个方法，都是获取后台数据的，但是使用场景和使用方法有所不同。</p>\n<h3 id="useasyncdata的使用" tabindex="-1"><a class="header-anchor" href="#useasyncdata的使用" aria-hidden="true">#</a> useAsyncData的使用</h3>\n<p>使用<code>useAsyncData</code> 异步获取数据，它可以使用在页面中，组件和插件中。我们先通过这个方法来获取一下服务端的数据。 在pages文件夹下，新建一个页面，然后编写下面的代码。</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">import</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span>\n<span class="token comment">// 第一个参数是一个字符串，相当于给这个请求起一个名字</span>\n<span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">useAsyncData</span><span class="token punctuation">(</span><span class="token string">"getList"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>\n  <span class="token function">$fetch</span><span class="token punctuation">(</span><span class="token string">"请求地址"</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>$fetch( )方法是nuxt3提供的内置方法，我们直接可以使用。打开浏览器的调试面包，在<code>终端</code>里可以看到返回值是一个对象，对象里有四个属性。</p>\n<ul>\n<li>data: 返回的数据，我们需要的服务器数据就在这个属性里。</li>\n<li>error：是否存在错误，如果存在错误，可以在这个属性中获得，返回的是一个对象。</li>\n<li>pending：这次请求的状态，返回的是布尔值。</li>\n<li>refresh：这个返回的是一个函数，可以用来刷新 handler 函数返回的数据。</li>\n</ul>\n<p>这个方法的一个特点是，它可以进行很多选项的配置，但是在真实开发中，其实我们用的不多。最常用的就是<code>lazy</code> 选项，比如我们设置成<code>true</code> 就是需要数据都返回后，才会显示出来 ，简单说就是会阻塞页面。默认是false。 比如要设置lazy为true，就可以这样写。因为我们的数据太少，所以基本看不出来效果。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">useAsyncData</span><span class="token punctuation">(</span>\n  <span class="token string">"getList"</span><span class="token punctuation">,</span>\n  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">$fetch</span><span class="token punctuation">(</span><span class="token string">"请求地址"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    <span class="token literal-property property">lazy</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>这个可配置的选项<code>option</code> 其实还是挺多的，有七项。如果想详细了解的，可以到<a href="https://v3.nuxtjs.org/api/composables/use-async-data" target="_blank" rel="noopener noreferrer">官方<ExternalLinkIcon/></a>去看一下</p>\n<h3 id="usefetch的使用" tabindex="-1"><a class="header-anchor" href="#usefetch的使用" aria-hidden="true">#</a> useFetch的使用</h3>\n<p><code>useFetch</code> 可以理解为所有的都选择默认配置的<code>useAsyncData</code> 方法。比如还是上面的请求，我们就可以写成下面的形式。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">useFetch</span><span class="token punctuation">(</span><span class="token string">"请求地址"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>这样我们依然可以获取数据，当然也是可以传递参数和配置请求方法的。比如我们要设置请求方法是get，传递id是1, 就可以写成下面的形式。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">useFetch</span><span class="token punctuation">(</span><span class="token string">"http://121.36.81.61:8000/getTenArticleList"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">"get"</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>useLazyAsyncData</code> 和<code>useLazyFetch</code> 。他们只是把配置选项中的<code>Lazy</code> 设置成了true， 也就是会阻塞页面。</p>\n<h2 id="nuxt3-中seo相关的配置" tabindex="-1"><a class="header-anchor" href="#nuxt3-中seo相关的配置" aria-hidden="true">#</a> Nuxt3 中SEO相关的配置</h2>\n<p>使用Nuxt3框架解决的主要问题就是要对搜索引擎友好，那为什么搜索引擎可以搜到我想要的网站？这要归功于HTML中的<code>Mate</code>标签和<code>title</code> 标签。</p>\n<h3 id="title-和-meta-标签的作用" tabindex="-1"><a class="header-anchor" href="#title-和-meta-标签的作用" aria-hidden="true">#</a> title 和 meta 标签的作用</h3>\n<p><strong>title标签</strong>：主要是为了告诉搜索引擎我们的网站标题是什么，然后搜索引擎才会根据你提供的的title给你打上tag，用户在搜索的时候才会搜索到你。</p>\n<p><strong>meta标签</strong>：这个标签根据name的不同有很多种，和SEO相关的主要是<code>name=description</code> 和<code>name=keywords</code> 这两种，如果不设置这两个标签，对SEO的效果就会有所影响。 所以我们在开发需要SEO的网站时，对这两个标签一定要进行设置。你可以用两种方法对meta标签进行设置。</p>\n<p>1.使用useHead( )方法</p>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Demo Page<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n<span class="token function">useHead</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">" 星空的博客  "</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">viewport</span><span class="token operator">:</span> <span class="token string">"width=device-width,initial-scale=1,maximum-scale=1 "</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">charset</span><span class="token operator">:</span> <span class="token string">"utf-8"</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"description"</span><span class="token punctuation">,</span> <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">"星空的前端博客"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"keywords"</span><span class="token punctuation">,</span> <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">"星空"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>2.直接在模板中使用标签</p>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Head</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Title</span><span class="token punctuation">></span></span>{{ title }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Title</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span> <span class="token attr-name">:content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Head</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>技术胖的博客<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> title <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">"星空的博客"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>从代码中可以看到，我们直接使用了<code>Head</code>标签，然后在里边还可以使用<code>Meta</code>标签和<code>Title</code>标签，可以设置这两个标签后，关于SEO的设置就都可以作了。 我们使用Nuxt的意义就在于可以有很好的SEO效果，所以在你开发的时候，一定要对页面进行标题、描述和关键词的设置和编写。</p>\n<h2 id="nuxt3中pinia的使用" tabindex="-1"><a class="header-anchor" href="#nuxt3中pinia的使用" aria-hidden="true">#</a> Nuxt3中pinia的使用</h2>\n<p><strong>1. 安装：</strong></p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">add</span> pinia @pinia/nuxt\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><strong>2. 配置 <code>nuxt.config.js</code></strong></p>\n<div class="language-typescript ext-ts line-numbers-mode"><pre v-pre class="language-typescript"><code><span class="token comment">// nuxt.config.js</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineNuxtConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// ... 其他配置</span>\n  modules<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token comment">// ...</span>\n    <span class="token string">\'@pinia/nuxt\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>我们可以利用composables目录的自动导入功能，在该目录下创建store目录用于存放pinia的store文件，另外在composables目录下创建store.ts文件（文件名可自拟）</p>\n<div class="language-json ext-json line-numbers-mode"><pre v-pre class="language-json"><code>-|  composables/\n--| store/    \n---| users/\n-----| index.js\n---| index.js\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>我们可以在 <strong>store</strong> 文件夹下创建多个文件夹，每个文件夹代表一个模块，最后我们通过 <strong>store</strong> 文件夹下的 <strong>index.js</strong> 文件引入所有的模块，例如下面例子</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token operator">/</span>composables<span class="token operator">/</span>store<span class="token operator">/</span>users<span class="token operator">/</span>index<span class="token punctuation">.</span>js\n<span class="token keyword">export</span> <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    <span class="token function-variable function">state</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token punctuation">{</span>\n            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Dragon Wu"</span><span class="token punctuation">,</span>\n            <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>\n            <span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token string">"male"</span><span class="token punctuation">,</span>\n            <span class="token literal-property property">token</span><span class="token operator">:</span> <span class="token string">"xxx"</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code> <span class="token operator">/</span>composables<span class="token operator">/</span>store<span class="token operator">/</span>index<span class="token punctuation">.</span>js索引所有store\n<span class="token keyword">import</span> <span class="token punctuation">{</span>user<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./user/index"</span>\n<span class="token operator">...</span><span class="token punctuation">.</span>\n<span class="token comment">//模块</span>\n<span class="token keyword">const</span> stores <span class="token operator">=</span> <span class="token punctuation">{</span>\n    user\n    <span class="token operator">...</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n \n<span class="token keyword">export</span> <span class="token keyword">default</span> stores\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token operator">/</span>composables<span class="token operator">/</span>store<span class="token punctuation">.</span>js自动导入，方便直接调用\n<span class="token keyword">import</span> stores <span class="token keyword">from</span> <span class="token string">"./store/index"</span>\n \n<span class="token keyword">export</span> <span class="token keyword">const</span> useStore <span class="token operator">=</span> stores\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>想使用哪个模块就使用哪个模块，例如我想使用 user 模块</p>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{{ user.name }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{{ user.age }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{{ user.sex }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{{ user.token }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n \n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span> <span class="token attr-name">setup</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">const</span> user <span class="token operator">=</span> useStore<span class="token punctuation">.</span><span class="token function">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>其他的方法和正常使用 <strong>pinia</strong> 一样</p>\n<h3 id="pinia的持久化存储" tabindex="-1"><a class="header-anchor" href="#pinia的持久化存储" aria-hidden="true">#</a> Pinia的持久化存储</h3>\n<p>pinia默认是不会自动持久化存储的，当页面刷新时数据还是会丢失，此时需要使用自动持久化插件，Nuxt3的使用方法参考插件<a href="https://prazdevs.github.io/pinia-plugin-persistedstate/frameworks/nuxt-3.html" target="_blank" rel="noopener noreferrer">官网文档<ExternalLinkIcon/></a></p>\n<h2 id="vueuse的使用" tabindex="-1"><a class="header-anchor" href="#vueuse的使用" aria-hidden="true">#</a> Vueuse的使用</h2>\n<p><code>VueUse</code> 是一个基于 <code>Composition API</code> 的实用函数集合。</p>\n<p>一句话：它就是一个工具函数包；</p>\n<p><strong>1. 安装：</strong></p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">add</span> @vueuse/nuxt @vueuse/core\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><strong>2. 配置 <code>nuxt.config.js</code></strong></p>\n<div class="language-typescript ext-ts line-numbers-mode"><pre v-pre class="language-typescript"><code><span class="token comment">// nuxt.config.js</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineNuxtConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// ... 其他配置</span>\n  modules<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token comment">// ...</span>\n    <span class="token string">\'@vueuse/nuxt\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><strong>3. 使用 VueUse 函数：</strong></p>\n<div class="language-xml ext-xml line-numbers-mode"><pre v-pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\nconst { x, y } = useMouse()\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>pos: {{x}}, {{y}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="ssr底层原理" tabindex="-1"><a class="header-anchor" href="#ssr底层原理" aria-hidden="true">#</a> ssr底层原理</h2>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">let</span> server <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'express\'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> Vue <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'vue\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// nuxt中利用 vue-server-renderer 实现服务端渲染</span>\n<span class="token keyword">const</span> renderer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'vue-server-renderer\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createRenderer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\nserver<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">\'/api/home\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\n  <span class="token comment">//0. 根据req，参数，兜库 </span>\n\n  <span class="token comment">//1. 创建一个Vue实例</span>\n\n  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">url</span><span class="token operator">:</span> req<span class="token punctuation">.</span>url\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>hello ssr123,你访问的是{{url}}&lt;/div></span><span class="token template-punctuation string">`</span></span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n  <span class="token comment">// 服务端渲染</span>\n  renderer<span class="token punctuation">.</span><span class="token function">renderToString</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>\n    <span class="token parameter">html</span> <span class="token operator">=></span> res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>\n      <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n      &lt;!DOCTYPE html>\n      &lt;html lang="zh">\n      &lt;head>\n        &lt;meta charset="UTF-8">\n        &lt;meta name="viewport" content="width=device-width, initial-scale=1.0">\n        &lt;meta http-equiv="X-UA-Compatible" content="ie=edge">\n        &lt;title>&lt;/title>\n      &lt;/head>\n      &lt;body>\n        </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>html<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\n      &lt;/body>\n      &lt;/html>\n    </span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">)</span>\n  <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>\n    <span class="token parameter">err</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\nserver<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span> \n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div>',date:"2023-02-10",deps:[],hoistedTags:[],links:[],pathInferred:"/nuxt/2023/20230210.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"20230210",filePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/nuxt/2023/20230210.md",filePathRelative:"nuxt/2023/20230210.md",componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/nuxt/2023/20230210.html.vue",componentFilePathRelative:"pages/nuxt/2023/20230210.html.vue",componentFileChunkName:"v-6cdfe61c",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/nuxt/2023/20230210.html.js",dataFilePathRelative:"pages/nuxt/2023/20230210.html.js",dataFileChunkName:"v-6cdfe61c",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/nuxt/2023/20230210.html",htmlFilePathRelative:"nuxt/2023/20230210.html"},{data:{key:"v-2497784b",path:"/html/2022/20220923.html",title:"使用 canvas 标签实现签名功能",lang:"zh-CN",frontmatter:{title:"使用 canvas 标签实现签名功能",date:"2022-09-23T00:00:00.000Z",tags:["html"],categories:["canvas"]},excerpt:"",headers:[],git:{updatedTime:null,contributors:[]}},key:"v-2497784b",path:"/html/2022/20220923.html",title:"使用 canvas 标签实现签名功能",lang:"zh-CN",frontmatter:{title:"使用 canvas 标签实现签名功能",date:"2022-09-23T00:00:00.000Z",tags:["html"],categories:["canvas"]},excerpt:"",headers:[],content:'\r\n::: tip\r\n\r\ncanvas 标签我们日常中会经常用到，这一篇用 canvas 标签实现一个简单的电子签名功能\r\n\r\n:::\r\n\r\n# 代码部分\r\n\r\n```js\r\n<!DOCTYPE html>\r\n<html lang="en">\r\n  <head>\r\n    <meta charset="UTF-8" />\r\n    <meta http-equiv="X-UA-Compatible" content="IE=edge" />\r\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\r\n    <title>Document</title>\r\n    <script src="./utils.js"><\/script>\r\n    <style>\r\n      * {\r\n        margin: 0;\r\n        padding: 0;\r\n      }\r\n      .cvs {\r\n          border: 1px solid skyblue;\r\n          position: relative;\r\n          left: 700px;\r\n          top: 40px;\r\n      }\r\n    </style>\r\n  </head>\r\n  <body>\r\n    <canvas class="cvs" width="500" height="300"></canvas>\r\n    <script>\r\n       const cvs = document.querySelector(\'.cvs\') // 获取 canvas 标签\r\n       const ctx = cvs.getContext(\'2d\') // 获取 canvas 对象，也就是渲染实例\r\n       let isDrawing = false // 开关\r\n       cvs.addEventListener(\'mousedown\',e => {\r\n           isDrawing = true\r\n           ctx.moveTo(e.offsetX,e.offsetY) // 定位，初始化鼠标位置\r\n       })\r\n       cvs.addEventListener(\'mousemove\',e => {\r\n          if (isDrawing) {\r\n            ctx.lineTo(e.offsetX,e.offsetY) // 绘画\r\n            ctx.stroke()  // 渲染\r\n          }\r\n      })\r\n      cvs.addEventListener(\'mouseup\',e => {\r\n          isDrawing = false\r\n      })\r\n      \r\n    <\/script>\r\n\r\n</body>\r\n</html>\r\n\r\n```\r\n\r\n',contentRendered:'<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>canvas 标签我们日常中会经常用到，这一篇用 canvas 标签实现一个简单的电子签名功能</p>\n</div>\n<h1 id="代码部分" tabindex="-1"><a class="header-anchor" href="#代码部分" aria-hidden="true">#</a> 代码部分</h1>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span>\n<span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span>head<span class="token operator">></span>\n    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span> <span class="token operator">/</span><span class="token operator">></span>\n    <span class="token operator">&lt;</span>meta http<span class="token operator">-</span>equiv<span class="token operator">=</span><span class="token string">"X-UA-Compatible"</span> content<span class="token operator">=</span><span class="token string">"IE=edge"</span> <span class="token operator">/</span><span class="token operator">></span>\n    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span> <span class="token operator">/</span><span class="token operator">></span>\n    <span class="token operator">&lt;</span>title<span class="token operator">></span>Document<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>\n    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"./utils.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>\n    <span class="token operator">&lt;</span>style<span class="token operator">></span>\n      <span class="token operator">*</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">margin</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token literal-property property">padding</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token punctuation">.</span>cvs <span class="token punctuation">{</span>\n          <span class="token literal-property property">border</span><span class="token operator">:</span> 1px solid skyblue<span class="token punctuation">;</span>\n          <span class="token literal-property property">position</span><span class="token operator">:</span> relative<span class="token punctuation">;</span>\n          <span class="token literal-property property">left</span><span class="token operator">:</span> 700px<span class="token punctuation">;</span>\n          <span class="token literal-property property">top</span><span class="token operator">:</span> 40px<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>\n  <span class="token operator">&lt;</span>body<span class="token operator">></span>\n    <span class="token operator">&lt;</span>canvas <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"cvs"</span> width<span class="token operator">=</span><span class="token string">"500"</span> height<span class="token operator">=</span><span class="token string">"300"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>canvas<span class="token operator">></span>\n    <span class="token operator">&lt;</span>script<span class="token operator">></span>\n       <span class="token keyword">const</span> cvs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">\'.cvs\'</span><span class="token punctuation">)</span> <span class="token comment">// 获取 canvas 标签</span>\n       <span class="token keyword">const</span> ctx <span class="token operator">=</span> cvs<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">\'2d\'</span><span class="token punctuation">)</span> <span class="token comment">// 获取 canvas 对象，也就是渲染实例</span>\n       <span class="token keyword">let</span> isDrawing <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment">// 开关</span>\n       cvs<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'mousedown\'</span><span class="token punctuation">,</span><span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n           isDrawing <span class="token operator">=</span> <span class="token boolean">true</span>\n           ctx<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>offsetX<span class="token punctuation">,</span>e<span class="token punctuation">.</span>offsetY<span class="token punctuation">)</span> <span class="token comment">// 定位，初始化鼠标位置</span>\n       <span class="token punctuation">}</span><span class="token punctuation">)</span>\n       cvs<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'mousemove\'</span><span class="token punctuation">,</span><span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span>isDrawing<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>offsetX<span class="token punctuation">,</span>e<span class="token punctuation">.</span>offsetY<span class="token punctuation">)</span> <span class="token comment">// 绘画</span>\n            ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 渲染</span>\n          <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      cvs<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'mouseup\'</span><span class="token punctuation">,</span><span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n          isDrawing <span class="token operator">=</span> <span class="token boolean">false</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      \n    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>\n\n<span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br></div></div>',date:"2022-09-23",deps:[],hoistedTags:[],links:[],pathInferred:"/html/2022/20220923.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"20220923",filePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/html/2022/20220923.md",filePathRelative:"html/2022/20220923.md",componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/html/2022/20220923.html.vue",componentFilePathRelative:"pages/html/2022/20220923.html.vue",componentFileChunkName:"v-2497784b",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/html/2022/20220923.html.js",dataFilePathRelative:"pages/html/2022/20220923.html.js",dataFileChunkName:"v-2497784b",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/html/2022/20220923.html",htmlFilePathRelative:"html/2022/20220923.html"},{data:{key:"v-117b5e97",path:"/html/2022/20221230.html",title:"使用 canvas 标签实现图片水印",lang:"zh-CN",frontmatter:{title:"使用 canvas 标签实现图片水印",date:"2022-12-30T00:00:00.000Z",tags:["html"],categories:["canvas"]},excerpt:"",headers:[],git:{updatedTime:null,contributors:[]}},key:"v-117b5e97",path:"/html/2022/20221230.html",title:"使用 canvas 标签实现图片水印",lang:"zh-CN",frontmatter:{title:"使用 canvas 标签实现图片水印",date:"2022-12-30T00:00:00.000Z",tags:["html"],categories:["canvas"]},excerpt:"",headers:[],content:'\r\n::: tip\r\n\r\n我们日常开发中，经常碰到给图片或者背景添加水印，这一篇以图片为例实现水印功能\r\n\r\n:::\r\n\r\n# 代码部分\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang="en">\r\n  <head>\r\n    <meta charset="UTF-8" />\r\n    <meta http-equiv="X-UA-Compatible" content="IE=edge" />\r\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\r\n    <title>Document</title>\r\n    <script src="./utils.js"><\/script>\r\n    <style>\r\n      * {\r\n        margin: 0;\r\n        padding: 0;\r\n      }\r\n    </style>\r\n  </head>\r\n  <body>\r\n    <canvas id="img"></canvas>\r\n    <script>\r\n     \r\n    function setWatermark (imgUrl, str) {\r\n      var canvasImg = document.querySelector(`#img`);\r\n      var ctxImg = canvasImg.getContext("2d"); // 获取画布canvas实例\r\n      var img = new Image(); // 获取img实例\r\n      img.src =imgUrl;  // img图片\r\n      img.width = 500   // img宽度\r\n      img.height = 400  // img高度\r\n      canvasImg.width = img.width  // canvas宽度\r\n      canvasImg.height = img.height // canvas高度\r\n      // 图片加载完成触发事件\r\n      img.onload = function(){\r\n        // 将图片放到canvas上，参数是图片，x轴，y轴，图片宽度，图片高度\r\n        ctxImg.drawImage(img, 0, 0, img.width, img.height); \r\n\r\n        // 创建水印 canvas\r\n        var canvas = document.createElement(\'canvas\');\r\n        canvas.id = "canvas"\r\n        // 设置canvas画布大小\r\n        canvas.width = 80\r\n        canvas.height = 30\r\n    \r\n        var ctx = canvas.getContext(\'2d\')  // 获取水印canvas实例\r\n        \r\n        ctx.rotate(6.10); // 水印旋转角度\r\n        // ctx.translate(0, 0);\r\n        ctx.font = \'14px Arial\'\r\n        ctx.fillStyle = \'skyblue\'\r\n        ctx.fillText(str, 0, 20) // 水印在画布的位置x，y轴\r\n        \r\n        // 计算铺满的数量循环\r\n        var tamp_w = Math.ceil(canvasImg.width / canvas.width)\r\n        var tamp_h = Math.ceil(canvasImg.height / canvas.height)+2\r\n\r\n        for(var i = 0; i < tamp_h; i++) {\r\n          for(var j = 0; j < tamp_w; j++) {\r\n            canvasImg.getContext("2d").drawImage(canvas, j * canvas.width, i* canvas.height)\r\n          }\r\n        }\r\n      }\r\n    }\r\n    setWatermark(\'https://www.runoob.com/images/img_the_scream.jpg\',\'测试水印111111111111\')\r\n    <\/script>\r\n\r\n</body>\r\n</html>\r\n```\r\n\r\n',contentRendered:'<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>我们日常开发中，经常碰到给图片或者背景添加水印，这一篇以图片为例实现水印功能</p>\n</div>\n<h1 id="代码部分" tabindex="-1"><a class="header-anchor" href="#代码部分" aria-hidden="true">#</a> 代码部分</h1>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./utils.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">\n      <span class="token selector">*</span> <span class="token punctuation">{</span>\n        <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>\n        <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n     \n    <span class="token keyword">function</span> <span class="token function">setWatermark</span> <span class="token punctuation">(</span><span class="token parameter">imgUrl<span class="token punctuation">,</span> str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">var</span> canvasImg <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">#img</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">var</span> ctxImg <span class="token operator">=</span> canvasImg<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取画布canvas实例</span>\n      <span class="token keyword">var</span> img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取img实例</span>\n      img<span class="token punctuation">.</span>src <span class="token operator">=</span>imgUrl<span class="token punctuation">;</span>  <span class="token comment">// img图片</span>\n      img<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token number">500</span>   <span class="token comment">// img宽度</span>\n      img<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">400</span>  <span class="token comment">// img高度</span>\n      canvasImg<span class="token punctuation">.</span>width <span class="token operator">=</span> img<span class="token punctuation">.</span>width  <span class="token comment">// canvas宽度</span>\n      canvasImg<span class="token punctuation">.</span>height <span class="token operator">=</span> img<span class="token punctuation">.</span>height <span class="token comment">// canvas高度</span>\n      <span class="token comment">// 图片加载完成触发事件</span>\n      img<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token comment">// 将图片放到canvas上，参数是图片，x轴，y轴，图片宽度，图片高度</span>\n        ctxImg<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> img<span class="token punctuation">.</span>width<span class="token punctuation">,</span> img<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span> \n\n        <span class="token comment">// 创建水印 canvas</span>\n        <span class="token keyword">var</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">\'canvas\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        canvas<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token string">"canvas"</span>\n        <span class="token comment">// 设置canvas画布大小</span>\n        canvas<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token number">80</span>\n        canvas<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">30</span>\n    \n        <span class="token keyword">var</span> ctx <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">\'2d\'</span><span class="token punctuation">)</span>  <span class="token comment">// 获取水印canvas实例</span>\n        \n        ctx<span class="token punctuation">.</span><span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">6.10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 水印旋转角度</span>\n        <span class="token comment">// ctx.translate(0, 0);</span>\n        ctx<span class="token punctuation">.</span>font <span class="token operator">=</span> <span class="token string">\'14px Arial\'</span>\n        ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">\'skyblue\'</span>\n        ctx<span class="token punctuation">.</span><span class="token function">fillText</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token comment">// 水印在画布的位置x，y轴</span>\n        \n        <span class="token comment">// 计算铺满的数量循环</span>\n        <span class="token keyword">var</span> tamp_w <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>canvasImg<span class="token punctuation">.</span>width <span class="token operator">/</span> canvas<span class="token punctuation">.</span>width<span class="token punctuation">)</span>\n        <span class="token keyword">var</span> tamp_h <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>canvasImg<span class="token punctuation">.</span>height <span class="token operator">/</span> canvas<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">2</span>\n\n        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tamp_h<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> tamp_w<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            canvasImg<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>canvas<span class="token punctuation">,</span> j <span class="token operator">*</span> canvas<span class="token punctuation">.</span>width<span class="token punctuation">,</span> i<span class="token operator">*</span> canvas<span class="token punctuation">.</span>height<span class="token punctuation">)</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">setWatermark</span><span class="token punctuation">(</span><span class="token string">\'https://www.runoob.com/images/img_the_scream.jpg\'</span><span class="token punctuation">,</span><span class="token string">\'测试水印111111111111\'</span><span class="token punctuation">)</span>\n    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br></div></div>',date:"2022-12-30",deps:[],hoistedTags:[],links:[],pathInferred:"/html/2022/20221230.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"20221230",filePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/html/2022/20221230.md",filePathRelative:"html/2022/20221230.md",componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/html/2022/20221230.html.vue",componentFilePathRelative:"pages/html/2022/20221230.html.vue",componentFileChunkName:"v-117b5e97",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/html/2022/20221230.html.js",dataFilePathRelative:"pages/html/2022/20221230.html.js",dataFileChunkName:"v-117b5e97",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/html/2022/20221230.html",htmlFilePathRelative:"html/2022/20221230.html"},{data:{key:"v-3c65068c",path:"/react/2022/20220612.html",title:"企业级前端框架UMI3",lang:"zh-CN",frontmatter:{title:"企业级前端框架UMI3",date:"2022-06-12T00:00:00.000Z",tags:["react"],categories:["react"]},excerpt:"",headers:[{level:2,title:"模块一 : 框架环境和基本使用",slug:"模块一-框架环境和基本使用",children:[{level:3,title:"01 | 环境准备，快速上手",slug:"_01-环境准备-快速上手",children:[]},{level:3,title:"02 | 目录结构",slug:"_02-目录结构",children:[]},{level:3,title:"03 | 构建时配置",slug:"_03-构建时配置",children:[]},{level:3,title:"04 |  模板约定",slug:"_04-模板约定",children:[]},{level:3,title:"05 | antd, antd-mobile使用",slug:"_05-antd-antd-mobile使用",children:[]},{level:3,title:"06 | 图片和其他资源引入",slug:"_06-图片和其他资源引入",children:[]}]},{level:2,title:"模块二 : 组件书写风格与页面跳转",slug:"模块二-组件书写风格与页面跳转",children:[{level:3,title:"01 | Less 变量，混合，嵌套，父选择器",slug:"_01-less-变量-混合-嵌套-父选择器",children:[]},{level:3,title:"02 | hooks + 函数式编写组件",slug:"_02-hooks-函数式编写组件",children:[]},{level:3,title:"03 | 路由,权限,动态,约定式",slug:"_03-路由-权限-动态-约定式",children:[]},{level:3,title:"04 | 页面跳转，参数接收",slug:"_04-页面跳转-参数接收",children:[]}]},{level:2,title:"模块三 : 数据生成与请求",slug:"模块三-数据生成与请求",children:[{level:3,title:"01 |  数据模拟umi-mock",slug:"_01-数据模拟umi-mock",children:[]},{level:3,title:"02 |  数据模拟 json-server",slug:"_02-数据模拟-json-server",children:[]},{level:3,title:"03 | 反向代理",slug:"_03-反向代理",children:[]},{level:3,title:"04 |  fetch请求",slug:"_04-fetch请求",children:[]},{level:3,title:"05 |  umi-request请求",slug:"_05-umi-request请求",children:[]},{level:3,title:"06 |  useRequest请求",slug:"_06-userequest请求",children:[]}]},{level:2,title:"模块四 ：状态管理",slug:"模块四-状态管理",children:[{level:3,title:"01｜dva 介绍",slug:"_01-dva-介绍",children:[]},{level:3,title:"02 | 数据流向",slug:"_02-数据流向",children:[]},{level:3,title:"03 | 全局数据&页面数据获取和修改",slug:"_03-全局数据-页面数据获取和修改",children:[]},{level:3,title:"04 | 异步逻辑处理",slug:"_04-异步逻辑处理",children:[]},{level:3,title:"05 | 丢弃connect高阶组件，转投hooks",slug:"_05-丢弃connect高阶组件-转投hooks",children:[]},{level:3,title:"06 | subscriptions 源 获取",slug:"_06-subscriptions-源-获取",children:[]}]},{level:2,title:"模块五 ：运行时配置",slug:"模块五-运行时配置",children:[{level:3,title:"01 | 渲染前的权限校验",slug:"_01-渲染前的权限校验",children:[]},{level:3,title:"02 | 动态路由读取、添加",slug:"_02-动态路由读取、添加",children:[]},{level:3,title:"03 | 路由监听，埋点统计",slug:"_03-路由监听-埋点统计",children:[]},{level:3,title:"04 | 拦截器",slug:"_04-拦截器",children:[]}]},{level:2,title:"结束语",slug:"结束语",children:[{level:3,title:"结束语 | 未来愉快替代create-react-app 开发",slug:"结束语-未来愉快替代create-react-app-开发",children:[]}]}],git:{updatedTime:null,contributors:[]}},key:"v-3c65068c",path:"/react/2022/20220612.html",title:"企业级前端框架UMI3",lang:"zh-CN",frontmatter:{title:"企业级前端框架UMI3",date:"2022-06-12T00:00:00.000Z",tags:["react"],categories:["react"]},excerpt:"",headers:[{level:2,title:"模块一 : 框架环境和基本使用",slug:"模块一-框架环境和基本使用",children:[{level:3,title:"01 | 环境准备，快速上手",slug:"_01-环境准备-快速上手",children:[]},{level:3,title:"02 | 目录结构",slug:"_02-目录结构",children:[]},{level:3,title:"03 | 构建时配置",slug:"_03-构建时配置",children:[]},{level:3,title:"04 |  模板约定",slug:"_04-模板约定",children:[]},{level:3,title:"05 | antd, antd-mobile使用",slug:"_05-antd-antd-mobile使用",children:[]},{level:3,title:"06 | 图片和其他资源引入",slug:"_06-图片和其他资源引入",children:[]}]},{level:2,title:"模块二 : 组件书写风格与页面跳转",slug:"模块二-组件书写风格与页面跳转",children:[{level:3,title:"01 | Less 变量，混合，嵌套，父选择器",slug:"_01-less-变量-混合-嵌套-父选择器",children:[]},{level:3,title:"02 | hooks + 函数式编写组件",slug:"_02-hooks-函数式编写组件",children:[]},{level:3,title:"03 | 路由,权限,动态,约定式",slug:"_03-路由-权限-动态-约定式",children:[]},{level:3,title:"04 | 页面跳转，参数接收",slug:"_04-页面跳转-参数接收",children:[]}]},{level:2,title:"模块三 : 数据生成与请求",slug:"模块三-数据生成与请求",children:[{level:3,title:"01 |  数据模拟umi-mock",slug:"_01-数据模拟umi-mock",children:[]},{level:3,title:"02 |  数据模拟 json-server",slug:"_02-数据模拟-json-server",children:[]},{level:3,title:"03 | 反向代理",slug:"_03-反向代理",children:[]},{level:3,title:"04 |  fetch请求",slug:"_04-fetch请求",children:[]},{level:3,title:"05 |  umi-request请求",slug:"_05-umi-request请求",children:[]},{level:3,title:"06 |  useRequest请求",slug:"_06-userequest请求",children:[]}]},{level:2,title:"模块四 ：状态管理",slug:"模块四-状态管理",children:[{level:3,title:"01｜dva 介绍",slug:"_01-dva-介绍",children:[]},{level:3,title:"02 | 数据流向",slug:"_02-数据流向",children:[]},{level:3,title:"03 | 全局数据&页面数据获取和修改",slug:"_03-全局数据-页面数据获取和修改",children:[]},{level:3,title:"04 | 异步逻辑处理",slug:"_04-异步逻辑处理",children:[]},{level:3,title:"05 | 丢弃connect高阶组件，转投hooks",slug:"_05-丢弃connect高阶组件-转投hooks",children:[]},{level:3,title:"06 | subscriptions 源 获取",slug:"_06-subscriptions-源-获取",children:[]}]},{level:2,title:"模块五 ：运行时配置",slug:"模块五-运行时配置",children:[{level:3,title:"01 | 渲染前的权限校验",slug:"_01-渲染前的权限校验",children:[]},{level:3,title:"02 | 动态路由读取、添加",slug:"_02-动态路由读取、添加",children:[]},{level:3,title:"03 | 路由监听，埋点统计",slug:"_03-路由监听-埋点统计",children:[]},{level:3,title:"04 | 拦截器",slug:"_04-拦截器",children:[]}]},{level:2,title:"结束语",slug:"结束语",children:[{level:3,title:"结束语 | 未来愉快替代create-react-app 开发",slug:"结束语-未来愉快替代create-react-app-开发",children:[]}]}],content:"\n::: tip\n\nUmi 是蚂蚁金服的底层前端框架，是可扩展的企业级前端应用框架，内置了路由、构建、部署、测试， 包含组件打包、文档工具、请求库、hooks 库、数据流等 ， 通过框架的方式简化 React 开发\n\n:::\n\n## 模块一 : 框架环境和基本使用\n\n### 01 | 环境准备，快速上手\n\n#### 准备工作\n\n由于国内网络和前端的特殊性，在安装依赖等方面可能会失败或导致无法启动，浪费大量的时间，推荐使用yarn作为包管理器，并且使用国内镜像，推荐yrm这个工具管理yarn镜像\n\n安装\n\n```powershell\nnpm install -g yrm  \n```\n\n查看yarn镜像源\n\n```powershell\nyrm ls\n```\n\n切换源\n\n```powershell\nyrm use taobao\n```\n\n#### 项目初始化\n\n 先找个地方建个空目录。 \n\n```bash\nmkdir myapp && cd myapp\n```\n\n使用yarn安装下载umi环境\n\n```bash\nyarn create @umijs/umi-app\n```\n\n安装依赖：\n\n```shell\n$ cd 目录\n$ yarn\n```\n\n启动项目：\n\n```jsx\nyarn start\n```\n\n在浏览器里打开 http://localhost:8000/，能看到以下界面，\n\n![img](https://img.alicdn.com/tfs/TB1JpeLwxD1gK0jSZFsXXbldVXa-1540-950.png)\n\n\n\n### 02 | 目录结构\n\n umi 更倾向于选择约定的方式，支持``js|jsx|ts|tsx``等后缀\n\n```bash\n.\n├── dist                          // 默认的 build 输出目录\n├── mock                          // mock 文件所在目录，基于 express\n├── config\n    ├── config.js                  // umi 配置，同 .umirc.js，二选一\n├── public  \t\t\t\t\t \t\t\t\t\t\t // 变通的数据资源目录和一些无需打包的资源\n└── src                           // 源码目录\n    ├── layouts/index.js           // 全局布局\n    ├── models\t\t\t\t\t           // 数据流\n    ├── wrappers\t\t\t\t\t         // 权限管理\n    ├── pages                     // 页面目录，里面的文件即路由\n        ├── .umi                  // dev 临时目录，需添加到 .gitignore\n        ├── .umi-production       // build 临时目录，会自动删除\n        ├── document.ejs           // HTML 模板\n        ├── 404.js                 // 404 页面\n        ├── page1.js               // 页面 1，任意命名，导出 react 组件\n        ├── page1.test.js          // 测试用例文件\n        └── page2               \t\t// 页面 2，内部可含有\n    ├── global.css                 // 约定的全局样式文件，自动引入，也可以用 global.less\n    ├── global.js                  // 可以在这里加入 polyfill\n    ├── app.js                     // 运行时配置文件\n├── .umirc.js                      // umi 配置，同 config/config.js，二选一\n├── .env                           // 环境变量\n└── package.json\n```\n\n\n\n### 03 | 构建时配置\n\n 构建时是对开发环境配置，如果项目的配置不复杂，推荐在 `.umirc.ts` 中写配置； 如果项目的配置比较复杂，可以将配置写在 `config/config.ts` 中，并把配置的一部分拆分出去，现实往往是复杂的所以推荐``config/config`` , 两种配置方式二选一，`.umirc.ts` 优先级更高，采用config配置时，一般删除``.umirc.ts``\n\n```jsx\nimport { defineConfig } from 'umi';\nimport proxy from './proxy';\nimport routes from './routes';\nimport theme from './theme'\n\nexport default defineConfig({\n  nodeModulesTransform: {// node_modules 目录下依赖文件的编译方式\n    type: 'none',// all 慢 兼容性好 none 快 兼容性一般\n  },\n  mfsu: {},//打包提速\n  fastRefresh: {},//快速刷新 可以保持组件状态，同时编辑提供即时反馈\n  title:'UMI3',//配置标题。\n  mountElementId: 'app',//指定 react app 渲染到的 HTML 元素 id。\n  favicon: '/favicon.ico',//使用本地的图片，图片请放到 public 目录\n\n  routes: routes,\n\n  proxy:proxy,//配置反向代理\n\n  //启用按需加载\n  dynamicImport: {\n    loading: '@/components/loading',//按需加载时指定的loading组件\n  },\n\n  theme,//配置主题，实际上是配 less 变量。\n  devServer: {\n    port: 8666, // .env里面权限更高一些\n    // https:true,//启用https安全访问，于对应协议服务器通讯\n  }\n\n})\n```\n\n\n\n### 04 |  模板约定  \n\numi内部默认没有html，会自行生成，如果需要修改， 新建 `src/pages/document.ejs` \n\n```html\n<!doctype html>\n<html>\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"viewport\" content=\"width=device-width\">\n  <title>Your App</title>\n</head>\n<body>\n  <div id=\"app\"></div>\n</body>\n</html>\n```\n\n\n\n### 05 | antd, antd-mobile使用\n\n**antd**\n\numi 已整合 antd 组件库，可通过``import {Xxx} from 'antd'``使用\n\n使用指定版本组件库，``yarn add xx-xx@x.x.x``后，会优先使用指定版本\n\n**antd主题设定**\n\n找到``config/theme``\n\n```jsx\nexport default {\n  \"@primary-color\": \"#399\" // antd全局样式copy过来统一修改\n};\n```\n\n[antd样式变量](https://ant.design/docs/react/customize-theme-cn)\n\n**antd-mobile**\n\numi 已整合 antd-mobile 组件库，可通过``import {Xxx} from 'antd-mobile'``使用v5版本，可通过``import {Xxx} from 'antd-mobile-v2'``使用v2版本，使用指定版本组件库，``yarn add xx-xx@x.x.x``后，会优先使用指定版本，推荐使用v5\n\n使用v5版本报错，找不到被使用的组件时尝试：\n\n- 删除.umi\n- 更新 @umijs/preset-react 包\n- 关闭mfsu\n- 重启\n\nv5主题修改\n\n``src/global.less``\n\n```less\n:root:root {\n  --adm-color-primary: #399;// antd-mobile全局样式copy过来统一修改\n}\n```\n\n[antd-mobile提供的所有全局变量](https://mobile.ant.design/zh/guide/theming)\n\n### 06 | 图片和其他资源引入 \n\n项目中使用图片有两种方式，\n\n1. 先把图片传到 cdn，然后在 JS 和 CSS 中使用图片的绝对路径\n2. 把图片放在项目里，然后在 JS 和 CSS 中通过相对路径的方式使用\n\n 前者趋向数据图片，后者趋向写死的图片，通过相对路径引入图片的时候，如果图片小于 10K，会被编译为 Base64嵌入网页\n\n```jsx\nimport styles from './index.css';\nimport user from '../../assets/images/userBj.png'\nfunction CssImg(props){\n  return (\n    <div>\n\n      <img src={user}/>\n      <img src={require('../../assets/images/userBj.png')} alt=\"\"/>\n\n      {/*动态图片 丢到服务器 推荐,或临时指向public 不推荐*/}\n\t\t\t<img src=\"cnd\" width=\"100\" alt=\"\"/>\n      <img src=\"/img/bg.jpg\" width=\"100\" alt=\"\"/>\n      \n      <div className={styles.test1} style={{height:50}}>测试</div>\n    </div>\n  );\n}\n\nexport default CssImg\n```\n\n```less\n.test1{\n  /* background: url(\"../../assets/images/bg.jpg\"); */\n  /* background: url(\"~@/assets/images/bg.jpg\"); */\n  background: url(\"/img/bg.jpg\");\n}\n```\n\n\n\n## 模块二 : 组件书写风格与页面跳转\n\n### 01 | Less 变量，混合，嵌套，父选择器  \n\n框架 自带了 less，css 及模块化的解析工具 ，推荐模块化使用less``import styles from 'xx.less``避免了全局污染 和 选择器复杂\n\n模块化的基本原理很简单，就是对每个类名（非 :global 声明的）按照一定规则进行转换，保证它的唯一性。如果在浏览器里查看这个示例的 dom 结构，你会发现实际渲染出来是这样的：\n\n```html\n<div class=\"title___3TqAx\">title</div>\n```\n\n类名被自动添加了一个 hash 值，这保证了它的唯一性。\n\n>  实际开发中简单的样式我们并不推荐写 css，推荐使用模板组件来进行开发，或者直接写行内 css。css 并没有很好的依赖关系，很多项目都有冗余的 css，但是却不敢删除 \n\n#### 全局变量\n\n```jsx\n{/* title 为global.less配置的整体样式 */}\n<h2 className=\"title\">全局样式</h2>\n\n\n@import '~antd/es/style/themes/default.less';\n//使用default的变量\n.myLink {\n  color: @primary-color;\n  font-size: @font-size-base;\n}\n<div className={styles.myLink}>测试</div>\n```\n\n#### 局部变量\n\n```less\n@width: 100px;\n@height: @width - 80px;\n\n.header {\n  width: @width;\n  height: @height;\n  background: red;\n}\n```\n\n#### 混合\n\n```less\n.bordered (@topW: 1px, @bottomW: 2px) {\n  border-top: dotted @topW black;\n  border-bottom: solid @bottomW black;\n}\n\n#a1 {\n  color: #111;\n  .bordered();\n}\n\n.a2 {\n  color: red;\n  .bordered(2px, 4px);\n  // border-bottom: solid 5px black; //覆盖混合\n}\n```\n\n#### 嵌套\n\n```less\n.nesting {\n  color: blue;\n  h3 {\n    color: coral;\n  }\n  p {\n    color: aqua;\n  }\n}\n\n<div className={styles.nesting}>\n  <h3>测试</h3>\n  <p>测试</p>\n</div>\n```\n\n#### :global\n\n打包后每个class名都会被自动加上一串唯一的序列号,在编译后模块化样式都会加上序号，global可使后面的样式编译后没有序号,脱离模块化，作用到全局，调用方式为非模块化\n\n```less\n/* 定义多个全局样式 */\n.bars_right {\n  font-weight: bold;\n  :global {\n    .ant-btn {\n      border: 0;\n    }\n    .title {\n      background: #fafafa;\n    }\n  }\n}\n\n<div className={styles.bars_right}>\n\t<button className={`ant-btn`}>按钮</button>\n```\n\n\n\n### 02 | hooks + 函数式编写组件  \n\n#### 函数式编写组件\n\n```jsx\nfunction 组件(){}\nconst 组件 = (props) = >{\n  \n  //使用hooks\n  \n  //定义 函数 变量\n  \n  return jsx\n}\n```\n\n#### hooks\n\n##### **useContext**\n\n组件上下文共享，越级传递数据，响应式\n\n```jsx\n// 创建上下文 context.jsx \nimport {createContext} from 'react'\nconst AppContext = createContext({})\nexport default AppContext;\n\n\n//祖先组件提供上文 parent.jsx\nfunction 父组件() {\n  const [msg, setMsg] = useState('hooks组件数据')\n  return (\n  \t<AppContext.Provider value={{ msg, setMsg }}>\n      ....\n      <子组件/>\n      ...\n    </AppContext.Provider>\n  )\n}\n//后代组件接受下文 child.jsx\nimport { useContext } from \"react\";\nimport AppContext from \"../context\";\n\nfunction 后代组件(){\n  const {msg,setMsg} = useContext(AppContext);\n  return (\n    <>\n      <div>{msg}</div>\n      <button onClick={setMsg}>按钮</button>\n    </>\n  )\n}\n```\n\n##### **useMemo**\n\nhooks出来之后，我们能够使用function的形式来创建包含内部state的组件。但是，使用function的形式，失去shouldComponentUpdate，我们无法通过判断前后状态来决定是否更新。在函数组件中，react不再区分mount和update两个状态，函数组件的每一次调用都会执行其内部的所有逻辑，如下：\n\n```jsx\nexport default function Xxx() {\n  \n  const [count, setCount] = useState(1);\n  const [value, setValue] = useState('');\n  \n  function getNum() {\n    console.log(\"getNum\");\n    return count * 100\n  }\n \t\n  return (\n    {/* 组件任何一条数据变化，getNum函数重复调用 */}\n    <div>getNum：{getNum()}</div>\n    <button onClick={() => setCount(count + 1)}>+1</button>\n    <input value={value} onChange={ev => setValue(ev.target.value)} />\n  )\n}\n```\n\n那么会带来较大的性能损耗。useMemo可指定依赖的数据变化才渲染，类似vue计算属性，返回缓存后的值数据，可拿去渲染\n\n```jsx\nconst getNumMemo = useMemo(() => {\n  //可执行一些没有副作用的业务，比如同步重新计算count\n  return count * 100\n}, [count])\n\nreturn (\n    {/* 组件任何一条数据变化，getNum函数重复调用 */}\n    <div>getNum：{getNumMemo}</div>\n    <button onClick={() => setCount(count + 1)}>+1</button>\n    <input value={value} onChange={ev => setValue(ev.target.value)} />\n  )\n```\n\n[^count]: 被依赖的数据，若无则多次执行，若为[]执行一次，一般需要依赖数据\n\n##### **memo**\n\nreact父组件更新未传递给子的数据，子组件也会更新，如下：\n\n```jsx\n//修改count 或者 value 时，child组件都会更新\n<button onClick={() => setCount(count + 1)}>+1</button>\n<input value={value} onChange={ev => setValue(ev.target.value)} />\n<Child count={count} />\n```\n\nmemo可以协助子组件只依赖传递过来的数据变化时才更新\n\n```jsx\nimport {memo} from 'react'\n\nfunction Child({count}){\n  const show = () => console.log('child组件渲染')\n  return (\n    <>\n      <h3>Child2组件</h3>\n      <div>{show()}</div>\n      <div>{count}</div>\n    </>\n  )\n}\n//memo 修饰当前组件 依赖父的数据变化时，才渲染\nexport default memo(Child)\n\n//不包装的情况下，父任意数据更新子都会更新\n// export default Child\n```\n\n##### **useCallback**\n\n由于组件内的业务函数传递给子组件时，每次都会是新的引用，会导致子组件无故更新，如下：\n\n父组件\n\n```jsx\n//修改count 或者 value 时，child组件都会更新\n<button onClick={() => setCount(count + 1)}>+1</button>\n<input value={value} onChange={ev => setValue(ev.target.value)} />\n<Child updateCount=(()=>console.log('业务')) />\n```\n\n子组件\n\n```jsx\nimport {memo} from 'react'\nfunction Child({updateCount}){\n  const show = () => console.log('child组件渲染')\n  return (\n    <>\n      <h3>Child3组件</h3>\n      <div>{show()}</div>\n      <button onClick={updateCount}>测</button>\n    </>\n  )\n}\n//memo 修饰当前组件 依赖父的数据变化时，才渲染 但依赖父的是个函数时memo无效\nexport default memo(Child)\n```\n\nuseCallback可以将函数缓存起来，节省性能，指定某个被依赖的数据变化才更新函数，子组件配合memo实现，如下：\n\n```jsx\nexport default () => {\n  \n  const updateCount = useCallback(()=>{\n    //业务\n  },[])\n\n  return (\n  \t //修改count 或者 value 时，child组件都会更新\n    <button onClick={() => setCount(count + 1)}>+1</button>\n    <input value={value} onChange={ev => setValue(ev.target.value)} />\n    <Child updateCount={updateCount} />\n  )\n}\n```\n\n[^count]: 被依赖的数据，若无则多次执行，若为[]执行一次，一般需要依赖数据\n\n##### useLayoutEffect\n\nuseLayoutEffect**早于**类组件**早于**useEffect\n\n**挂载时**\n\n类render → 函数render → useLayoutEffect→ 类didmount → useEffect\n\n**更新时**\n\n类render渲染 → 函数render → useLayoutEffect 销毁→ useLayoutEffect 执行→ 类didUpdate → useEffect 销毁… → useEffect 执行\n\n### 03 | 路由,权限,动态,约定式  \n\n页面地址的跳转都是在浏览器端完成的，不会重新请求服务端获取 html，html 只在应用初始化时加载一次  ，页面由不同的组件构成，页面的切换其实就是不同组件的切换， 只需要在把不同的路由路径和对应的组件关联上 ，实现方式如下两种\n\n- 配置型路由（`在配置文件写入相关配置代码`)，配置型存在时，约定式失效\n\n- 约定式(`约定文件位置名称与格式无需写代码配置`)\n\n约定式是理想型方案，实际开发一般会向现实低头，推荐采用配置型路由\n\n配置`config/config`的`routes`属性，接受数组，一般单独写一个routes模块文件如下:\n\n```jsx\n//  config/routes\nexport default [\n  { path: '/less', component: 'less' },// 不写路径从 src/pages找组件\n  { path: '/antd', component: './antd' },//当前指向pages\n  { component: '@/pages/404' },//@指向src\n]\n```\n\n[^path]: 浏览器地址栏地址\n[^component]: 要打开的组件\n\n```jsx\n//  config/routes\nexport default [\n  ...\n  { path: '/antd', component: 'antd' },\n  {  path:'/', redirect: '/antd' },\n  { component: '@/pages/404' },//@指向src\n]\n```\n\n[^redirect]: 重定向\n\n```jsx\nexport default [\n    { path: '/login', component: 'login' },\n    { path: '/reg', component: './reg' },\n\n    {\n      path: '/',\n      component: '@/layouts/layout1',// layout组件\n      routes: [\n        { path: '/less', component: 'less' },\n        { path: '/antd', component: 'antd' },\n        {  path:'/', redirect: '/antd' },\n        { component: '@/pages/404' },\n      ],\n    },\n\n    { component: '@/pages/404' },\n\n\n  ]\n```\n\n[^layout组件]: 布局组件，控制一部分路由在跳转前先渲染布局组件自身UI，执行自身业务，后在自身内部渲染目标路由组件\n[^routes]: 配置子路由，通常在需要为多个路径增加 layout 组件时使用\n\n```jsx\n//layouts/布局组件\n\n//可引入一些components下的公共组件来完成公共布局\nimport Nav1 from '../../components/nav1'\nimport styles from './index.less'\n\nconst Layout1 = props => {\n  return (\n    <>\n      {props.children}\n      <div className={styles['adm-tab-bar']}><Nav1/></div>\n    </>\n  )\n}\n\nexport default Layout1;\n```\n\n[^props.children]: 布局组件内部渲染的目标路由组件\n\n```jsx\n{ path: '/user', component: 'user',wrappers:['@/wrappers/auth']},//路由守卫\n```\n\n[^wrappers]: 当前工权限校验工作可交给一个或者多个组件介权，通过了才被允许到目标路由\n\n```jsx\n//wrappers/auth\nimport { Redirect } from 'umi'\n\nexport default (props) => {\n  if (Math.random() < .5) {\n    return <div>{props.children}</div>;\n  } else {\n    return <Redirect to=\"/login\" />;\n  }\n}\n```\n\n多级子路由\n\n```jsx\n{ \n  path: '/goods', \n  component: '@/layouts/layout2',//展示区\n  routes:[\n    // { path: '/goods', component: 'goods' },\n    // { path:'/goods', redirect: '/goods/2' },//这里的\n    { path: '/goods/:id?', component: 'goods/goods-detail' },//动态可选路由\n    { path: '/goods/:id/comment', component: 'goods/comment' },//不配routes,占用当前展示区\n    { path: '/goods/:id/comment/:cid', component: 'goods/comment/comment-detail' },\n    { component: '@/pages/404' },\n  ]\n},\n```\n\n[^:变量]: 动态路由，路由名为动态可变\n[^:变量?]: 动态可选路由，路由名可变，且可不传递\n\n\n\n### 04 | 页面跳转，参数接收\n\n声明式跳转+传参\n\n```jsx\nconst nav1 = ()=>{\n  return (\n  \t<NavLink activeClassName={styles.xx} to=\"/antd\">antd</NavLink>\n  \t<NavLink activeStyle={{color:'#399'}} to=\"/antd\">antd</NavLink>\n  \t<Link to=\"/antd\">antd</Link>\n  \t<Link to={{pathname:'/antd',search:'?a=1',query:{a:1}}}>antd</Link>\n  )\n}\n```\n\n编程式跳转+传参\n\n```jsx\n//history可以导入或者上下文获取\nimport { history } from 'umi';\nconst 组件({history})=>{}\n\n// 跳转到指定路由\nhistory.push('/list');\n\n// 带参数跳转到指定路由\nhistory.push('/list?a=b');\nhistory.push({\n  pathname: '/list',\n  query: {\n    a: 'b',\n  },\n});\n\n// 跳转到上一个路由\nhistory.go(-1);\n```\n\n参数接收\n\n```jsx\n//可以从组件上下文获取\nconst 组件 = ({location,match})=>{}\n\n//如果没有上下文可以withRouter包装组件\nimport { withRouter } from 'umi';\nconst withRouter({location,match})=>{}\n\n//可以直接使用umi的hooks获取\nimport { useLocation,useParams,useRouteMatch} from 'umi';\nconst 组件 = ()=>{\n  const params = useParams();\n  params.id | params.cid\n  const location = useLocation();\n  location.search | location.query\n}\n```\n\n相关api[查阅](https://umijs.org/zh-CN/api#link)\n\n## 模块三 : 数据生成与请求\n\n### 01 |  数据模拟umi-mock    \n\n Mock 数据是前端开发过程中必不可少的一环，是分离前后端开发的关键链路。通过预先跟服务器端约定好的接口，模拟请求数据甚至逻辑，能够让前端开发独立自主，不会被服务端的开发所阻塞 \n\nUMI3里约定 mock 文件夹下的文件或者 page(s) 文件夹下的 _mock 文件即 mock 文件，文件导出接口定义，支持基于 `require` 动态分析的实时刷新，支持 ES6 语法，以及友好的出错提示。\n\n```js\nexport default {\n  // 支持值为 Object 和 Array\n  'GET /api/users': { users: [1, 2] },\n  \n  // GET 可省略\n  '/api/users/1': { id: 1 },\n\n  // 支持自定义函数，API 参考 express@4,可完成业务\n  'POST /api/users/create': (req, res) => {res.end('OK'); },\n};\n```\n\n当客户端（浏览器）发送请求，如：`GET /api/users`，那么本地启动的 `umi dev` 会跟此配置文件匹配请求路径以及方法，如果匹配到了，就会将请求通过配置处理，就可以像样例一样，你可以直接返回数据\n\n[Mock.js](http://mockjs.com/) 辅助生成自然且多条数据\n\n```js\nimport Mock from 'mockjs';\n\nexport default {\n  // 使用 mockjs 等三方库\n  'GET /api/tags': Mock.mock({\n    'list|100': [{ name: '@city', 'value|1-100': 50, 'type|0-2': 1 }],\n  }),\n};\n```\n\n对于整个系统来说，请求接口是复杂并且繁多的，为了处理大量模拟请求的场景，我们通常把每一个数据模型抽象成一个文件，统一放在 `mock` 的文件夹中，然后他们会自动被引入。\n\n为了更加真实的模拟网络数据请求，往往需要模拟网络延迟时间，可以通过第三方插件来简化这个问题，如：[roadhog-api-doc#delay](https://github.com/nikogu/roadhog-api-doc/blob/master/lib/utils.js#L5)。\n\n```js\nimport { delay } from 'roadhog-api-doc'; // 模拟延时\n\nexport default delay(\n  {\n    // 支持值为 Object 和 Array\n    '/umi/goods': [\n      { id: 1, name: '韭菜' },\n      { id: 2, name: '西红柿' },\n    ],\n  },\n  2000,\n); //延时\n```\n\n介权\n\n```jsx\n//mock/auth\nexport default {\n  'POST /umi/login': (req, res) => {\n    const { username, password } = req.body;\n    if (username === 'alex' && password === 'alex123') {\n      res.send({\n        err: 0,\n        msg: '成功',\n        currentAuthority: 'user',\n      });\n    } else if (username === 'admin' && password === 'admin123') {\n      res.send({\n        err: 0,\n        msg: '成功',\n        currentAuthority: 'admin',\n      });\n    } else {\n      res.send({\n        err: 1,\n        msg: '失败',\n      });\n    }\n  },\n};\n\n```\n\n分页\n\n```jsx\n//查分页\n//指定页数范围内显示全数据，超过只显示两条\n'GET /umi/list': (req, res) => {\n  const { _page = 1, _limit = 3 } = req.query;\n\n  const totalPage = 3; //设定总页数\n  const lastPageLimit = 2; //设定尾页条数\n  const total = _limit * (totalPage - 1) + lastPageLimit; //计算总条数\n\n  res.send({\n    code: 0,\n    data: {\n      _page,\n      _limit,\n      total,\n      //控制data键，后面数组的条数\n      ...Mock.mock({\n        [`data|${_page >= totalPage ? lastPageLimit : _limit}`]: [\n          {\n            'id|+1': 1,\n            create_at: '@date(\"yyyy-MM-dd HH:mm:ss\")',\n            'type_str|1': [\n              '中转费明细',\n              '调整单明细',\n              '代收到付明细',\n              '客户运费明细',\n              '导入失败记录',\n            ],\n            name: function () {\n              return [\n                Mock.mock('@datetime(\"MMdd\")'),\n                Mock.mock('@county()'),\n                this.operator,\n              ].join('-');\n            },\n            path: 'http://xxx/shop/quotation/导入失败列表.xlsx',\n            operator: '@cname',\n            'status|1': ['0', '1', '2', '3'],\n          },\n        ],\n      }),\n    },\n  });\n},\n```\n\n增删改\n\n```jsx\n//增\n'POST /umi/list': (req, res) => {\n  console.log(req.body);\n  res.send(\n    Mock.mock({\n      'data|1': [\n        {\n          code: 0,\n          data: { ...req.body, a: 2 },\n          msg: '成功',\n        },\n        {\n          code: 1,\n          msg: '失败',\n        },\n      ],\n    }).data,\n  );\n},\n\n//删\n'DELETE /umi/list/:id': (req, res) => {\n  console.log(req.params.id);\n  res.send(\n    Mock.mock({\n      'data|1': [\n        {\n          code: 0,\n          data: { task_id: '123' },\n          msg: '成功',\n        },\n        {\n          code: 1,\n          msg: '失败',\n        },\n      ],\n    }).data,\n  );\n},\n  \n//改\n'PATCH /umi/list/:id': (req, res) => {\n  console.log(req.body);\n  res.send(\n    Mock.mock({\n      'data|1': [\n        {\n          code: 0,\n          data: { ...req.body },\n          msg: '成功',\n        },\n        {\n          code: 1,\n          msg: '失败',\n        },\n      ],\n    }).data,\n  );\n},\n```\n\n### 02 |  数据模拟 json-server   \n\n一款第三方模拟服务器和数据的包，支持json文件存本地被修改，自动生成resut风格可操作的接口，有效的CURD操作，对数据要求高时，推荐使用\n\n### 03 | 反向代理 \n\n工作中前后端是分离式开发，需要访问本地或者线上真实服务器时，跨域也成了每个前端工程师都需要了解的基本知识，解决方案有前端或者后端开发人员来解决\n\n在 UMI3 中配置`config/config`的proxy键，接受一个对象，可单独做一个模块到`config/proxy`，并暴露出来\n\n```tsx\nexport default {\n  '/api/': {\n    // 要代理的真实服务器地址\n    target: 'https://localhost:9001',\n    // 配置了这个可以从 http 代理到 https\n    https:true\n    // 依赖 origin 的功能可能需要这个，比如 cookie\n    changeOrigin: true,\n    pathRewrite: { '^/api': '' },//路径替换\n  } \n}\n```\n\n\n\n### 04 |  fetch请求    \n\nfetch是原生的数据请求方法，返回promise\n\n```tsx\nconst getData = async () => {\n    //let res = await fetch('/umi/goods/home?_limit=3'); \n\t\tlet res = await fetch(\n    '/umi/login',{\n      method:'post',\n      headers:{\"Content-type\":\"application/x-www-form-urlencoded\"},\n      body:'username=alex&password=alex123'\n    });\n    let data = await res.json();\n    console.log(data);\n};\n```\n\n\n\n### 05 |  umi-request请求 \n\n 通过 `import { request } from 'umi';` 你可以使用内置的请求方法。第一个参数是 url，第二个参数是请求的 options。options 具体格式参考 [umi-request](https://github.com/umijs/umi-request/blob/master/README_zh-CN.md)，也和axios用法基本一致\n\n```jsx\nconst getData = async () => {\n  let res = await request('/umi/goods',{params:{_limit:1}})\n  // let res = await request('/api/goods/home',{params:{_limit:1}})\n  console.log(res)\n}\n```\n\n### 06 |  useRequest请求\n\nuseRequest 是最佳实践中内置的一个 Hook ，默认对数据要求必须返回一个data字段，如果不希望有此限定，可以构建时配置一下`config/config`\n\n```jsx\nrequest: {\n  dataField: '',\n},\n```\n\n在组件初次加载时， 自动触发该函数执行。同时 useRequest 会自动管理异步请求的 `loading` , `data` , `error` 等状态。\n\n```tsx\nimport {useRequest} from 'umi'\n\nexport default function  RequestHooks(){\n\n  // 用法 1\n  const { data, error, loading } = useRequest('/umi/goods');\n\n\t// 用法 2\n  const { data, error, loading } = useRequest({\n    url: '/umi/goods',\n    params:{_limit:1}\n  });\n\n\t// 用法 4\n  const { data, loading, run } = useRequest((_limit) => ({\n    url: '/umi/goods',\n    params: { _limit }\n  }), {\n    manual: true,//手动通过运行run触发\n  });\n  \n  // 轮询\n  const { data, loading, run } = useRequest((_limit) => ({\n    url: '/umi/goods',\n    params: { _limit }\n  }), {\n    manual: true,//手动通过运行run触发\n    pollingInterval:1000,//轮询 一秒读一次\n    pollingWhenHidden:false,//屏幕不可见时，暂停轮询\n  });\n  \n  if (error) {\n    return <div>failed to load</div>\n  }\n\n  if (loading) {\n    return <div>loading...</div>\n  }\n\n  return (\n    <div>{JSON.stringify(data)}</div>\n    <button onClick={()=>run(1)}>手动</button>\n  );\n}\n```\n\n###### \n\n## 模块四 ：状态管理\n\n### 01｜dva 介绍    \n\n dva 首先是一个基于 [redux](https://github.com/reduxjs/redux) 和 [redux-saga](https://github.com/redux-saga/redux-saga) 的数据流方案，被umi以插件的方式内置，无需安装直接使用，在原有redux使用基础上更加简化和高效\n\ndva里面有关状态管理（数据流）的角色和redux的对比如下\n\n|                      | redux    | dva          |\n| -------------------- | -------- | ------------ |\n| 状态数据             | state    | state        |\n| 行为描述             | action   | action       |\n| 无副作用业务         | reducer  | reducer      |\n| 有副作用业务         | creators | effect       |\n| 通讯请求修改状态函数 | dispatch | dispatch     |\n| 通讯请求获取状态函数 | connect  | connect      |\n| 从 **源** 获取数据   | 无       | subscription |\n\n[^状态数据]:  javascript 对象，存公共状态的仓库\n[^行为描述]: javascript 对象，必须带有 `type` 属性指明具体的行为，其它字段可以自定义\n[^dispatch]: 用于触发 action 的函数\n[^无副作用业务]: 一个纯函数，处理公共状态时的一些同步业务\n[^有副作用业务]: 处理公共状态时的一些异步业务\n[^connect]: 连接状态仓库state，把数据流向组件页面\n\n\n\n### 02 | 数据流向   \n\n 数据的改变发生通常是通过用户交互行为或者浏览器行为（如路由跳转等）触发的，当此类行为会改变数据的时候可以通过 `dispatch` 发起一个 action，如果是同步行为会直接通过 `Reducers` 改变 `State` ，如果是异步行为（副作用）会先触发 `Effects` 然后流向 `Reducers` 最终改变 `State` ，最后`State`的数据再流回组件页面\n\n![dva数据流](https://zos.alipayobjects.com/rmsportal/PPrerEAKbIoDZYr.png)\n\n定义一个dva的Model如下：\n\n```jsx\nexport default {\n  namespace:'Model名'，//省略不写，认定文件名为Model名\n  state:{公共状态数据},\n  reducers:{一堆纯函数},\n  effects:{一堆异步副作用函数}\n\tsubscription:{一堆监听函数}\n}\n```\n\n\n\n### 03 | 全局数据&页面数据获取和修改 \n\n全局数据定义在`src/models/XX`，所有页面都可以访问，同步业务的处理交给reducers\n\n```JSX\nimport { history, request } from 'umi';\nimport key from 'keymaster';\n\nexport default {\n  \n  namespace: 'global',//所有models里面的namespace不能重名\n  \n  //初始化全局数据\n  state: {\n    title:'全局 title',\n    text: '全局text',\n    login: false,\n    a:'全局models aaaa',\n  },\n  \n  //处理同步业务  接收dispatch({type:'global/setText',...\n  reducers: {\n    setText(state) {\n      // copy更新并返回\n      return {\n        ...state,\n        text: '全局设置 后的text'+Math.random().toFixed(2),\n      };\n    },\n    setTitle(state,action) {//action 接受到的参数\n      return {\n        ...state,\n        title: `全局设置 后的title${action.payload.a}/${action.payload.b}`,\n      };\n    },\n    signin:(state)=>({\n      ...state,\n      login: true,\n    }),\n  },\n  \n};\n\n```\n\n组件内部获取和修改全局数据\n\n```jsx\nimport {connect} from 'umi'\n\nconst 组件 = (props) => {\n  return (\n    <>\n      <h3 className=\"title\">获取全局 state  </h3>\n\n      <div>text:{props.text}</div>\n      <div>title:{props.title}</div>\n      <div>a:{props.A}</div>\n      {\n        props.isLogin ? <div>已登录</div> : <div>未登录</div>\n      }\n\n      <h3 className=\"title\">修改全局 state</h3>\n      <button\n        onClick={() => {\n          props.dispatch({\n            type: 'global/setText',\n          });\n        }}\n      >\n        修改全局text,不传参\n      </button>\n\n      <button\n        onClick={() => {\n          props.dispatch({\n            type: 'global/setTitle',\n            payload:{a:1,b:2}\n          });\n        }}\n      >\n        修改全局text,传参\n      </button>\n    </>\n  );\n}\n\nexport default connect(state => ({\n  //抓取全局,重命名\n  text: state.global.text,\n  title: state.global.title,\n  A: state.global.a,\n  isLogin: state.global.login,\n}))(组件);\n```\n\n页面数据获取和修改\n\n页面数据定义在`pages/页面目录/model.js`或者`pages/ 页面目录/models/*.js`，当前``页面目录``只分配一个数据文件时，使用`model.js`,当前`页面目录`分配多个数据文件时，使用`models/*.js`\n\n``页面目录/*.jsx``可访问当前`页面目录/model.js`及当前`页面目录/models/*.js`,也可向上访问，但子集`页面目录`和同级`页面目录`数据不可访问\n\n```jsx\n//pages/*/model.js\nexport default {\n  namespace: 'dva',\n  state: 'bmw', \n  reducers: {\n    setStr(state) {\n      return 'qq';\n    },\n  }\n};\n\n//pages/*/models/a.js\nexport default {\n  namespace: 'a',\n  state: 'page model a',\n};\n\n```\n\n组件内部获取和修改页面数据\n\n```jsx\nimport {connect,getDvaApp} from 'umi'\nimport Child from './child'\n\nconst Dva = (props) => {\n  return (\n    <>\n      <h3 className=\"title\">获取页面models</h3>\n      <p>model.js里面的数据:{props.dva}</p>\n      <p>models目录里面的的数据:{props.a}</p>\n      <p>models目录里面的的数据:{props.b}</p>\n      <hr/>\n      <h3 className='title'>修改页面model数据</h3>\n      <button onClick={()=>props.dispatch({type:'dva/setStr'})}>修改</button>\n    </>\n  );\n}\n\nexport default connect(state => ({\n  //抓取页面级别\n  dva:state.dva,\n  a: state.a,\n  b: state.b,\n}))(Dva);\n\n//connect不传参不获取数据，dispatch默认传给组件\n//export default connect()(Dva);\n```\n\n### 04 | 异步逻辑处理      \n\neffects处理异步等一些有副作用的逻辑，如下\n\n```jsx\nimport { request } from 'umi';\nexport default {\n  namespace: 'global',//所有models里面的namespace不能重名\n  state: {\n    login: false,\n  },\n  reducers: {//处理同步 左key 接收dispatch({type:key\n    signin:(state,{type,payload})=>({\n      ...state,\n      login: true,//payload.实际数据决定login的值\n    }),\n  },\n  effects: {\n    //接收来自 dispatch({type:'global/login'...\n    *login(action, { call, put, select }) {\n      const data = yield call(request,'/umi/login',{method:'post',data:{username:action.payload.username,password:action.payload.password}})\n      yield put({\n        type: 'signin',\n        payload:data\n      });\n    },\n  }\n};\n\n```\n\n[^call]: 执行异步函数\n[^put]: 发出一个 Action，给reducers\n[^select]: 从state里获取数据,如`const todos = yield select(state => state.todos)`\n[^yield]: 状态机语法，类似await，同步书写异步代码\n[^action]: 可获取发送请求时的类型，携带的负载\n\n### 05 | 丢弃connect高阶组件，转投hooks\n\n```jsx\nimport { useDispatch, useSelector } from 'umi';\n\nconst 组件 = () => {\n  const dispatch = useDispatch();\n  const { dva } = useSelector((state) => ({ dva: state.dva }));\n  return (\n    <>\n      <h3 className=\"title\">子组件3</h3>\n      <div>{dva}</div>\n      <div>\n        <button\n          onClick={() => {\n            dispatch({ type: 'global/setTitle', payload: { a: 11, b: 22 } });\n          }}\n        >\n          修改全局model\n        </button>\n      </div>\n    </>\n  );\n};\n\nexport default 组件;\n\n```\n\n\n\n### 06 | subscriptions **源** 获取 \n\n订阅一个数据“源”的变化，使用场景如：服务器的 websocket 连接、keyboard 输入、geolocation 变化、history 路由变化\n\n```jsx\nimport key from 'keymaster';\n\nexport default {\n  namespace: 'global',\n  state: {\n  },\n  subscriptions: {\n    listenRoute({ dispatch,history}) {\n      history.listen(({ pathname, query }) => {\n        console.log('global subscriptions',pathname,query);\n      });\n    },\n    listenKeyboard({dispatch}) {//监听键盘\n      key('⌘+i, ctrl+i', () => { dispatch({type:'setText'}) });\n    },\n    listenResize({dispatch}) {//监听窗口变化\n      window.onresize = function(){\n        console.log('onresize')\n      }\n    },\n    listenScroll({dispatch,history}){\n      window.onscroll=function () {\n        console.log('onscroll')\n      }\n    }\n  },\n};\n\n```\n\n[^listenRoute]: subsription中的方法名是随意定的\n[^dispatch]: 发送action给reducers\n[^history]: 等同于umi包内history对象\n\n\n\n## 模块五 ：运行时配置\n\n构建时配置`config/config`能覆盖大量场景，但有一些却是编译时很难触及的。\n\n比如：\n\n- 在出错时显示个 message 提示用户\n- 在加载和路由切换时显示个 loading\n- 页面载入完成时请求后端，根据响应动态修改路由\n\n 运行时配置和构建时配置的区别是他跑在浏览器端，基于此，我们可以在这里写函数、jsx、import 浏览器端依赖等等，注意不要引入 node 依赖。 \n\n**配置方式**\n\n约定 `src/app.jsx` 定义并暴露一些固定名称的函数，他们会在浏览器端择机运行，全局执行一些业务\n\n### 01 | 渲染前的权限校验\n\nrender函数， 用于改写把整个应用 render 到 dom 树里， 覆写 render，接受一个 oldRender 函数，最后用 oldRender 来渲染dom， 需至少被调用一次 \n\n```jsx\nexport const render = async (oldRender) => {\n  const { isLogin} = await request('/umi/auth');\n  if (!isLogin) {\n    history.push('/login');\n  }\n  // oldRender， Function，原始 rende}r 方法，需至少被调用一次\n  oldRender();\n}  \n\n```\n\n```jsx\n//mock/auth  \n'GET /umi/auth': (req, res) => {\n  res.send({\n    isLogin: true,\n  });\n},\n```\n\n[^注意]: render方法只调用一次\n\n### 02 | 动态路由读取、添加\n\n`patchRoutes`函数提供了在运行时，动态修改路由的入口，一般可以和`render`函数配合， 请求服务端根据响应动态更新路由 \n\n```jsx\nexport function patchRoutes({ routes }) {\n\t//routes为当前路由\n  routes.unshift({\n    path: '/foo',\n    exact: true,\n    component: require('@/pages/foo').default,\n  });\n}\n```\n\n需要注意的地方是：\n\n- 动态路由的`compnent`要的是一个组件不是一段地址，可通过require引入\n- 动态路由读取后，跳转后不显示，需要关闭mfsu: {}\n- 子路由不跳转，除了layout组件，其他需要添加exact，构建时的配置在编译后都会自动加，而动态路由如果路由数据没有exact会导致不跳转\n- 数据数据里面不可以有require，数据需要过滤，require(非空字符拼接+变量)\n- document.ejs报错，需要require拼接时找到index.jsx 目前umi3有这个问题\n\n\n\n模拟路由数据\n\n```jsx\n//mock/auth\n\n'GET /umi/menus': (req, res) => {\n    res.send([\n      {\n        path: '/',\n        component: 'layouts/layout1',\n        routes: [\n          {\n            title: '资源引入',\n            path: '/resources',\n            component: 'pages/css-img',\n          },\n          { path: '/less', component: 'pages/less' },\n          {\n            path: '/goods',\n            component: 'layouts/layout2',\n            routes: [\n              { path: '/goods/:id?', component: 'pages/goods/goods-detail' },\n              {\n                path: '/goods/:id/comment',\n                component: 'pages/goods/comment',\n              },\n              {\n                path: '/goods/:id/comment/:cid',\n                component: 'pages/goods/comment/comment-detail',\n              },\n              { component: 'pages/404' },\n            ],\n          },\n          { path: '/data-interaction', component: 'pages/data-interaction' },\n          { path: '/dva', component: 'pages/dva' },\n          { path: '/antd', component: 'pages/antd' },\n          { path: '/hooks', component: 'pages/hooks' },\n          {\n            path: '/user',\n            component: 'pages/user',\n            wrappers: ['wrappers/auth'],\n          },\n\n          { path: '/', redirect: '/antd' },\n          { component: 'pages/404' },\n        ],\n      },\n      { component: 'pages/404' },\n    ]);\n  },\n```\n\n读取路由数据并添加路由：\n\n```jsx\n//src/app\n\nlet routesData = [];//模块变量用来存储路由数据\n\n//render函数里面读取路由数据\nexport const render = async (oldRender) => {\n  const { isLogin } = await http('/umi/auth');\n  if (isLogin) {\n    //获取路由数据\n    routesData = await http('/umi/menus');\n  } else {\n    history.push('/login');\n  }\n  oldRender();\n};\n\nexport function patchRoutes({ routes }) {\n  filterRoutes(routesData);//处理数据，添加exact，指定index.js,拼接require\n  routesData.map((item) => routes.push(item));//动态添加路由\n}\n\nconst filterRoutes = (routesData) => {\n  routesData.map((item) => {\n    \n    //exact处理\n    if (item.routes && item.routes.length > 0) {\n      filterRoutes(item.routes);//含 routes键的需要递归处理\n    } else {\n      item.exact = true;//不含routes键的都添加exact\n    }\n    \n    //component地址拼接处理\n    if (!item.redirect) {//不处理带有redirect字段\n      if (item.component.includes('404')) {//404没有index文件结构\n        item.component = require('@/' + item.component + '.jsx').default;\n      } else {\n        //其他页面都指向index结构，避免umi3的document.ejs报错\n        item.component = require('@/' + item.component + '/index.jsx').default;\n      }\n     \t//部分需要授权路由的拼接\n      if (item.wrappers && item.wrappers.length > 0) {\n        item.wrappers.map((str, index) => {\n          item.wrappers[index] = require('@/' + str + '.jsx').default;\n        });\n      }\n    }\n  });\n};\n```\n\n\n\n### 03 | 路由监听，埋点统计\n\n `onRouteChange`函数内部可以设置，在初始加载和路由切换时做一些事情，比如埋点，设置动态标题等操作\n\n```jsx\nexport function onRouteChange({ matchedRoutes, location, routes, action }) {\n  //动态设置标题\n  document.title = matchedRoutes[matchedRoutes.length - 1].route.title || '默认标题'\n}\n```\n\n[^matchedRoutes]: 当前匹配的路由及其子路由\n[^location]: history 提供的 location 对象\n[^routes]: 路由集合\n[^action]: `PUSH|POP|REPLACE|undefined`，初次加载时为 `undefined`\n\n\n\n### 04 | 拦截器 \n\numi内置的request和useRequest在发送请求之前和数据返回后，可以做一些通用的配置业务，这个时候考虑配置拦截器，参考[插件配置](https://umijs.org/zh-CN/plugins/plugin-request#%E8%BF%90%E8%A1%8C%E6%97%B6%E9%85%8D%E7%BD%AE)\n\n```jsx\nexport const request = {\n  requestInterceptors: [\n    (url, options) => {\n      // 请求地址 配置项\n      options.headers = {\n        token:'..',\n      };\n      return { url, options };\n    },\n  ],\n  responseInterceptors: [],\n};\n```\n\n[^注意]: 对fetch和第三方的请求库无效，如axios，需要自行配置\n\n\n\n##  结束语  \n\n###  结束语 | 未来愉快替代create-react-app 开发  \n\numi3框架到这里就告一段落了，一般适合开发一些h5端的各类web应用，如果考虑开发中台管理系统，推荐去看看蚂蚁系还提供了antd-pro框架\n\n",contentRendered:'<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>Umi 是蚂蚁金服的底层前端框架，是可扩展的企业级前端应用框架，内置了路由、构建、部署、测试， 包含组件打包、文档工具、请求库、hooks 库、数据流等 ， 通过框架的方式简化 React 开发</p>\n</div>\n<h2 id="模块一-框架环境和基本使用" tabindex="-1"><a class="header-anchor" href="#模块一-框架环境和基本使用" aria-hidden="true">#</a> 模块一 : 框架环境和基本使用</h2>\n<h3 id="_01-环境准备-快速上手" tabindex="-1"><a class="header-anchor" href="#_01-环境准备-快速上手" aria-hidden="true">#</a> 01 | 环境准备，快速上手</h3>\n<h4 id="准备工作" tabindex="-1"><a class="header-anchor" href="#准备工作" aria-hidden="true">#</a> 准备工作</h4>\n<p>由于国内网络和前端的特殊性，在安装依赖等方面可能会失败或导致无法启动，浪费大量的时间，推荐使用yarn作为包管理器，并且使用国内镜像，推荐yrm这个工具管理yarn镜像</p>\n<p>安装</p>\n<div class="language-powershell ext-powershell line-numbers-mode"><pre v-pre class="language-powershell"><code>npm install <span class="token operator">-</span>g yrm  \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>查看yarn镜像源</p>\n<div class="language-powershell ext-powershell line-numbers-mode"><pre v-pre class="language-powershell"><code>yrm <span class="token function">ls</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>切换源</p>\n<div class="language-powershell ext-powershell line-numbers-mode"><pre v-pre class="language-powershell"><code>yrm use taobao\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="项目初始化" tabindex="-1"><a class="header-anchor" href="#项目初始化" aria-hidden="true">#</a> 项目初始化</h4>\n<p>先找个地方建个空目录。</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token function">mkdir</span> myapp <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> myapp\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>使用yarn安装下载umi环境</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token function">yarn</span> create @umijs/umi-app\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>安装依赖：</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code>$ <span class="token builtin class-name">cd</span> 目录\n$ <span class="token function">yarn</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>启动项目：</p>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code>yarn start\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>在浏览器里打开 http://localhost:8000/，能看到以下界面，</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://img.alicdn.com/tfs/TB1JpeLwxD1gK0jSZFsXXbldVXa-1540-950.png" data="aurora"></p>\n<h3 id="_02-目录结构" tabindex="-1"><a class="header-anchor" href="#_02-目录结构" aria-hidden="true">#</a> 02 | 目录结构</h3>\n<p>umi 更倾向于选择约定的方式，支持<code>js|jsx|ts|tsx</code>等后缀</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token builtin class-name">.</span>\n├── dist                          // 默认的 build 输出目录\n├── mock                          // mock 文件所在目录，基于 express\n├── config\n    ├── config.js                  // umi 配置，同 .umirc.js，二选一\n├── public  \t\t\t\t\t \t\t\t\t\t\t // 变通的数据资源目录和一些无需打包的资源\n└── src                           // 源码目录\n    ├── layouts/index.js           // 全局布局\n    ├── models\t\t\t\t\t           // 数据流\n    ├── wrappers\t\t\t\t\t         // 权限管理\n    ├── pages                     // 页面目录，里面的文件即路由\n        ├── .umi                  // dev 临时目录，需添加到 .gitignore\n        ├── .umi-production       // build 临时目录，会自动删除\n        ├── document.ejs           // HTML 模板\n        ├── <span class="token number">404</span>.js                 // <span class="token number">404</span> 页面\n        ├── page1.js               // 页面 <span class="token number">1</span>，任意命名，导出 react 组件\n        ├── page1.test.js          // 测试用例文件\n        └── page2               \t\t// 页面 <span class="token number">2</span>，内部可含有\n    ├── global.css                 // 约定的全局样式文件，自动引入，也可以用 global.less\n    ├── global.js                  // 可以在这里加入 polyfill\n    ├── app.js                     // 运行时配置文件\n├── .umirc.js                      // umi 配置，同 config/config.js，二选一\n├── .env                           // 环境变量\n└── package.json\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h3 id="_03-构建时配置" tabindex="-1"><a class="header-anchor" href="#_03-构建时配置" aria-hidden="true">#</a> 03 | 构建时配置</h3>\n<p>构建时是对开发环境配置，如果项目的配置不复杂，推荐在 <code>.umirc.ts</code> 中写配置； 如果项目的配置比较复杂，可以将配置写在 <code>config/config.ts</code> 中，并把配置的一部分拆分出去，现实往往是复杂的所以推荐<code>config/config</code> , 两种配置方式二选一，<code>.umirc.ts</code> 优先级更高，采用config配置时，一般删除<code>.umirc.ts</code></p>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'umi\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> proxy <span class="token keyword">from</span> <span class="token string">\'./proxy\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> routes <span class="token keyword">from</span> <span class="token string">\'./routes\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> theme <span class="token keyword">from</span> <span class="token string">\'./theme\'</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">nodeModulesTransform</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token comment">// node_modules 目录下依赖文件的编译方式</span>\n    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">\'none\'</span><span class="token punctuation">,</span><span class="token comment">// all 慢 兼容性好 none 快 兼容性一般</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">mfsu</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">//打包提速</span>\n  <span class="token literal-property property">fastRefresh</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">//快速刷新 可以保持组件状态，同时编辑提供即时反馈</span>\n  <span class="token literal-property property">title</span><span class="token operator">:</span><span class="token string">\'UMI3\'</span><span class="token punctuation">,</span><span class="token comment">//配置标题。</span>\n  <span class="token literal-property property">mountElementId</span><span class="token operator">:</span> <span class="token string">\'app\'</span><span class="token punctuation">,</span><span class="token comment">//指定 react app 渲染到的 HTML 元素 id。</span>\n  <span class="token literal-property property">favicon</span><span class="token operator">:</span> <span class="token string">\'/favicon.ico\'</span><span class="token punctuation">,</span><span class="token comment">//使用本地的图片，图片请放到 public 目录</span>\n\n  <span class="token literal-property property">routes</span><span class="token operator">:</span> routes<span class="token punctuation">,</span>\n\n  <span class="token literal-property property">proxy</span><span class="token operator">:</span>proxy<span class="token punctuation">,</span><span class="token comment">//配置反向代理</span>\n\n  <span class="token comment">//启用按需加载</span>\n  <span class="token literal-property property">dynamicImport</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">loading</span><span class="token operator">:</span> <span class="token string">\'@/components/loading\'</span><span class="token punctuation">,</span><span class="token comment">//按需加载时指定的loading组件</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n  theme<span class="token punctuation">,</span><span class="token comment">//配置主题，实际上是配 less 变量。</span>\n  <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">8666</span><span class="token punctuation">,</span> <span class="token comment">// .env里面权限更高一些</span>\n    <span class="token comment">// https:true,//启用https安全访问，于对应协议服务器通讯</span>\n  <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><h3 id="_04-模板约定" tabindex="-1"><a class="header-anchor" href="#_04-模板约定" aria-hidden="true">#</a> 04 |  模板约定</h3>\n<p>umi内部默认没有html，会自行生成，如果需要修改， 新建 <code>src/pages/document.ejs</code></p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">doctype</span> <span class="token name">html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Your App<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="_05-antd-antd-mobile使用" tabindex="-1"><a class="header-anchor" href="#_05-antd-antd-mobile使用" aria-hidden="true">#</a> 05 | antd, antd-mobile使用</h3>\n<p><strong>antd</strong></p>\n<p>umi 已整合 antd 组件库，可通过<code>import {Xxx} from \'antd\'</code>使用</p>\n<p>使用指定版本组件库，<code>yarn add xx-xx@x.x.x</code>后，会优先使用指定版本</p>\n<p><strong>antd主题设定</strong></p>\n<p>找到<code>config/theme</code></p>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token string-property property">"@primary-color"</span><span class="token operator">:</span> <span class="token string">"#399"</span> <span class="token comment">// antd全局样式copy过来统一修改</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><a href="https://ant.design/docs/react/customize-theme-cn" target="_blank" rel="noopener noreferrer">antd样式变量<ExternalLinkIcon/></a></p>\n<p><strong>antd-mobile</strong></p>\n<p>umi 已整合 antd-mobile 组件库，可通过<code>import {Xxx} from \'antd-mobile\'</code>使用v5版本，可通过<code>import {Xxx} from \'antd-mobile-v2\'</code>使用v2版本，使用指定版本组件库，<code>yarn add xx-xx@x.x.x</code>后，会优先使用指定版本，推荐使用v5</p>\n<p>使用v5版本报错，找不到被使用的组件时尝试：</p>\n<ul>\n<li>删除.umi</li>\n<li>更新 @umijs/preset-react 包</li>\n<li>关闭mfsu</li>\n<li>重启</li>\n</ul>\n<p>v5主题修改</p>\n<p><code>src/global.less</code></p>\n<div class="language-less ext-less line-numbers-mode"><pre v-pre class="language-less"><code><span class="token selector">:root:root</span> <span class="token punctuation">{</span>\n  <span class="token property">--adm-color-primary</span><span class="token punctuation">:</span> #399<span class="token punctuation">;</span><span class="token comment">// antd-mobile全局样式copy过来统一修改</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><a href="https://mobile.ant.design/zh/guide/theming" target="_blank" rel="noopener noreferrer">antd-mobile提供的所有全局变量<ExternalLinkIcon/></a></p>\n<h3 id="_06-图片和其他资源引入" tabindex="-1"><a class="header-anchor" href="#_06-图片和其他资源引入" aria-hidden="true">#</a> 06 | 图片和其他资源引入</h3>\n<p>项目中使用图片有两种方式，</p>\n<ol>\n<li>先把图片传到 cdn，然后在 JS 和 CSS 中使用图片的绝对路径</li>\n<li>把图片放在项目里，然后在 JS 和 CSS 中通过相对路径的方式使用</li>\n</ol>\n<p>前者趋向数据图片，后者趋向写死的图片，通过相对路径引入图片的时候，如果图片小于 10K，会被编译为 Base64嵌入网页</p>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token keyword">import</span> styles <span class="token keyword">from</span> <span class="token string">\'./index.css\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> user <span class="token keyword">from</span> <span class="token string">\'../../assets/images/userBj.png\'</span>\n<span class="token keyword">function</span> <span class="token function">CssImg</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>user<span class="token punctuation">}</span></span><span class="token punctuation">/></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'../../assets/images/userBj.png\'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token plain-text">\n\n      </span><span class="token punctuation">{</span><span class="token comment">/*动态图片 丢到服务器 推荐,或临时指向public 不推荐*/</span><span class="token punctuation">}</span><span class="token plain-text">\n\t\t\t</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cnd<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/img/bg.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token plain-text">\n      \n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>test1<span class="token punctuation">}</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token literal-property property">height</span><span class="token operator">:</span><span class="token number">50</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">测试</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> CssImg\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><div class="language-less ext-less line-numbers-mode"><pre v-pre class="language-less"><code><span class="token selector">.test1</span><span class="token punctuation">{</span>\n  <span class="token comment">/* background: url("../../assets/images/bg.jpg"); */</span>\n  <span class="token comment">/* background: url("~@/assets/images/bg.jpg"); */</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">"/img/bg.jpg"</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="模块二-组件书写风格与页面跳转" tabindex="-1"><a class="header-anchor" href="#模块二-组件书写风格与页面跳转" aria-hidden="true">#</a> 模块二 : 组件书写风格与页面跳转</h2>\n<h3 id="_01-less-变量-混合-嵌套-父选择器" tabindex="-1"><a class="header-anchor" href="#_01-less-变量-混合-嵌套-父选择器" aria-hidden="true">#</a> 01 | Less 变量，混合，嵌套，父选择器</h3>\n<p>框架 自带了 less，css 及模块化的解析工具 ，推荐模块化使用less<code>import styles from \'xx.less</code>避免了全局污染 和 选择器复杂</p>\n<p>模块化的基本原理很简单，就是对每个类名（非 :global 声明的）按照一定规则进行转换，保证它的唯一性。如果在浏览器里查看这个示例的 dom 结构，你会发现实际渲染出来是这样的：</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title___3TqAx<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>类名被自动添加了一个 hash 值，这保证了它的唯一性。</p>\n<blockquote>\n<p>实际开发中简单的样式我们并不推荐写 css，推荐使用模板组件来进行开发，或者直接写行内 css。css 并没有很好的依赖关系，很多项目都有冗余的 css，但是却不敢删除</p>\n</blockquote>\n<h4 id="全局变量" tabindex="-1"><a class="header-anchor" href="#全局变量" aria-hidden="true">#</a> 全局变量</h4>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token punctuation">{</span><span class="token comment">/* title 为global.less配置的整体样式 */</span><span class="token punctuation">}</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">全局样式</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>\n\n\n@<span class="token keyword">import</span> <span class="token string">\'~antd/es/style/themes/default.less\'</span><span class="token punctuation">;</span>\n<span class="token comment">//使用default的变量</span>\n<span class="token punctuation">.</span>myLink <span class="token punctuation">{</span>\n  <span class="token literal-property property">color</span><span class="token operator">:</span> @primary<span class="token operator">-</span>color<span class="token punctuation">;</span>\n  font<span class="token operator">-</span>size<span class="token operator">:</span> @font<span class="token operator">-</span>size<span class="token operator">-</span>base<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>myLink<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">测试</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h4 id="局部变量" tabindex="-1"><a class="header-anchor" href="#局部变量" aria-hidden="true">#</a> 局部变量</h4>\n<div class="language-less ext-less line-numbers-mode"><pre v-pre class="language-less"><code><span class="token variable">@width<span class="token punctuation">:</span></span> 100px<span class="token punctuation">;</span>\n<span class="token variable">@height<span class="token punctuation">:</span></span> <span class="token variable">@width</span> <span class="token operator">-</span> 80px<span class="token punctuation">;</span>\n\n<span class="token selector">.header</span> <span class="token punctuation">{</span>\n  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token variable">@width</span><span class="token punctuation">;</span>\n  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token variable">@height</span><span class="token punctuation">;</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="混合" tabindex="-1"><a class="header-anchor" href="#混合" aria-hidden="true">#</a> 混合</h4>\n<div class="language-less ext-less line-numbers-mode"><pre v-pre class="language-less"><code><span class="token selector">.bordered (<span class="token variable">@topW</span>: 1px, <span class="token variable">@bottomW</span>: 2px)</span> <span class="token punctuation">{</span>\n  <span class="token property">border-top</span><span class="token punctuation">:</span> dotted <span class="token variable">@topW</span> black<span class="token punctuation">;</span>\n  <span class="token property">border-bottom</span><span class="token punctuation">:</span> solid <span class="token variable">@bottomW</span> black<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">#a1</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> #111<span class="token punctuation">;</span>\n  <span class="token mixin-usage function">.bordered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">.a2</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n  <span class="token mixin-usage function">.bordered</span><span class="token punctuation">(</span>2px<span class="token punctuation">,</span> 4px<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// border-bottom: solid 5px black; //覆盖混合</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h4 id="嵌套" tabindex="-1"><a class="header-anchor" href="#嵌套" aria-hidden="true">#</a> 嵌套</h4>\n<div class="language-less ext-less line-numbers-mode"><pre v-pre class="language-less"><code><span class="token selector">.nesting</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>\n  <span class="token selector">h3</span> <span class="token punctuation">{</span>\n    <span class="token property">color</span><span class="token punctuation">:</span> coral<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token selector">p</span> <span class="token punctuation">{</span>\n    <span class="token property">color</span><span class="token punctuation">:</span> aqua<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">&lt;div className=</span><span class="token punctuation">{</span>styles.nesting<span class="token punctuation">}</span>>\n  &lt;h3>测试&lt;<span class="token operator">/</span>h3>\n  &lt;p>测试&lt;<span class="token operator">/</span>p>\n&lt;<span class="token operator">/</span>div>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h4 id="global" tabindex="-1"><a class="header-anchor" href="#global" aria-hidden="true">#</a> :global</h4>\n<p>打包后每个class名都会被自动加上一串唯一的序列号,在编译后模块化样式都会加上序号，global可使后面的样式编译后没有序号,脱离模块化，作用到全局，调用方式为非模块化</p>\n<div class="language-less ext-less line-numbers-mode"><pre v-pre class="language-less"><code><span class="token comment">/* 定义多个全局样式 */</span>\n<span class="token selector">.bars_right</span> <span class="token punctuation">{</span>\n  <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>\n  <span class="token selector">:global</span> <span class="token punctuation">{</span>\n    <span class="token selector">.ant-btn</span> <span class="token punctuation">{</span>\n      <span class="token property">border</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token selector">.title</span> <span class="token punctuation">{</span>\n      <span class="token property">background</span><span class="token punctuation">:</span> #fafafa<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">&lt;div className=</span><span class="token punctuation">{</span>styles.bars_right<span class="token punctuation">}</span><span class="token selector">>\n\t&lt;button className=</span><span class="token punctuation">{</span>`ant<span class="token operator">-</span>btn`<span class="token punctuation">}</span>>按钮&lt;<span class="token operator">/</span>button>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="_02-hooks-函数式编写组件" tabindex="-1"><a class="header-anchor" href="#_02-hooks-函数式编写组件" aria-hidden="true">#</a> 02 | hooks + 函数式编写组件</h3>\n<h4 id="函数式编写组件" tabindex="-1"><a class="header-anchor" href="#函数式编写组件" aria-hidden="true">#</a> 函数式编写组件</h4>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">组件</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">const</span> 组件 <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">></span><span class="token punctuation">{</span>\n  \n  <span class="token comment">//使用hooks</span>\n  \n  <span class="token comment">//定义 函数 变量</span>\n  \n  <span class="token keyword">return</span> jsx\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="hooks" tabindex="-1"><a class="header-anchor" href="#hooks" aria-hidden="true">#</a> hooks</h4>\n<h5 id="usecontext" tabindex="-1"><a class="header-anchor" href="#usecontext" aria-hidden="true">#</a> <strong>useContext</strong></h5>\n<p>组件上下文共享，越级传递数据，响应式</p>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token comment">// 创建上下文 context.jsx </span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>createContext<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react\'</span>\n<span class="token keyword">const</span> AppContext <span class="token operator">=</span> <span class="token function">createContext</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> AppContext<span class="token punctuation">;</span>\n\n\n<span class="token comment">//祖先组件提供上文 parent.jsx</span>\n<span class="token keyword">function</span> <span class="token function">父组件</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>msg<span class="token punctuation">,</span> setMsg<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">\'hooks组件数据\'</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n  \t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">AppContext.Provider</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> msg<span class="token punctuation">,</span> setMsg <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n      ....\n      &lt;子组件/>\n      ...\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">AppContext.Provider</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token comment">//后代组件接受下文 child.jsx</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> useContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> AppContext <span class="token keyword">from</span> <span class="token string">"../context"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">后代组件</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span>msg<span class="token punctuation">,</span>setMsg<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>AppContext<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>msg<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>setMsg<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">按钮</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><h5 id="usememo" tabindex="-1"><a class="header-anchor" href="#usememo" aria-hidden="true">#</a> <strong>useMemo</strong></h5>\n<p>hooks出来之后，我们能够使用function的形式来创建包含内部state的组件。但是，使用function的形式，失去shouldComponentUpdate，我们无法通过判断前后状态来决定是否更新。在函数组件中，react不再区分mount和update两个状态，函数组件的每一次调用都会执行其内部的所有逻辑，如下：</p>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Xxx</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  \n  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> setValue<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  \n  <span class="token keyword">function</span> <span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"getNum"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> count <span class="token operator">*</span> <span class="token number">100</span>\n  <span class="token punctuation">}</span>\n \t\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token punctuation">{</span><span class="token comment">/* 组件任何一条数据变化，getNum函数重复调用 */</span><span class="token punctuation">}</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">getNum：</span><span class="token punctuation">{</span><span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">+1</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>value<span class="token punctuation">}</span></span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token parameter">ev</span> <span class="token operator">=></span> <span class="token function">setValue</span><span class="token punctuation">(</span>ev<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>那么会带来较大的性能损耗。useMemo可指定依赖的数据变化才渲染，类似vue计算属性，返回缓存后的值数据，可拿去渲染</p>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token keyword">const</span> getNumMemo <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">//可执行一些没有副作用的业务，比如同步重新计算count</span>\n  <span class="token keyword">return</span> count <span class="token operator">*</span> <span class="token number">100</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n<span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token punctuation">{</span><span class="token comment">/* 组件任何一条数据变化，getNum函数重复调用 */</span><span class="token punctuation">}</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">getNum：</span><span class="token punctuation">{</span>getNumMemo<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">+1</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>value<span class="token punctuation">}</span></span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token parameter">ev</span> <span class="token operator">=></span> <span class="token function">setValue</span><span class="token punctuation">(</span>ev<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n  <span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h5 id="memo" tabindex="-1"><a class="header-anchor" href="#memo" aria-hidden="true">#</a> <strong>memo</strong></h5>\n<p>react父组件更新未传递给子的数据，子组件也会更新，如下：</p>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token comment">//修改count 或者 value 时，child组件都会更新</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">+1</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>value<span class="token punctuation">}</span></span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token parameter">ev</span> <span class="token operator">=></span> <span class="token function">setValue</span><span class="token punctuation">(</span>ev<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Child</span></span> <span class="token attr-name">count</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>count<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>memo可以协助子组件只依赖传递过来的数据变化时才更新</p>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>memo<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react\'</span>\n\n<span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>count<span class="token punctuation">}</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">show</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'child组件渲染\'</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span><span class="token plain-text">Child2组件</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">{</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token comment">//memo 修饰当前组件 依赖父的数据变化时，才渲染</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">memo</span><span class="token punctuation">(</span>Child<span class="token punctuation">)</span>\n\n<span class="token comment">//不包装的情况下，父任意数据更新子都会更新</span>\n<span class="token comment">// export default Child</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h5 id="usecallback" tabindex="-1"><a class="header-anchor" href="#usecallback" aria-hidden="true">#</a> <strong>useCallback</strong></h5>\n<p>由于组件内的业务函数传递给子组件时，每次都会是新的引用，会导致子组件无故更新，如下：</p>\n<p>父组件</p>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token comment">//修改count 或者 value 时，child组件都会更新</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">+1</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>value<span class="token punctuation">}</span></span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token parameter">ev</span> <span class="token operator">=></span> <span class="token function">setValue</span><span class="token punctuation">(</span>ev<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n<span class="token operator">&lt;</span>Child updateCount<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'业务\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>子组件</p>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>memo<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react\'</span>\n<span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>updateCount<span class="token punctuation">}</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">show</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'child组件渲染\'</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span><span class="token plain-text">Child3组件</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">{</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>updateCount<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">测</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token comment">//memo 修饰当前组件 依赖父的数据变化时，才渲染 但依赖父的是个函数时memo无效</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">memo</span><span class="token punctuation">(</span>Child<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>useCallback可以将函数缓存起来，节省性能，指定某个被依赖的数据变化才更新函数，子组件配合memo实现，如下：</p>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  \n  <span class="token keyword">const</span> updateCount <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">{</span>\n    <span class="token comment">//业务</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n  \t <span class="token comment">//修改count 或者 value 时，child组件都会更新</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">+1</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>value<span class="token punctuation">}</span></span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token parameter">ev</span> <span class="token operator">=></span> <span class="token function">setValue</span><span class="token punctuation">(</span>ev<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Child</span></span> <span class="token attr-name">updateCount</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>updateCount<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h5 id="uselayouteffect" tabindex="-1"><a class="header-anchor" href="#uselayouteffect" aria-hidden="true">#</a> useLayoutEffect</h5>\n<p>useLayoutEffect<strong>早于</strong>类组件<strong>早于</strong>useEffect</p>\n<p><strong>挂载时</strong></p>\n<p>类render → 函数render → useLayoutEffect→ 类didmount → useEffect</p>\n<p><strong>更新时</strong></p>\n<p>类render渲染 → 函数render → useLayoutEffect 销毁→ useLayoutEffect 执行→ 类didUpdate → useEffect 销毁… → useEffect 执行</p>\n<h3 id="_03-路由-权限-动态-约定式" tabindex="-1"><a class="header-anchor" href="#_03-路由-权限-动态-约定式" aria-hidden="true">#</a> 03 | 路由,权限,动态,约定式</h3>\n<p>页面地址的跳转都是在浏览器端完成的，不会重新请求服务端获取 html，html 只在应用初始化时加载一次  ，页面由不同的组件构成，页面的切换其实就是不同组件的切换， 只需要在把不同的路由路径和对应的组件关联上 ，实现方式如下两种</p>\n<ul>\n<li>\n<p>配置型路由（<code>在配置文件写入相关配置代码</code>)，配置型存在时，约定式失效</p>\n</li>\n<li>\n<p>约定式(<code>约定文件位置名称与格式无需写代码配置</code>)</p>\n</li>\n</ul>\n<p>约定式是理想型方案，实际开发一般会向现实低头，推荐采用配置型路由</p>\n<p>配置<code>config/config</code>的<code>routes</code>属性，接受数组，一般单独写一个routes模块文件如下:</p>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token comment">//  config/routes</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/less\'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">\'less\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">// 不写路径从 src/pages找组件</span>\n  <span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/antd\'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">\'./antd\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">//当前指向pages</span>\n  <span class="token punctuation">{</span> <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">\'@/pages/404\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">//@指向src</span>\n<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token comment">//  config/routes</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">[</span>\n  <span class="token operator">...</span>\n  <span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/antd\'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">\'antd\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>  <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">\'/\'</span><span class="token punctuation">,</span> <span class="token literal-property property">redirect</span><span class="token operator">:</span> <span class="token string">\'/antd\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">\'@/pages/404\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">//@指向src</span>\n<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/login\'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">\'login\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/reg\'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">\'./reg\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n    <span class="token punctuation">{</span>\n      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/\'</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">\'@/layouts/layout1\'</span><span class="token punctuation">,</span><span class="token comment">// layout组件</span>\n      <span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/less\'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">\'less\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/antd\'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">\'antd\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span>  <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">\'/\'</span><span class="token punctuation">,</span> <span class="token literal-property property">redirect</span><span class="token operator">:</span> <span class="token string">\'/antd\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span> <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">\'@/pages/404\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n    <span class="token punctuation">{</span> <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">\'@/pages/404\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n\n  <span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>[^routes]: 配置子路由，通常在需要为多个路径增加 layout 组件时使用</p>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token comment">//layouts/布局组件</span>\n\n<span class="token comment">//可引入一些components下的公共组件来完成公共布局</span>\n<span class="token keyword">import</span> Nav1 <span class="token keyword">from</span> <span class="token string">\'../../components/nav1\'</span>\n<span class="token keyword">import</span> styles <span class="token keyword">from</span> <span class="token string">\'./index.less\'</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">Layout1</span> <span class="token operator">=</span> <span class="token parameter">props</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>children<span class="token punctuation">}</span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">[</span><span class="token string">\'adm-tab-bar\'</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Nav1</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> Layout1<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/user\'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">\'user\'</span><span class="token punctuation">,</span><span class="token literal-property property">wrappers</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">\'@/wrappers/auth\'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">//路由守卫</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token comment">//wrappers/auth</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Redirect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'umi\'</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">.5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>children<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Redirect</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/login<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>多级子路由</p>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token punctuation">{</span> \n  <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/goods\'</span><span class="token punctuation">,</span> \n  <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">\'@/layouts/layout2\'</span><span class="token punctuation">,</span><span class="token comment">//展示区</span>\n  <span class="token literal-property property">routes</span><span class="token operator">:</span><span class="token punctuation">[</span>\n    <span class="token comment">// { path: \'/goods\', component: \'goods\' },</span>\n    <span class="token comment">// { path:\'/goods\', redirect: \'/goods/2\' },//这里的</span>\n    <span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/goods/:id?\'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">\'goods/goods-detail\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">//动态可选路由</span>\n    <span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/goods/:id/comment\'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">\'goods/comment\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">//不配routes,占用当前展示区</span>\n    <span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/goods/:id/comment/:cid\'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">\'goods/comment/comment-detail\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">\'@/pages/404\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="_04-页面跳转-参数接收" tabindex="-1"><a class="header-anchor" href="#_04-页面跳转-参数接收" aria-hidden="true">#</a> 04 | 页面跳转，参数接收</h3>\n<p>声明式跳转+传参</p>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token keyword">const</span> <span class="token function-variable function">nav1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n  \t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">NavLink</span></span> <span class="token attr-name">activeClassName</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>xx<span class="token punctuation">}</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/antd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">antd</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">NavLink</span></span><span class="token punctuation">></span></span>\n  \t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">NavLink</span></span> <span class="token attr-name">activeStyle</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token literal-property property">color</span><span class="token operator">:</span><span class="token string">\'#399\'</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/antd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">antd</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">NavLink</span></span><span class="token punctuation">></span></span>\n  \t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Link</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/antd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">antd</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Link</span></span><span class="token punctuation">></span></span>\n  \t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Link</span></span> <span class="token attr-name">to</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token literal-property property">pathname</span><span class="token operator">:</span><span class="token string">\'/antd\'</span><span class="token punctuation">,</span><span class="token literal-property property">search</span><span class="token operator">:</span><span class="token string">\'?a=1\'</span><span class="token punctuation">,</span><span class="token literal-property property">query</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">antd</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Link</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>编程式跳转+传参</p>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token comment">//history可以导入或者上下文获取</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> history <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'umi\'</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function">组件</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>history<span class="token punctuation">}</span></span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token comment">// 跳转到指定路由</span>\nhistory<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">\'/list\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 带参数跳转到指定路由</span>\nhistory<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">\'/list?a=b\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nhistory<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">pathname</span><span class="token operator">:</span> <span class="token string">\'/list\'</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">query</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token string">\'b\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 跳转到上一个路由</span>\nhistory<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>参数接收</p>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token comment">//可以从组件上下文获取</span>\n<span class="token keyword">const</span> <span class="token function-variable function">组件</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>location<span class="token punctuation">,</span>match<span class="token punctuation">}</span></span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token comment">//如果没有上下文可以withRouter包装组件</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> withRouter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'umi\'</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function">withRouter</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>location<span class="token punctuation">,</span>match<span class="token punctuation">}</span></span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token comment">//可以直接使用umi的hooks获取</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> useLocation<span class="token punctuation">,</span>useParams<span class="token punctuation">,</span>useRouteMatch<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'umi\'</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">组件</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">{</span>\n  <span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token function">useParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  params<span class="token punctuation">.</span>id <span class="token operator">|</span> params<span class="token punctuation">.</span>cid\n  <span class="token keyword">const</span> location <span class="token operator">=</span> <span class="token function">useLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  location<span class="token punctuation">.</span>search <span class="token operator">|</span> location<span class="token punctuation">.</span>query\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>相关api<a href="https://umijs.org/zh-CN/api#link" target="_blank" rel="noopener noreferrer">查阅<ExternalLinkIcon/></a></p>\n<h2 id="模块三-数据生成与请求" tabindex="-1"><a class="header-anchor" href="#模块三-数据生成与请求" aria-hidden="true">#</a> 模块三 : 数据生成与请求</h2>\n<h3 id="_01-数据模拟umi-mock" tabindex="-1"><a class="header-anchor" href="#_01-数据模拟umi-mock" aria-hidden="true">#</a> 01 |  数据模拟umi-mock</h3>\n<p>Mock 数据是前端开发过程中必不可少的一环，是分离前后端开发的关键链路。通过预先跟服务器端约定好的接口，模拟请求数据甚至逻辑，能够让前端开发独立自主，不会被服务端的开发所阻塞</p>\n<p>UMI3里约定 mock 文件夹下的文件或者 page(s) 文件夹下的 _mock 文件即 mock 文件，文件导出接口定义，支持基于 <code>require</code> 动态分析的实时刷新，支持 ES6 语法，以及友好的出错提示。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 支持值为 Object 和 Array</span>\n  <span class="token string-property property">\'GET /api/users\'</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">users</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  \n  <span class="token comment">// GET 可省略</span>\n  <span class="token string-property property">\'/api/users/1\'</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n  <span class="token comment">// 支持自定义函数，API 参考 express@4,可完成业务</span>\n  <span class="token string-property property">\'POST /api/users/create\'</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">\'OK\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>当客户端（浏览器）发送请求，如：<code>GET /api/users</code>，那么本地启动的 <code>umi dev</code> 会跟此配置文件匹配请求路径以及方法，如果匹配到了，就会将请求通过配置处理，就可以像样例一样，你可以直接返回数据</p>\n<p><a href="http://mockjs.com/" target="_blank" rel="noopener noreferrer">Mock.js<ExternalLinkIcon/></a> 辅助生成自然且多条数据</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">import</span> Mock <span class="token keyword">from</span> <span class="token string">\'mockjs\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 使用 mockjs 等三方库</span>\n  <span class="token string-property property">\'GET /api/tags\'</span><span class="token operator">:</span> Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token string-property property">\'list|100\'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">\'@city\'</span><span class="token punctuation">,</span> <span class="token string-property property">\'value|1-100\'</span><span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token string-property property">\'type|0-2\'</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>对于整个系统来说，请求接口是复杂并且繁多的，为了处理大量模拟请求的场景，我们通常把每一个数据模型抽象成一个文件，统一放在 <code>mock</code> 的文件夹中，然后他们会自动被引入。</p>\n<p>为了更加真实的模拟网络数据请求，往往需要模拟网络延迟时间，可以通过第三方插件来简化这个问题，如：<a href="https://github.com/nikogu/roadhog-api-doc/blob/master/lib/utils.js#L5" target="_blank" rel="noopener noreferrer">roadhog-api-doc#delay<ExternalLinkIcon/></a>。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> delay <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'roadhog-api-doc\'</span><span class="token punctuation">;</span> <span class="token comment">// 模拟延时</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">delay</span><span class="token punctuation">(</span>\n  <span class="token punctuation">{</span>\n    <span class="token comment">// 支持值为 Object 和 Array</span>\n    <span class="token string-property property">\'/umi/goods\'</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">\'韭菜\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">\'西红柿\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token number">2000</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//延时</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>介权</p>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token comment">//mock/auth</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token string-property property">\'POST /umi/login\'</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> username<span class="token punctuation">,</span> password <span class="token punctuation">}</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>username <span class="token operator">===</span> <span class="token string">\'alex\'</span> <span class="token operator">&amp;&amp;</span> password <span class="token operator">===</span> <span class="token string">\'alex123\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">err</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">\'成功\'</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">currentAuthority</span><span class="token operator">:</span> <span class="token string">\'user\'</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>username <span class="token operator">===</span> <span class="token string">\'admin\'</span> <span class="token operator">&amp;&amp;</span> password <span class="token operator">===</span> <span class="token string">\'admin123\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">err</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">\'成功\'</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">currentAuthority</span><span class="token operator">:</span> <span class="token string">\'admin\'</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">err</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">\'失败\'</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>分页</p>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token comment">//查分页</span>\n<span class="token comment">//指定页数范围内显示全数据，超过只显示两条</span>\n<span class="token string-property property">\'GET /umi/list\'</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> _page <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> _limit <span class="token operator">=</span> <span class="token number">3</span> <span class="token punctuation">}</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> totalPage <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">//设定总页数</span>\n  <span class="token keyword">const</span> lastPageLimit <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">//设定尾页条数</span>\n  <span class="token keyword">const</span> total <span class="token operator">=</span> _limit <span class="token operator">*</span> <span class="token punctuation">(</span>totalPage <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> lastPageLimit<span class="token punctuation">;</span> <span class="token comment">//计算总条数</span>\n\n  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      _page<span class="token punctuation">,</span>\n      _limit<span class="token punctuation">,</span>\n      total<span class="token punctuation">,</span>\n      <span class="token comment">//控制data键，后面数组的条数</span>\n      <span class="token operator">...</span>Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">data|</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>_page <span class="token operator">>=</span> totalPage <span class="token operator">?</span> lastPageLimit <span class="token operator">:</span> _limit<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span>\n            <span class="token string-property property">\'id|+1\'</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n            <span class="token literal-property property">create_at</span><span class="token operator">:</span> <span class="token string">\'@date("yyyy-MM-dd HH:mm:ss")\'</span><span class="token punctuation">,</span>\n            <span class="token string-property property">\'type_str|1\'</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n              <span class="token string">\'中转费明细\'</span><span class="token punctuation">,</span>\n              <span class="token string">\'调整单明细\'</span><span class="token punctuation">,</span>\n              <span class="token string">\'代收到付明细\'</span><span class="token punctuation">,</span>\n              <span class="token string">\'客户运费明细\'</span><span class="token punctuation">,</span>\n              <span class="token string">\'导入失败记录\'</span><span class="token punctuation">,</span>\n            <span class="token punctuation">]</span><span class="token punctuation">,</span>\n            <span class="token function-variable function">name</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              <span class="token keyword">return</span> <span class="token punctuation">[</span>\n                Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token string">\'@datetime("MMdd")\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n                Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token string">\'@county()\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n                <span class="token keyword">this</span><span class="token punctuation">.</span>operator<span class="token punctuation">,</span>\n              <span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">\'-\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'http://xxx/shop/quotation/导入失败列表.xlsx\'</span><span class="token punctuation">,</span>\n            <span class="token literal-property property">operator</span><span class="token operator">:</span> <span class="token string">\'@cname\'</span><span class="token punctuation">,</span>\n            <span class="token string-property property">\'status|1\'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'0\'</span><span class="token punctuation">,</span> <span class="token string">\'1\'</span><span class="token punctuation">,</span> <span class="token string">\'2\'</span><span class="token punctuation">,</span> <span class="token string">\'3\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br></div></div><p>增删改</p>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token comment">//增</span>\n<span class="token string-property property">\'POST /umi/list\'</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>\n    Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token string-property property">\'data|1\'</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n          <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span>req<span class="token punctuation">.</span>body<span class="token punctuation">,</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">\'成功\'</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span>\n          <span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n          <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">\'失败\'</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n<span class="token comment">//删</span>\n<span class="token string-property property">\'DELETE /umi/list/:id\'</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>\n    Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token string-property property">\'data|1\'</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n          <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">task_id</span><span class="token operator">:</span> <span class="token string">\'123\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">\'成功\'</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span>\n          <span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n          <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">\'失败\'</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n  \n<span class="token comment">//改</span>\n<span class="token string-property property">\'PATCH /umi/list/:id\'</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>\n    Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token string-property property">\'data|1\'</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n          <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span>req<span class="token punctuation">.</span>body <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">\'成功\'</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span>\n          <span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n          <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">\'失败\'</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br></div></div><h3 id="_02-数据模拟-json-server" tabindex="-1"><a class="header-anchor" href="#_02-数据模拟-json-server" aria-hidden="true">#</a> 02 |  数据模拟 json-server</h3>\n<p>一款第三方模拟服务器和数据的包，支持json文件存本地被修改，自动生成resut风格可操作的接口，有效的CURD操作，对数据要求高时，推荐使用</p>\n<h3 id="_03-反向代理" tabindex="-1"><a class="header-anchor" href="#_03-反向代理" aria-hidden="true">#</a> 03 | 反向代理</h3>\n<p>工作中前后端是分离式开发，需要访问本地或者线上真实服务器时，跨域也成了每个前端工程师都需要了解的基本知识，解决方案有前端或者后端开发人员来解决</p>\n<p>在 UMI3 中配置<code>config/config</code>的proxy键，接受一个对象，可单独做一个模块到<code>config/proxy</code>，并暴露出来</p>\n<div class="language-tsx ext-tsx line-numbers-mode"><pre v-pre class="language-tsx"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token string-property property">\'/api/\'</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 要代理的真实服务器地址</span>\n    target<span class="token operator">:</span> <span class="token string">\'https://localhost:9001\'</span><span class="token punctuation">,</span>\n    <span class="token comment">// 配置了这个可以从 http 代理到 https</span>\n    https<span class="token operator">:</span><span class="token boolean">true</span>\n    <span class="token comment">// 依赖 origin 的功能可能需要这个，比如 cookie</span>\n    changeOrigin<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    pathRewrite<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">\'^/api\'</span><span class="token operator">:</span> <span class="token string">\'\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">//路径替换</span>\n  <span class="token punctuation">}</span> \n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="_04-fetch请求" tabindex="-1"><a class="header-anchor" href="#_04-fetch请求" aria-hidden="true">#</a> 04 |  fetch请求</h3>\n<p>fetch是原生的数据请求方法，返回promise</p>\n<div class="language-tsx ext-tsx line-numbers-mode"><pre v-pre class="language-tsx"><code><span class="token keyword">const</span> <span class="token function-variable function">getData</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token comment">//let res = await fetch(\'/umi/goods/home?_limit=3\'); </span>\n\t\t<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>\n    <span class="token string">\'/umi/login\'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n      method<span class="token operator">:</span><span class="token string">\'post\'</span><span class="token punctuation">,</span>\n      headers<span class="token operator">:</span><span class="token punctuation">{</span><span class="token string-property property">"Content-type"</span><span class="token operator">:</span><span class="token string">"application/x-www-form-urlencoded"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n      body<span class="token operator">:</span><span class="token string">\'username=alex&amp;password=alex123\'</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token keyword">await</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="_05-umi-request请求" tabindex="-1"><a class="header-anchor" href="#_05-umi-request请求" aria-hidden="true">#</a> 05 |  umi-request请求</h3>\n<p>通过 <code>import { request } from \'umi\';</code> 你可以使用内置的请求方法。第一个参数是 url，第二个参数是请求的 options。options 具体格式参考 <a href="https://github.com/umijs/umi-request/blob/master/README_zh-CN.md" target="_blank" rel="noopener noreferrer">umi-request<ExternalLinkIcon/></a>，也和axios用法基本一致</p>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token keyword">const</span> <span class="token function-variable function">getData</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token string">\'/umi/goods\'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">params</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">_limit</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token comment">// let res = await request(\'/api/goods/home\',{params:{_limit:1}})</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="_06-userequest请求" tabindex="-1"><a class="header-anchor" href="#_06-userequest请求" aria-hidden="true">#</a> 06 |  useRequest请求</h3>\n<p>useRequest 是最佳实践中内置的一个 Hook ，默认对数据要求必须返回一个data字段，如果不希望有此限定，可以构建时配置一下<code>config/config</code></p>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token literal-property property">request</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">dataField</span><span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>在组件初次加载时， 自动触发该函数执行。同时 useRequest 会自动管理异步请求的 <code>loading</code> , <code>data</code> , <code>error</code> 等状态。</p>\n<div class="language-tsx ext-tsx line-numbers-mode"><pre v-pre class="language-tsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>useRequest<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'umi\'</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span>  <span class="token function">RequestHooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\n  <span class="token comment">// 用法 1</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> data<span class="token punctuation">,</span> error<span class="token punctuation">,</span> loading <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useRequest</span><span class="token punctuation">(</span><span class="token string">\'/umi/goods\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t<span class="token comment">// 用法 2</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> data<span class="token punctuation">,</span> error<span class="token punctuation">,</span> loading <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useRequest</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    url<span class="token operator">:</span> <span class="token string">\'/umi/goods\'</span><span class="token punctuation">,</span>\n    params<span class="token operator">:</span><span class="token punctuation">{</span>_limit<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t<span class="token comment">// 用法 4</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> data<span class="token punctuation">,</span> loading<span class="token punctuation">,</span> run <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useRequest</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_limit<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n    url<span class="token operator">:</span> <span class="token string">\'/umi/goods\'</span><span class="token punctuation">,</span>\n    params<span class="token operator">:</span> <span class="token punctuation">{</span> _limit <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    manual<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//手动通过运行run触发</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  \n  <span class="token comment">// 轮询</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> data<span class="token punctuation">,</span> loading<span class="token punctuation">,</span> run <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useRequest</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_limit<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n    url<span class="token operator">:</span> <span class="token string">\'/umi/goods\'</span><span class="token punctuation">,</span>\n    params<span class="token operator">:</span> <span class="token punctuation">{</span> _limit <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    manual<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//手动通过运行run触发</span>\n    pollingInterval<span class="token operator">:</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token comment">//轮询 一秒读一次</span>\n    pollingWhenHidden<span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment">//屏幕不可见时，暂停轮询</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  \n  <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">failed to load</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>loading<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">loading...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">{</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token function">run</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">手动</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br></div></div><h6 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a> </h6>\n<h2 id="模块四-状态管理" tabindex="-1"><a class="header-anchor" href="#模块四-状态管理" aria-hidden="true">#</a> 模块四 ：状态管理</h2>\n<h3 id="_01-dva-介绍" tabindex="-1"><a class="header-anchor" href="#_01-dva-介绍" aria-hidden="true">#</a> 01｜dva 介绍</h3>\n<p>dva 首先是一个基于 <a href="https://github.com/reduxjs/redux" target="_blank" rel="noopener noreferrer">redux<ExternalLinkIcon/></a> 和 <a href="https://github.com/redux-saga/redux-saga" target="_blank" rel="noopener noreferrer">redux-saga<ExternalLinkIcon/></a> 的数据流方案，被umi以插件的方式内置，无需安装直接使用，在原有redux使用基础上更加简化和高效</p>\n<p>dva里面有关状态管理（数据流）的角色和redux的对比如下</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>redux</th>\n<th>dva</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>状态数据</td>\n<td>state</td>\n<td>state</td>\n</tr>\n<tr>\n<td>行为描述</td>\n<td>action</td>\n<td>action</td>\n</tr>\n<tr>\n<td>无副作用业务</td>\n<td>reducer</td>\n<td>reducer</td>\n</tr>\n<tr>\n<td>有副作用业务</td>\n<td>creators</td>\n<td>effect</td>\n</tr>\n<tr>\n<td>通讯请求修改状态函数</td>\n<td>dispatch</td>\n<td>dispatch</td>\n</tr>\n<tr>\n<td>通讯请求获取状态函数</td>\n<td>connect</td>\n<td>connect</td>\n</tr>\n<tr>\n<td>从 <strong>源</strong> 获取数据</td>\n<td>无</td>\n<td>subscription</td>\n</tr>\n</tbody>\n</table>\n<p>[^状态数据]:  javascript 对象，存公共状态的仓库\n[^行为描述]: javascript 对象，必须带有 <code>type</code> 属性指明具体的行为，其它字段可以自定义\n<a href="%E5%8F%91%E9%80%81action%E7%BB%99reducers">^dispatch</a>: 用于触发 action 的函数\n[^无副作用业务]: 一个纯函数，处理公共状态时的一些同步业务\n[^有副作用业务]: 处理公共状态时的一些异步业务\n[^connect]: 连接状态仓库state，把数据流向组件页面</p>\n<h3 id="_02-数据流向" tabindex="-1"><a class="header-anchor" href="#_02-数据流向" aria-hidden="true">#</a> 02 | 数据流向</h3>\n<p>数据的改变发生通常是通过用户交互行为或者浏览器行为（如路由跳转等）触发的，当此类行为会改变数据的时候可以通过 <code>dispatch</code> 发起一个 action，如果是同步行为会直接通过 <code>Reducers</code> 改变 <code>State</code> ，如果是异步行为（副作用）会先触发 <code>Effects</code> 然后流向 <code>Reducers</code> 最终改变 <code>State</code> ，最后<code>State</code>的数据再流回组件页面</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="dva数据流" originSrc="https://zos.alipayobjects.com/rmsportal/PPrerEAKbIoDZYr.png" data="aurora"></p>\n<p>定义一个dva的Model如下：</p>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">namespace</span><span class="token operator">:</span><span class="token string">\'Model名\'</span>，<span class="token comment">//省略不写，认定文件名为Model名</span>\n  <span class="token literal-property property">state</span><span class="token operator">:</span><span class="token punctuation">{</span>公共状态数据<span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">reducers</span><span class="token operator">:</span><span class="token punctuation">{</span>一堆纯函数<span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">effects</span><span class="token operator">:</span><span class="token punctuation">{</span>一堆异步副作用函数<span class="token punctuation">}</span>\n\t<span class="token literal-property property">subscription</span><span class="token operator">:</span><span class="token punctuation">{</span>一堆监听函数<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="_03-全局数据-页面数据获取和修改" tabindex="-1"><a class="header-anchor" href="#_03-全局数据-页面数据获取和修改" aria-hidden="true">#</a> 03 | 全局数据&amp;页面数据获取和修改</h3>\n<p>全局数据定义在<code>src/models/XX</code>，所有页面都可以访问，同步业务的处理交给reducers</p>\n<div class="language-JSX ext-JSX line-numbers-mode"><pre v-pre class="language-JSX"><code>import { history, request } from \'umi\';\nimport key from \'keymaster\';\n\nexport default {\n  \n  namespace: \'global\',//所有models里面的namespace不能重名\n  \n  //初始化全局数据\n  state: {\n    title:\'全局 title\',\n    text: \'全局text\',\n    login: false,\n    a:\'全局models aaaa\',\n  },\n  \n  //处理同步业务  接收dispatch({type:\'global/setText\',...\n  reducers: {\n    setText(state) {\n      // copy更新并返回\n      return {\n        ...state,\n        text: \'全局设置 后的text\'+Math.random().toFixed(2),\n      };\n    },\n    setTitle(state,action) {//action 接受到的参数\n      return {\n        ...state,\n        title: `全局设置 后的title${action.payload.a}/${action.payload.b}`,\n      };\n    },\n    signin:(state)=&gt;({\n      ...state,\n      login: true,\n    }),\n  },\n  \n};\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><p>组件内部获取和修改全局数据</p>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>connect<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'umi\'</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">组件</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">获取全局 state  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token plain-text">\n\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">text:</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>text<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">title:</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>title<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">a:</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span><span class="token constant">A</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token punctuation">{</span>\n        props<span class="token punctuation">.</span>isLogin <span class="token operator">?</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">已登录</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token operator">:</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">未登录</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n      <span class="token punctuation">}</span><span class="token plain-text">\n\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">修改全局 state</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>\n        <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n          props<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n            <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">\'global/setText\'</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n      <span class="token punctuation">></span></span><span class="token plain-text">\n        修改全局text,不传参\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">\n\n      &lt;button\n        onClick=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n          props<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n            <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">\'global/setTitle\'</span><span class="token punctuation">,</span>\n            <span class="token literal-property property">payload</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token literal-property property">b</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">}</span>\n          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token plain-text">\n      >\n        修改全局text,传参\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token parameter">state</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">//抓取全局,重命名</span>\n  <span class="token literal-property property">text</span><span class="token operator">:</span> state<span class="token punctuation">.</span>global<span class="token punctuation">.</span>text<span class="token punctuation">,</span>\n  <span class="token literal-property property">title</span><span class="token operator">:</span> state<span class="token punctuation">.</span>global<span class="token punctuation">.</span>title<span class="token punctuation">,</span>\n  <span class="token constant">A</span><span class="token operator">:</span> state<span class="token punctuation">.</span>global<span class="token punctuation">.</span>a<span class="token punctuation">,</span>\n  <span class="token literal-property property">isLogin</span><span class="token operator">:</span> state<span class="token punctuation">.</span>global<span class="token punctuation">.</span>login<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>组件<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br></div></div><p>页面数据获取和修改</p>\n<p>页面数据定义在<code>pages/页面目录/model.js</code>或者<code>pages/ 页面目录/models/*.js</code>，当前<code>页面目录</code>只分配一个数据文件时，使用<code>model.js</code>,当前<code>页面目录</code>分配多个数据文件时，使用<code>models/*.js</code></p>\n<p><code>页面目录/*.jsx</code>可访问当前<code>页面目录/model.js</code>及当前<code>页面目录/models/*.js</code>,也可向上访问，但子集<code>页面目录</code>和同级<code>页面目录</code>数据不可访问</p>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token comment">//pages/*/model.js</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">namespace</span><span class="token operator">:</span> <span class="token string">\'dva\'</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token string">\'bmw\'</span><span class="token punctuation">,</span> \n  <span class="token literal-property property">reducers</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token function">setStr</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token string">\'qq\'</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">//pages/*/models/a.js</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">namespace</span><span class="token operator">:</span> <span class="token string">\'a\'</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token string">\'page model a\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>组件内部获取和修改页面数据</p>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>connect<span class="token punctuation">,</span>getDvaApp<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'umi\'</span>\n<span class="token keyword">import</span> Child <span class="token keyword">from</span> <span class="token string">\'./child\'</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">Dva</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">获取页面models</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">model.js里面的数据:</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>dva<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">models目录里面的的数据:</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>a<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">models目录里面的的数据:</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>b<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">/></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">\'</span>title<span class="token punctuation">\'</span></span><span class="token punctuation">></span></span><span class="token plain-text">修改页面model数据</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span>props<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">\'dva/setStr\'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">修改</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token parameter">state</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">//抓取页面级别</span>\n  <span class="token literal-property property">dva</span><span class="token operator">:</span>state<span class="token punctuation">.</span>dva<span class="token punctuation">,</span>\n  <span class="token literal-property property">a</span><span class="token operator">:</span> state<span class="token punctuation">.</span>a<span class="token punctuation">,</span>\n  <span class="token literal-property property">b</span><span class="token operator">:</span> state<span class="token punctuation">.</span>b<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Dva<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">//connect不传参不获取数据，dispatch默认传给组件</span>\n<span class="token comment">//export default connect()(Dva);</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h3 id="_04-异步逻辑处理" tabindex="-1"><a class="header-anchor" href="#_04-异步逻辑处理" aria-hidden="true">#</a> 04 | 异步逻辑处理</h3>\n<p>effects处理异步等一些有副作用的逻辑，如下</p>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> request <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'umi\'</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">namespace</span><span class="token operator">:</span> <span class="token string">\'global\'</span><span class="token punctuation">,</span><span class="token comment">//所有models里面的namespace不能重名</span>\n  <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">login</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">reducers</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token comment">//处理同步 左key 接收dispatch({type:key</span>\n    <span class="token function-variable function">signin</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span><span class="token punctuation">{</span>type<span class="token punctuation">,</span>payload<span class="token punctuation">}</span></span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token operator">...</span>state<span class="token punctuation">,</span>\n      <span class="token literal-property property">login</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//payload.实际数据决定login的值</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">effects</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">//接收来自 dispatch({type:\'global/login\'...</span>\n    <span class="token operator">*</span><span class="token function">login</span><span class="token punctuation">(</span><span class="token parameter">action<span class="token punctuation">,</span> <span class="token punctuation">{</span> call<span class="token punctuation">,</span> put<span class="token punctuation">,</span> select <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">call</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">\'/umi/login\'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">method</span><span class="token operator">:</span><span class="token string">\'post\'</span><span class="token punctuation">,</span><span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">username</span><span class="token operator">:</span>action<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>username<span class="token punctuation">,</span><span class="token literal-property property">password</span><span class="token operator">:</span>action<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>password<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token keyword">yield</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">\'signin\'</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">payload</span><span class="token operator">:</span>data\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>[^put]: 发出一个 Action，给reducers\n[^select]: 从state里获取数据,如<code>const todos = yield select(state =&gt; state.todos)</code>\n[^yield]: 状态机语法，类似await，同步书写异步代码\n[^action]: 可获取发送请求时的类型，携带的负载</p>\n<h3 id="_05-丢弃connect高阶组件-转投hooks" tabindex="-1"><a class="header-anchor" href="#_05-丢弃connect高阶组件-转投hooks" aria-hidden="true">#</a> 05 | 丢弃connect高阶组件，转投hooks</h3>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useDispatch<span class="token punctuation">,</span> useSelector <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'umi\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">组件</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> dispatch <span class="token operator">=</span> <span class="token function">useDispatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> dva <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useSelector</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">dva</span><span class="token operator">:</span> state<span class="token punctuation">.</span>dva <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">子组件3</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>dva<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n        &lt;button\n          onClick=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n            <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">\'global/setTitle\'</span><span class="token punctuation">,</span> <span class="token literal-property property">payload</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">22</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token plain-text">\n        >\n          修改全局model\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> 组件<span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h3 id="_06-subscriptions-源-获取" tabindex="-1"><a class="header-anchor" href="#_06-subscriptions-源-获取" aria-hidden="true">#</a> 06 | subscriptions <strong>源</strong> 获取</h3>\n<p>订阅一个数据“源”的变化，使用场景如：服务器的 websocket 连接、keyboard 输入、geolocation 变化、history 路由变化</p>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token keyword">import</span> key <span class="token keyword">from</span> <span class="token string">\'keymaster\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">namespace</span><span class="token operator">:</span> <span class="token string">\'global\'</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">subscriptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token function">listenRoute</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> dispatch<span class="token punctuation">,</span>history<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      history<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> pathname<span class="token punctuation">,</span> query <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'global subscriptions\'</span><span class="token punctuation">,</span>pathname<span class="token punctuation">,</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function">listenKeyboard</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>dispatch<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//监听键盘</span>\n      <span class="token function">key</span><span class="token punctuation">(</span><span class="token string">\'⌘+i, ctrl+i\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">\'setText\'</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function">listenResize</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>dispatch<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//监听窗口变化</span>\n      window<span class="token punctuation">.</span><span class="token function-variable function">onresize</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'onresize\'</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function">listenScroll</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>dispatch<span class="token punctuation">,</span>history<span class="token punctuation">}</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n      window<span class="token punctuation">.</span><span class="token function-variable function">onscroll</span><span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'onscroll\'</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h2 id="模块五-运行时配置" tabindex="-1"><a class="header-anchor" href="#模块五-运行时配置" aria-hidden="true">#</a> 模块五 ：运行时配置</h2>\n<p>构建时配置<code>config/config</code>能覆盖大量场景，但有一些却是编译时很难触及的。</p>\n<p>比如：</p>\n<ul>\n<li>在出错时显示个 message 提示用户</li>\n<li>在加载和路由切换时显示个 loading</li>\n<li>页面载入完成时请求后端，根据响应动态修改路由</li>\n</ul>\n<p>运行时配置和构建时配置的区别是他跑在浏览器端，基于此，我们可以在这里写函数、jsx、import 浏览器端依赖等等，注意不要引入 node 依赖。</p>\n<p><strong>配置方式</strong></p>\n<p>约定 <code>src/app.jsx</code> 定义并暴露一些固定名称的函数，他们会在浏览器端择机运行，全局执行一些业务</p>\n<h3 id="_01-渲染前的权限校验" tabindex="-1"><a class="header-anchor" href="#_01-渲染前的权限校验" aria-hidden="true">#</a> 01 | 渲染前的权限校验</h3>\n<p>render函数， 用于改写把整个应用 render 到 dom 树里， 覆写 render，接受一个 oldRender 函数，最后用 oldRender 来渲染dom， 需至少被调用一次</p>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">render</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">oldRender</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> isLogin<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token string">\'/umi/auth\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isLogin<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">\'/login\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// oldRender， Function，原始 rende}r 方法，需至少被调用一次</span>\n  <span class="token function">oldRender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>  \n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token comment">//mock/auth  </span>\n<span class="token string-property property">\'GET /umi/auth\'</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">isLogin</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_02-动态路由读取、添加" tabindex="-1"><a class="header-anchor" href="#_02-动态路由读取、添加" aria-hidden="true">#</a> 02 | 动态路由读取、添加</h3>\n<p><code>patchRoutes</code>函数提供了在运行时，动态修改路由的入口，一般可以和<code>render</code>函数配合， 请求服务端根据响应动态更新路由</p>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">patchRoutes</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> routes <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token comment">//routes为当前路由</span>\n  routes<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/foo\'</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">exact</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'@/pages/foo\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>需要注意的地方是：</p>\n<ul>\n<li>动态路由的<code>compnent</code>要的是一个组件不是一段地址，可通过require引入</li>\n<li>动态路由读取后，跳转后不显示，需要关闭mfsu: {}</li>\n<li>子路由不跳转，除了layout组件，其他需要添加exact，构建时的配置在编译后都会自动加，而动态路由如果路由数据没有exact会导致不跳转</li>\n<li>数据数据里面不可以有require，数据需要过滤，require(非空字符拼接+变量)</li>\n<li>document.ejs报错，需要require拼接时找到index.jsx 目前umi3有这个问题</li>\n</ul>\n<p>模拟路由数据</p>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token comment">//mock/auth</span>\n\n<span class="token string-property property">\'GET /umi/menus\'</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/\'</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">\'layouts/layout1\'</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span>\n            <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">\'资源引入\'</span><span class="token punctuation">,</span>\n            <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/resources\'</span><span class="token punctuation">,</span>\n            <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">\'pages/css-img\'</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/less\'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">\'pages/less\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">{</span>\n            <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/goods\'</span><span class="token punctuation">,</span>\n            <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">\'layouts/layout2\'</span><span class="token punctuation">,</span>\n            <span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n              <span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/goods/:id?\'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">\'pages/goods/goods-detail\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n              <span class="token punctuation">{</span>\n                <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/goods/:id/comment\'</span><span class="token punctuation">,</span>\n                <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">\'pages/goods/comment\'</span><span class="token punctuation">,</span>\n              <span class="token punctuation">}</span><span class="token punctuation">,</span>\n              <span class="token punctuation">{</span>\n                <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/goods/:id/comment/:cid\'</span><span class="token punctuation">,</span>\n                <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">\'pages/goods/comment/comment-detail\'</span><span class="token punctuation">,</span>\n              <span class="token punctuation">}</span><span class="token punctuation">,</span>\n              <span class="token punctuation">{</span> <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">\'pages/404\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token punctuation">]</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/data-interaction\'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">\'pages/data-interaction\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/dva\'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">\'pages/dva\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/antd\'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">\'pages/antd\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/hooks\'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">\'pages/hooks\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">{</span>\n            <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/user\'</span><span class="token punctuation">,</span>\n            <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">\'pages/user\'</span><span class="token punctuation">,</span>\n            <span class="token literal-property property">wrappers</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'wrappers/auth\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n          <span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/\'</span><span class="token punctuation">,</span> <span class="token literal-property property">redirect</span><span class="token operator">:</span> <span class="token string">\'/antd\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">{</span> <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">\'pages/404\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span> <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">\'pages/404\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br></div></div><p>读取路由数据并添加路由：</p>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token comment">//src/app</span>\n\n<span class="token keyword">let</span> routesData <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//模块变量用来存储路由数据</span>\n\n<span class="token comment">//render函数里面读取路由数据</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">render</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">oldRender</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> isLogin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">http</span><span class="token punctuation">(</span><span class="token string">\'/umi/auth\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>isLogin<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//获取路由数据</span>\n    routesData <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">http</span><span class="token punctuation">(</span><span class="token string">\'/umi/menus\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">\'/login\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">oldRender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">patchRoutes</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> routes <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">filterRoutes</span><span class="token punctuation">(</span>routesData<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//处理数据，添加exact，指定index.js,拼接require</span>\n  routesData<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> routes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//动态添加路由</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">filterRoutes</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">routesData</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  routesData<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    \n    <span class="token comment">//exact处理</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>routes <span class="token operator">&amp;&amp;</span> item<span class="token punctuation">.</span>routes<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">filterRoutes</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>routes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//含 routes键的需要递归处理</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      item<span class="token punctuation">.</span>exact <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//不含routes键的都添加exact</span>\n    <span class="token punctuation">}</span>\n    \n    <span class="token comment">//component地址拼接处理</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>item<span class="token punctuation">.</span>redirect<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//不处理带有redirect字段</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>component<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">\'404\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//404没有index文件结构</span>\n        item<span class="token punctuation">.</span>component <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'@/\'</span> <span class="token operator">+</span> item<span class="token punctuation">.</span>component <span class="token operator">+</span> <span class="token string">\'.jsx\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token comment">//其他页面都指向index结构，避免umi3的document.ejs报错</span>\n        item<span class="token punctuation">.</span>component <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'@/\'</span> <span class="token operator">+</span> item<span class="token punctuation">.</span>component <span class="token operator">+</span> <span class="token string">\'/index.jsx\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n     \t<span class="token comment">//部分需要授权路由的拼接</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>wrappers <span class="token operator">&amp;&amp;</span> item<span class="token punctuation">.</span>wrappers<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        item<span class="token punctuation">.</span>wrappers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n          item<span class="token punctuation">.</span>wrappers<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'@/\'</span> <span class="token operator">+</span> str <span class="token operator">+</span> <span class="token string">\'.jsx\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br></div></div><h3 id="_03-路由监听-埋点统计" tabindex="-1"><a class="header-anchor" href="#_03-路由监听-埋点统计" aria-hidden="true">#</a> 03 | 路由监听，埋点统计</h3>\n<p><code>onRouteChange</code>函数内部可以设置，在初始加载和路由切换时做一些事情，比如埋点，设置动态标题等操作</p>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">onRouteChange</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> matchedRoutes<span class="token punctuation">,</span> location<span class="token punctuation">,</span> routes<span class="token punctuation">,</span> action <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">//动态设置标题</span>\n  document<span class="token punctuation">.</span>title <span class="token operator">=</span> matchedRoutes<span class="token punctuation">[</span>matchedRoutes<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>route<span class="token punctuation">.</span>title <span class="token operator">||</span> <span class="token string">\'默认标题\'</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>[^location]: history 提供的 location 对象\n[^routes]: 路由集合\n[^action]: <code>PUSH|POP|REPLACE|undefined</code>，初次加载时为 <code>undefined</code></p>\n<h3 id="_04-拦截器" tabindex="-1"><a class="header-anchor" href="#_04-拦截器" aria-hidden="true">#</a> 04 | 拦截器</h3>\n<p>umi内置的request和useRequest在发送请求之前和数据返回后，可以做一些通用的配置业务，这个时候考虑配置拦截器，参考<a href="https://umijs.org/zh-CN/plugins/plugin-request#%E8%BF%90%E8%A1%8C%E6%97%B6%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener noreferrer">插件配置<ExternalLinkIcon/></a></p>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token keyword">export</span> <span class="token keyword">const</span> request <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">requestInterceptors</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token comment">// 请求地址 配置项</span>\n      options<span class="token punctuation">.</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">token</span><span class="token operator">:</span><span class="token string">\'..\'</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">;</span>\n      <span class="token keyword">return</span> <span class="token punctuation">{</span> url<span class="token punctuation">,</span> options <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">responseInterceptors</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="结束语" tabindex="-1"><a class="header-anchor" href="#结束语" aria-hidden="true">#</a> 结束语</h2>\n<h3 id="结束语-未来愉快替代create-react-app-开发" tabindex="-1"><a class="header-anchor" href="#结束语-未来愉快替代create-react-app-开发" aria-hidden="true">#</a> 结束语 | 未来愉快替代create-react-app 开发</h3>\n<p>umi3框架到这里就告一段落了，一般适合开发一些h5端的各类web应用，如果考虑开发中台管理系统，推荐去看看蚂蚁系还提供了antd-pro框架</p>\n',date:"2022-06-12",deps:[],hoistedTags:[],links:[],pathInferred:"/react/2022/20220612.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"20220612",filePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/react/2022/20220612.md",filePathRelative:"react/2022/20220612.md",componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/react/2022/20220612.html.vue",componentFilePathRelative:"pages/react/2022/20220612.html.vue",componentFileChunkName:"v-3c65068c",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/react/2022/20220612.html.js",dataFilePathRelative:"pages/react/2022/20220612.html.js",dataFileChunkName:"v-3c65068c",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/react/2022/20220612.html",htmlFilePathRelative:"react/2022/20220612.html"},{data:{key:"v-a4ce4834",path:"/vue/2022/20220325.html",title:"尤雨溪强势推荐的Pinia",lang:"zh-CN",frontmatter:{title:"尤雨溪强势推荐的Pinia",date:"2022-03-25T00:00:00.000Z",tags:["vue"],categories:["vue"]},excerpt:"",headers:[{level:2,title:"Pinia 基本使用",slug:"pinia-基本使用",children:[]},{level:2,title:"解构store",slug:"解构store",children:[{level:3,title:"ES传统方式解构(能获取到值，但是不具有响应性)",slug:"es传统方式解构-能获取到值-但是不具有响应性",children:[]},{level:3,title:"Pinia解构方法：storeToRefs",slug:"pinia解构方法-storetorefs",children:[]}]},{level:2,title:"Pinia修改数据状态",slug:"pinia修改数据状态",children:[{level:3,title:"简单数据修改",slug:"简单数据修改",children:[]},{level:3,title:"多条数据修改",slug:"多条数据修改",children:[]},{level:3,title:"通过action修改",slug:"通过action修改",children:[]}]},{level:2,title:"Pinia中的Getters",slug:"pinia中的getters",children:[]},{level:2,title:"store之间的相互调用",slug:"store之间的相互调用",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],git:{updatedTime:null,contributors:[]}},key:"v-a4ce4834",path:"/vue/2022/20220325.html",title:"尤雨溪强势推荐的Pinia",lang:"zh-CN",frontmatter:{title:"尤雨溪强势推荐的Pinia",date:"2022-03-25T00:00:00.000Z",tags:["vue"],categories:["vue"]},excerpt:"",headers:[{level:2,title:"Pinia 基本使用",slug:"pinia-基本使用",children:[]},{level:2,title:"解构store",slug:"解构store",children:[{level:3,title:"ES传统方式解构(能获取到值，但是不具有响应性)",slug:"es传统方式解构-能获取到值-但是不具有响应性",children:[]},{level:3,title:"Pinia解构方法：storeToRefs",slug:"pinia解构方法-storetorefs",children:[]}]},{level:2,title:"Pinia修改数据状态",slug:"pinia修改数据状态",children:[{level:3,title:"简单数据修改",slug:"简单数据修改",children:[]},{level:3,title:"多条数据修改",slug:"多条数据修改",children:[]},{level:3,title:"通过action修改",slug:"通过action修改",children:[]}]},{level:2,title:"Pinia中的Getters",slug:"pinia中的getters",children:[]},{level:2,title:"store之间的相互调用",slug:"store之间的相互调用",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],content:"\r\n::: tip\r\n\r\nPinia是一个全新的Vue状态管理库，是Vuex的代替者，尤雨溪强势推荐\r\n\r\n1. Vue2 和 Vue3 都能支持\r\n2. 抛弃传统的 `Mutation` ，只有 `state, getter` 和 `action` ，简化状态管理库\r\n3. 不需要嵌套模块，符合 Vue3 的 Composition api，让代码扁平化\r\n4. TypeScript支持\r\n5. 代码简介，很好的代码自动分割\r\n\r\n:::\r\n\r\n## Pinia 基本使用\r\n\r\n**初始化项目：** `npm init vite@latest`\r\n\r\n**安装Pinia:** `npm i pinia`\r\n\r\n**挂载Pinia**\r\n\r\n![全局挂载Pinia](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8c8d5e3fde9b40c49963bff8bb80cb66~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp)\r\n\r\n**创建Store**\r\n\r\n![pinia-创建store](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/150f6a3d42994269b5125270992b4801~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp)\r\n\r\n**使用Store**\r\n\r\n![pinia-使用Store](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/620b9847427f4732a3dcdcd7d70be862~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp)\r\n\r\n## 解构store\r\n\r\n当store中的多个参数需要被使用到的时候，为了更简洁的使用这些变量，我们通常采用结构的方式一次性获取所有的变量名\r\n\r\n### ES传统方式解构(能获取到值，但是不具有响应性)\r\n\r\n![pinia-ES传统方式解构Store](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f080f0d53a054a67b54878d3d0791f2d~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp)\r\n\r\n### Pinia解构方法：storeToRefs\r\n\r\n![pinia-storeToRefs解构Store](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/821275676927405188b9be39b05806c8~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp)\r\n\r\n## Pinia修改数据状态\r\n\r\n### 简单数据修改\r\n\r\n简单数据直接通过在方法中操作 `store.属性名` 来修改\r\n\r\n![pinia-简单数据修改](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6d5c183112c5482db4cf6ee0bd181d5b~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp)\r\n\r\n### 多条数据修改\r\n\r\n通过基础数据修改方式去修改多条数据也是可行的，但是在 `pinia` 官网中，已经明确表示`$patch` 的方式是经过优化的，会加快修改速度，对性能有很大好处，所以在进行多条数据修改的时候，更推荐使用 `$patch`\r\n\r\n`$patch` 方法可以接受两个类型的参数，函数 和 对象\r\n\r\n- **$patch + 对象**\r\n- **$patch + 函数：** 通过函数方式去使用的时候，函数接受一个 state 的参数，state 就是 store 仓库中的 state\r\n\r\n![pinia-多条数据修改](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cd7ff1a198d04b179562d51b95f296da~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp)\r\n\r\n### 通过action修改\r\n\r\n- Store.actions中添加 `changeState` 方法\r\n\r\n  ![pinia-多条数据修改action_store](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c5040c61df2b43798aae25663fb471a6~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp)\r\n\r\n- 组件方法调用 `store.方法名`\r\n\r\n  ![pinia-多条数据修改action_components](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/158c352fbfba40bb8284480d01b6af19~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp)\r\n\r\n## Pinia中的Getters\r\n\r\nPinia 中的 getter 和 Vue 中的计算属性几乎一样，在获取 State值之前做一些逻辑处理\r\n\r\n1. getter 中的值有缓存特性，如果值没有改变，多次使用也只会调用一次\r\n\r\n   - 添加 getter方法\r\n\r\n   ![pinia-添加getter](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d0d1fa3b3d3c4d248e7840daab479598~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp)\r\n\r\n   - 组件内多次调用\r\n\r\n   ![pinia-getter基本使用](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c3dfc0ffba6c48448c1e1fc24ecac234~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp)\r\n\r\n   ![image-20220313194548932](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2d890aff47884bb69a9709562740e87d~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp)\r\n\r\n2. getter 中不仅可以传递 `state` 直接改变数据状态，还可以使用 `this` 来改变数据\r\n\r\n   ![pinia-this方式添加getter](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e6d2dcd2a6664e959c4090af96155a24~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp)\r\n\r\n## store之间的相互调用\r\n\r\n在 Pinia 中，可以在一个 `store` 中 `import` 另外一个 `store` ，然后通过调用引入 store 方法的形式，获取引入 `store` 的状态\r\n\r\n- 新建 store\r\n\r\n![pinia-新建store](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7c9eef2dddc64924b0f60c90160f2abb~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp)\r\n\r\n- 在原 store 中引入 allanStore，并获取 `moveList`\r\n\r\n![pinia-store互相引用](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/effd4216b8a24d01814bb80af2d2a515~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp)\r\n\r\n- 组件中使用 `mainStore.getAllanStoreList`\r\n\r\n![image-20220313201156248](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/14d33eb3fede4f1297e8debf1715e223~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp)\r\n\r\n## 总结\r\n\r\n总得来说，Pinia 就是 Vuex 的替代版，可以更好的兼容 Vue2，Vue3以及TypeScript。在Vuex的基础上去掉了 Mutation，只保留了 state, getter和action。Pinia拥有更简洁的语法， 扁平化的代码编排，符合Vue3 的 Composition api",contentRendered:'<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>Pinia是一个全新的Vue状态管理库，是Vuex的代替者，尤雨溪强势推荐</p>\n<ol>\n<li>Vue2 和 Vue3 都能支持</li>\n<li>抛弃传统的 <code>Mutation</code> ，只有 <code>state, getter</code> 和 <code>action</code> ，简化状态管理库</li>\n<li>不需要嵌套模块，符合 Vue3 的 Composition api，让代码扁平化</li>\n<li>TypeScript支持</li>\n<li>代码简介，很好的代码自动分割</li>\n</ol>\n</div>\n<h2 id="pinia-基本使用" tabindex="-1"><a class="header-anchor" href="#pinia-基本使用" aria-hidden="true">#</a> Pinia 基本使用</h2>\n<p><strong>初始化项目：</strong> <code>npm init vite@latest</code></p>\n<p><strong>安装Pinia:</strong> <code>npm i pinia</code></p>\n<p><strong>挂载Pinia</strong></p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="全局挂载Pinia" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8c8d5e3fde9b40c49963bff8bb80cb66~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" data="aurora"></p>\n<p><strong>创建Store</strong></p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="pinia-创建store" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/150f6a3d42994269b5125270992b4801~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" data="aurora"></p>\n<p><strong>使用Store</strong></p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="pinia-使用Store" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/620b9847427f4732a3dcdcd7d70be862~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" data="aurora"></p>\n<h2 id="解构store" tabindex="-1"><a class="header-anchor" href="#解构store" aria-hidden="true">#</a> 解构store</h2>\n<p>当store中的多个参数需要被使用到的时候，为了更简洁的使用这些变量，我们通常采用结构的方式一次性获取所有的变量名</p>\n<h3 id="es传统方式解构-能获取到值-但是不具有响应性" tabindex="-1"><a class="header-anchor" href="#es传统方式解构-能获取到值-但是不具有响应性" aria-hidden="true">#</a> ES传统方式解构(能获取到值，但是不具有响应性)</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="pinia-ES传统方式解构Store" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f080f0d53a054a67b54878d3d0791f2d~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" data="aurora"></p>\n<h3 id="pinia解构方法-storetorefs" tabindex="-1"><a class="header-anchor" href="#pinia解构方法-storetorefs" aria-hidden="true">#</a> Pinia解构方法：storeToRefs</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="pinia-storeToRefs解构Store" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/821275676927405188b9be39b05806c8~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" data="aurora"></p>\n<h2 id="pinia修改数据状态" tabindex="-1"><a class="header-anchor" href="#pinia修改数据状态" aria-hidden="true">#</a> Pinia修改数据状态</h2>\n<h3 id="简单数据修改" tabindex="-1"><a class="header-anchor" href="#简单数据修改" aria-hidden="true">#</a> 简单数据修改</h3>\n<p>简单数据直接通过在方法中操作 <code>store.属性名</code> 来修改</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="pinia-简单数据修改" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6d5c183112c5482db4cf6ee0bd181d5b~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" data="aurora"></p>\n<h3 id="多条数据修改" tabindex="-1"><a class="header-anchor" href="#多条数据修改" aria-hidden="true">#</a> 多条数据修改</h3>\n<p>通过基础数据修改方式去修改多条数据也是可行的，但是在 <code>pinia</code> 官网中，已经明确表示<code>$patch</code> 的方式是经过优化的，会加快修改速度，对性能有很大好处，所以在进行多条数据修改的时候，更推荐使用 <code>$patch</code></p>\n<p><code>$patch</code> 方法可以接受两个类型的参数，函数 和 对象</p>\n<ul>\n<li><strong>$patch + 对象</strong></li>\n<li><strong>$patch + 函数：</strong> 通过函数方式去使用的时候，函数接受一个 state 的参数，state 就是 store 仓库中的 state</li>\n</ul>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="pinia-多条数据修改" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cd7ff1a198d04b179562d51b95f296da~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" data="aurora"></p>\n<h3 id="通过action修改" tabindex="-1"><a class="header-anchor" href="#通过action修改" aria-hidden="true">#</a> 通过action修改</h3>\n<ul>\n<li>\n<p>Store.actions中添加 <code>changeState</code> 方法</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="pinia-多条数据修改action_store" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c5040c61df2b43798aae25663fb471a6~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" data="aurora"></p>\n</li>\n<li>\n<p>组件方法调用 <code>store.方法名</code></p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="pinia-多条数据修改action_components" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/158c352fbfba40bb8284480d01b6af19~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" data="aurora"></p>\n</li>\n</ul>\n<h2 id="pinia中的getters" tabindex="-1"><a class="header-anchor" href="#pinia中的getters" aria-hidden="true">#</a> Pinia中的Getters</h2>\n<p>Pinia 中的 getter 和 Vue 中的计算属性几乎一样，在获取 State值之前做一些逻辑处理</p>\n<ol>\n<li>\n<p>getter 中的值有缓存特性，如果值没有改变，多次使用也只会调用一次</p>\n<ul>\n<li>添加 getter方法</li>\n</ul>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="pinia-添加getter" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d0d1fa3b3d3c4d248e7840daab479598~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" data="aurora"></p>\n<ul>\n<li>组件内多次调用</li>\n</ul>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="pinia-getter基本使用" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c3dfc0ffba6c48448c1e1fc24ecac234~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" data="aurora"></p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20220313194548932" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2d890aff47884bb69a9709562740e87d~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" data="aurora"></p>\n</li>\n<li>\n<p>getter 中不仅可以传递 <code>state</code> 直接改变数据状态，还可以使用 <code>this</code> 来改变数据</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="pinia-this方式添加getter" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e6d2dcd2a6664e959c4090af96155a24~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" data="aurora"></p>\n</li>\n</ol>\n<h2 id="store之间的相互调用" tabindex="-1"><a class="header-anchor" href="#store之间的相互调用" aria-hidden="true">#</a> store之间的相互调用</h2>\n<p>在 Pinia 中，可以在一个 <code>store</code> 中 <code>import</code> 另外一个 <code>store</code> ，然后通过调用引入 store 方法的形式，获取引入 <code>store</code> 的状态</p>\n<ul>\n<li>新建 store</li>\n</ul>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="pinia-新建store" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7c9eef2dddc64924b0f60c90160f2abb~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" data="aurora"></p>\n<ul>\n<li>在原 store 中引入 allanStore，并获取 <code>moveList</code></li>\n</ul>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="pinia-store互相引用" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/effd4216b8a24d01814bb80af2d2a515~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" data="aurora"></p>\n<ul>\n<li>组件中使用 <code>mainStore.getAllanStoreList</code></li>\n</ul>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20220313201156248" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/14d33eb3fede4f1297e8debf1715e223~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" data="aurora"></p>\n<h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2>\n<p>总得来说，Pinia 就是 Vuex 的替代版，可以更好的兼容 Vue2，Vue3以及TypeScript。在Vuex的基础上去掉了 Mutation，只保留了 state, getter和action。Pinia拥有更简洁的语法， 扁平化的代码编排，符合Vue3 的 Composition api</p>\n',date:"2022-03-25",deps:[],hoistedTags:[],links:[],pathInferred:"/vue/2022/20220325.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"20220325",filePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/vue/2022/20220325.md",filePathRelative:"vue/2022/20220325.md",componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/vue/2022/20220325.html.vue",componentFilePathRelative:"pages/vue/2022/20220325.html.vue",componentFileChunkName:"v-a4ce4834",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/vue/2022/20220325.html.js",dataFilePathRelative:"pages/vue/2022/20220325.html.js",dataFileChunkName:"v-a4ce4834",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/vue/2022/20220325.html",htmlFilePathRelative:"vue/2022/20220325.html"},{data:{key:"v-493de946",path:"/vue/2022/20220930.html",title:"大文件分片上传",lang:"zh-CN",frontmatter:{title:"大文件分片上传",date:"2022-09-30T00:00:00.000Z",tags:["vue"],categories:["vue"]},excerpt:"",headers:[],git:{updatedTime:null,contributors:[]}},key:"v-493de946",path:"/vue/2022/20220930.html",title:"大文件分片上传",lang:"zh-CN",frontmatter:{title:"大文件分片上传",date:"2022-09-30T00:00:00.000Z",tags:["vue"],categories:["vue"]},excerpt:"",headers:[],content:"\r\n::: tip\r\n\r\n项目开发中，大文件上传不可避免的因各种原因上传失败，这一篇来讲在 vue 项目中如何分片上传\r\n\r\n:::\r\n\r\n# 代码部分\r\n\r\n需要下载 js-md5，分片上传需要用 md5 \r\n\r\n```js\r\nimport { uploadByPieces } from '@/utils/burst'\r\n\r\n// 上传接口\r\nhandleUploadvideo (options) {\r\n    // 通过上传组件获取到文件的信息，调用分片上传接口\r\n      this.afterRead(options)\r\n},\r\n\r\n// 视频上传\r\n    afterRead (files, code) {\r\n      // uploadByPieces函数由另外的js文件引入\r\n      uploadByPieces({\r\n        files,\r\n        pieceSize: 1,\r\n        concurrent: 2,\r\n        success: this.VideoSuccess,\r\n        error: this.VideoFail\r\n      })\r\n    },\r\n    // 上传视频成功回调\r\n    VideoSuccess ({\r\n      data: {\r\n        data: { url }\r\n      }\r\n    }) {\r\n      this.form.video = url\r\n      console.log(url, '上传成功')\r\n    },\r\n    // 上传失败回调\r\n    VideoFail (res) {\r\n      console.log(res, '失败回调')\r\n    }\r\n```\r\n\r\n```js\r\nburst.js 文件\r\n\r\nimport md5 from 'js-md5' // 引入MD5加密\r\nimport { chunkupload } from '@/pages/busmanagement/children/GroupService.js' // 分片上传接口\r\nimport { concurrentExecution } from './jnxh.js' // 并发文件\r\n/**\r\n * 文件分片上传\r\n * @params file {File} 文件\r\n * @params pieceSize {Number} 分片大小 默认1MB\r\n * @params concurrent {Number} 并发数量 默认2\r\n * @params process {Function} 进度回调函数\r\n * @params success {Function} 成功回调函数\r\n * @params error {Function} 失败回调函数\r\n */\r\nexport const uploadByPieces = ({\r\n  files: { file },\r\n  pieceSize = 1,\r\n  concurrent = 2,\r\n  process,\r\n  success,\r\n  error\r\n}) => {\r\n  // 如果文件传入为空直接 return 返回\r\n  console.log(file)\r\n  if (!file || file.length < 1) {\r\n    return error('文件不能为空')\r\n  }\r\n  let fileMD5 = '' // 总文件列表\r\n  const chunkSize = pieceSize * 1024 * 1024 // 3MB一片\r\n  const chunkCount = Math.ceil(file.size / chunkSize) // 总片数\r\n  const chunkList = [] // 分片列表\r\n  let uploaded = [] // 已经上传的\r\n  // let fileType = '' // 文件类型\r\n  let uploadId = '' // 上传id\r\n  // 获取md5\r\n  /***\r\n     * 获取md5\r\n     **/\r\n  console.log(1111)\r\n  const readFileMD5 = () => {\r\n    // 读取视频文件的md5\r\n    // fileType = file.name.substring(file.name.lastIndexOf('.') + 1, file.name.length)\r\n    const fileRederInstance = new FileReader()\r\n    console.log('file', file)\r\n    fileRederInstance.readAsBinaryString(file)\r\n    fileRederInstance.addEventListener('load', e => {\r\n      const fileBolb = e.target.result\r\n      fileMD5 = md5(fileBolb)\r\n\r\n      const {\r\n        chunk\r\n      } = getChunkInfo(file, 0, chunkSize)\r\n      const chunkInfo = {\r\n        chunk,\r\n        currentChunk: 0,\r\n        chunkCount,\r\n        uploadId\r\n      }\r\n      const uploadData = createUploadData(chunkInfo)\r\n\r\n      chunkupload(uploadData).then(res => {\r\n        const { data: { data } } = res\r\n        if (data.skipUpload) {\r\n          console.log(res, '文件已被上传')\r\n          success(res)\r\n        } else {\r\n          uploadId = data.uploadId\r\n          // 判断是否是断点续传\r\n          if (data.uploaded && data.uploaded.length != 0) {\r\n            uploaded = [].concat(data.uploaded)\r\n          }\r\n          console.log('已上传的分片：' + uploaded)\r\n          // 判断是并发上传或顺序上传\r\n          if (concurrent === 1 || chunkCount === 1) {\r\n            console.log('顺序上传')\r\n            sequentialUplode(0)\r\n          } else {\r\n            console.log('并发上传')\r\n            concurrentUpload()\r\n          }\r\n        }\r\n      }).catch((e) => {\r\n        console.log('文件合并错误')\r\n      })\r\n    })\r\n  }\r\n  /***\r\n     * 获取每一个分片的详情\r\n     **/\r\n  const getChunkInfo = (file, currentChunk, chunkSize) => {\r\n    const start = currentChunk * chunkSize\r\n    const end = Math.min(file.size, start + chunkSize)\r\n    const chunk = file.slice(start, end)\r\n    return {\r\n      start,\r\n      end,\r\n      chunk\r\n    }\r\n  }\r\n  /***\r\n     * 原始上传\r\n     **/\r\n  const uploadChunk = (chunkInfo) => {\r\n    const sd = parseInt((chunkInfo.currentChunk / chunkInfo.chunkCount) * 100)\r\n    console.log(sd, '进度')\r\n    // process(sd)\r\n    console.log(chunkInfo, '分片大小')\r\n    const inde = chunkInfo.currentChunk + 1\r\n    if (uploaded.indexOf(inde + '') > -1) {\r\n      const {\r\n        chunk\r\n      } = getChunkInfo(file, chunkInfo.currentChunk + 1, chunkSize)\r\n      uploadChunk({\r\n        chunk,\r\n        currentChunk: inde,\r\n        chunkCount\r\n      })\r\n    } else {\r\n      const uploadData = createUploadData(chunkInfo)\r\n      console.log(uploadData)\r\n      chunkupload(uploadData).then(res => {\r\n        if (res.errcode == 0) {\r\n          console.log('分片上传成功')\r\n          uploaded.push(chunkInfo.currentChunk + 1)\r\n          // 判断是否全部上传完\r\n          if (uploaded.length == chunkInfo.chunkCount) {\r\n            console.log('全部完成')\r\n            success(res)\r\n            // process(100)\r\n          } else {\r\n            const {\r\n              chunk\r\n            } = getChunkInfo(file, chunkInfo.currentChunk + 1, chunkSize)\r\n            uploadChunk({\r\n              chunk,\r\n              currentChunk: chunkInfo.currentChunk + 1,\r\n              chunkCount\r\n            })\r\n          }\r\n        } else {\r\n          console.log(res.msg)\r\n        }\r\n      }).catch((e) => {\r\n        error(e)\r\n      })\r\n      // if (chunkInfo.currentChunk < chunkInfo.chunkCount) {\r\n      //   setTimeout(() => {\r\n      //\r\n      //   }, 1000)\r\n      // }\r\n    }\r\n  }\r\n  /***\r\n     * 顺序上传\r\n     **/\r\n  const sequentialUplode = (currentChunk) => {\r\n    const {\r\n      chunk\r\n    } = getChunkInfo(file, currentChunk, chunkSize)\r\n    const chunkInfo = {\r\n      chunk,\r\n      currentChunk,\r\n      chunkCount,\r\n      uploadId\r\n    }\r\n    // const sd = parseInt((chunkInfo.currentChunk / chunkInfo.chunkCount) * 100)\r\n    // process(sd)\r\n    console.log('当前上传分片：' + currentChunk)\r\n    const inde = chunkInfo.currentChunk + 1\r\n    if (uploaded.indexOf(inde + '') > -1) {\r\n      console.log('分片【' + currentChunk + '】已上传')\r\n      sequentialUplode(currentChunk + 1)\r\n    } else {\r\n      const uploadData = createUploadData(chunkInfo)\r\n\r\n      // 执行分片上传\r\n      chunkupload(uploadData).then(res => {\r\n        console.log(res, 'sdfsdfsd')\r\n        if (res.errcode == 0) {\r\n          console.log('分片【' + currentChunk + '】上传成功')\r\n          uploaded.push(chunkInfo.currentChunk + 1)\r\n          // 判断是否全部上传完\r\n          if (uploaded.length == chunkInfo.chunkCount) {\r\n            console.log('全部完成')\r\n            success(res)\r\n            // process(100)\r\n          } else {\r\n            sequentialUplode(currentChunk + 1)\r\n          }\r\n        } else {\r\n          console.log(res.errmsg)\r\n        }\r\n      }).catch((e) => {\r\n        error(e)\r\n      })\r\n    }\r\n  }\r\n  /***\r\n     * 并发上传\r\n     **/\r\n  const concurrentUpload = () => {\r\n    for (let i = 0; i < chunkCount; i++) {\r\n      const index = Number(i) + 1\r\n      if (uploaded.indexOf(index) === -1) {\r\n        chunkList.push(Number(i))\r\n      }\r\n    }\r\n    // debugger\r\n    console.log('需要上传的分片索引：' + chunkList)\r\n    concurrentExecution(chunkList, concurrent, (curItem) => {\r\n      return new Promise((resolve, reject) => {\r\n        const {\r\n          chunk\r\n        } = getChunkInfo(file, curItem, chunkSize)\r\n        const chunkInfo = {\r\n          chunk,\r\n          currentChunk: curItem,\r\n          chunkCount,\r\n          uploadId\r\n        }\r\n        // const sd = parseInt((chunkInfo.currentChunk / chunkInfo.chunkCount) * 100)\r\n        // process(sd)\r\n        console.log('当前上传分片：' + curItem)\r\n        const inde = chunkInfo.currentChunk + 1\r\n        if (uploaded.indexOf(inde) == -1) {\r\n          // 构建上传文件的formData\r\n          const uploadData = createUploadData(chunkInfo)\r\n          chunkupload(uploadData).then(res => {\r\n            console.log(res)\r\n            if (res.errcode == 0) {\r\n              uploaded.push(chunkInfo.currentChunk + 1)\r\n              console.log('已经上传完成的分片：' + uploaded)\r\n              // 判断是否全部上传完\r\n              if (uploaded.length == chunkInfo.chunkCount) {\r\n                success(res)\r\n                // process(100)\r\n              }\r\n              resolve()\r\n            } else {\r\n              reject(res)\r\n              console.log(res.errmsg)\r\n            }\r\n          }).catch((e) => {\r\n            console.log(e, 'errrrr')\r\n            reject(e)\r\n            error(e)\r\n          })\r\n        } else {\r\n          console.log('分片【' + chunkInfo.currentChunk + '】已上传')\r\n          resolve()\r\n        }\r\n      })\r\n    }).then(res => {\r\n      console.log('finish', res)\r\n    })\r\n  }\r\n  /***\r\n     * 创建文件上传参数\r\n     **/\r\n  const createUploadData = (chunkInfo) => {\r\n    const fetchForm = new FormData()\r\n    fetchForm.append('identifier', fileMD5) // 文件MD5编码\r\n    fetchForm.append('filename', file.name) // 文件名\r\n    fetchForm.append('totalChunks', chunkInfo.chunkCount) // 分片总数\r\n    fetchForm.append('chunkSize', chunkSize) // 每片大小\r\n    fetchForm.append('chunkNumber', chunkInfo.currentChunk + 1) // 当前为第几片\r\n    fetchForm.append('currentChunkSize', chunkInfo.chunk.size) // 当前分片大小\r\n    const chunkfile = new File([chunkInfo.chunk], file.name)\r\n    fetchForm.append('file', chunkfile) // 文件\r\n    fetchForm.append('uploadId', chunkInfo.uploadId) // 第一次不传，后面的请求需要传\r\n    // fetchForm.append('objectType', fileType)\r\n    return fetchForm\r\n  }\r\n  readFileMD5() // 开始执行代码\r\n}\r\n\r\n```\r\n\r\n```js\r\njnxh.js 文件\r\n\r\n/**\r\n * 并发执行\r\n * @params list {Array} - 要迭代的数组\r\n * @params limit {Number} - 并发数量控制数,最好小于3\r\n * @params asyncHandle {Function} - 对`list`的每一个项的处理函数，参数为当前处理项，必须 return 一个Promise来确定是否继续进行迭代\r\n * @return {Promise} - 返回一个 Promise 值来确认所有数据是否迭代完成\r\n */\r\nexport function concurrentExecution (list, limit, asyncHandle) {\r\n  // 递归执行\r\n  const recursion = (arr) => {\r\n    // 执行方法 arr.shift() 取出并移除第一个数据\r\n    return asyncHandle(arr.shift()).then(() => {\r\n      // 数组还未迭代完，递归继续进行迭代\r\n      if (arr.length !== 0) {\r\n        return recursion(arr)\r\n      } else {\r\n        return 'finish'\r\n      }\r\n    })\r\n  }\r\n  // 创建新的并发数组\r\n  const listCopy = [].concat(list)\r\n  // 正在进行的所有并发异步操作\r\n  const asyncList = []\r\n  limit = limit > listCopy.length ? listCopy.length : limit\r\n  console.log(limit)\r\n  while (limit--) {\r\n    asyncList.push(recursion(listCopy))\r\n  }\r\n  // 所有并发异步操作都完成后，本次并发控制迭代完成\r\n  return Promise.all(asyncList)\r\n}\r\n```\r\n\r\n\r\n\r\n# 文档借鉴地址\r\n\r\n1：https://www.jb51.net/article/260764.htm\r\n\r\n2：https://blog.csdn.net/qq_43040552/article/details/123375581?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-123375581-blog-123520915.pc_relevant_aa_2&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-123375581-blog-123520915.pc_relevant_aa_2&utm_relevant_index=1",contentRendered:'<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>项目开发中，大文件上传不可避免的因各种原因上传失败，这一篇来讲在 vue 项目中如何分片上传</p>\n</div>\n<h1 id="代码部分" tabindex="-1"><a class="header-anchor" href="#代码部分" aria-hidden="true">#</a> 代码部分</h1>\n<p>需要下载 js-md5，分片上传需要用 md5</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> uploadByPieces <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@/utils/burst\'</span>\n\n<span class="token comment">// 上传接口</span>\n<span class="token function">handleUploadvideo</span> <span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 通过上传组件获取到文件的信息，调用分片上传接口</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">afterRead</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n<span class="token comment">// 视频上传</span>\n    <span class="token function">afterRead</span> <span class="token punctuation">(</span><span class="token parameter">files<span class="token punctuation">,</span> code</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// uploadByPieces函数由另外的js文件引入</span>\n      <span class="token function">uploadByPieces</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        files<span class="token punctuation">,</span>\n        <span class="token literal-property property">pieceSize</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">concurrent</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">success</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>VideoSuccess<span class="token punctuation">,</span>\n        <span class="token literal-property property">error</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>VideoFail\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">// 上传视频成功回调</span>\n    <span class="token function">VideoSuccess</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>\n      <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span> url <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>form<span class="token punctuation">.</span>video <span class="token operator">=</span> url\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token string">\'上传成功\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">// 上传失败回调</span>\n    <span class="token function">VideoFail</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token string">\'失败回调\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>burst<span class="token punctuation">.</span>js 文件\n\n<span class="token keyword">import</span> md5 <span class="token keyword">from</span> <span class="token string">\'js-md5\'</span> <span class="token comment">// 引入MD5加密</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> chunkupload <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@/pages/busmanagement/children/GroupService.js\'</span> <span class="token comment">// 分片上传接口</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> concurrentExecution <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./jnxh.js\'</span> <span class="token comment">// 并发文件</span>\n<span class="token doc-comment comment">/**\n * 文件分片上传\n * <span class="token keyword">@params</span> file <span class="token punctuation">{</span>File<span class="token punctuation">}</span> 文件\n * <span class="token keyword">@params</span> pieceSize <span class="token punctuation">{</span>Number<span class="token punctuation">}</span> 分片大小 默认1MB\n * <span class="token keyword">@params</span> concurrent <span class="token punctuation">{</span>Number<span class="token punctuation">}</span> 并发数量 默认2\n * <span class="token keyword">@params</span> process <span class="token punctuation">{</span>Function<span class="token punctuation">}</span> 进度回调函数\n * <span class="token keyword">@params</span> success <span class="token punctuation">{</span>Function<span class="token punctuation">}</span> 成功回调函数\n * <span class="token keyword">@params</span> error <span class="token punctuation">{</span>Function<span class="token punctuation">}</span> 失败回调函数\n */</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">uploadByPieces</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>\n  <span class="token literal-property property">files</span><span class="token operator">:</span> <span class="token punctuation">{</span> file <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  pieceSize <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>\n  concurrent <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>\n  process<span class="token punctuation">,</span>\n  success<span class="token punctuation">,</span>\n  error\n<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// 如果文件传入为空直接 return 返回</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file <span class="token operator">||</span> file<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">error</span><span class="token punctuation">(</span><span class="token string">\'文件不能为空\'</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">let</span> fileMD5 <span class="token operator">=</span> <span class="token string">\'\'</span> <span class="token comment">// 总文件列表</span>\n  <span class="token keyword">const</span> chunkSize <span class="token operator">=</span> pieceSize <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token comment">// 3MB一片</span>\n  <span class="token keyword">const</span> chunkCount <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>size <span class="token operator">/</span> chunkSize<span class="token punctuation">)</span> <span class="token comment">// 总片数</span>\n  <span class="token keyword">const</span> chunkList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 分片列表</span>\n  <span class="token keyword">let</span> uploaded <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 已经上传的</span>\n  <span class="token comment">// let fileType = \'\' // 文件类型</span>\n  <span class="token keyword">let</span> uploadId <span class="token operator">=</span> <span class="token string">\'\'</span> <span class="token comment">// 上传id</span>\n  <span class="token comment">// 获取md5</span>\n  <span class="token doc-comment comment">/***\n     * 获取md5\n     **/</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1111</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">readFileMD5</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token comment">// 读取视频文件的md5</span>\n    <span class="token comment">// fileType = file.name.substring(file.name.lastIndexOf(\'.\') + 1, file.name.length)</span>\n    <span class="token keyword">const</span> fileRederInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'file\'</span><span class="token punctuation">,</span> file<span class="token punctuation">)</span>\n    fileRederInstance<span class="token punctuation">.</span><span class="token function">readAsBinaryString</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>\n    fileRederInstance<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'load\'</span><span class="token punctuation">,</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> fileBolb <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result\n      fileMD5 <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span>fileBolb<span class="token punctuation">)</span>\n\n      <span class="token keyword">const</span> <span class="token punctuation">{</span>\n        chunk\n      <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">getChunkInfo</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> chunkSize<span class="token punctuation">)</span>\n      <span class="token keyword">const</span> chunkInfo <span class="token operator">=</span> <span class="token punctuation">{</span>\n        chunk<span class="token punctuation">,</span>\n        <span class="token literal-property property">currentChunk</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n        chunkCount<span class="token punctuation">,</span>\n        uploadId\n      <span class="token punctuation">}</span>\n      <span class="token keyword">const</span> uploadData <span class="token operator">=</span> <span class="token function">createUploadData</span><span class="token punctuation">(</span>chunkInfo<span class="token punctuation">)</span>\n\n      <span class="token function">chunkupload</span><span class="token punctuation">(</span>uploadData<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token operator">=</span> res\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>skipUpload<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token string">\'文件已被上传\'</span><span class="token punctuation">)</span>\n          <span class="token function">success</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n          uploadId <span class="token operator">=</span> data<span class="token punctuation">.</span>uploadId\n          <span class="token comment">// 判断是否是断点续传</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>uploaded <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">.</span>uploaded<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            uploaded <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>uploaded<span class="token punctuation">)</span>\n          <span class="token punctuation">}</span>\n          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'已上传的分片：\'</span> <span class="token operator">+</span> uploaded<span class="token punctuation">)</span>\n          <span class="token comment">// 判断是并发上传或顺序上传</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span>concurrent <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">||</span> chunkCount <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'顺序上传\'</span><span class="token punctuation">)</span>\n            <span class="token function">sequentialUplode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'并发上传\'</span><span class="token punctuation">)</span>\n            <span class="token function">concurrentUpload</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'文件合并错误\'</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token doc-comment comment">/***\n     * 获取每一个分片的详情\n     **/</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">getChunkInfo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">file<span class="token punctuation">,</span> currentChunk<span class="token punctuation">,</span> chunkSize</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> start <span class="token operator">=</span> currentChunk <span class="token operator">*</span> chunkSize\n    <span class="token keyword">const</span> end <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>size<span class="token punctuation">,</span> start <span class="token operator">+</span> chunkSize<span class="token punctuation">)</span>\n    <span class="token keyword">const</span> chunk <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      start<span class="token punctuation">,</span>\n      end<span class="token punctuation">,</span>\n      chunk\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token doc-comment comment">/***\n     * 原始上传\n     **/</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">uploadChunk</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">chunkInfo</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> sd <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>chunkInfo<span class="token punctuation">.</span>currentChunk <span class="token operator">/</span> chunkInfo<span class="token punctuation">.</span>chunkCount<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sd<span class="token punctuation">,</span> <span class="token string">\'进度\'</span><span class="token punctuation">)</span>\n    <span class="token comment">// process(sd)</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>chunkInfo<span class="token punctuation">,</span> <span class="token string">\'分片大小\'</span><span class="token punctuation">)</span>\n    <span class="token keyword">const</span> inde <span class="token operator">=</span> chunkInfo<span class="token punctuation">.</span>currentChunk <span class="token operator">+</span> <span class="token number">1</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>uploaded<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>inde <span class="token operator">+</span> <span class="token string">\'\'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> <span class="token punctuation">{</span>\n        chunk\n      <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">getChunkInfo</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> chunkInfo<span class="token punctuation">.</span>currentChunk <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> chunkSize<span class="token punctuation">)</span>\n      <span class="token function">uploadChunk</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        chunk<span class="token punctuation">,</span>\n        <span class="token literal-property property">currentChunk</span><span class="token operator">:</span> inde<span class="token punctuation">,</span>\n        chunkCount\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> uploadData <span class="token operator">=</span> <span class="token function">createUploadData</span><span class="token punctuation">(</span>chunkInfo<span class="token punctuation">)</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>uploadData<span class="token punctuation">)</span>\n      <span class="token function">chunkupload</span><span class="token punctuation">(</span>uploadData<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>errcode <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'分片上传成功\'</span><span class="token punctuation">)</span>\n          uploaded<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>chunkInfo<span class="token punctuation">.</span>currentChunk <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n          <span class="token comment">// 判断是否全部上传完</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span>uploaded<span class="token punctuation">.</span>length <span class="token operator">==</span> chunkInfo<span class="token punctuation">.</span>chunkCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'全部完成\'</span><span class="token punctuation">)</span>\n            <span class="token function">success</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n            <span class="token comment">// process(100)</span>\n          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token keyword">const</span> <span class="token punctuation">{</span>\n              chunk\n            <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">getChunkInfo</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> chunkInfo<span class="token punctuation">.</span>currentChunk <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> chunkSize<span class="token punctuation">)</span>\n            <span class="token function">uploadChunk</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n              chunk<span class="token punctuation">,</span>\n              <span class="token literal-property property">currentChunk</span><span class="token operator">:</span> chunkInfo<span class="token punctuation">.</span>currentChunk <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>\n              chunkCount\n            <span class="token punctuation">}</span><span class="token punctuation">)</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>msg<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token comment">// if (chunkInfo.currentChunk &lt; chunkInfo.chunkCount) {</span>\n      <span class="token comment">//   setTimeout(() => {</span>\n      <span class="token comment">//</span>\n      <span class="token comment">//   }, 1000)</span>\n      <span class="token comment">// }</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token doc-comment comment">/***\n     * 顺序上传\n     **/</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">sequentialUplode</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">currentChunk</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span>\n      chunk\n    <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">getChunkInfo</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> currentChunk<span class="token punctuation">,</span> chunkSize<span class="token punctuation">)</span>\n    <span class="token keyword">const</span> chunkInfo <span class="token operator">=</span> <span class="token punctuation">{</span>\n      chunk<span class="token punctuation">,</span>\n      currentChunk<span class="token punctuation">,</span>\n      chunkCount<span class="token punctuation">,</span>\n      uploadId\n    <span class="token punctuation">}</span>\n    <span class="token comment">// const sd = parseInt((chunkInfo.currentChunk / chunkInfo.chunkCount) * 100)</span>\n    <span class="token comment">// process(sd)</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'当前上传分片：\'</span> <span class="token operator">+</span> currentChunk<span class="token punctuation">)</span>\n    <span class="token keyword">const</span> inde <span class="token operator">=</span> chunkInfo<span class="token punctuation">.</span>currentChunk <span class="token operator">+</span> <span class="token number">1</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>uploaded<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>inde <span class="token operator">+</span> <span class="token string">\'\'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'分片【\'</span> <span class="token operator">+</span> currentChunk <span class="token operator">+</span> <span class="token string">\'】已上传\'</span><span class="token punctuation">)</span>\n      <span class="token function">sequentialUplode</span><span class="token punctuation">(</span>currentChunk <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> uploadData <span class="token operator">=</span> <span class="token function">createUploadData</span><span class="token punctuation">(</span>chunkInfo<span class="token punctuation">)</span>\n\n      <span class="token comment">// 执行分片上传</span>\n      <span class="token function">chunkupload</span><span class="token punctuation">(</span>uploadData<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token string">\'sdfsdfsd\'</span><span class="token punctuation">)</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>errcode <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'分片【\'</span> <span class="token operator">+</span> currentChunk <span class="token operator">+</span> <span class="token string">\'】上传成功\'</span><span class="token punctuation">)</span>\n          uploaded<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>chunkInfo<span class="token punctuation">.</span>currentChunk <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n          <span class="token comment">// 判断是否全部上传完</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span>uploaded<span class="token punctuation">.</span>length <span class="token operator">==</span> chunkInfo<span class="token punctuation">.</span>chunkCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'全部完成\'</span><span class="token punctuation">)</span>\n            <span class="token function">success</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n            <span class="token comment">// process(100)</span>\n          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token function">sequentialUplode</span><span class="token punctuation">(</span>currentChunk <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>errmsg<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token doc-comment comment">/***\n     * 并发上传\n     **/</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">concurrentUpload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> chunkCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> index <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>uploaded<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        chunkList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// debugger</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'需要上传的分片索引：\'</span> <span class="token operator">+</span> chunkList<span class="token punctuation">)</span>\n    <span class="token function">concurrentExecution</span><span class="token punctuation">(</span>chunkList<span class="token punctuation">,</span> concurrent<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">curItem</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> <span class="token punctuation">{</span>\n          chunk\n        <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">getChunkInfo</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> curItem<span class="token punctuation">,</span> chunkSize<span class="token punctuation">)</span>\n        <span class="token keyword">const</span> chunkInfo <span class="token operator">=</span> <span class="token punctuation">{</span>\n          chunk<span class="token punctuation">,</span>\n          <span class="token literal-property property">currentChunk</span><span class="token operator">:</span> curItem<span class="token punctuation">,</span>\n          chunkCount<span class="token punctuation">,</span>\n          uploadId\n        <span class="token punctuation">}</span>\n        <span class="token comment">// const sd = parseInt((chunkInfo.currentChunk / chunkInfo.chunkCount) * 100)</span>\n        <span class="token comment">// process(sd)</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'当前上传分片：\'</span> <span class="token operator">+</span> curItem<span class="token punctuation">)</span>\n        <span class="token keyword">const</span> inde <span class="token operator">=</span> chunkInfo<span class="token punctuation">.</span>currentChunk <span class="token operator">+</span> <span class="token number">1</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>uploaded<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>inde<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token comment">// 构建上传文件的formData</span>\n          <span class="token keyword">const</span> uploadData <span class="token operator">=</span> <span class="token function">createUploadData</span><span class="token punctuation">(</span>chunkInfo<span class="token punctuation">)</span>\n          <span class="token function">chunkupload</span><span class="token punctuation">(</span>uploadData<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>errcode <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              uploaded<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>chunkInfo<span class="token punctuation">.</span>currentChunk <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'已经上传完成的分片：\'</span> <span class="token operator">+</span> uploaded<span class="token punctuation">)</span>\n              <span class="token comment">// 判断是否全部上传完</span>\n              <span class="token keyword">if</span> <span class="token punctuation">(</span>uploaded<span class="token punctuation">.</span>length <span class="token operator">==</span> chunkInfo<span class="token punctuation">.</span>chunkCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token function">success</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n                <span class="token comment">// process(100)</span>\n              <span class="token punctuation">}</span>\n              <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n              <span class="token function">reject</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>errmsg<span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token string">\'errrrr\'</span><span class="token punctuation">)</span>\n            <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>\n            <span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>\n          <span class="token punctuation">}</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'分片【\'</span> <span class="token operator">+</span> chunkInfo<span class="token punctuation">.</span>currentChunk <span class="token operator">+</span> <span class="token string">\'】已上传\'</span><span class="token punctuation">)</span>\n          <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'finish\'</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token doc-comment comment">/***\n     * 创建文件上传参数\n     **/</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">createUploadData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">chunkInfo</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> fetchForm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    fetchForm<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">\'identifier\'</span><span class="token punctuation">,</span> fileMD5<span class="token punctuation">)</span> <span class="token comment">// 文件MD5编码</span>\n    fetchForm<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">\'filename\'</span><span class="token punctuation">,</span> file<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// 文件名</span>\n    fetchForm<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">\'totalChunks\'</span><span class="token punctuation">,</span> chunkInfo<span class="token punctuation">.</span>chunkCount<span class="token punctuation">)</span> <span class="token comment">// 分片总数</span>\n    fetchForm<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">\'chunkSize\'</span><span class="token punctuation">,</span> chunkSize<span class="token punctuation">)</span> <span class="token comment">// 每片大小</span>\n    fetchForm<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">\'chunkNumber\'</span><span class="token punctuation">,</span> chunkInfo<span class="token punctuation">.</span>currentChunk <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 当前为第几片</span>\n    fetchForm<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">\'currentChunkSize\'</span><span class="token punctuation">,</span> chunkInfo<span class="token punctuation">.</span>chunk<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token comment">// 当前分片大小</span>\n    <span class="token keyword">const</span> chunkfile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token punctuation">[</span>chunkInfo<span class="token punctuation">.</span>chunk<span class="token punctuation">]</span><span class="token punctuation">,</span> file<span class="token punctuation">.</span>name<span class="token punctuation">)</span>\n    fetchForm<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">\'file\'</span><span class="token punctuation">,</span> chunkfile<span class="token punctuation">)</span> <span class="token comment">// 文件</span>\n    fetchForm<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">\'uploadId\'</span><span class="token punctuation">,</span> chunkInfo<span class="token punctuation">.</span>uploadId<span class="token punctuation">)</span> <span class="token comment">// 第一次不传，后面的请求需要传</span>\n    <span class="token comment">// fetchForm.append(\'objectType\', fileType)</span>\n    <span class="token keyword">return</span> fetchForm\n  <span class="token punctuation">}</span>\n  <span class="token function">readFileMD5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 开始执行代码</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br><span class="line-number">135</span><br><span class="line-number">136</span><br><span class="line-number">137</span><br><span class="line-number">138</span><br><span class="line-number">139</span><br><span class="line-number">140</span><br><span class="line-number">141</span><br><span class="line-number">142</span><br><span class="line-number">143</span><br><span class="line-number">144</span><br><span class="line-number">145</span><br><span class="line-number">146</span><br><span class="line-number">147</span><br><span class="line-number">148</span><br><span class="line-number">149</span><br><span class="line-number">150</span><br><span class="line-number">151</span><br><span class="line-number">152</span><br><span class="line-number">153</span><br><span class="line-number">154</span><br><span class="line-number">155</span><br><span class="line-number">156</span><br><span class="line-number">157</span><br><span class="line-number">158</span><br><span class="line-number">159</span><br><span class="line-number">160</span><br><span class="line-number">161</span><br><span class="line-number">162</span><br><span class="line-number">163</span><br><span class="line-number">164</span><br><span class="line-number">165</span><br><span class="line-number">166</span><br><span class="line-number">167</span><br><span class="line-number">168</span><br><span class="line-number">169</span><br><span class="line-number">170</span><br><span class="line-number">171</span><br><span class="line-number">172</span><br><span class="line-number">173</span><br><span class="line-number">174</span><br><span class="line-number">175</span><br><span class="line-number">176</span><br><span class="line-number">177</span><br><span class="line-number">178</span><br><span class="line-number">179</span><br><span class="line-number">180</span><br><span class="line-number">181</span><br><span class="line-number">182</span><br><span class="line-number">183</span><br><span class="line-number">184</span><br><span class="line-number">185</span><br><span class="line-number">186</span><br><span class="line-number">187</span><br><span class="line-number">188</span><br><span class="line-number">189</span><br><span class="line-number">190</span><br><span class="line-number">191</span><br><span class="line-number">192</span><br><span class="line-number">193</span><br><span class="line-number">194</span><br><span class="line-number">195</span><br><span class="line-number">196</span><br><span class="line-number">197</span><br><span class="line-number">198</span><br><span class="line-number">199</span><br><span class="line-number">200</span><br><span class="line-number">201</span><br><span class="line-number">202</span><br><span class="line-number">203</span><br><span class="line-number">204</span><br><span class="line-number">205</span><br><span class="line-number">206</span><br><span class="line-number">207</span><br><span class="line-number">208</span><br><span class="line-number">209</span><br><span class="line-number">210</span><br><span class="line-number">211</span><br><span class="line-number">212</span><br><span class="line-number">213</span><br><span class="line-number">214</span><br><span class="line-number">215</span><br><span class="line-number">216</span><br><span class="line-number">217</span><br><span class="line-number">218</span><br><span class="line-number">219</span><br><span class="line-number">220</span><br><span class="line-number">221</span><br><span class="line-number">222</span><br><span class="line-number">223</span><br><span class="line-number">224</span><br><span class="line-number">225</span><br><span class="line-number">226</span><br><span class="line-number">227</span><br><span class="line-number">228</span><br><span class="line-number">229</span><br><span class="line-number">230</span><br><span class="line-number">231</span><br><span class="line-number">232</span><br><span class="line-number">233</span><br><span class="line-number">234</span><br><span class="line-number">235</span><br><span class="line-number">236</span><br><span class="line-number">237</span><br><span class="line-number">238</span><br><span class="line-number">239</span><br><span class="line-number">240</span><br><span class="line-number">241</span><br><span class="line-number">242</span><br><span class="line-number">243</span><br><span class="line-number">244</span><br><span class="line-number">245</span><br><span class="line-number">246</span><br><span class="line-number">247</span><br><span class="line-number">248</span><br><span class="line-number">249</span><br><span class="line-number">250</span><br><span class="line-number">251</span><br><span class="line-number">252</span><br><span class="line-number">253</span><br><span class="line-number">254</span><br><span class="line-number">255</span><br><span class="line-number">256</span><br><span class="line-number">257</span><br><span class="line-number">258</span><br><span class="line-number">259</span><br><span class="line-number">260</span><br><span class="line-number">261</span><br><span class="line-number">262</span><br><span class="line-number">263</span><br><span class="line-number">264</span><br><span class="line-number">265</span><br><span class="line-number">266</span><br><span class="line-number">267</span><br><span class="line-number">268</span><br><span class="line-number">269</span><br><span class="line-number">270</span><br><span class="line-number">271</span><br><span class="line-number">272</span><br><span class="line-number">273</span><br><span class="line-number">274</span><br><span class="line-number">275</span><br><span class="line-number">276</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>jnxh<span class="token punctuation">.</span>js 文件\n\n<span class="token doc-comment comment">/**\n * 并发执行\n * <span class="token keyword">@params</span> list <span class="token punctuation">{</span>Array<span class="token punctuation">}</span> - 要迭代的数组\n * <span class="token keyword">@params</span> limit <span class="token punctuation">{</span>Number<span class="token punctuation">}</span> - 并发数量控制数,最好小于3\n * <span class="token keyword">@params</span> asyncHandle <span class="token punctuation">{</span>Function<span class="token punctuation">}</span> - 对`list`的每一个项的处理函数，参数为当前处理项，必须 return 一个Promise来确定是否继续进行迭代\n * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>Promise<span class="token punctuation">}</span></span> - 返回一个 Promise 值来确认所有数据是否迭代完成\n */</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">concurrentExecution</span> <span class="token punctuation">(</span><span class="token parameter">list<span class="token punctuation">,</span> limit<span class="token punctuation">,</span> asyncHandle</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 递归执行</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">recursion</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token comment">// 执行方法 arr.shift() 取出并移除第一个数据</span>\n    <span class="token keyword">return</span> <span class="token function">asyncHandle</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token comment">// 数组还未迭代完，递归继续进行迭代</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token function">recursion</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token string">\'finish\'</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 创建新的并发数组</span>\n  <span class="token keyword">const</span> listCopy <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span>\n  <span class="token comment">// 正在进行的所有并发异步操作</span>\n  <span class="token keyword">const</span> asyncList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  limit <span class="token operator">=</span> limit <span class="token operator">></span> listCopy<span class="token punctuation">.</span>length <span class="token operator">?</span> listCopy<span class="token punctuation">.</span>length <span class="token operator">:</span> limit\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>limit<span class="token punctuation">)</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>limit<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    asyncList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">recursion</span><span class="token punctuation">(</span>listCopy<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 所有并发异步操作都完成后，本次并发控制迭代完成</span>\n  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>asyncList<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><h1 id="文档借鉴地址" tabindex="-1"><a class="header-anchor" href="#文档借鉴地址" aria-hidden="true">#</a> 文档借鉴地址</h1>\n<p>1：https://www.jb51.net/article/260764.htm</p>\n<p>2：https://blog.csdn.net/qq_43040552/article/details/123375581?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-123375581-blog-123520915.pc_relevant_aa_2&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-123375581-blog-123520915.pc_relevant_aa_2&amp;utm_relevant_index=1</p>\n',date:"2022-09-30",deps:[],hoistedTags:[],links:[],pathInferred:"/vue/2022/20220930.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"20220930",filePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/vue/2022/20220930.md",filePathRelative:"vue/2022/20220930.md",componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/vue/2022/20220930.html.vue",componentFilePathRelative:"pages/vue/2022/20220930.html.vue",componentFileChunkName:"v-493de946",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/vue/2022/20220930.html.js",dataFilePathRelative:"pages/vue/2022/20220930.html.js",dataFileChunkName:"v-493de946",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/vue/2022/20220930.html",htmlFilePathRelative:"vue/2022/20220930.html"},{data:{key:"v-c962782a",path:"/vue/2022/20221002.html",title:"vue项目中如何配置环境变量",lang:"zh-CN",frontmatter:{title:"vue项目中如何配置环境变量",date:"2022-10-02T00:00:00.000Z",tags:["vue"],categories:["vue"]},excerpt:"",headers:[],git:{updatedTime:null,contributors:[]}},key:"v-c962782a",path:"/vue/2022/20221002.html",title:"vue项目中如何配置环境变量",lang:"zh-CN",frontmatter:{title:"vue项目中如何配置环境变量",date:"2022-10-02T00:00:00.000Z",tags:["vue"],categories:["vue"]},excerpt:"",headers:[],content:'\r\n::: tip\r\n\r\n项目开发中，我们可能有多种环境，开发环境，线上环境，测试环境等等，这一篇就来讲讲如何配置环境变量\r\n\r\n:::\r\n\r\n# 代码部分\r\n\r\n创建好一个 vue 项目\r\n\r\n```js\r\n在项目根目录下创建环境配置文件：\r\n.env.development ：开发环境\r\n.env.production ：打包的时候会执行的环境\r\n.env.test ：测试环境\r\n```\r\n\r\n```js\r\n.env.development 文件 （其他环境文件同理）\r\n// 请注意，只有 NODE_ENV，BASE_URL 和以 VUE_APP_ 开头的变量将通过 webpack.DefinePlugin 静态地嵌入到客户端侧的代码中，这个案例中使用了 VUE_APP_\r\nVUE_APP_BASE_URL= "127.0.0.7" \r\n```\r\n\r\n```js\r\nvue.config.js 文件\r\n\r\nconst { defineConfig } = require(\'@vue/cli-service\')\r\n// 可以在这里书写这行代码测试是否配置成功，终端执行不同的命令会打印不同的环境:例 yarn run dev\r\nconsole.log(process.env.VUE_APP_BASE_URL)  // 127.0.0.7\r\n\r\nmodule.exports = defineConfig({\r\n  transpileDependencies: true\r\n})\r\n\r\n```\r\n\r\n配置测试后，可以在 api 文件中使用环境变量，从而实现一套代码不同环境\r\n\r\n```js\r\n例：\r\n......\r\n// url.startsWith ：判断 url 是否以（）中的条件开头\r\nif (url.startsWith(\'/customer\') || url.startsWith(\'/file\')) {\r\n    url = process.env.VUE_APP_CM_URL + url  // 使用环境变量\r\n  } \r\n\r\n```\r\n\r\n# 多套环境\r\n\r\n在 package.json 文件中\r\n\r\n```js\r\n例：\r\n{\r\n  "name": "env",\r\n  "version": "0.1.0",\r\n  "private": true,\r\n  "scripts": {\r\n    "serve": "vue-cli-service serve",\r\n    "dev": "vue-cli-service serve --mode development", //执行这个脚本会找到development环境文件\r\n    "build:test": "vue-cli-service build --mode test", // 打包使用测试环境\r\n    "build:prod": "vue-cli-service build --mode production", // 打包使用生产环境\r\n    "lint": "vue-cli-service lint"\r\n  },\r\n  ......\r\n}\r\n\r\n```\r\n\r\n',contentRendered:'<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>项目开发中，我们可能有多种环境，开发环境，线上环境，测试环境等等，这一篇就来讲讲如何配置环境变量</p>\n</div>\n<h1 id="代码部分" tabindex="-1"><a class="header-anchor" href="#代码部分" aria-hidden="true">#</a> 代码部分</h1>\n<p>创建好一个 vue 项目</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>在项目根目录下创建环境配置文件：\n<span class="token punctuation">.</span>env<span class="token punctuation">.</span>development ：开发环境\n<span class="token punctuation">.</span>env<span class="token punctuation">.</span>production ：打包的时候会执行的环境\n<span class="token punctuation">.</span>env<span class="token punctuation">.</span>test ：测试环境\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token punctuation">.</span>env<span class="token punctuation">.</span>development 文件 （其他环境文件同理）\n<span class="token comment">// 请注意，只有 NODE_ENV，BASE_URL 和以 VUE_APP_ 开头的变量将通过 webpack.DefinePlugin 静态地嵌入到客户端侧的代码中，这个案例中使用了 VUE_APP_</span>\n<span class="token constant">VUE_APP_BASE_URL</span><span class="token operator">=</span> <span class="token string">"127.0.0.7"</span> \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>js 文件\n\n<span class="token keyword">const</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'@vue/cli-service\'</span><span class="token punctuation">)</span>\n<span class="token comment">// 可以在这里书写这行代码测试是否配置成功，终端执行不同的命令会打印不同的环境:例 yarn run dev</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">VUE_APP_BASE_URL</span><span class="token punctuation">)</span>  <span class="token comment">// 127.0.0.7</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">transpileDependencies</span><span class="token operator">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>配置测试后，可以在 api 文件中使用环境变量，从而实现一套代码不同环境</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>例：\n<span class="token operator">...</span><span class="token operator">...</span>\n<span class="token comment">// url.startsWith ：判断 url 是否以（）中的条件开头</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">\'/customer\'</span><span class="token punctuation">)</span> <span class="token operator">||</span> url<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">\'/file\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    url <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">VUE_APP_CM_URL</span> <span class="token operator">+</span> url  <span class="token comment">// 使用环境变量</span>\n  <span class="token punctuation">}</span> \n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h1 id="多套环境" tabindex="-1"><a class="header-anchor" href="#多套环境" aria-hidden="true">#</a> 多套环境</h1>\n<p>在 package.json 文件中</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>例：\n<span class="token punctuation">{</span>\n  <span class="token string-property property">"name"</span><span class="token operator">:</span> <span class="token string">"env"</span><span class="token punctuation">,</span>\n  <span class="token string-property property">"version"</span><span class="token operator">:</span> <span class="token string">"0.1.0"</span><span class="token punctuation">,</span>\n  <span class="token string-property property">"private"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token string-property property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token string-property property">"serve"</span><span class="token operator">:</span> <span class="token string">"vue-cli-service serve"</span><span class="token punctuation">,</span>\n    <span class="token string-property property">"dev"</span><span class="token operator">:</span> <span class="token string">"vue-cli-service serve --mode development"</span><span class="token punctuation">,</span> <span class="token comment">//执行这个脚本会找到development环境文件</span>\n    <span class="token string-property property">"build:test"</span><span class="token operator">:</span> <span class="token string">"vue-cli-service build --mode test"</span><span class="token punctuation">,</span> <span class="token comment">// 打包使用测试环境</span>\n    <span class="token string-property property">"build:prod"</span><span class="token operator">:</span> <span class="token string">"vue-cli-service build --mode production"</span><span class="token punctuation">,</span> <span class="token comment">// 打包使用生产环境</span>\n    <span class="token string-property property">"lint"</span><span class="token operator">:</span> <span class="token string">"vue-cli-service lint"</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token operator">...</span><span class="token operator">...</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div>',date:"2022-10-02",deps:[],hoistedTags:[],links:[],pathInferred:"/vue/2022/20221002.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"20221002",filePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/vue/2022/20221002.md",filePathRelative:"vue/2022/20221002.md",componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/vue/2022/20221002.html.vue",componentFilePathRelative:"pages/vue/2022/20221002.html.vue",componentFileChunkName:"v-c962782a",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/vue/2022/20221002.html.js",dataFilePathRelative:"pages/vue/2022/20221002.html.js",dataFileChunkName:"v-c962782a",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/vue/2022/20221002.html",htmlFilePathRelative:"vue/2022/20221002.html"},{data:{key:"v-571b9622",path:"/three/2023/20230115.html",title:"初探three",lang:"zh-CN",frontmatter:{title:"初探three",date:"2023-01-15T00:00:00.000Z",tags:["three"],categories:["three"]},excerpt:"",headers:[{level:2,title:"分析构成",slug:"分析构成",children:[]},{level:2,title:"容器canvas",slug:"容器canvas",children:[{level:3,title:"渲染器WebGLRenderer",slug:"渲染器webglrenderer",children:[]}]},{level:2,title:"场景Scene",slug:"场景scene",children:[]},{level:2,title:"相机OrthographicCamera or PerspectiveCamera",slug:"相机orthographiccamera-or-perspectivecamera",children:[{level:3,title:"正交相机（OrthographicCamera）",slug:"正交相机-orthographiccamera",children:[]},{level:3,title:"透视相机（PerspectiveCamera）",slug:"透视相机-perspectivecamera",children:[]}]},{level:2,title:"网格Mesh",slug:"网格mesh",children:[]},{level:2,title:"渲染场景与相机",slug:"渲染场景与相机",children:[]},{level:2,title:"操作几何体",slug:"操作几何体",children:[]},{level:2,title:"demo展示",slug:"demo展示",children:[]},{level:2,title:"轨道控制器(controls)",slug:"轨道控制器-controls",children:[]},{level:2,title:"坐标轴辅助器",slug:"坐标轴辅助器",children:[]},{level:2,title:"物体的移动，缩放，旋转",slug:"物体的移动-缩放-旋转",children:[]},{level:2,title:"时钟(clock)",slug:"时钟-clock",children:[]},{level:2,title:"动画库：gsap",slug:"动画库-gsap",children:[]},{level:2,title:"应用图形用户界面",slug:"应用图形用户界面",children:[]}],git:{updatedTime:null,contributors:[]}},key:"v-571b9622",path:"/three/2023/20230115.html",title:"初探three",lang:"zh-CN",frontmatter:{title:"初探three",date:"2023-01-15T00:00:00.000Z",tags:["three"],categories:["three"]},excerpt:"",headers:[{level:2,title:"分析构成",slug:"分析构成",children:[]},{level:2,title:"容器canvas",slug:"容器canvas",children:[{level:3,title:"渲染器WebGLRenderer",slug:"渲染器webglrenderer",children:[]}]},{level:2,title:"场景Scene",slug:"场景scene",children:[]},{level:2,title:"相机OrthographicCamera or PerspectiveCamera",slug:"相机orthographiccamera-or-perspectivecamera",children:[{level:3,title:"正交相机（OrthographicCamera）",slug:"正交相机-orthographiccamera",children:[]},{level:3,title:"透视相机（PerspectiveCamera）",slug:"透视相机-perspectivecamera",children:[]}]},{level:2,title:"网格Mesh",slug:"网格mesh",children:[]},{level:2,title:"渲染场景与相机",slug:"渲染场景与相机",children:[]},{level:2,title:"操作几何体",slug:"操作几何体",children:[]},{level:2,title:"demo展示",slug:"demo展示",children:[]},{level:2,title:"轨道控制器(controls)",slug:"轨道控制器-controls",children:[]},{level:2,title:"坐标轴辅助器",slug:"坐标轴辅助器",children:[]},{level:2,title:"物体的移动，缩放，旋转",slug:"物体的移动-缩放-旋转",children:[]},{level:2,title:"时钟(clock)",slug:"时钟-clock",children:[]},{level:2,title:"动画库：gsap",slug:"动画库-gsap",children:[]},{level:2,title:"应用图形用户界面",slug:"应用图形用户界面",children:[]}],content:'\r\n::: tip\r\n\r\n最近经常刷到使用3D技术做的网站以及各种有趣的demo,这也成功引起了我的兴趣. 因此,我也准备浅尝一下制作3D效果的乐趣，在使用的技术上,选择了目前使用率比较高的threejs来进行demo的构建\r\n\r\n:::\r\n\r\n## 分析构成\r\n\r\n\r\n\r\n首先分析一下使用threejs制作的3D效果需要的基本要素有哪些\r\n\r\n1. 容器 -> 用来承载构建的场景以及内容\r\n2. 渲染器 -> 将内容渲染到容器中\r\n3. 场景 -> 用来承载我们的内容(相机, 灯光, 动画, 网格等)\r\n4. 相机 -> 调整相机可以调整页面展示内容的大小,多少,展示角度等\r\n5. 网格 -> 网格是内容的主要组成部分,可以说是我们要展示的主体\r\n\r\n## 容器canvas\r\n\r\n\r\n\r\nthree是使用canvas来作为承载一切的容器,因此我们首先要添加一个canvas\r\n\r\n```html\r\n<canvas id="demo"></canvas>\r\n```\r\n\r\n### 渲染器WebGLRenderer\r\n\r\n\r\n\r\nthreejs中的渲染器使用的是**WebGLRenderer**, 通过 **new THREE.WebGLRenderer** 初始化渲染器，并将 canvas 容器作为参数传给它\r\n通过调用 **setSize** 方法设置渲染器的尺寸；\r\n调用 **setPixelRatio** 设置 canvas 的像素比为当前设备的屏幕像素比，避免高分屏下出现模糊情况。\r\n\r\n```js\r\n// 初始化渲染器\r\nconst canvas = document.querySelector("#demo");\r\nconst renderer = new THREE.WebGLRenderer({\r\n  canvas: canvas\r\n});\r\n// 设置渲染器尺寸\r\nrenderer.setSize(window.innerWidth, window.innerHeight);\r\n// 设置canvas像素比为当前设备屏幕像素比\r\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 1));\r\n\r\n```\r\n\r\n## 场景Scene\r\n\r\n\r\n\r\n使用 **new THREE.Scene** 来初始化场景, 后面我们的相机 网格等都需要放入场景中,下面是一些常见的场景属性\r\n\r\n| 属性             | 参数介绍                                                |\r\n| ---------------- | ------------------------------------------------------- |\r\n| fog              | 设置场景的雾化效果,可以渲染出一层雾气，隐层远处的的物体 |\r\n| autoUpdate       | 设置是否自动更新                                        |\r\n| background       | 设置场景背景，默认为黑色                                |\r\n| children         | 所有对象的列表                                          |\r\n| add()            | 向场景中添加对象                                        |\r\n| remove()         | 从场景中移除对象                                        |\r\n| getChildByName() | 根据名字直接返回这个对象                                |\r\n| traverse()       | 传入一个回调函数访问所有的对象                          |\r\n\r\n```js\r\n// 初始化场景\r\nconst scene = new THREE.Scene()\r\n// 场景颜色\r\nscene.background = new THREE.Color(0x1a1a1a);\r\n\r\n```\r\n\r\n## 相机OrthographicCamera or PerspectiveCamera\r\n\r\n\r\n\r\nthreejs中相机主要分为两种：正交相机(OrthographicCamera)和透视相机(PerspectiveCamera)\r\n\r\n### 正交相机（OrthographicCamera）\r\n\r\n\r\n\r\n这一摄像机使用orthographic projection（正交投影）来进行投影。\r\n在这种投影模式下，无论物体距离相机距离远或者近，在最终渲染的图片中物体的大小都保持不变。\r\n这对于渲染2D场景或者UI元素是非常有用的。\r\n\r\n### 透视相机（PerspectiveCamera）\r\n\r\n\r\n\r\n这一摄像机使用perspective projection（透视投影）来进行投影。\r\n这一投影模式被用来模拟人眼所看到的景象，它是3D场景的渲染中使用得最普遍的投影模式。\r\n\r\n![img](http://oss.xingyijun.cn/uploads/file-1673423427823.png)\r\n在当前的demo中我们使用的是透视相机PerspectiveCamera\r\n\r\n| 属性   | 参数介绍                                                     |\r\n| ------ | ------------------------------------------------------------ |\r\n| fov    | 摄像机视锥体垂直视野角度，从视图的底部到顶部，以角度来表示。默认值是50 |\r\n| aspect | 摄像机视锥体的长宽比，通常是使用画布的宽/画布的高。默认值是1（正方形画布） |\r\n| near   | 摄像机的近端面，表示的是从距离相机多远的位置开始渲染,默认值是0.1 |\r\n| far    | 摄像机的远端面，表示的是距离相机多远的位置截止渲染,默认值是2000 |\r\n\r\n```js\r\n// 初始化相机\r\nconst camera = new THREE.PerspectiveCamera(70, sizes.width / sizes.height);\r\n// 相机的z轴\r\ncamera.position.z = 2;\r\n// 添加相机到场景种\r\nscene.add(camera);\r\n\r\n```\r\n\r\n## 网格Mesh\r\n\r\n\r\n\r\nthreejs中使用 **new THREE.Mesh** 来创建网格,但是网格本身还有两部分构成: 几何体和材质\r\n要创建一个可正常显示在场景中的三维模型，需要将网格 **Mesh** 添加到场景中，并创建所需的几何体 **Geometry** 和 材质 **Material**\r\n几何体与材质分为多种,各有自己对应的属性和功能,本文在这里就不多做赘述了,有想深入了解的同学可以去查看文档\r\nthreejs中文文档: [https://threejs.org/docs/index.html#manual/zh/introduction/Creating-a-scene](https://threejs.org/docs/index.html#manual/zh/introduction/Creating-a-scene)\r\n\r\n```js\r\n// 添加立方缓冲几何体（BoxGeometry\r\nconst geometry = new THREE.BoxGeometry(1, 1, 1);\r\n// 设置基础网格材质(MeshBasicMaterial)\r\nconst material = new THREE.MeshBasicMaterial({ color: 0xab6ab6 });\r\n// 初始化网格对象\r\nconst mesh = new THREE.Mesh(geometry, material);\r\n// 将网格对象添加到场景中\r\nscene.add(mesh);\r\n\r\n```\r\n\r\n## 渲染场景与相机\r\n\r\n\r\n\r\n在上面的步骤都完成后,我们的几大要素都已经具备了,但是页面上依然是没有任何内容,这是因为还没有将场景与相机添加到渲染器中\r\n\r\n```js\r\n// 将场景与相机添加到渲染器中并渲染\r\nrenderer.render(scene, camera)\r\n\r\n```\r\n\r\n## 操作几何体\r\n\r\n\r\n\r\n在添加如上代码后,页面上出现了几何体\r\n![img](http://oss.xingyijun.cn/uploads/file-1673427382592.png)\r\n虽然看上去像是一个2d的正方形,但实际上是立方体,此时它是正对着屏幕的.我们当然是更加希望看到一个3d的效果,如果可以还希望能够鼠标操作放大缩小等.\r\n这时,就需要借助一个叫 **轨道控制器（OrbitControls）**的东西\r\n这里我就不多介绍它是怎么引入的了,有需要的同学可以去查询一下,在单纯html中引入与在脚手架项目中引入也是有一些区别的\r\n..........就当这里已经引入了,通过使用 **new THREE.OrbitControls** 来初始化轨道控制器\r\n\r\n| 参数       | 参数介绍                                                     |\r\n| ---------- | ------------------------------------------------------------ |\r\n| object     | 将要被控制的相机。该相机不允许是其他任何对象的子级，除非该对象是场景自身 |\r\n| domElement | 用于事件监听的HTML元素                                       |\r\n\r\n```js\r\n// 初始化轨道控制器\r\nconst controls = new THREE.OrbitControls(camera, renderer.domElement);\r\n\r\n```\r\n\r\n当然单纯初始化轨道控制器后依然是无法进行使用的,因此在操作的同时,需要对其进行更新.\r\n\r\n```js\r\n// 创建一个更新的方法\r\nconst update = () => {\r\n  // 跟随更新方法去渲染内容\r\n  renderer.render(scene, camera)\r\n  // 更新控制器。必须在摄像机的变换发生任何手动改变后调用\r\n  controls.update()\r\n  // 使用帧动画重复调用更新\r\n  requestAnimationFrame(update)\r\n}\r\nupdate()\r\n\r\n```\r\n\r\n## demo展示\r\n\r\n\r\n在完成以上所有步骤后,得到了一个可以使用鼠标进行操作的3D立方体\r\n\r\n<iframe height="300" scrolling="no" title="Space globe - Three.js" src="https://codepen.io/qianshi-ffg/embed/JjBWqqv?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true" style="box-sizing: border-box; border-width: 0px; border-style: solid; border-color: rgb(229, 231, 235); --tw-border-spacing-x:0; --tw-border-spacing-y:0; --tw-translate-x:0; --tw-translate-y:0; --tw-rotate:0; --tw-skew-x:0; --tw-skew-y:0; --tw-scale-x:1; --tw-scale-y:1; --tw-pan-x: ; --tw-pan-y: ; --tw-pinch-zoom: ; --tw-scroll-snap-strictness:proximity; --tw-ordinal: ; --tw-slashed-zero: ; --tw-numeric-figure: ; --tw-numeric-spacing: ; --tw-numeric-fraction: ; --tw-ring-inset: ; --tw-ring-offset-width:0px; --tw-ring-offset-color:#fff; --tw-ring-color:rgb(59 130 246 / 0.5); --tw-ring-offset-shadow:0 0 #0000; --tw-ring-shadow:0 0 #0000; --tw-shadow:0 0 #0000; --tw-shadow-colored:0 0 #0000; --tw-blur: ; --tw-brightness: ; --tw-contrast: ; --tw-grayscale: ; --tw-hue-rotate: ; --tw-invert: ; --tw-saturate: ; --tw-sepia: ; --tw-drop-shadow: ; --tw-backdrop-blur: ; --tw-backdrop-brightness: ; --tw-backdrop-contrast: ; --tw-backdrop-grayscale: ; --tw-backdrop-hue-rotate: ; --tw-backdrop-invert: ; --tw-backdrop-opacity: ; --tw-backdrop-saturate: ; --tw-backdrop-sepia: ; display: block; vertical-align: middle; color: rgb(33, 53, 71); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI Variable&quot;, &quot;Segoe UI&quot;, system-ui, ui-sans-serif, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;; font-size: 16px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; width: 840px;"></iframe>\r\n\r\n## 轨道控制器(controls)\r\n\r\n利用控制器，可以进行一系列的交互，例如 **轨道控制器（OrbitControls）** ，可以使得相机围绕目标进行轨道运动，设置了以后，鼠标移动，物体会跟着移动\r\n\r\n```js\r\n// 创建轨道控制器\r\nconst controls = new OrbitControls(camera, renderer.domElement);\r\n```\r\n\r\n## 坐标轴辅助器\r\n\r\n可以显示坐标轴，辅助我们进行开发\r\n\r\n```js\r\n// 添加坐标轴辅助器，参数是轴的长度多少\r\nconst axesHelper = new THREE.AxesHelper(5);\r\n// 设置控制器阻尼，让控制器更有真实效果,但是必须在动画循环里调用.update()。\r\ncontrols.enableDamping = true;\r\n// 添加到场景中\r\nscene.add(axesHelper); \r\n\r\n// 动画函数\r\nfunction render() {\r\n  controls.update();\r\n  renderer.render(scene, camera);\r\n  // 设置浏览器每一帧刷新的时候都重新渲染一遍，渲染下一帧的时候就会调用render函数\r\n  requestAnimationFrame(render);\r\n}\r\n\r\nrender();\r\n```\r\n\r\n## 物体的移动，缩放，旋转\r\n\r\n```js\r\n// 修改物体的位置\r\ncube.position.set(5, 0, 0); // x,y,z\r\ncube.position.x = 3; // 单独设置\r\n// 缩放\r\ncube.scale.set(3, 2, 1); // x,y,z\r\ncube.scale.x = 5; // 单独设置\r\n// 旋转\r\ncube.rotation.set(Math.PI / 4, 0, 0); // x,y,z的弧度\r\n\r\n// 更多信息查询官方文档\r\n```\r\n\r\n## 时钟(clock)\r\n\r\n该对象用于跟踪时间,可以帮助我们优化动画效果\r\n\r\n```js\r\n// 例：\r\n// 设置时钟\r\nconst clock = new THREE.Clock();\r\nfunction render() {\r\n  // 获取时钟运行的总时长\r\n  let time = clock.getElapsedTime();\r\n  // let deltaTime = clock.getDelta();\r\n  //  console.log("两次获取时间的间隔时间：", deltaTime);\r\n  let t = time % 5;\r\n  cube.position.x = t * 1; // 物体位移\r\n\r\n  renderer.render(scene, camera);\r\n  //  渲染下一帧的时候就会调用render函数\r\n  requestAnimationFrame(render);\r\n}\r\n\r\nrender();\r\n```\r\n\r\n## 动画库：gsap\r\n\r\n**gsap** 是一个**JavaScript** 动画库，可以帮助我们实现各种动画效果，下面是案例，详细信息查看[官方文档](https://greensock.com/gsap/)\r\n\r\n```js\r\n1.安装\r\nnpm i gsap\r\n```\r\n\r\n```js\r\n// 案例\r\n// 导入动画库\r\nimport gsap from "gsap";\r\n// 第一个参数是要动的元素，这里是物体的位移，第二个参数是个对象\r\ngsap.to(cube.position, {\r\n  x: 5,\r\n  duration: 5, // 一共需要多少时间，这里是5秒\r\n  ease: "power1.inOut", // 运动的类型\r\n  //   设置重复的次数，无限次循环-1\r\n  repeat: -1,\r\n  //   往返运动\r\n  yoyo: true,\r\n  //   delay，延迟2秒运动\r\n  delay: 2,\r\n  onComplete: () => {\r\n    console.log("动画完成");\r\n  },\r\n  onStart: () => {\r\n    console.log("动画开始");\r\n  },\r\n});\r\n\r\n// gsap.to也会返回一个对象，当你想做一些操作时，可以用一个变量接收\r\n// 例如双击事件，animate1是返回的对象\r\nwindow.addEventListener("dblclick", () => {\r\n    // 当在运动时\r\n  if (animate1.isActive()) {\r\n    //   暂停\r\n    animate1.pause();\r\n  } else {\r\n    //   恢复\r\n    animate1.resume();\r\n  }\r\n});\r\n```\r\n\r\n## 应用图形用户界面\r\n\r\n可以实现通过可视化界面操作图形变化，例如下面案例\r\n\r\n```js\r\n// 安装\r\nnpm install --save dat.gui\r\n// 导入dat.gui\r\nimport * as dat from "dat.gui";\r\n// 创建可视化窗口\r\nconst gui = new dat.GUI();\r\n// 添加选项，移动x轴，最小值，最大值，步骤间距单位\r\ngui\r\n  .add(cube.position, "x")\r\n  .min(0)\r\n  .max(5)\r\n  .step(0.01)\r\n  .name("移动x轴")\r\n  .onChange((value) => {\r\n    console.log("值被修改：", value);\r\n  })\r\n  .onFinishChange((value) => {\r\n    console.log("完全停下来:", value);\r\n  });\r\n\r\n//   修改物体的颜色\r\nconst params = {\r\n  color: "#ffff00",\r\n  fn: () => {\r\n    //   让立方体运动起来\r\n    gsap.to(cube.position, { x: 5, duration: 2, yoyo: true, repeat: -1 });\r\n  },\r\n};\r\ngui.addColor(params, "color").onChange((value) => {\r\n  console.log("值被修改：", value);\r\n  cube.material.color.set(value);\r\n});\r\n// 设置选项框\r\ngui.add(cube, "visible").name("是否显示");\r\n\r\nvar folder = gui.addFolder("设置立方体");\r\nfolder.add(cube.material, "wireframe");\r\n// 设置按钮点击触发某个事件\r\nfolder.add(params, "fn").name("立方体运动");\r\n```\r\n\r\n',contentRendered:'<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>最近经常刷到使用3D技术做的网站以及各种有趣的demo,这也成功引起了我的兴趣. 因此,我也准备浅尝一下制作3D效果的乐趣，在使用的技术上,选择了目前使用率比较高的threejs来进行demo的构建</p>\n</div>\n<h2 id="分析构成" tabindex="-1"><a class="header-anchor" href="#分析构成" aria-hidden="true">#</a> 分析构成</h2>\n<p>首先分析一下使用threejs制作的3D效果需要的基本要素有哪些</p>\n<ol>\n<li>容器 -&gt; 用来承载构建的场景以及内容</li>\n<li>渲染器 -&gt; 将内容渲染到容器中</li>\n<li>场景 -&gt; 用来承载我们的内容(相机, 灯光, 动画, 网格等)</li>\n<li>相机 -&gt; 调整相机可以调整页面展示内容的大小,多少,展示角度等</li>\n<li>网格 -&gt; 网格是内容的主要组成部分,可以说是我们要展示的主体</li>\n</ol>\n<h2 id="容器canvas" tabindex="-1"><a class="header-anchor" href="#容器canvas" aria-hidden="true">#</a> 容器canvas</h2>\n<p>three是使用canvas来作为承载一切的容器,因此我们首先要添加一个canvas</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="渲染器webglrenderer" tabindex="-1"><a class="header-anchor" href="#渲染器webglrenderer" aria-hidden="true">#</a> 渲染器WebGLRenderer</h3>\n<p>threejs中的渲染器使用的是<strong>WebGLRenderer</strong>, 通过 <strong>new THREE.WebGLRenderer</strong> 初始化渲染器，并将 canvas 容器作为参数传给它\n通过调用 <strong>setSize</strong> 方法设置渲染器的尺寸；\n调用 <strong>setPixelRatio</strong> 设置 canvas 的像素比为当前设备的屏幕像素比，避免高分屏下出现模糊情况。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 初始化渲染器</span>\n<span class="token keyword">const</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#demo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> renderer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>WebGLRenderer</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">canvas</span><span class="token operator">:</span> canvas\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 设置渲染器尺寸</span>\nrenderer<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">,</span> window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 设置canvas像素比为当前设备屏幕像素比</span>\nrenderer<span class="token punctuation">.</span><span class="token function">setPixelRatio</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>devicePixelRatio<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="场景scene" tabindex="-1"><a class="header-anchor" href="#场景scene" aria-hidden="true">#</a> 场景Scene</h2>\n<p>使用 <strong>new THREE.Scene</strong> 来初始化场景, 后面我们的相机 网格等都需要放入场景中,下面是一些常见的场景属性</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>参数介绍</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>fog</td>\n<td>设置场景的雾化效果,可以渲染出一层雾气，隐层远处的的物体</td>\n</tr>\n<tr>\n<td>autoUpdate</td>\n<td>设置是否自动更新</td>\n</tr>\n<tr>\n<td>background</td>\n<td>设置场景背景，默认为黑色</td>\n</tr>\n<tr>\n<td>children</td>\n<td>所有对象的列表</td>\n</tr>\n<tr>\n<td>add()</td>\n<td>向场景中添加对象</td>\n</tr>\n<tr>\n<td>remove()</td>\n<td>从场景中移除对象</td>\n</tr>\n<tr>\n<td>getChildByName()</td>\n<td>根据名字直接返回这个对象</td>\n</tr>\n<tr>\n<td>traverse()</td>\n<td>传入一个回调函数访问所有的对象</td>\n</tr>\n</tbody>\n</table>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 初始化场景</span>\n<span class="token keyword">const</span> scene <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>Scene</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">// 场景颜色</span>\nscene<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>Color</span><span class="token punctuation">(</span><span class="token number">0x1a1a1a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="相机orthographiccamera-or-perspectivecamera" tabindex="-1"><a class="header-anchor" href="#相机orthographiccamera-or-perspectivecamera" aria-hidden="true">#</a> 相机OrthographicCamera or PerspectiveCamera</h2>\n<p>threejs中相机主要分为两种：正交相机(OrthographicCamera)和透视相机(PerspectiveCamera)</p>\n<h3 id="正交相机-orthographiccamera" tabindex="-1"><a class="header-anchor" href="#正交相机-orthographiccamera" aria-hidden="true">#</a> 正交相机（OrthographicCamera）</h3>\n<p>这一摄像机使用orthographic projection（正交投影）来进行投影。\n在这种投影模式下，无论物体距离相机距离远或者近，在最终渲染的图片中物体的大小都保持不变。\n这对于渲染2D场景或者UI元素是非常有用的。</p>\n<h3 id="透视相机-perspectivecamera" tabindex="-1"><a class="header-anchor" href="#透视相机-perspectivecamera" aria-hidden="true">#</a> 透视相机（PerspectiveCamera）</h3>\n<p>这一摄像机使用perspective projection（透视投影）来进行投影。\n这一投影模式被用来模拟人眼所看到的景象，它是3D场景的渲染中使用得最普遍的投影模式。</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="http://oss.xingyijun.cn/uploads/file-1673423427823.png" data="aurora">\n在当前的demo中我们使用的是透视相机PerspectiveCamera</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>参数介绍</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>fov</td>\n<td>摄像机视锥体垂直视野角度，从视图的底部到顶部，以角度来表示。默认值是50</td>\n</tr>\n<tr>\n<td>aspect</td>\n<td>摄像机视锥体的长宽比，通常是使用画布的宽/画布的高。默认值是1（正方形画布）</td>\n</tr>\n<tr>\n<td>near</td>\n<td>摄像机的近端面，表示的是从距离相机多远的位置开始渲染,默认值是0.1</td>\n</tr>\n<tr>\n<td>far</td>\n<td>摄像机的远端面，表示的是距离相机多远的位置截止渲染,默认值是2000</td>\n</tr>\n</tbody>\n</table>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 初始化相机</span>\n<span class="token keyword">const</span> camera <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>PerspectiveCamera</span><span class="token punctuation">(</span><span class="token number">70</span><span class="token punctuation">,</span> sizes<span class="token punctuation">.</span>width <span class="token operator">/</span> sizes<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 相机的z轴</span>\ncamera<span class="token punctuation">.</span>position<span class="token punctuation">.</span>z <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n<span class="token comment">// 添加相机到场景种</span>\nscene<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>camera<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="网格mesh" tabindex="-1"><a class="header-anchor" href="#网格mesh" aria-hidden="true">#</a> 网格Mesh</h2>\n<p>threejs中使用 <strong>new THREE.Mesh</strong> 来创建网格,但是网格本身还有两部分构成: 几何体和材质\n要创建一个可正常显示在场景中的三维模型，需要将网格 <strong>Mesh</strong> 添加到场景中，并创建所需的几何体 <strong>Geometry</strong> 和 材质 <strong>Material</strong>\n几何体与材质分为多种,各有自己对应的属性和功能,本文在这里就不多做赘述了,有想深入了解的同学可以去查看文档\nthreejs中文文档: <a href="https://threejs.org/docs/index.html#manual/zh/introduction/Creating-a-scene" target="_blank" rel="noopener noreferrer">https://threejs.org/docs/index.html#manual/zh/introduction/Creating-a-scene<ExternalLinkIcon/></a></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 添加立方缓冲几何体（BoxGeometry</span>\n<span class="token keyword">const</span> geometry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>BoxGeometry</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 设置基础网格材质(MeshBasicMaterial)</span>\n<span class="token keyword">const</span> material <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>MeshBasicMaterial</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token number">0xab6ab6</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 初始化网格对象</span>\n<span class="token keyword">const</span> mesh <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>Mesh</span><span class="token punctuation">(</span>geometry<span class="token punctuation">,</span> material<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 将网格对象添加到场景中</span>\nscene<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>mesh<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="渲染场景与相机" tabindex="-1"><a class="header-anchor" href="#渲染场景与相机" aria-hidden="true">#</a> 渲染场景与相机</h2>\n<p>在上面的步骤都完成后,我们的几大要素都已经具备了,但是页面上依然是没有任何内容,这是因为还没有将场景与相机添加到渲染器中</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 将场景与相机添加到渲染器中并渲染</span>\nrenderer<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>scene<span class="token punctuation">,</span> camera<span class="token punctuation">)</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="操作几何体" tabindex="-1"><a class="header-anchor" href="#操作几何体" aria-hidden="true">#</a> 操作几何体</h2>\n<p>在添加如上代码后,页面上出现了几何体\n<img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="http://oss.xingyijun.cn/uploads/file-1673427382592.png" data="aurora">\n虽然看上去像是一个2d的正方形,但实际上是立方体,此时它是正对着屏幕的.我们当然是更加希望看到一个3d的效果,如果可以还希望能够鼠标操作放大缩小等.\n这时,就需要借助一个叫 **轨道控制器（OrbitControls）**的东西\n这里我就不多介绍它是怎么引入的了,有需要的同学可以去查询一下,在单纯html中引入与在脚手架项目中引入也是有一些区别的\n..........就当这里已经引入了,通过使用 <strong>new THREE.OrbitControls</strong> 来初始化轨道控制器</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>参数介绍</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>object</td>\n<td>将要被控制的相机。该相机不允许是其他任何对象的子级，除非该对象是场景自身</td>\n</tr>\n<tr>\n<td>domElement</td>\n<td>用于事件监听的HTML元素</td>\n</tr>\n</tbody>\n</table>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 初始化轨道控制器</span>\n<span class="token keyword">const</span> controls <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>OrbitControls</span><span class="token punctuation">(</span>camera<span class="token punctuation">,</span> renderer<span class="token punctuation">.</span>domElement<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>当然单纯初始化轨道控制器后依然是无法进行使用的,因此在操作的同时,需要对其进行更新.</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 创建一个更新的方法</span>\n<span class="token keyword">const</span> <span class="token function-variable function">update</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// 跟随更新方法去渲染内容</span>\n  renderer<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>scene<span class="token punctuation">,</span> camera<span class="token punctuation">)</span>\n  <span class="token comment">// 更新控制器。必须在摄像机的变换发生任何手动改变后调用</span>\n  controls<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token comment">// 使用帧动画重复调用更新</span>\n  <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>update<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="demo展示" tabindex="-1"><a class="header-anchor" href="#demo展示" aria-hidden="true">#</a> demo展示</h2>\n<p>在完成以上所有步骤后,得到了一个可以使用鼠标进行操作的3D立方体</p>\n<iframe height="300" scrolling="no" title="Space globe - Three.js" src="https://codepen.io/qianshi-ffg/embed/JjBWqqv?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true" style="box-sizing: border-box; border-width: 0px; border-style: solid; border-color: rgb(229, 231, 235); --tw-border-spacing-x:0; --tw-border-spacing-y:0; --tw-translate-x:0; --tw-translate-y:0; --tw-rotate:0; --tw-skew-x:0; --tw-skew-y:0; --tw-scale-x:1; --tw-scale-y:1; --tw-pan-x: ; --tw-pan-y: ; --tw-pinch-zoom: ; --tw-scroll-snap-strictness:proximity; --tw-ordinal: ; --tw-slashed-zero: ; --tw-numeric-figure: ; --tw-numeric-spacing: ; --tw-numeric-fraction: ; --tw-ring-inset: ; --tw-ring-offset-width:0px; --tw-ring-offset-color:#fff; --tw-ring-color:rgb(59 130 246 / 0.5); --tw-ring-offset-shadow:0 0 #0000; --tw-ring-shadow:0 0 #0000; --tw-shadow:0 0 #0000; --tw-shadow-colored:0 0 #0000; --tw-blur: ; --tw-brightness: ; --tw-contrast: ; --tw-grayscale: ; --tw-hue-rotate: ; --tw-invert: ; --tw-saturate: ; --tw-sepia: ; --tw-drop-shadow: ; --tw-backdrop-blur: ; --tw-backdrop-brightness: ; --tw-backdrop-contrast: ; --tw-backdrop-grayscale: ; --tw-backdrop-hue-rotate: ; --tw-backdrop-invert: ; --tw-backdrop-opacity: ; --tw-backdrop-saturate: ; --tw-backdrop-sepia: ; display: block; vertical-align: middle; color: rgb(33, 53, 71); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI Variable&quot;, &quot;Segoe UI&quot;, system-ui, ui-sans-serif, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;; font-size: 16px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; width: 840px;"></iframe>\n<h2 id="轨道控制器-controls" tabindex="-1"><a class="header-anchor" href="#轨道控制器-controls" aria-hidden="true">#</a> 轨道控制器(controls)</h2>\n<p>利用控制器，可以进行一系列的交互，例如 <strong>轨道控制器（OrbitControls）</strong> ，可以使得相机围绕目标进行轨道运动，设置了以后，鼠标移动，物体会跟着移动</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 创建轨道控制器</span>\n<span class="token keyword">const</span> controls <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrbitControls</span><span class="token punctuation">(</span>camera<span class="token punctuation">,</span> renderer<span class="token punctuation">.</span>domElement<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="坐标轴辅助器" tabindex="-1"><a class="header-anchor" href="#坐标轴辅助器" aria-hidden="true">#</a> 坐标轴辅助器</h2>\n<p>可以显示坐标轴，辅助我们进行开发</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 添加坐标轴辅助器，参数是轴的长度多少</span>\n<span class="token keyword">const</span> axesHelper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>AxesHelper</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 设置控制器阻尼，让控制器更有真实效果,但是必须在动画循环里调用.update()。</span>\ncontrols<span class="token punctuation">.</span>enableDamping <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token comment">// 添加到场景中</span>\nscene<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>axesHelper<span class="token punctuation">)</span><span class="token punctuation">;</span> \n\n<span class="token comment">// 动画函数</span>\n<span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  controls<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  renderer<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>scene<span class="token punctuation">,</span> camera<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// 设置浏览器每一帧刷新的时候都重新渲染一遍，渲染下一帧的时候就会调用render函数</span>\n  <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>render<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="物体的移动-缩放-旋转" tabindex="-1"><a class="header-anchor" href="#物体的移动-缩放-旋转" aria-hidden="true">#</a> 物体的移动，缩放，旋转</h2>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 修改物体的位置</span>\ncube<span class="token punctuation">.</span>position<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// x,y,z</span>\ncube<span class="token punctuation">.</span>position<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 单独设置</span>\n<span class="token comment">// 缩放</span>\ncube<span class="token punctuation">.</span>scale<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// x,y,z</span>\ncube<span class="token punctuation">.</span>scale<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// 单独设置</span>\n<span class="token comment">// 旋转</span>\ncube<span class="token punctuation">.</span>rotation<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// x,y,z的弧度</span>\n\n<span class="token comment">// 更多信息查询官方文档</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="时钟-clock" tabindex="-1"><a class="header-anchor" href="#时钟-clock" aria-hidden="true">#</a> 时钟(clock)</h2>\n<p>该对象用于跟踪时间,可以帮助我们优化动画效果</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 例：</span>\n<span class="token comment">// 设置时钟</span>\n<span class="token keyword">const</span> clock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>Clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 获取时钟运行的总时长</span>\n  <span class="token keyword">let</span> time <span class="token operator">=</span> clock<span class="token punctuation">.</span><span class="token function">getElapsedTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// let deltaTime = clock.getDelta();</span>\n  <span class="token comment">//  console.log("两次获取时间的间隔时间：", deltaTime);</span>\n  <span class="token keyword">let</span> t <span class="token operator">=</span> time <span class="token operator">%</span> <span class="token number">5</span><span class="token punctuation">;</span>\n  cube<span class="token punctuation">.</span>position<span class="token punctuation">.</span>x <span class="token operator">=</span> t <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 物体位移</span>\n\n  renderer<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>scene<span class="token punctuation">,</span> camera<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">//  渲染下一帧的时候就会调用render函数</span>\n  <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>render<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="动画库-gsap" tabindex="-1"><a class="header-anchor" href="#动画库-gsap" aria-hidden="true">#</a> 动画库：gsap</h2>\n<p><strong>gsap</strong> 是一个<strong>JavaScript</strong> 动画库，可以帮助我们实现各种动画效果，下面是案例，详细信息查看<a href="https://greensock.com/gsap/" target="_blank" rel="noopener noreferrer">官方文档<ExternalLinkIcon/></a></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token number">1.</span>安装\nnpm i gsap\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 案例</span>\n<span class="token comment">// 导入动画库</span>\n<span class="token keyword">import</span> gsap <span class="token keyword">from</span> <span class="token string">"gsap"</span><span class="token punctuation">;</span>\n<span class="token comment">// 第一个参数是要动的元素，这里是物体的位移，第二个参数是个对象</span>\ngsap<span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>cube<span class="token punctuation">.</span>position<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">duration</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token comment">// 一共需要多少时间，这里是5秒</span>\n  <span class="token literal-property property">ease</span><span class="token operator">:</span> <span class="token string">"power1.inOut"</span><span class="token punctuation">,</span> <span class="token comment">// 运动的类型</span>\n  <span class="token comment">//   设置重复的次数，无限次循环-1</span>\n  <span class="token literal-property property">repeat</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>\n  <span class="token comment">//   往返运动</span>\n  <span class="token literal-property property">yoyo</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token comment">//   delay，延迟2秒运动</span>\n  <span class="token literal-property property">delay</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">onComplete</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"动画完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">onStart</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"动画开始"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// gsap.to也会返回一个对象，当你想做一些操作时，可以用一个变量接收</span>\n<span class="token comment">// 例如双击事件，animate1是返回的对象</span>\nwindow<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"dblclick"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token comment">// 当在运动时</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>animate1<span class="token punctuation">.</span><span class="token function">isActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//   暂停</span>\n    animate1<span class="token punctuation">.</span><span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token comment">//   恢复</span>\n    animate1<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><h2 id="应用图形用户界面" tabindex="-1"><a class="header-anchor" href="#应用图形用户界面" aria-hidden="true">#</a> 应用图形用户界面</h2>\n<p>可以实现通过可视化界面操作图形变化，例如下面案例</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 安装</span>\nnpm install <span class="token operator">--</span>save dat<span class="token punctuation">.</span>gui\n<span class="token comment">// 导入dat.gui</span>\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> dat <span class="token keyword">from</span> <span class="token string">"dat.gui"</span><span class="token punctuation">;</span>\n<span class="token comment">// 创建可视化窗口</span>\n<span class="token keyword">const</span> gui <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">dat<span class="token punctuation">.</span>GUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 添加选项，移动x轴，最小值，最大值，步骤间距单位</span>\ngui\n  <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cube<span class="token punctuation">.</span>position<span class="token punctuation">,</span> <span class="token string">"x"</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">step</span><span class="token punctuation">(</span><span class="token number">0.01</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">"移动x轴"</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">onChange</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"值被修改："</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">onFinishChange</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"完全停下来:"</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">//   修改物体的颜色</span>\n<span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">"#ffff00"</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token comment">//   让立方体运动起来</span>\n    gsap<span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>cube<span class="token punctuation">.</span>position<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token literal-property property">duration</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">yoyo</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">repeat</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\ngui<span class="token punctuation">.</span><span class="token function">addColor</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span> <span class="token string">"color"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onChange</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"值被修改："</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  cube<span class="token punctuation">.</span>material<span class="token punctuation">.</span>color<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 设置选项框</span>\ngui<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cube<span class="token punctuation">,</span> <span class="token string">"visible"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">"是否显示"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> folder <span class="token operator">=</span> gui<span class="token punctuation">.</span><span class="token function">addFolder</span><span class="token punctuation">(</span><span class="token string">"设置立方体"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nfolder<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cube<span class="token punctuation">.</span>material<span class="token punctuation">,</span> <span class="token string">"wireframe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 设置按钮点击触发某个事件</span>\nfolder<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span> <span class="token string">"fn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">"立方体运动"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div>',date:"2023-01-15",deps:[],hoistedTags:[],links:[],pathInferred:"/three/2023/20230115.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"20230115",filePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/three/2023/20230115.md",filePathRelative:"three/2023/20230115.md",componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/three/2023/20230115.html.vue",componentFilePathRelative:"pages/three/2023/20230115.html.vue",componentFileChunkName:"v-571b9622",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/three/2023/20230115.html.js",dataFilePathRelative:"pages/three/2023/20230115.html.js",dataFileChunkName:"v-571b9622",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/three/2023/20230115.html",htmlFilePathRelative:"three/2023/20230115.html"},{data:{key:"v-5012795f",path:"/%E5%B0%8F%E7%A8%8B%E5%BA%8F/2022/20220730.html",title:"解决不同设备兼容性问题",lang:"zh-CN",frontmatter:{title:"解决不同设备兼容性问题",date:"2022-07-30T00:00:00.000Z",tags:["小程序"],categories:["小程序"]},excerpt:"",headers:[],git:{updatedTime:null,contributors:[]}},key:"v-5012795f",path:"/%E5%B0%8F%E7%A8%8B%E5%BA%8F/2022/20220730.html",title:"解决不同设备兼容性问题",lang:"zh-CN",frontmatter:{title:"解决不同设备兼容性问题",date:"2022-07-30T00:00:00.000Z",tags:["小程序"],categories:["小程序"]},excerpt:"",headers:[],content:"\r\n::: tip\r\n\r\n我们在开发小程序时，很多时候需要自定义 NavBar ，那么不可避免的要处理在不同设备下，页面展示正常，功能正常，这一篇将列举一些常见的兼容性问题\r\n\r\n:::\r\n\r\n# 不同设备下的页面展示\r\n\r\n小程序在不同设备下运行，可能会造成页面样式异常，下面针对 pc 端，安卓，苹果来实现兼容\r\n\r\n```js\r\n// 首页我们在 app.js 文件中写入以下代码\r\n\r\n// app.js\r\nApp({\r\n  onLaunch(e) {\r\n    // 展示本地存储能力\r\n     \r\n  },\r\n  globalData: {\r\n    userInfo: null,\r\n    visit_history:[],//品牌浏览历史\r\n    is_iphone:'',//苹果刘海适配\r\n    statusBarHeight:wx.getSystemInfoSync()['statusBarHeight'], \r\n    base_info:'',//全局基础信息，例如联系电话等\r\n  }\r\n})\r\n\r\n// 调用 wx.getSystemInfoSync()['statusBarHeight'] 来获取当前设备的高度\r\n\r\n// 第二步，在需要兼容的页面 js 文件中\r\n// pages/addEnterprise/addEnterprise.js\r\nconst app = getApp() 引入\r\nPage({\r\n data: { // statusBarHeight 判断是安卓还是苹果，20是安卓\r\n        statusBarHeight: app.globalData.statusBarHeight,\r\n     // platform：定义一个变量，判断是否是 pc 端，pc 是 windows  \r\n     platform: '', \r\n },\r\n  onLoad(options) {\r\n      //  wx.getSystemInfo 接口获取当前设备信息\r\n        wx.getSystemInfo({\r\n            success: (res) => {\r\n                this.setData({\r\n                    platform: res.platform\r\n                })\r\n            }\r\n        })\r\n    },\r\n })\r\n\r\n\r\n// 示例使用\r\n\x3c!--pages/addEnterprise/addEnterprise.wxml--\x3e\r\n<view class=\"index\">\r\n    <view class=\"{{statusBarHeight == '20' ? 'header' : 'header-lh'}}\" wx:if=\"{{platform !== 'windows'}}\">\r\n        <van-icon name=\"arrow-left\" class=\"header-icon\" size=\"50rpx\" bindtap=\"handleback\" />\r\n        <text class=\"titles\">加企微</text>\r\n    </view>\r\n</view>\r\n\r\n\r\n```\r\n\r\n# 绝对定位\r\n\r\n- 绝对定位能不使用就尽量不要使用，因为苹果和pc端有些不支持\r\n\r\n",contentRendered:'<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>我们在开发小程序时，很多时候需要自定义 NavBar ，那么不可避免的要处理在不同设备下，页面展示正常，功能正常，这一篇将列举一些常见的兼容性问题</p>\n</div>\n<h1 id="不同设备下的页面展示" tabindex="-1"><a class="header-anchor" href="#不同设备下的页面展示" aria-hidden="true">#</a> 不同设备下的页面展示</h1>\n<p>小程序在不同设备下运行，可能会造成页面样式异常，下面针对 pc 端，安卓，苹果来实现兼容</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 首页我们在 app.js 文件中写入以下代码</span>\n\n<span class="token comment">// app.js</span>\n<span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token function">onLaunch</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 展示本地存储能力</span>\n     \n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">globalData</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">userInfo</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">visit_history</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">//品牌浏览历史</span>\n    <span class="token literal-property property">is_iphone</span><span class="token operator">:</span><span class="token string">\'\'</span><span class="token punctuation">,</span><span class="token comment">//苹果刘海适配</span>\n    <span class="token literal-property property">statusBarHeight</span><span class="token operator">:</span>wx<span class="token punctuation">.</span><span class="token function">getSystemInfoSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">\'statusBarHeight\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> \n    <span class="token literal-property property">base_info</span><span class="token operator">:</span><span class="token string">\'\'</span><span class="token punctuation">,</span><span class="token comment">//全局基础信息，例如联系电话等</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 调用 wx.getSystemInfoSync()[\'statusBarHeight\'] 来获取当前设备的高度</span>\n\n<span class="token comment">// 第二步，在需要兼容的页面 js 文件中</span>\n<span class="token comment">// pages/addEnterprise/addEnterprise.js</span>\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">getApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 引入\n<span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// statusBarHeight 判断是安卓还是苹果，20是安卓</span>\n        <span class="token literal-property property">statusBarHeight</span><span class="token operator">:</span> app<span class="token punctuation">.</span>globalData<span class="token punctuation">.</span>statusBarHeight<span class="token punctuation">,</span>\n     <span class="token comment">// platform：定义一个变量，判断是否是 pc 端，pc 是 windows  </span>\n     <span class="token literal-property property">platform</span><span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> \n <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">//  wx.getSystemInfo 接口获取当前设备信息</span>\n        wx<span class="token punctuation">.</span><span class="token function">getSystemInfo</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n            <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n                    <span class="token literal-property property">platform</span><span class="token operator">:</span> res<span class="token punctuation">.</span>platform\n                <span class="token punctuation">}</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n\n<span class="token comment">// 示例使用</span>\n<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>pages<span class="token operator">/</span>addEnterprise<span class="token operator">/</span>addEnterprise<span class="token punctuation">.</span>wxml<span class="token operator">--</span><span class="token operator">></span>\n<span class="token operator">&lt;</span>view <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"index"</span><span class="token operator">></span>\n    <span class="token operator">&lt;</span>view <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"{{statusBarHeight == \'20\' ? \'header\' : \'header-lh\'}}"</span> <span class="token literal-property property">wx</span><span class="token operator">:</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"{{platform !== \'windows\'}}"</span><span class="token operator">></span>\n        <span class="token operator">&lt;</span>van<span class="token operator">-</span>icon name<span class="token operator">=</span><span class="token string">"arrow-left"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"header-icon"</span> size<span class="token operator">=</span><span class="token string">"50rpx"</span> bindtap<span class="token operator">=</span><span class="token string">"handleback"</span> <span class="token operator">/</span><span class="token operator">></span>\n        <span class="token operator">&lt;</span>text <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"titles"</span><span class="token operator">></span>加企微<span class="token operator">&lt;</span><span class="token operator">/</span>text<span class="token operator">></span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">></span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">></span>\n\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br></div></div><h1 id="绝对定位" tabindex="-1"><a class="header-anchor" href="#绝对定位" aria-hidden="true">#</a> 绝对定位</h1>\n<ul>\n<li>绝对定位能不使用就尽量不要使用，因为苹果和pc端有些不支持</li>\n</ul>\n',date:"2022-07-30",deps:[],hoistedTags:[],links:[],pathInferred:"/小程序/2022/20220730.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"20220730",filePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/小程序/2022/20220730.md",filePathRelative:"小程序/2022/20220730.md",componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/小程序/2022/20220730.html.vue",componentFilePathRelative:"pages/小程序/2022/20220730.html.vue",componentFileChunkName:"v-5012795f",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/小程序/2022/20220730.html.js",dataFilePathRelative:"pages/小程序/2022/20220730.html.js",dataFileChunkName:"v-5012795f",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/小程序/2022/20220730.html",htmlFilePathRelative:"小程序/2022/20220730.html"},{data:{key:"v-8caf0246",path:"/%E5%B0%8F%E7%A8%8B%E5%BA%8F/2022/20220831.html",title:"微信小程序在scroll-view标签内不能正常使用超过多行显示省略号",lang:"zh-CN",frontmatter:{title:"微信小程序在scroll-view标签内不能正常使用超过多行显示省略号",date:"2022-08-31T00:00:00.000Z",tags:["小程序"],categories:["小程序"]},excerpt:"",headers:[],git:{updatedTime:null,contributors:[]}},key:"v-8caf0246",path:"/%E5%B0%8F%E7%A8%8B%E5%BA%8F/2022/20220831.html",title:"微信小程序在scroll-view标签内不能正常使用超过多行显示省略号",lang:"zh-CN",frontmatter:{title:"微信小程序在scroll-view标签内不能正常使用超过多行显示省略号",date:"2022-08-31T00:00:00.000Z",tags:["小程序"],categories:["小程序"]},excerpt:"",headers:[],content:"\r\n::: tip\r\n\r\n我们在开发小程序时，很多时候需要使用 scroll-view 标签，那么不可避免的要处理多行文本超出显示省略号\r\n\r\n:::\r\n\r\n# 代码展示\r\n\r\n原因是：scroll-view 为了能够横向滚动需要设置 white-space: nowrap (文本不会换行，文本会在在同一行上继续，直到遇到标签为止。)\r\n解决方案：给需要实现多行文本的元素设置white-space：normal\r\n\r\n```js\r\n// 实现多行文本代码\r\n    display: -webkit-box;\r\n    -webkit-box-orient: vertical;\r\n    -webkit-line-clamp:2; // 2行\r\n    overflow: hidden;\r\n    word-break: break-all;\r\n    text-overflow: ellipsis\r\n```\r\n\r\n",contentRendered:'<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>我们在开发小程序时，很多时候需要使用 scroll-view 标签，那么不可避免的要处理多行文本超出显示省略号</p>\n</div>\n<h1 id="代码展示" tabindex="-1"><a class="header-anchor" href="#代码展示" aria-hidden="true">#</a> 代码展示</h1>\n<p>原因是：scroll-view 为了能够横向滚动需要设置 white-space: nowrap (文本不会换行，文本会在在同一行上继续，直到遇到标签为止。)\n解决方案：给需要实现多行文本的元素设置white-space：normal</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 实现多行文本代码</span>\n    <span class="token literal-property property">display</span><span class="token operator">:</span> <span class="token operator">-</span>webkit<span class="token operator">-</span>box<span class="token punctuation">;</span>\n    <span class="token operator">-</span>webkit<span class="token operator">-</span>box<span class="token operator">-</span>orient<span class="token operator">:</span> vertical<span class="token punctuation">;</span>\n    <span class="token operator">-</span>webkit<span class="token operator">-</span>line<span class="token operator">-</span>clamp<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 2行</span>\n    <span class="token literal-property property">overflow</span><span class="token operator">:</span> hidden<span class="token punctuation">;</span>\n    word<span class="token operator">-</span><span class="token keyword">break</span><span class="token operator">:</span> <span class="token keyword">break</span><span class="token operator">-</span>all<span class="token punctuation">;</span>\n    text<span class="token operator">-</span>overflow<span class="token operator">:</span> ellipsis\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>',date:"2022-08-31",deps:[],hoistedTags:[],links:[],pathInferred:"/小程序/2022/20220831.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"20220831",filePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/小程序/2022/20220831.md",filePathRelative:"小程序/2022/20220831.md",componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/小程序/2022/20220831.html.vue",componentFilePathRelative:"pages/小程序/2022/20220831.html.vue",componentFileChunkName:"v-8caf0246",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/小程序/2022/20220831.html.js",dataFilePathRelative:"pages/小程序/2022/20220831.html.js",dataFileChunkName:"v-8caf0246",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/小程序/2022/20220831.html",htmlFilePathRelative:"小程序/2022/20220831.html"},{data:{key:"v-fa520c0e",path:"/%E5%B0%8F%E7%A8%8B%E5%BA%8F/2022/20220901.html",title:"在微信小程序中使用外部字体",lang:"zh-CN",frontmatter:{title:"在微信小程序中使用外部字体",date:"2022-09-01T00:00:00.000Z",tags:["小程序"],categories:["小程序"]},excerpt:"",headers:[],git:{updatedTime:null,contributors:[]}},key:"v-fa520c0e",path:"/%E5%B0%8F%E7%A8%8B%E5%BA%8F/2022/20220901.html",title:"在微信小程序中使用外部字体",lang:"zh-CN",frontmatter:{title:"在微信小程序中使用外部字体",date:"2022-09-01T00:00:00.000Z",tags:["小程序"],categories:["小程序"]},excerpt:"",headers:[],content:'\r\n::: tip\r\n\r\n我们在开发小程序时，很多时候需要使用外部字体，这一篇就来讲讲如果引入外部字体\r\n\r\n:::\r\n\r\n# 代码展示\r\n\r\n首先小程序字体文件是无法放在本地的当你尝试在css中导入本地字体文件时，\r\n\r\n会报错，我们可以将字体文件上传至服务器的 oss 上，\r\n\r\n```js\r\n// 可以在 app.wxss 文件中全局定义字体\r\n@font-face {\r\n  font-family: "kaiti"; // 定义字体名字\r\n  src: url("https://spkf-zsxn-prod.s3.cn-north-1.amazonaws.com.cn/pic/livecenter/kaiti.ttf");\r\n}\r\n// 需要使用时\r\n.test {\r\n  font-family: "kaiti"; // 使用字体\r\n}\r\n```\r\n\r\n我们除了通过 @font-face 方法引入使用，也可以通过 wx.loadFontFace 使用外部字体\r\n\r\n```js\r\nwx.loadFontFace({\r\n  family: "Bitstream", // 定义字体名字\r\n  source:\r\n    \'url("https://spkf-zsxn-prod.s3.cn-north-1.amazonaws.com.cn/pic/livecenter/kaiti.ttf")\',\r\n  success: (msg) => {\r\n    console.log(msg);\r\n  },\r\n});\r\n\r\n// 需要使用时\r\n.test {\r\n  font-family: "Bitstream"; // 使用字体\r\n}\r\n```\r\n\r\n',contentRendered:'<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>我们在开发小程序时，很多时候需要使用外部字体，这一篇就来讲讲如果引入外部字体</p>\n</div>\n<h1 id="代码展示" tabindex="-1"><a class="header-anchor" href="#代码展示" aria-hidden="true">#</a> 代码展示</h1>\n<p>首先小程序字体文件是无法放在本地的当你尝试在css中导入本地字体文件时，</p>\n<p>会报错，我们可以将字体文件上传至服务器的 oss 上，</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 可以在 app.wxss 文件中全局定义字体</span>\n@font<span class="token operator">-</span>face <span class="token punctuation">{</span>\n  font<span class="token operator">-</span>family<span class="token operator">:</span> <span class="token string">"kaiti"</span><span class="token punctuation">;</span> <span class="token comment">// 定义字体名字</span>\n  <span class="token literal-property property">src</span><span class="token operator">:</span> <span class="token function">url</span><span class="token punctuation">(</span><span class="token string">"https://spkf-zsxn-prod.s3.cn-north-1.amazonaws.com.cn/pic/livecenter/kaiti.ttf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 需要使用时</span>\n<span class="token punctuation">.</span>test <span class="token punctuation">{</span>\n  font<span class="token operator">-</span>family<span class="token operator">:</span> <span class="token string">"kaiti"</span><span class="token punctuation">;</span> <span class="token comment">// 使用字体</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>我们除了通过 @font-face 方法引入使用，也可以通过 wx.loadFontFace 使用外部字体</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>wx<span class="token punctuation">.</span><span class="token function">loadFontFace</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">family</span><span class="token operator">:</span> <span class="token string">"Bitstream"</span><span class="token punctuation">,</span> <span class="token comment">// 定义字体名字</span>\n  <span class="token literal-property property">source</span><span class="token operator">:</span>\n    <span class="token string">\'url("https://spkf-zsxn-prod.s3.cn-north-1.amazonaws.com.cn/pic/livecenter/kaiti.ttf")\'</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 需要使用时</span>\n<span class="token punctuation">.</span>test <span class="token punctuation">{</span>\n  font<span class="token operator">-</span>family<span class="token operator">:</span> <span class="token string">"Bitstream"</span><span class="token punctuation">;</span> <span class="token comment">// 使用字体</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div>',date:"2022-09-01",deps:[],hoistedTags:[],links:[],pathInferred:"/小程序/2022/20220901.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"20220901",filePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/小程序/2022/20220901.md",filePathRelative:"小程序/2022/20220901.md",componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/小程序/2022/20220901.html.vue",componentFilePathRelative:"pages/小程序/2022/20220901.html.vue",componentFileChunkName:"v-fa520c0e",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/小程序/2022/20220901.html.js",dataFilePathRelative:"pages/小程序/2022/20220901.html.js",dataFileChunkName:"v-fa520c0e",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/小程序/2022/20220901.html",htmlFilePathRelative:"小程序/2022/20220901.html"},{data:{key:"v-f48d527e",path:"/%E5%9F%BA%E7%A1%80/2022/20220612.html",title:"vscode 调式",lang:"zh-CN",frontmatter:{title:"vscode 调式",date:"2022-06-12T00:00:00.000Z",tags:["基础"],categories:["基础"]},excerpt:"",headers:[],git:{updatedTime:null,contributors:[]}},key:"v-f48d527e",path:"/%E5%9F%BA%E7%A1%80/2022/20220612.html",title:"vscode 调式",lang:"zh-CN",frontmatter:{title:"vscode 调式",date:"2022-06-12T00:00:00.000Z",tags:["基础"],categories:["基础"]},excerpt:"",headers:[],content:"\r\n::: tip\r\n\r\n代码调式对于开发者来说必不可少的，这一篇简单讲如何调式\r\n\r\n:::\r\n\r\n# 配置auto-attach\r\n\r\n- VSCode 调试 JS 的方法有很多，目前比较推荐的就是无需配置的 auto-attach。\r\n- 按 ctrl + shift + p，打开输入 >auto attach。默认是智能（smart）。如果不是，可以查看设置成智能，或者根据场景自行设置成其他的。\r\n\r\n# 调试操作方式\r\n\r\n- 方式一：在 package.json 找到相应的 scripts。鼠标悬浮在相应的命令上，会出现运行命令和调试命令两个选项，选择调试命令即可进入调试模式。或者点击 scripts 上方的 调试，再选择相应的命令。也可以进入调试模式。\r\n\r\n- 方式二：通过快捷键 ctrl + 反引号 打开终端。或者通过查看 —— 终端打开 VSCode 终端。\r\n\r\n  在终端进入到目录。执行相应的脚本。\r\n\r\n# 调试按钮介绍\r\n\r\n1. 继续（F5）: 点击后代码会直接执行到下一个断点所在位置，如果没有下一个断点，则认为本次代码执行完成。\r\n2. 单步跳过（F10）：点击后会跳到当前代码下一行继续执行，不会进入到函数内部。\r\n3. 单步调试（F11）：点击后进入到当前函数的内部调试，比如在 fn 这一行中执行单步调试，会进入到 fn 函数内部进行调试。\r\n4. 单步跳出（Shift + F11）：点击后跳出当前调试的函数，与单步调试对应。\r\n5. 重启（Ctrl + Shift + F5）：顾名思义。\r\n6. 断开链接（Shift + F5）：顾名思义。\r\n\r\n# 其他调试\r\n\r\n- 由于很多项目都配置了代码压缩，难于调试。所以开发环境下，一般通过配置生成 sourcemap 来调试代码。大部分开源项目（比如vue、vue-next源码）也会在贡献指南中说明如何开启 sourcemap。\r\n\r\n  1. 普通 webpack 配置\r\n\r\n     ```js\r\n     devtool: 'source-map'\r\n     ```\r\n\r\n  2. 调试 vue-cli 3+ 生成的项目\r\n\r\n     ```js\r\n     // vue-cli 3+\r\n     module.exports = {\r\n       configureWebpack: {\r\n         devtool: 'source-map'\r\n       }\r\n     }\r\n     ```\r\n\r\n     ",contentRendered:'<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>代码调式对于开发者来说必不可少的，这一篇简单讲如何调式</p>\n</div>\n<h1 id="配置auto-attach" tabindex="-1"><a class="header-anchor" href="#配置auto-attach" aria-hidden="true">#</a> 配置auto-attach</h1>\n<ul>\n<li>VSCode 调试 JS 的方法有很多，目前比较推荐的就是无需配置的 auto-attach。</li>\n<li>按 ctrl + shift + p，打开输入 &gt;auto attach。默认是智能（smart）。如果不是，可以查看设置成智能，或者根据场景自行设置成其他的。</li>\n</ul>\n<h1 id="调试操作方式" tabindex="-1"><a class="header-anchor" href="#调试操作方式" aria-hidden="true">#</a> 调试操作方式</h1>\n<ul>\n<li>\n<p>方式一：在 package.json 找到相应的 scripts。鼠标悬浮在相应的命令上，会出现运行命令和调试命令两个选项，选择调试命令即可进入调试模式。或者点击 scripts 上方的 调试，再选择相应的命令。也可以进入调试模式。</p>\n</li>\n<li>\n<p>方式二：通过快捷键 ctrl + 反引号 打开终端。或者通过查看 —— 终端打开 VSCode 终端。</p>\n<p>在终端进入到目录。执行相应的脚本。</p>\n</li>\n</ul>\n<h1 id="调试按钮介绍" tabindex="-1"><a class="header-anchor" href="#调试按钮介绍" aria-hidden="true">#</a> 调试按钮介绍</h1>\n<ol>\n<li>继续（F5）: 点击后代码会直接执行到下一个断点所在位置，如果没有下一个断点，则认为本次代码执行完成。</li>\n<li>单步跳过（F10）：点击后会跳到当前代码下一行继续执行，不会进入到函数内部。</li>\n<li>单步调试（F11）：点击后进入到当前函数的内部调试，比如在 fn 这一行中执行单步调试，会进入到 fn 函数内部进行调试。</li>\n<li>单步跳出（Shift + F11）：点击后跳出当前调试的函数，与单步调试对应。</li>\n<li>重启（Ctrl + Shift + F5）：顾名思义。</li>\n<li>断开链接（Shift + F5）：顾名思义。</li>\n</ol>\n<h1 id="其他调试" tabindex="-1"><a class="header-anchor" href="#其他调试" aria-hidden="true">#</a> 其他调试</h1>\n<ul>\n<li>\n<p>由于很多项目都配置了代码压缩，难于调试。所以开发环境下，一般通过配置生成 sourcemap 来调试代码。大部分开源项目（比如vue、vue-next源码）也会在贡献指南中说明如何开启 sourcemap。</p>\n<ol>\n<li>\n<p>普通 webpack 配置</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token literal-property property">devtool</span><span class="token operator">:</span> <span class="token string">\'source-map\'</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li>\n<li>\n<p>调试 vue-cli 3+ 生成的项目</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// vue-cli 3+</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">configureWebpack</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">devtool</span><span class="token operator">:</span> <span class="token string">\'source-map\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li>\n</ol>\n</li>\n</ul>\n',date:"2022-06-12",deps:[],hoistedTags:[],links:[],pathInferred:"/基础/2022/20220612.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"20220612",filePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/基础/2022/20220612.md",filePathRelative:"基础/2022/20220612.md",componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/基础/2022/20220612.html.vue",componentFilePathRelative:"pages/基础/2022/20220612.html.vue",componentFileChunkName:"v-f48d527e",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/基础/2022/20220612.html.js",dataFilePathRelative:"pages/基础/2022/20220612.html.js",dataFileChunkName:"v-f48d527e",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/基础/2022/20220612.html",htmlFilePathRelative:"基础/2022/20220612.html"},{data:{key:"v-00a6fdbc",path:"/%E5%B0%8F%E7%A8%8B%E5%BA%8F/2023/20230205.html",title:"分包异步化",lang:"zh-CN",frontmatter:{title:"分包异步化",date:"2023-02-05T00:00:00.000Z",tags:["小程序"],categories:["小程序"]},excerpt:"",headers:[{level:2,title:"性能优化方案",slug:"性能优化方案",children:[]},{level:2,title:"分析",slug:"分析",children:[]},{level:2,title:"解决方案",slug:"解决方案",children:[{level:3,title:"方案 1：分包异步化",slug:"方案-1-分包异步化",children:[]},{level:3,title:"方案 2：分包插件异步化",slug:"方案-2-分包插件异步化",children:[]},{level:3,title:"顶层 await",slug:"顶层-await",children:[]},{level:3,title:"基础库兼容性",slug:"基础库兼容性",children:[]}]},{level:2,title:"总结",slug:"总结",children:[]}],git:{updatedTime:null,contributors:[]}},key:"v-00a6fdbc",path:"/%E5%B0%8F%E7%A8%8B%E5%BA%8F/2023/20230205.html",title:"分包异步化",lang:"zh-CN",frontmatter:{title:"分包异步化",date:"2023-02-05T00:00:00.000Z",tags:["小程序"],categories:["小程序"]},excerpt:"",headers:[{level:2,title:"性能优化方案",slug:"性能优化方案",children:[]},{level:2,title:"分析",slug:"分析",children:[]},{level:2,title:"解决方案",slug:"解决方案",children:[{level:3,title:"方案 1：分包异步化",slug:"方案-1-分包异步化",children:[]},{level:3,title:"方案 2：分包插件异步化",slug:"方案-2-分包插件异步化",children:[]},{level:3,title:"顶层 await",slug:"顶层-await",children:[]},{level:3,title:"基础库兼容性",slug:"基础库兼容性",children:[]}]},{level:2,title:"总结",slug:"总结",children:[]}],content:"\r\n::: tip\r\n\r\n我们在开发小程序中，经过不断迭代，代码包会越来越大，就有可能超过大小限制，无法上传代码，本文摘自 货拉拉技术 公众号，学习分包异步化\r\n\r\n:::\r\n\r\n## 性能优化方案\r\n\r\n微信官方建议性能优化中关于代码体积优化[1]有以下 4 个方向：\r\n\r\n1.**合理使用分包加载**\r\n\r\n非主包资源都可以放到分包中，保证主包资源最快时间让用户可以访问，分包的资源可以按照重要性开启分包预下载[2]。\r\n\r\n2.**避免非必要的全局自定义组件和插件**\r\n\r\n如题，非必要（组件功能单一、只有 1 个页面引入等）就不要把组件写在主包，拆进分包。多个分包都同时引用的资源，放在分包里则不合适，分包没法直接访问另一个分包的资源，除非两个分包都已经加载过了。这个问题可以使用「分包异步化[3]」解决，这是本文重点，下文再表。\r\n\r\n3.**控制代码包内的资源文件**\r\n\r\n图片、字体文件建议尽量都走 CDN，小程序的 WXSS 中图片资源没法访问本地路径，也是建议把图片资源放在 CDN 上，这些就是替换路径的工作，很简单。\r\n\r\n4.**及时清理无用代码和资源**\r\n\r\n删代码，还有比这更开心的事情吗。\r\n\r\n## 分析\r\n\r\n货拉拉小程序在迭代中有持续优化的动作，页面和组件能分包的基本都拆出去了，剩下都是一些拆不动的。\r\n\r\n![图片](https://mmbiz.qpic.cn/mmbiz_png/MdDic47keiar4gusuD6cf5He2t2xr9vI7MlCCMKiaJ134zj3FET9uocdIzIVVqUEnulu1FO2P6iaGXIzqO1X7ASjXg/640?wx_fmt=png&tp=wxpic&wxfrom=5&wx_lazy=1&wx_co=1)主包依赖分析\r\n\r\n**信息点：**\r\n\r\n1.  图片资源可以迁 CDN，预计可以 -178KB。\r\n2. `vendor.js` 大，主要包含全局函数库 JS 以及主包用到的 JS 资源。\r\n\r\n![图片](https://mmbiz.qpic.cn/mmbiz_png/MdDic47keiar4gusuD6cf5He2t2xr9vI7M0XOoAoZ0Akbq7ePgx4JLA3o6J6yeofZicKu1LH4OxmMRVzJC0TWqaOw/640?wx_fmt=png&tp=wxpic&wxfrom=5&wx_lazy=1&wx_co=1)vendor.js webpack analyze\r\n\r\n由上图简单分析可以得出，需要移除 `tim-wx.js`，这是腾讯 IMSDK，主包依赖，需要在主包进行 SDK 初始化登录，无法拆进分包。\r\n\r\n## 解决方案\r\n\r\n基于以上分析，2 个关键信息：\r\n\r\n1. \\1. 为使用 IMSDK 提供的登录 API，**腾讯 IMSDK 必须在小程序主包初始化**。\r\n2. \\2. IMSDK 大小是 420KB，代码已经是压缩过的，无法 Tree Shaking。\r\n\r\n### 方案 1：分包异步化\r\n\r\n> 在小程序中，不同的分包对应不同的下载单元；因此，除了非独立分包可以依赖主包外，分包之间不能互相使用自定义组件或进行 `require`。「分包异步化」特性将允许通过一些配置和新的接口，使部分跨分包的内容可以等待下载后异步使用，从而一定程度上解决这个限制。\r\n\r\n如果小程序使用的是原生语法，可以使用「方案 1 」。如使用三方框架构建，例如：Uniapp、Taro 等，暂无法直接使用「方案 1」 ，或者说使用方式太过繁琐，不建议在生产使用。\r\n\r\n跟着微信官方文档[4]编写`Demo`:\r\n\r\n1. \\1. 首先把 `tim-wx-sdk` 放进分包里面\r\n\r\n```\r\n// subPackageA/index.jsimport TIM from 'tim-wx-sdk';export default TIM;\r\n```\r\n\r\n2.封装一下 utils，在主包使用\r\n\r\n```\r\n// utils/im.jslet TIM = {};require  .async('subPackageA/index')  .then((mod) => {    TIM = mod;  })  .catch(({ mod, errMsg }) => {    console.error(`subPackageA path: ${mod}, ${errMsg}`);  });// 导出该 SDKexport { TIM };\r\n```\r\n\r\n3.在主包使用，因为 `require.async` 是异步函数，要注意使用 `TIM` 的时机，必须是异步回调之后才能执行，运行 Demo 的时候可以先延时用来验证。\r\n\r\n```\r\n// app.jsimport { TIM } from '@/utils/im';// 先延时等待 require.async 运行结束setTimeout(() => {  TIM.login({    userID: 'xxxxx',    userSig: 'userSig',  });}, 3000);\r\n```\r\n\r\n4.运行，毫无意外，它报错了。\r\n\r\n![图片](https://mmbiz.qpic.cn/mmbiz_png/MdDic47keiar4gusuD6cf5He2t2xr9vI7MVTuLjvOictcYbAySVXtBb9cS3EbnXgVhNyEOXYNiaZib5ibRL6QBaxoSZw/640?wx_fmt=png&tp=wxpic&wxfrom=5&wx_lazy=1&wx_co=1)运行错误\r\n\r\n**根本原因：** `module.exports、require` 属于 `CommonJS` 语法，`CommonJS` 是 `Node.js` 采用的模块化规范，而浏览器环境下不支持该语法，所以没有这些变量。所以，Uniapp 编译打包的时候会把 `require` 编译成 `__webpack_require__`，而微信小程序运行宿主环境并没有 `__webpack_require__` 这个方法，所以报错。\r\n\r\n而 `require` 微信小程序环境是支持直接运行的，不需要经过编译，我们只需要让 Uniapp 框架不编译 `require.async` 这个函数即可，经过编写各种 demo 和 Issues[5] 查询，得出以下结论：\r\n\r\n1. \\1. Uniapp 官方编译脚本还未计划支持该小程序特性。\r\n2. \\2. `non_webpack_require` 方案也涉及到打包脚本的一些改动，理解起来也很复杂，不适宜在生产环境中大改特改。\r\n\r\n**三方框架无法直接使用分包异步化，微信原生语法无影响。如一定要在第三方框架中使用「异步化」这个特性，可以使用「方案 2」。**\r\n\r\n### 方案 2：分包插件异步化\r\n\r\n> 微信小程序提供插件能力，具体功能可以参考官方文档[6]。`requirePlugin` 是微信官方提供给插件之间互相调用的一个方法。\r\n\r\n`requirePlugin` 官方用法示例：\r\n\r\n```\r\n// 使用回调函数风格的调用requirePlugin(  'live-player-plugin',  (livePlayer) => {    console.log(livePlayer.getPluginVersion());  },  ({ mod, errMsg }) => {    console.error(`path: ${mod}, ${errMsg}`);  },);// 或者使用 Promise 风格的调用requirePlugin  .async('live-player-plugin')  .then((livePlayer) => {    console.log(livePlayer.getPluginVersion());  })  .catch(({ mod, errMsg }) => {    console.error(`path: ${mod}, ${errMsg}`);  });\r\n```\r\n\r\n如上，加载插件用的是 `requirePlugin`，`Webpack` 打包不会编译这个方法。\r\n\r\n回溯一下「方案一」中遇到的问题是：`require` 会被 `Webpack` 打包，编译成 `__webpack_require__`，所以造成小程序宿主环境没有 `require` 分包的能力。\r\n\r\n「方案二」的解决思路：微信官方提供的 `requirePlugin`，`Webpack` 不会进行编译，则可以正常访问小程序宿主环境的的 `requirePlugin` API，从而达成异步加载异步的目的。\r\n\r\n1. \\1. 既然要插件，先去微信官方注册一个插件，这部分可以搜官方文档，主要代码如下：\r\n\r\n```\r\n// xxx-plugin/index.js// 插件代码只是加载 SDK，并且导出import TIM from 'tim-wx-sdk';module.exports = {  TIM,};\r\n```\r\n\r\n2.在分包页面中引入插件。\r\n\r\n```\r\n{  \"plugins\": {    \"xxx-plugin\": {      \"version\": \"dev-01055b63731de071ffb850464bd5c7b1\",      \"provider\": \"xxx-plugin appid\"    }  }}\r\n```\r\n\r\n3.上面的 utils 封装改一下。\r\n\r\n```\r\n// utils/im.jslet TIM = null;requirePlugin  .async('xxx-plugin')  .then(({ TIM: modTIM }) => {    TIM = modTIM;  })  .catch(({ mod, errMsg }) => {    console.error(`direct-service-plugin path: ${mod}, ${errMsg}`);  });// 暴露出去export { TIM };\r\n```\r\n\r\n4.完事，好起来了。\r\n\r\n### 顶层 await\r\n\r\n> 这篇文章[7]写得很清楚了，就不搬了。\r\n\r\n「方案 2」确实是能够正常解决加载问题，但是引入了新的问题，上面的写法 `requirePlugin.async` 是个异步函数，调用 `TIM` 时机不同获取到的值不一样，使用 `utils/im` 的时候，还需要判断一下是否存在，还需要等待它加载。\r\n\r\n```\r\nimport { TIM } from '@/uitls/im';// 用的时候TIM && TIM.login();\r\n```\r\n\r\n那比较好一点的方法是加 `Promise`，每个使用的地方等待一下\r\n\r\n1.加载插件的封装\r\n\r\n```\r\n// @/utils/async-load.ts/** * 加载插件的方法 * @param pluginName * @returns Promise<any> */export async function loadPluginPackage(pluginName: string): Promise<any> {  try {    // @ts-ignore    const mod = await requirePlugin.async(pluginName);    return mod;  } catch ({ mod, errMsg }) {    console.error(      `loadPluginPackage '${pluginName}' errpr path: ${mod}, ${errMsg}`,    );    return {};  }}\r\n```\r\n\r\n2.使用的时候\r\n\r\n```\r\n// app.js;(async init() {  const { TIM } = await loadPluginPackage('xxx-plugin')  TIM.login({    userID: 'xxxxx',    userSig: 'userSig',  })})()\r\n```\r\n\r\n这样还是有问题，如果有多个地方都是用这个 JS，每个地方都要写一下加载插件的方法，可以在小程序启动的时候做一次加载就可以，后面所有用到的地方都用同一个 Promise 就行。\r\n\r\n3.更建议的方式\r\n\r\n```\r\n// utils/im.jslet TIM = {};import { loadPluginPackage } from '@/utils/async-load';const TIMSdk = loadPluginPackage('xxx-plugin');TIMSdk.then((mod) => {  TIM = mod.TIM;});// 导出出去export { TIM, TIMSdk };\r\n```\r\n\r\nTIMSdk，是一个默认执行一次的 Promise，加载过一次之后，后续调用 TIMSdk 拿到的都是同一个结果。\r\n\r\n使用方式\r\n\r\n```\r\n// app.jsimport { TIM, TIMSdk } from '@/utils/im';/** * * IM初始化 */const init = async () => {  // 要用的时候 await 一下即可  await TIMSdk;  const tim = TIM.create({    SDKAppID: config.SDKAppID,  });};init();\r\n```\r\n\r\n这样用起来很不方便，而且如果使用的地方如果二次封装，也很麻烦，目前没有很好的方法，顶层 await 是为了解决这个问题的，这个提案目前我们还用不上。\r\n\r\n4.完美方式，顶部直接`await`，暂时用不上\r\n\r\n```\r\n// app.jsconst { TIM } = await loadPluginPackage('xxx-plugin');\r\n```\r\n\r\n### 基础库兼容性\r\n\r\n![图片](https://mmbiz.qpic.cn/mmbiz_png/MdDic47keiar4gusuD6cf5He2t2xr9vI7M3hq3FhjNcFgjSCNTo0WDavROWsQlh81Jw5wv0a0foDmQW7b4syNJRw/640?wx_fmt=png&tp=wxpic&wxfrom=5&wx_lazy=1&wx_co=1)微信官方文档描述\r\n\r\n「分包异步化」这个功能需要小程序基础库 2.11.2 及以上才支持，可以按照官方推荐，设置最低基础库。\r\n\r\n如果目前线上基础库设置比这个低，需要拉一下现在线上的基础库分布，看一下提高基础库会影响多少人，**如果比例很小，可以强行设置，提升用户体验**。\r\n\r\n## 总结\r\n\r\n小程序此次优化结果：\r\n\r\n![图片](https://mmbiz.qpic.cn/mmbiz_png/MdDic47keiar4gusuD6cf5He2t2xr9vI7ME0yLbncCHMWj1DyibpibMCFFn7Zhtt4Y0DW8BQNWXYVjap8oicAJ1gezQ/640?wx_fmt=png&tp=wxpic&wxfrom=5&wx_lazy=1&wx_co=1)货拉拉微信小程序 4330 版本代码依赖分析\r\n\r\n**主包大小从 1.83M 降到 1.36M，大小减少 25%。**\r\n\r\n> **一定要注意基础库的依赖，要用这个方案，必须要把最低基础库限制拉到 2.11.2**。\r\n\r\n**控制小程序代码包大小主要几个手段：**\r\n\r\n1. \\1. 静态资源，能走 CDN 的，全部走 CDN。\r\n\r\n2. \\2. 能分包的页面或者组件，全部放到分包里面去，主包只留不能拆分的，提升分包加载速度可以使用开启分包预下载[8]。\r\n\r\n3. \\3. 如果资源一定要在主包引用且大小不可控，那就使用「分包异步化」或者「分包插件异步化」来处理。「分包异步化」和「分包插件异步化」两者的选择建议：\r\n\r\n4. - 如果用的是第三方编译的小程序框架，例如： Uniapp，用不上「分包异步化」，等三方官方支持\r\n   - 分包插件异步化和分包异步化写法差不多，坏处是需要发一个微信小程序插件，好处是小程序是跨端编译到其它端也可以走插件这一套逻辑。\r\n\r\n#### 引用链接\r\n\r\n`[1]` 代码体积优化: *https://developers.weixin.qq.com/miniprogram/dev/framework/performance/tips/start_optimizeA.html*\r\n`[2]` 开启分包预下载: *https://developers.weixin.qq.com/miniprogram/dev/framework/subpackages/preload.html*\r\n`[3]` 分包异步化: *https://developers.weixin.qq.com/miniprogram/dev/framework/subpackages/async.html*\r\n`[4]` 微信官方文档: *https://developers.weixin.qq.com/miniprogram/dev/framework/subpackages/async.html*\r\n`[5]` Issues: *https://github.com/dcloudio/uni-app/issues/2934*\r\n`[6]` 官方文档: *https://developers.weixin.qq.com/miniprogram/dev/framework/plugin/*\r\n`[7]` 这篇文章: *https://www.bookstack.cn/read/es6-3rd/spilt.7.docs-async.md*\r\n`[8]` 开启分包预下载: *https://developers.weixin.qq.com/miniprogram/dev/framework/subpackages/preload.html*",contentRendered:'<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>我们在开发小程序中，经过不断迭代，代码包会越来越大，就有可能超过大小限制，无法上传代码，本文摘自 货拉拉技术 公众号，学习分包异步化</p>\n</div>\n<h2 id="性能优化方案" tabindex="-1"><a class="header-anchor" href="#性能优化方案" aria-hidden="true">#</a> 性能优化方案</h2>\n<p>微信官方建议性能优化中关于代码体积优化[1]有以下 4 个方向：</p>\n<p>1.<strong>合理使用分包加载</strong></p>\n<p>非主包资源都可以放到分包中，保证主包资源最快时间让用户可以访问，分包的资源可以按照重要性开启分包预下载[2]。</p>\n<p>2.<strong>避免非必要的全局自定义组件和插件</strong></p>\n<p>如题，非必要（组件功能单一、只有 1 个页面引入等）就不要把组件写在主包，拆进分包。多个分包都同时引用的资源，放在分包里则不合适，分包没法直接访问另一个分包的资源，除非两个分包都已经加载过了。这个问题可以使用「分包异步化[3]」解决，这是本文重点，下文再表。</p>\n<p>3.<strong>控制代码包内的资源文件</strong></p>\n<p>图片、字体文件建议尽量都走 CDN，小程序的 WXSS 中图片资源没法访问本地路径，也是建议把图片资源放在 CDN 上，这些就是替换路径的工作，很简单。</p>\n<p>4.<strong>及时清理无用代码和资源</strong></p>\n<p>删代码，还有比这更开心的事情吗。</p>\n<h2 id="分析" tabindex="-1"><a class="header-anchor" href="#分析" aria-hidden="true">#</a> 分析</h2>\n<p>货拉拉小程序在迭代中有持续优化的动作，页面和组件能分包的基本都拆出去了，剩下都是一些拆不动的。</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="图片" originSrc="https://mmbiz.qpic.cn/mmbiz_png/MdDic47keiar4gusuD6cf5He2t2xr9vI7MlCCMKiaJ134zj3FET9uocdIzIVVqUEnulu1FO2P6iaGXIzqO1X7ASjXg/640?wx_fmt=png&amp;tp=wxpic&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" data="aurora">主包依赖分析</p>\n<p><strong>信息点：</strong></p>\n<ol>\n<li>图片资源可以迁 CDN，预计可以 -178KB。</li>\n<li><code>vendor.js</code> 大，主要包含全局函数库 JS 以及主包用到的 JS 资源。</li>\n</ol>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="图片" originSrc="https://mmbiz.qpic.cn/mmbiz_png/MdDic47keiar4gusuD6cf5He2t2xr9vI7M0XOoAoZ0Akbq7ePgx4JLA3o6J6yeofZicKu1LH4OxmMRVzJC0TWqaOw/640?wx_fmt=png&amp;tp=wxpic&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" data="aurora">vendor.js webpack analyze</p>\n<p>由上图简单分析可以得出，需要移除 <code>tim-wx.js</code>，这是腾讯 IMSDK，主包依赖，需要在主包进行 SDK 初始化登录，无法拆进分包。</p>\n<h2 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案" aria-hidden="true">#</a> 解决方案</h2>\n<p>基于以上分析，2 个关键信息：</p>\n<ol>\n<li>\\1. 为使用 IMSDK 提供的登录 API，<strong>腾讯 IMSDK 必须在小程序主包初始化</strong>。</li>\n<li>\\2. IMSDK 大小是 420KB，代码已经是压缩过的，无法 Tree Shaking。</li>\n</ol>\n<h3 id="方案-1-分包异步化" tabindex="-1"><a class="header-anchor" href="#方案-1-分包异步化" aria-hidden="true">#</a> 方案 1：分包异步化</h3>\n<blockquote>\n<p>在小程序中，不同的分包对应不同的下载单元；因此，除了非独立分包可以依赖主包外，分包之间不能互相使用自定义组件或进行 <code>require</code>。「分包异步化」特性将允许通过一些配置和新的接口，使部分跨分包的内容可以等待下载后异步使用，从而一定程度上解决这个限制。</p>\n</blockquote>\n<p>如果小程序使用的是原生语法，可以使用「方案 1 」。如使用三方框架构建，例如：Uniapp、Taro 等，暂无法直接使用「方案 1」 ，或者说使用方式太过繁琐，不建议在生产使用。</p>\n<p>跟着微信官方文档[4]编写<code>Demo</code>:</p>\n<ol>\n<li>\\1. 首先把 <code>tim-wx-sdk</code> 放进分包里面</li>\n</ol>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>// subPackageA/index.jsimport TIM from \'tim-wx-sdk\';export default TIM;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>2.封装一下 utils，在主包使用</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>// utils/im.jslet TIM = {};require  .async(\'subPackageA/index\')  .then((mod) => {    TIM = mod;  })  .catch(({ mod, errMsg }) => {    console.error(`subPackageA path: ${mod}, ${errMsg}`);  });// 导出该 SDKexport { TIM };\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>3.在主包使用，因为 <code>require.async</code> 是异步函数，要注意使用 <code>TIM</code> 的时机，必须是异步回调之后才能执行，运行 Demo 的时候可以先延时用来验证。</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>// app.jsimport { TIM } from \'@/utils/im\';// 先延时等待 require.async 运行结束setTimeout(() => {  TIM.login({    userID: \'xxxxx\',    userSig: \'userSig\',  });}, 3000);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>4.运行，毫无意外，它报错了。</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="图片" originSrc="https://mmbiz.qpic.cn/mmbiz_png/MdDic47keiar4gusuD6cf5He2t2xr9vI7MVTuLjvOictcYbAySVXtBb9cS3EbnXgVhNyEOXYNiaZib5ibRL6QBaxoSZw/640?wx_fmt=png&amp;tp=wxpic&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" data="aurora">运行错误</p>\n<p><strong>根本原因：</strong> <code>module.exports、require</code> 属于 <code>CommonJS</code> 语法，<code>CommonJS</code> 是 <code>Node.js</code> 采用的模块化规范，而浏览器环境下不支持该语法，所以没有这些变量。所以，Uniapp 编译打包的时候会把 <code>require</code> 编译成 <code>__webpack_require__</code>，而微信小程序运行宿主环境并没有 <code>__webpack_require__</code> 这个方法，所以报错。</p>\n<p>而 <code>require</code> 微信小程序环境是支持直接运行的，不需要经过编译，我们只需要让 Uniapp 框架不编译 <code>require.async</code> 这个函数即可，经过编写各种 demo 和 Issues[5] 查询，得出以下结论：</p>\n<ol>\n<li>\\1. Uniapp 官方编译脚本还未计划支持该小程序特性。</li>\n<li>\\2. <code>non_webpack_require</code> 方案也涉及到打包脚本的一些改动，理解起来也很复杂，不适宜在生产环境中大改特改。</li>\n</ol>\n<p><strong>三方框架无法直接使用分包异步化，微信原生语法无影响。如一定要在第三方框架中使用「异步化」这个特性，可以使用「方案 2」。</strong></p>\n<h3 id="方案-2-分包插件异步化" tabindex="-1"><a class="header-anchor" href="#方案-2-分包插件异步化" aria-hidden="true">#</a> 方案 2：分包插件异步化</h3>\n<blockquote>\n<p>微信小程序提供插件能力，具体功能可以参考官方文档[6]。<code>requirePlugin</code> 是微信官方提供给插件之间互相调用的一个方法。</p>\n</blockquote>\n<p><code>requirePlugin</code> 官方用法示例：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>// 使用回调函数风格的调用requirePlugin(  \'live-player-plugin\',  (livePlayer) => {    console.log(livePlayer.getPluginVersion());  },  ({ mod, errMsg }) => {    console.error(`path: ${mod}, ${errMsg}`);  },);// 或者使用 Promise 风格的调用requirePlugin  .async(\'live-player-plugin\')  .then((livePlayer) => {    console.log(livePlayer.getPluginVersion());  })  .catch(({ mod, errMsg }) => {    console.error(`path: ${mod}, ${errMsg}`);  });\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>如上，加载插件用的是 <code>requirePlugin</code>，<code>Webpack</code> 打包不会编译这个方法。</p>\n<p>回溯一下「方案一」中遇到的问题是：<code>require</code> 会被 <code>Webpack</code> 打包，编译成 <code>__webpack_require__</code>，所以造成小程序宿主环境没有 <code>require</code> 分包的能力。</p>\n<p>「方案二」的解决思路：微信官方提供的 <code>requirePlugin</code>，<code>Webpack</code> 不会进行编译，则可以正常访问小程序宿主环境的的 <code>requirePlugin</code> API，从而达成异步加载异步的目的。</p>\n<ol>\n<li>\\1. 既然要插件，先去微信官方注册一个插件，这部分可以搜官方文档，主要代码如下：</li>\n</ol>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>// xxx-plugin/index.js// 插件代码只是加载 SDK，并且导出import TIM from \'tim-wx-sdk\';module.exports = {  TIM,};\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>2.在分包页面中引入插件。</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>{  "plugins": {    "xxx-plugin": {      "version": "dev-01055b63731de071ffb850464bd5c7b1",      "provider": "xxx-plugin appid"    }  }}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>3.上面的 utils 封装改一下。</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>// utils/im.jslet TIM = null;requirePlugin  .async(\'xxx-plugin\')  .then(({ TIM: modTIM }) => {    TIM = modTIM;  })  .catch(({ mod, errMsg }) => {    console.error(`direct-service-plugin path: ${mod}, ${errMsg}`);  });// 暴露出去export { TIM };\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>4.完事，好起来了。</p>\n<h3 id="顶层-await" tabindex="-1"><a class="header-anchor" href="#顶层-await" aria-hidden="true">#</a> 顶层 await</h3>\n<blockquote>\n<p>这篇文章[7]写得很清楚了，就不搬了。</p>\n</blockquote>\n<p>「方案 2」确实是能够正常解决加载问题，但是引入了新的问题，上面的写法 <code>requirePlugin.async</code> 是个异步函数，调用 <code>TIM</code> 时机不同获取到的值不一样，使用 <code>utils/im</code> 的时候，还需要判断一下是否存在，还需要等待它加载。</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>import { TIM } from \'@/uitls/im\';// 用的时候TIM &amp;&amp; TIM.login();\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>那比较好一点的方法是加 <code>Promise</code>，每个使用的地方等待一下</p>\n<p>1.加载插件的封装</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>// @/utils/async-load.ts/** * 加载插件的方法 * @param pluginName * @returns Promise&lt;any> */export async function loadPluginPackage(pluginName: string): Promise&lt;any> {  try {    // @ts-ignore    const mod = await requirePlugin.async(pluginName);    return mod;  } catch ({ mod, errMsg }) {    console.error(      `loadPluginPackage \'${pluginName}\' errpr path: ${mod}, ${errMsg}`,    );    return {};  }}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>2.使用的时候</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>// app.js;(async init() {  const { TIM } = await loadPluginPackage(\'xxx-plugin\')  TIM.login({    userID: \'xxxxx\',    userSig: \'userSig\',  })})()\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>这样还是有问题，如果有多个地方都是用这个 JS，每个地方都要写一下加载插件的方法，可以在小程序启动的时候做一次加载就可以，后面所有用到的地方都用同一个 Promise 就行。</p>\n<p>3.更建议的方式</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>// utils/im.jslet TIM = {};import { loadPluginPackage } from \'@/utils/async-load\';const TIMSdk = loadPluginPackage(\'xxx-plugin\');TIMSdk.then((mod) => {  TIM = mod.TIM;});// 导出出去export { TIM, TIMSdk };\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>TIMSdk，是一个默认执行一次的 Promise，加载过一次之后，后续调用 TIMSdk 拿到的都是同一个结果。</p>\n<p>使用方式</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>// app.jsimport { TIM, TIMSdk } from \'@/utils/im\';/** * * IM初始化 */const init = async () => {  // 要用的时候 await 一下即可  await TIMSdk;  const tim = TIM.create({    SDKAppID: config.SDKAppID,  });};init();\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>这样用起来很不方便，而且如果使用的地方如果二次封装，也很麻烦，目前没有很好的方法，顶层 await 是为了解决这个问题的，这个提案目前我们还用不上。</p>\n<p>4.完美方式，顶部直接<code>await</code>，暂时用不上</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>// app.jsconst { TIM } = await loadPluginPackage(\'xxx-plugin\');\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="基础库兼容性" tabindex="-1"><a class="header-anchor" href="#基础库兼容性" aria-hidden="true">#</a> 基础库兼容性</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="图片" originSrc="https://mmbiz.qpic.cn/mmbiz_png/MdDic47keiar4gusuD6cf5He2t2xr9vI7M3hq3FhjNcFgjSCNTo0WDavROWsQlh81Jw5wv0a0foDmQW7b4syNJRw/640?wx_fmt=png&amp;tp=wxpic&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" data="aurora">微信官方文档描述</p>\n<p>「分包异步化」这个功能需要小程序基础库 2.11.2 及以上才支持，可以按照官方推荐，设置最低基础库。</p>\n<p>如果目前线上基础库设置比这个低，需要拉一下现在线上的基础库分布，看一下提高基础库会影响多少人，<strong>如果比例很小，可以强行设置，提升用户体验</strong>。</p>\n<h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2>\n<p>小程序此次优化结果：</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="图片" originSrc="https://mmbiz.qpic.cn/mmbiz_png/MdDic47keiar4gusuD6cf5He2t2xr9vI7ME0yLbncCHMWj1DyibpibMCFFn7Zhtt4Y0DW8BQNWXYVjap8oicAJ1gezQ/640?wx_fmt=png&amp;tp=wxpic&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" data="aurora">货拉拉微信小程序 4330 版本代码依赖分析</p>\n<p><strong>主包大小从 1.83M 降到 1.36M，大小减少 25%。</strong></p>\n<blockquote>\n<p><strong>一定要注意基础库的依赖，要用这个方案，必须要把最低基础库限制拉到 2.11.2</strong>。</p>\n</blockquote>\n<p><strong>控制小程序代码包大小主要几个手段：</strong></p>\n<ol>\n<li>\n<p>\\1. 静态资源，能走 CDN 的，全部走 CDN。</p>\n</li>\n<li>\n<p>\\2. 能分包的页面或者组件，全部放到分包里面去，主包只留不能拆分的，提升分包加载速度可以使用开启分包预下载[8]。</p>\n</li>\n<li>\n<p>\\3. 如果资源一定要在主包引用且大小不可控，那就使用「分包异步化」或者「分包插件异步化」来处理。「分包异步化」和「分包插件异步化」两者的选择建议：</p>\n</li>\n<li>\n<ul>\n<li>如果用的是第三方编译的小程序框架，例如： Uniapp，用不上「分包异步化」，等三方官方支持</li>\n<li>分包插件异步化和分包异步化写法差不多，坏处是需要发一个微信小程序插件，好处是小程序是跨端编译到其它端也可以走插件这一套逻辑。</li>\n</ul>\n</li>\n</ol>\n<h4 id="引用链接" tabindex="-1"><a class="header-anchor" href="#引用链接" aria-hidden="true">#</a> 引用链接</h4>\n<p><code>[1]</code> 代码体积优化: <em>https://developers.weixin.qq.com/miniprogram/dev/framework/performance/tips/start_optimizeA.html</em>\n<code>[2]</code> 开启分包预下载: <em>https://developers.weixin.qq.com/miniprogram/dev/framework/subpackages/preload.html</em>\n<code>[3]</code> 分包异步化: <em>https://developers.weixin.qq.com/miniprogram/dev/framework/subpackages/async.html</em>\n<code>[4]</code> 微信官方文档: <em>https://developers.weixin.qq.com/miniprogram/dev/framework/subpackages/async.html</em>\n<code>[5]</code> Issues: <em>https://github.com/dcloudio/uni-app/issues/2934</em>\n<code>[6]</code> 官方文档: <em>https://developers.weixin.qq.com/miniprogram/dev/framework/plugin/</em>\n<code>[7]</code> 这篇文章: <em>https://www.bookstack.cn/read/es6-3rd/spilt.7.docs-async.md</em>\n<code>[8]</code> 开启分包预下载: <em>https://developers.weixin.qq.com/miniprogram/dev/framework/subpackages/preload.html</em></p>\n',date:"2023-02-05",deps:[],hoistedTags:[],links:[],pathInferred:"/小程序/2023/20230205.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"20230205",filePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/小程序/2023/20230205.md",filePathRelative:"小程序/2023/20230205.md",componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/小程序/2023/20230205.html.vue",componentFilePathRelative:"pages/小程序/2023/20230205.html.vue",componentFileChunkName:"v-00a6fdbc",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/小程序/2023/20230205.html.js",dataFilePathRelative:"pages/小程序/2023/20230205.html.js",dataFileChunkName:"v-00a6fdbc",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/小程序/2023/20230205.html",htmlFilePathRelative:"小程序/2023/20230205.html"},{data:{key:"v-7ade95ec",path:"/%E9%9D%A2%E8%AF%95/2022/20221016.html",title:"JavaScript 面试知识点总结",lang:"zh-CN",frontmatter:{title:"JavaScript 面试知识点总结",date:"2022-10-16T00:00:00.000Z",tags:["js"],categories:["面试"]},excerpt:"",headers:[{level:2,title:"1. 介绍 js 的基本数据类型。",slug:"_1-介绍-js-的基本数据类型。",children:[]},{level:2,title:"2. JavaScript 有几种类型的值？你能画一下他们的内存图吗？",slug:"_2-javascript-有几种类型的值-你能画一下他们的内存图吗",children:[]},{level:2,title:"3. 什么是堆？什么是栈？它们之间有什么区别和联系？",slug:"_3-什么是堆-什么是栈-它们之间有什么区别和联系",children:[]},{level:2,title:"4. 内部属性 [[Class]] 是什么？",slug:"_4-内部属性-class-是什么",children:[]},{level:2,title:"5. 介绍 js 有哪些内置对象？",slug:"_5-介绍-js-有哪些内置对象",children:[]},{level:2,title:"6. undefined 与 undeclared 的区别？",slug:"_6-undefined-与-undeclared-的区别",children:[]},{level:2,title:"7. null 和 undefined 的区别？",slug:"_7-null-和-undefined-的区别",children:[]},{level:2,title:"8. 如何获取安全的 undefined 值？",slug:"_8-如何获取安全的-undefined-值",children:[]},{level:2,title:"9. 说几条写 JavaScript 的基本规范？",slug:"_9-说几条写-javascript-的基本规范",children:[]},{level:2,title:"10. JavaScript 原型，原型链？ 有什么特点？",slug:"_10-javascript-原型-原型链-有什么特点",children:[]},{level:2,title:"11. js 获取原型的方法？",slug:"_11-js-获取原型的方法",children:[]},{level:2,title:"12. 在 js 中不同进制数字的表示方式",slug:"_12-在-js-中不同进制数字的表示方式",children:[]},{level:2,title:"13. js 中整数的安全范围是多少？",slug:"_13-js-中整数的安全范围是多少",children:[]},{level:2,title:"14. typeof NaN 的结果是什么？",slug:"_14-typeof-nan-的结果是什么",children:[]},{level:2,title:"15. isNaN 和 Number.isNaN 函数的区别？",slug:"_15-isnan-和-number-isnan-函数的区别",children:[]},{level:2,title:"16. Array 构造函数只有一个参数值时的表现？",slug:"_16-array-构造函数只有一个参数值时的表现",children:[]},{level:2,title:"17. 其他值到字符串的转换规则？",slug:"_17-其他值到字符串的转换规则",children:[]},{level:2,title:"18. 其他值到数字值的转换规则？",slug:"_18-其他值到数字值的转换规则",children:[]},{level:2,title:"19. 其他值到布尔类型的值的转换规则？",slug:"_19-其他值到布尔类型的值的转换规则",children:[]},{level:2,title:"20. {} 和 [] 的 valueOf 和 toString 的结果是什么？",slug:"_20-和-的-valueof-和-tostring-的结果是什么",children:[]},{level:2,title:"21. 什么是假值对象？",slug:"_21-什么是假值对象",children:[]},{level:2,title:"22. ~ 操作符的作用？",slug:"_22-操作符的作用",children:[]},{level:2,title:"23. 解析字符串中的数字和将字符串强制类型转换为数字的返回结果都是数字，它们之间的区别是什么？",slug:"_23-解析字符串中的数字和将字符串强制类型转换为数字的返回结果都是数字-它们之间的区别是什么",children:[]},{level:2,title:"24. + 操作符什么时候用于字符串的拼接？",slug:"_24-操作符什么时候用于字符串的拼接",children:[]},{level:2,title:"25. 什么情况下会发生布尔值的隐式强制类型转换？",slug:"_25-什么情况下会发生布尔值的隐式强制类型转换",children:[]},{level:2,title:"26. || 和 && 操作符的返回值？",slug:"_26-和-操作符的返回值",children:[]},{level:2,title:"27. Symbol 值的强制类型转换？",slug:"_27-symbol-值的强制类型转换",children:[]},{level:2,title:"28. 操作符的强制类型转换规则？",slug:"_28-操作符的强制类型转换规则",children:[]},{level:2,title:"29. 如何将字符串转化为数字，例如 '12.3b'?",slug:"_29-如何将字符串转化为数字-例如-12-3b",children:[]},{level:2,title:"30. 如何将浮点数点左边的数每三位添加一个逗号，如 12000000.11 转化为『12,000,000.11』?",slug:"_30-如何将浮点数点左边的数每三位添加一个逗号-如-12000000-11-转化为『12-000-000-11』",children:[]},{level:2,title:"31. 常用正则表达式",slug:"_31-常用正则表达式",children:[]},{level:2,title:"32. 生成随机数的各种方法？",slug:"_32-生成随机数的各种方法",children:[]},{level:2,title:"33. 如何实现数组的随机排序？",slug:"_33-如何实现数组的随机排序",children:[]},{level:2,title:"34. javascript 创建对象的几种方式？",slug:"_34-javascript-创建对象的几种方式",children:[]},{level:2,title:"35. JavaScript 继承的几种实现方式？",slug:"_35-javascript-继承的几种实现方式",children:[]},{level:2,title:"36. 寄生式组合继承的实现？",slug:"_36-寄生式组合继承的实现",children:[]},{level:2,title:"37. Javascript 的作用域链？",slug:"_37-javascript-的作用域链",children:[]},{level:2,title:"38. 谈谈 This 对象的理解。",slug:"_38-谈谈-this-对象的理解。",children:[]},{level:2,title:"39. eval 是做什么的？",slug:"_39-eval-是做什么的",children:[]},{level:2,title:"40. 什么是 DOM 和 BOM？",slug:"_40-什么是-dom-和-bom",children:[]},{level:2,title:"41. 写一个通用的事件侦听器函数。",slug:"_41-写一个通用的事件侦听器函数。",children:[]},{level:2,title:"42. 事件是什么？IE 与火狐的事件机制有什么区别？ 如何阻止冒泡？",slug:"_42-事件是什么-ie-与火狐的事件机制有什么区别-如何阻止冒泡",children:[]},{level:2,title:"43. 三种事件模型是什么？",slug:"_43-三种事件模型是什么",children:[]},{level:2,title:"44. 事件委托是什么？",slug:"_44-事件委托是什么",children:[]},{level:2,title:'45. ["1", "2", "3"].map(parseInt) 答案是多少？',slug:"_45-1-2-3-map-parseint-答案是多少",children:[]},{level:2,title:"46. 什么是闭包，为什么要用它？",slug:"_46-什么是闭包-为什么要用它",children:[]},{level:2,title:'47. javascript 代码中的 "use strict"; 是什么意思 ? 使用它区别是什么？',slug:"_47-javascript-代码中的-use-strict-是什么意思-使用它区别是什么",children:[]},{level:2,title:"48. 如何判断一个对象是否属于某个类？",slug:"_48-如何判断一个对象是否属于某个类",children:[]},{level:2,title:"49. instanceof 的作用？",slug:"_49-instanceof-的作用",children:[]},{level:2,title:"50. new 操作符具体干了什么呢？如何实现？",slug:"_50-new-操作符具体干了什么呢-如何实现",children:[]},{level:2,title:"51. Javascript 中，有一个函数，执行时对象查找时，永远不会去查找原型，这个函数是？",slug:"_51-javascript-中-有一个函数-执行时对象查找时-永远不会去查找原型-这个函数是",children:[]},{level:2,title:"52. 对于 JSON 的了解？",slug:"_52-对于-json-的了解",children:[]},{level:2,title:'53. [].forEach.call($$(""),function(a){a.style.outline="1px solid #"+((Math.random()(1<<24))).toString(16)}) 能解释一下这段代码的意思吗？',slug:"_53-foreach-call-function-a-a-style-outline-1px-solid-math-random-1-24-tostring-16-能解释一下这段代码的意思吗",children:[]},{level:2,title:"54. js 延迟加载的方式有哪些？",slug:"_54-js-延迟加载的方式有哪些",children:[]},{level:2,title:"55. Ajax 是什么? 如何创建一个 Ajax？",slug:"_55-ajax-是什么-如何创建一个-ajax",children:[]},{level:2,title:"56. 谈一谈浏览器的缓存机制？",slug:"_56-谈一谈浏览器的缓存机制",children:[]},{level:2,title:"57. Ajax 解决浏览器缓存问题？",slug:"_57-ajax-解决浏览器缓存问题",children:[]},{level:2,title:"58. 同步和异步的区别？",slug:"_58-同步和异步的区别",children:[]},{level:2,title:"59. 什么是浏览器的同源政策？",slug:"_59-什么是浏览器的同源政策",children:[]},{level:2,title:"60. 如何解决跨域问题？",slug:"_60-如何解决跨域问题",children:[]},{level:2,title:"61. 服务器代理转发时，该如何处理 cookie？",slug:"_61-服务器代理转发时-该如何处理-cookie",children:[]},{level:2,title:"62. 简单谈一下 cookie ？",slug:"_62-简单谈一下-cookie",children:[]},{level:2,title:"63. 模块化开发怎么做？",slug:"_63-模块化开发怎么做",children:[]},{level:2,title:"64. js 的几种模块规范？",slug:"_64-js-的几种模块规范",children:[]},{level:2,title:"65. AMD 和 CMD 规范的区别？",slug:"_65-amd-和-cmd-规范的区别",children:[]},{level:2,title:"66. ES6 模块与 CommonJS 模块、AMD、CMD 的差异。",slug:"_66-es6-模块与-commonjs-模块、amd、cmd-的差异。",children:[]},{level:2,title:"67. requireJS 的核心原理是什么？（如何动态加载的？如何避免多次加载的？如何 缓存的？）",slug:"_67-requirejs-的核心原理是什么-如何动态加载的-如何避免多次加载的-如何-缓存的",children:[]},{level:2,title:"68. JS 模块加载器的轮子怎么造，也就是如何实现一个模块加载器？",slug:"_68-js-模块加载器的轮子怎么造-也就是如何实现一个模块加载器",children:[]},{level:2,title:"69. ECMAScript6 怎么写 class，为什么会出现 class 这种东西?",slug:"_69-ecmascript6-怎么写-class-为什么会出现-class-这种东西",children:[]},{level:2,title:"70. documen.write 和 innerHTML 的区别？",slug:"_70-documen-write-和-innerhtml-的区别",children:[]},{level:2,title:"71. DOM 操作——怎样添加、移除、移动、复制、创建和查找节点？",slug:"_71-dom-操作——怎样添加、移除、移动、复制、创建和查找节点",children:[]},{level:2,title:"72. innerHTML 与 outerHTML 的区别？",slug:"_72-innerhtml-与-outerhtml-的区别",children:[]},{level:2,title:"73. .call() 和 .apply() 的区别？",slug:"_73-call-和-apply-的区别",children:[]},{level:2,title:"74. JavaScript 类数组对象的定义？",slug:"_74-javascript-类数组对象的定义",children:[]},{level:2,title:"75. 数组和对象有哪些原生方法，列举一下？",slug:"_75-数组和对象有哪些原生方法-列举一下",children:[]},{level:2,title:"76. 数组的 fill 方法？",slug:"_76-数组的-fill-方法",children:[]},{level:2,title:"77. [,,,] 的长度？",slug:"_77-的长度",children:[]},{level:2,title:"78. JavaScript 中的作用域与变量声明提升？",slug:"_78-javascript-中的作用域与变量声明提升",children:[]},{level:2,title:"79. 如何编写高性能的 Javascript ？",slug:"_79-如何编写高性能的-javascript",children:[]},{level:2,title:"80. 简单介绍一下 V8 引擎的垃圾回收机制",slug:"_80-简单介绍一下-v8-引擎的垃圾回收机制",children:[]},{level:2,title:"81. 哪些操作会造成内存泄漏？",slug:"_81-哪些操作会造成内存泄漏",children:[]},{level:2,title:"82. 需求：实现一个页面操作不会整页刷新的网站，并且能在浏览器前进、后退时正确响应。给出你的技术实现方案？",slug:"_82-需求-实现一个页面操作不会整页刷新的网站-并且能在浏览器前进、后退时正确响应。给出你的技术实现方案",children:[]},{level:2,title:"83. 如何判断当前脚本运行在浏览器还是 node 环境中？（阿里）",slug:"_83-如何判断当前脚本运行在浏览器还是-node-环境中-阿里",children:[]},{level:2,title:"84. 把 script 标签放在页面的最底部的 body 封闭之前和封闭之后有什么区别？浏览器会如何解析它们？",slug:"_84-把-script-标签放在页面的最底部的-body-封闭之前和封闭之后有什么区别-浏览器会如何解析它们",children:[]},{level:2,title:"85. 移动端的点击事件的有延迟，时间是多久，为什么会有？ 怎么解决这个延时？",slug:"_85-移动端的点击事件的有延迟-时间是多久-为什么会有-怎么解决这个延时",children:[]},{level:2,title:"86. 什么是“前端路由”？什么时候适合使用“前端路由”？“前端路由”有哪些优点和缺点？",slug:"_86-什么是-前端路由-什么时候适合使用-前端路由-前端路由-有哪些优点和缺点",children:[]},{level:2,title:"87. 如何测试前端代码么？ 知道 BDD, TDD, Unit Test 么？ 知道怎么测试你的前端工程么(mocha, sinon, jasmin, qUnit..)？",slug:"_87-如何测试前端代码么-知道-bdd-tdd-unit-test-么-知道怎么测试你的前端工程么-mocha-sinon-jasmin-qunit",children:[]},{level:2,title:"88. 检测浏览器版本版本有哪些方式？",slug:"_88-检测浏览器版本版本有哪些方式",children:[]},{level:2,title:"89. 什么是 Polyfill ？",slug:"_89-什么是-polyfill",children:[]},{level:2,title:"90. 使用 JS 实现获取文件扩展名？",slug:"_90-使用-js-实现获取文件扩展名",children:[]},{level:2,title:"91. 介绍一下 js 的节流与防抖？",slug:"_91-介绍一下-js-的节流与防抖",children:[]},{level:2,title:"92. Object.is() 与原来的比较操作符 “=”、“” 的区别？",slug:"_92-object-is-与原来的比较操作符-、-的区别",children:[]},{level:2,title:"93. escape,encodeURI,encodeURIComponent 有什么区别？",slug:"_93-escape-encodeuri-encodeuricomponent-有什么区别",children:[]},{level:2,title:"94. Unicode 和 UTF-8 之间的关系？",slug:"_94-unicode-和-utf-8-之间的关系",children:[]},{level:2,title:"95. js 的事件循环是什么？",slug:"_95-js-的事件循环是什么",children:[]},{level:2,title:"96. js 中的深浅拷贝实现？",slug:"_96-js-中的深浅拷贝实现",children:[]},{level:2,title:"97. 手写 call、apply 及 bind 函数",slug:"_97-手写-call、apply-及-bind-函数",children:[]},{level:2,title:"98. 函数柯里化的实现",slug:"_98-函数柯里化的实现",children:[]},{level:2,title:"99. 为什么 0.1 + 0.2 != 0.3？如何解决这个问题？",slug:"_99-为什么-0-1-0-2-0-3-如何解决这个问题",children:[]},{level:2,title:"100. 原码、反码和补码的介绍",slug:"_100-原码、反码和补码的介绍",children:[]},{level:2,title:"101. toPrecision 和 toFixed 和 Math.round 的区别？",slug:"_101-toprecision-和-tofixed-和-math-round-的区别",children:[]},{level:2,title:"102. 什么是 XSS 攻击？如何防范 XSS 攻击？",slug:"_102-什么是-xss-攻击-如何防范-xss-攻击",children:[]},{level:2,title:"103. 什么是 CSP？",slug:"_103-什么是-csp",children:[]},{level:2,title:"104. 什么是 CSRF 攻击？如何防范 CSRF 攻击？",slug:"_104-什么是-csrf-攻击-如何防范-csrf-攻击",children:[]},{level:2,title:"105. 什么是 Samesite Cookie 属性？",slug:"_105-什么是-samesite-cookie-属性",children:[]},{level:2,title:"106. 什么是点击劫持？如何防范点击劫持？",slug:"_106-什么是点击劫持-如何防范点击劫持",children:[]},{level:2,title:"107. SQL 注入攻击？",slug:"_107-sql-注入攻击",children:[]},{level:2,title:"108. 什么是 MVVM？比之 MVC 有什么区别？什么又是 MVP ？",slug:"_108-什么是-mvvm-比之-mvc-有什么区别-什么又是-mvp",children:[]},{level:2,title:"109. vue 双向数据绑定原理？",slug:"_109-vue-双向数据绑定原理",children:[]},{level:2,title:"110. Object.defineProperty 介绍？",slug:"_110-object-defineproperty-介绍",children:[]},{level:2,title:"111. 使用 Object.defineProperty() 来进行数据劫持有什么缺点？",slug:"_111-使用-object-defineproperty-来进行数据劫持有什么缺点",children:[]},{level:2,title:"112. 什么是 Virtual DOM？为什么 Virtual DOM 比原生 DOM 快？",slug:"_112-什么是-virtual-dom-为什么-virtual-dom-比原生-dom-快",children:[]},{level:2,title:"113. 如何比较两个 DOM 树的差异？",slug:"_113-如何比较两个-dom-树的差异",children:[]},{level:2,title:"114. 什么是 requestAnimationFrame ？",slug:"_114-什么是-requestanimationframe",children:[]},{level:2,title:"115. 谈谈你对 webpack 的看法",slug:"_115-谈谈你对-webpack-的看法",children:[]},{level:2,title:"116. offsetWidth/offsetHeight,clientWidth/clientHeight 与 scrollWidth/scrollHeight 的区别？",slug:"_116-offsetwidth-offsetheight-clientwidth-clientheight-与-scrollwidth-scrollheight-的区别",children:[]},{level:2,title:"117. 谈一谈你理解的函数式编程？",slug:"_117-谈一谈你理解的函数式编程",children:[]},{level:2,title:"118. 异步编程的实现方式？",slug:"_118-异步编程的实现方式",children:[]},{level:2,title:"119. Js 动画与 CSS 动画区别及相应实现",slug:"_119-js-动画与-css-动画区别及相应实现",children:[]},{level:2,title:"120. get 请求传参长度的误区",slug:"_120-get-请求传参长度的误区",children:[]},{level:2,title:"121. URL 和 URI 的区别？",slug:"_121-url-和-uri-的区别",children:[]},{level:2,title:"122. get 和 post 请求在缓存方面的区别",slug:"_122-get-和-post-请求在缓存方面的区别",children:[]},{level:2,title:"123. 图片的懒加载和预加载",slug:"_123-图片的懒加载和预加载",children:[]},{level:2,title:"124. mouseover 和 mouseenter 的区别？",slug:"_124-mouseover-和-mouseenter-的区别",children:[]},{level:2,title:"125. js 拖拽功能的实现",slug:"_125-js-拖拽功能的实现",children:[]},{level:2,title:"126. 为什么使用 setTimeout 实现 setInterval？怎么模拟？",slug:"_126-为什么使用-settimeout-实现-setinterval-怎么模拟",children:[]},{level:2,title:"127. let 和 const 的注意点？",slug:"_127-let-和-const-的注意点",children:[]},{level:2,title:"128. 什么是 rest 参数？",slug:"_128-什么是-rest-参数",children:[]},{level:2,title:"129. 什么是尾调用，使用尾调用有什么好处？",slug:"_129-什么是尾调用-使用尾调用有什么好处",children:[]},{level:2,title:"130. Symbol 类型的注意点？",slug:"_130-symbol-类型的注意点",children:[]},{level:2,title:"131. Set 和 WeakSet 结构？",slug:"_131-set-和-weakset-结构",children:[]},{level:2,title:"132. Map 和 WeakMap 结构？",slug:"_132-map-和-weakmap-结构",children:[]},{level:2,title:"133. 什么是 Proxy ？",slug:"_133-什么是-proxy",children:[]},{level:2,title:"134. Reflect 对象创建目的？",slug:"_134-reflect-对象创建目的",children:[]},{level:2,title:"135. require 模块引入的查找方式？",slug:"_135-require-模块引入的查找方式",children:[]},{level:2,title:"136. 什么是 Promise 对象，什么是 Promises/A+ 规范？",slug:"_136-什么是-promise-对象-什么是-promises-a-规范",children:[]},{level:2,title:"137. 手写一个 Promise",slug:"_137-手写一个-promise",children:[]},{level:2,title:"138. 如何检测浏览器所支持的最小字体大小？",slug:"_138-如何检测浏览器所支持的最小字体大小",children:[]},{level:2,title:"139. 怎么做 JS 代码 Error 统计？",slug:"_139-怎么做-js-代码-error-统计",children:[]},{level:2,title:"140. 单例模式模式是什么？",slug:"_140-单例模式模式是什么",children:[]},{level:2,title:"141. 策略模式是什么？",slug:"_141-策略模式是什么",children:[]},{level:2,title:"142. 代理模式是什么？",slug:"_142-代理模式是什么",children:[]},{level:2,title:"143. 中介者模式是什么？",slug:"_143-中介者模式是什么",children:[]},{level:2,title:"144. 适配器模式是什么？",slug:"_144-适配器模式是什么",children:[]},{level:2,title:"145. 观察者模式和发布订阅模式有什么不同？",slug:"_145-观察者模式和发布订阅模式有什么不同",children:[]},{level:2,title:"146. Vue 的生命周期是什么？",slug:"_146-vue-的生命周期是什么",children:[]},{level:2,title:"147. Vue 的各个生命阶段是什么？",slug:"_147-vue-的各个生命阶段是什么",children:[]},{level:2,title:"148. Vue 组件间的参数传递方式？",slug:"_148-vue-组件间的参数传递方式",children:[]},{level:2,title:"149. computed 和 watch 的差异？",slug:"_149-computed-和-watch-的差异",children:[]},{level:2,title:"150. vue-router 中的导航钩子函数",slug:"_150-vue-router-中的导航钩子函数",children:[]},{level:2,title:"151. $route 和 $router 的区别？",slug:"_151-route-和-router-的区别",children:[]},{level:2,title:"152. vue 常用的修饰符？",slug:"_152-vue-常用的修饰符",children:[]},{level:2,title:"153. vue 中 key 值的作用？",slug:"_153-vue-中-key-值的作用",children:[]},{level:2,title:"154. computed 和 watch 区别？",slug:"_154-computed-和-watch-区别",children:[]},{level:2,title:"155. keep-alive 组件有什么作用？",slug:"_155-keep-alive-组件有什么作用",children:[]},{level:2,title:"156. vue 中 mixin 和 mixins 区别？",slug:"_156-vue-中-mixin-和-mixins-区别",children:[]},{level:2,title:"157. 开发中常用的几种 Content-Type ？",slug:"_157-开发中常用的几种-content-type",children:[]},{level:2,title:"158. 如何封装一个 javascript 的类型判断函数？",slug:"_158-如何封装一个-javascript-的类型判断函数",children:[]},{level:2,title:"159. 如何判断一个对象是否为空对象？",slug:"_159-如何判断一个对象是否为空对象",children:[]},{level:2,title:"160. 使用闭包实现每隔一秒打印 1,2,3,4",slug:"_160-使用闭包实现每隔一秒打印-1-2-3-4",children:[]},{level:2,title:"161. 手写一个 jsonp",slug:"_161-手写一个-jsonp",children:[]},{level:2,title:"162. 手写一个观察者模式？",slug:"_162-手写一个观察者模式",children:[]},{level:2,title:"163. EventEmitter 实现",slug:"_163-eventemitter-实现",children:[]},{level:2,title:"164. 一道常被人轻视的前端 JS 面试题",slug:"_164-一道常被人轻视的前端-js-面试题",children:[]},{level:2,title:"165. 如何确定页面的可用性时间，什么是 Performance API？",slug:"_165-如何确定页面的可用性时间-什么是-performance-api",children:[]},{level:2,title:"166. js 中的命名规则",slug:"_166-js-中的命名规则",children:[]},{level:2,title:"167. js 语句末尾分号是否可以省略？",slug:"_167-js-语句末尾分号是否可以省略",children:[]},{level:2,title:"168. Object.assign()",slug:"_168-object-assign",children:[]},{level:2,title:"169. Math.ceil 和 Math.floor",slug:"_169-math-ceil-和-math-floor",children:[]},{level:2,title:"170. js for 循环注意点",slug:"_170-js-for-循环注意点",children:[]}],git:{updatedTime:null,contributors:[]}},key:"v-7ade95ec",path:"/%E9%9D%A2%E8%AF%95/2022/20221016.html",title:"JavaScript 面试知识点总结",lang:"zh-CN",frontmatter:{title:"JavaScript 面试知识点总结",date:"2022-10-16T00:00:00.000Z",tags:["js"],categories:["面试"]},excerpt:"",headers:[{level:2,title:"1. 介绍 js 的基本数据类型。",slug:"_1-介绍-js-的基本数据类型。",children:[]},{level:2,title:"2. JavaScript 有几种类型的值？你能画一下他们的内存图吗？",slug:"_2-javascript-有几种类型的值-你能画一下他们的内存图吗",children:[]},{level:2,title:"3. 什么是堆？什么是栈？它们之间有什么区别和联系？",slug:"_3-什么是堆-什么是栈-它们之间有什么区别和联系",children:[]},{level:2,title:"4. 内部属性 [[Class]] 是什么？",slug:"_4-内部属性-class-是什么",children:[]},{level:2,title:"5. 介绍 js 有哪些内置对象？",slug:"_5-介绍-js-有哪些内置对象",children:[]},{level:2,title:"6. undefined 与 undeclared 的区别？",slug:"_6-undefined-与-undeclared-的区别",children:[]},{level:2,title:"7. null 和 undefined 的区别？",slug:"_7-null-和-undefined-的区别",children:[]},{level:2,title:"8. 如何获取安全的 undefined 值？",slug:"_8-如何获取安全的-undefined-值",children:[]},{level:2,title:"9. 说几条写 JavaScript 的基本规范？",slug:"_9-说几条写-javascript-的基本规范",children:[]},{level:2,title:"10. JavaScript 原型，原型链？ 有什么特点？",slug:"_10-javascript-原型-原型链-有什么特点",children:[]},{level:2,title:"11. js 获取原型的方法？",slug:"_11-js-获取原型的方法",children:[]},{level:2,title:"12. 在 js 中不同进制数字的表示方式",slug:"_12-在-js-中不同进制数字的表示方式",children:[]},{level:2,title:"13. js 中整数的安全范围是多少？",slug:"_13-js-中整数的安全范围是多少",children:[]},{level:2,title:"14. typeof NaN 的结果是什么？",slug:"_14-typeof-nan-的结果是什么",children:[]},{level:2,title:"15. isNaN 和 Number.isNaN 函数的区别？",slug:"_15-isnan-和-number-isnan-函数的区别",children:[]},{level:2,title:"16. Array 构造函数只有一个参数值时的表现？",slug:"_16-array-构造函数只有一个参数值时的表现",children:[]},{level:2,title:"17. 其他值到字符串的转换规则？",slug:"_17-其他值到字符串的转换规则",children:[]},{level:2,title:"18. 其他值到数字值的转换规则？",slug:"_18-其他值到数字值的转换规则",children:[]},{level:2,title:"19. 其他值到布尔类型的值的转换规则？",slug:"_19-其他值到布尔类型的值的转换规则",children:[]},{level:2,title:"20. {} 和 [] 的 valueOf 和 toString 的结果是什么？",slug:"_20-和-的-valueof-和-tostring-的结果是什么",children:[]},{level:2,title:"21. 什么是假值对象？",slug:"_21-什么是假值对象",children:[]},{level:2,title:"22. ~ 操作符的作用？",slug:"_22-操作符的作用",children:[]},{level:2,title:"23. 解析字符串中的数字和将字符串强制类型转换为数字的返回结果都是数字，它们之间的区别是什么？",slug:"_23-解析字符串中的数字和将字符串强制类型转换为数字的返回结果都是数字-它们之间的区别是什么",children:[]},{level:2,title:"24. + 操作符什么时候用于字符串的拼接？",slug:"_24-操作符什么时候用于字符串的拼接",children:[]},{level:2,title:"25. 什么情况下会发生布尔值的隐式强制类型转换？",slug:"_25-什么情况下会发生布尔值的隐式强制类型转换",children:[]},{level:2,title:"26. || 和 && 操作符的返回值？",slug:"_26-和-操作符的返回值",children:[]},{level:2,title:"27. Symbol 值的强制类型转换？",slug:"_27-symbol-值的强制类型转换",children:[]},{level:2,title:"28. 操作符的强制类型转换规则？",slug:"_28-操作符的强制类型转换规则",children:[]},{level:2,title:"29. 如何将字符串转化为数字，例如 '12.3b'?",slug:"_29-如何将字符串转化为数字-例如-12-3b",children:[]},{level:2,title:"30. 如何将浮点数点左边的数每三位添加一个逗号，如 12000000.11 转化为『12,000,000.11』?",slug:"_30-如何将浮点数点左边的数每三位添加一个逗号-如-12000000-11-转化为『12-000-000-11』",children:[]},{level:2,title:"31. 常用正则表达式",slug:"_31-常用正则表达式",children:[]},{level:2,title:"32. 生成随机数的各种方法？",slug:"_32-生成随机数的各种方法",children:[]},{level:2,title:"33. 如何实现数组的随机排序？",slug:"_33-如何实现数组的随机排序",children:[]},{level:2,title:"34. javascript 创建对象的几种方式？",slug:"_34-javascript-创建对象的几种方式",children:[]},{level:2,title:"35. JavaScript 继承的几种实现方式？",slug:"_35-javascript-继承的几种实现方式",children:[]},{level:2,title:"36. 寄生式组合继承的实现？",slug:"_36-寄生式组合继承的实现",children:[]},{level:2,title:"37. Javascript 的作用域链？",slug:"_37-javascript-的作用域链",children:[]},{level:2,title:"38. 谈谈 This 对象的理解。",slug:"_38-谈谈-this-对象的理解。",children:[]},{level:2,title:"39. eval 是做什么的？",slug:"_39-eval-是做什么的",children:[]},{level:2,title:"40. 什么是 DOM 和 BOM？",slug:"_40-什么是-dom-和-bom",children:[]},{level:2,title:"41. 写一个通用的事件侦听器函数。",slug:"_41-写一个通用的事件侦听器函数。",children:[]},{level:2,title:"42. 事件是什么？IE 与火狐的事件机制有什么区别？ 如何阻止冒泡？",slug:"_42-事件是什么-ie-与火狐的事件机制有什么区别-如何阻止冒泡",children:[]},{level:2,title:"43. 三种事件模型是什么？",slug:"_43-三种事件模型是什么",children:[]},{level:2,title:"44. 事件委托是什么？",slug:"_44-事件委托是什么",children:[]},{level:2,title:'45. ["1", "2", "3"].map(parseInt) 答案是多少？',slug:"_45-1-2-3-map-parseint-答案是多少",children:[]},{level:2,title:"46. 什么是闭包，为什么要用它？",slug:"_46-什么是闭包-为什么要用它",children:[]},{level:2,title:'47. javascript 代码中的 "use strict"; 是什么意思 ? 使用它区别是什么？',slug:"_47-javascript-代码中的-use-strict-是什么意思-使用它区别是什么",children:[]},{level:2,title:"48. 如何判断一个对象是否属于某个类？",slug:"_48-如何判断一个对象是否属于某个类",children:[]},{level:2,title:"49. instanceof 的作用？",slug:"_49-instanceof-的作用",children:[]},{level:2,title:"50. new 操作符具体干了什么呢？如何实现？",slug:"_50-new-操作符具体干了什么呢-如何实现",children:[]},{level:2,title:"51. Javascript 中，有一个函数，执行时对象查找时，永远不会去查找原型，这个函数是？",slug:"_51-javascript-中-有一个函数-执行时对象查找时-永远不会去查找原型-这个函数是",children:[]},{level:2,title:"52. 对于 JSON 的了解？",slug:"_52-对于-json-的了解",children:[]},{level:2,title:'53. [].forEach.call($$(""),function(a){a.style.outline="1px solid #"+((Math.random()(1<<24))).toString(16)}) 能解释一下这段代码的意思吗？',slug:"_53-foreach-call-function-a-a-style-outline-1px-solid-math-random-1-24-tostring-16-能解释一下这段代码的意思吗",children:[]},{level:2,title:"54. js 延迟加载的方式有哪些？",slug:"_54-js-延迟加载的方式有哪些",children:[]},{level:2,title:"55. Ajax 是什么? 如何创建一个 Ajax？",slug:"_55-ajax-是什么-如何创建一个-ajax",children:[]},{level:2,title:"56. 谈一谈浏览器的缓存机制？",slug:"_56-谈一谈浏览器的缓存机制",children:[]},{level:2,title:"57. Ajax 解决浏览器缓存问题？",slug:"_57-ajax-解决浏览器缓存问题",children:[]},{level:2,title:"58. 同步和异步的区别？",slug:"_58-同步和异步的区别",children:[]},{level:2,title:"59. 什么是浏览器的同源政策？",slug:"_59-什么是浏览器的同源政策",children:[]},{level:2,title:"60. 如何解决跨域问题？",slug:"_60-如何解决跨域问题",children:[]},{level:2,title:"61. 服务器代理转发时，该如何处理 cookie？",slug:"_61-服务器代理转发时-该如何处理-cookie",children:[]},{level:2,title:"62. 简单谈一下 cookie ？",slug:"_62-简单谈一下-cookie",children:[]},{level:2,title:"63. 模块化开发怎么做？",slug:"_63-模块化开发怎么做",children:[]},{level:2,title:"64. js 的几种模块规范？",slug:"_64-js-的几种模块规范",children:[]},{level:2,title:"65. AMD 和 CMD 规范的区别？",slug:"_65-amd-和-cmd-规范的区别",children:[]},{level:2,title:"66. ES6 模块与 CommonJS 模块、AMD、CMD 的差异。",slug:"_66-es6-模块与-commonjs-模块、amd、cmd-的差异。",children:[]},{level:2,title:"67. requireJS 的核心原理是什么？（如何动态加载的？如何避免多次加载的？如何 缓存的？）",slug:"_67-requirejs-的核心原理是什么-如何动态加载的-如何避免多次加载的-如何-缓存的",children:[]},{level:2,title:"68. JS 模块加载器的轮子怎么造，也就是如何实现一个模块加载器？",slug:"_68-js-模块加载器的轮子怎么造-也就是如何实现一个模块加载器",children:[]},{level:2,title:"69. ECMAScript6 怎么写 class，为什么会出现 class 这种东西?",slug:"_69-ecmascript6-怎么写-class-为什么会出现-class-这种东西",children:[]},{level:2,title:"70. documen.write 和 innerHTML 的区别？",slug:"_70-documen-write-和-innerhtml-的区别",children:[]},{level:2,title:"71. DOM 操作——怎样添加、移除、移动、复制、创建和查找节点？",slug:"_71-dom-操作——怎样添加、移除、移动、复制、创建和查找节点",children:[]},{level:2,title:"72. innerHTML 与 outerHTML 的区别？",slug:"_72-innerhtml-与-outerhtml-的区别",children:[]},{level:2,title:"73. .call() 和 .apply() 的区别？",slug:"_73-call-和-apply-的区别",children:[]},{level:2,title:"74. JavaScript 类数组对象的定义？",slug:"_74-javascript-类数组对象的定义",children:[]},{level:2,title:"75. 数组和对象有哪些原生方法，列举一下？",slug:"_75-数组和对象有哪些原生方法-列举一下",children:[]},{level:2,title:"76. 数组的 fill 方法？",slug:"_76-数组的-fill-方法",children:[]},{level:2,title:"77. [,,,] 的长度？",slug:"_77-的长度",children:[]},{level:2,title:"78. JavaScript 中的作用域与变量声明提升？",slug:"_78-javascript-中的作用域与变量声明提升",children:[]},{level:2,title:"79. 如何编写高性能的 Javascript ？",slug:"_79-如何编写高性能的-javascript",children:[]},{level:2,title:"80. 简单介绍一下 V8 引擎的垃圾回收机制",slug:"_80-简单介绍一下-v8-引擎的垃圾回收机制",children:[]},{level:2,title:"81. 哪些操作会造成内存泄漏？",slug:"_81-哪些操作会造成内存泄漏",children:[]},{level:2,title:"82. 需求：实现一个页面操作不会整页刷新的网站，并且能在浏览器前进、后退时正确响应。给出你的技术实现方案？",slug:"_82-需求-实现一个页面操作不会整页刷新的网站-并且能在浏览器前进、后退时正确响应。给出你的技术实现方案",children:[]},{level:2,title:"83. 如何判断当前脚本运行在浏览器还是 node 环境中？（阿里）",slug:"_83-如何判断当前脚本运行在浏览器还是-node-环境中-阿里",children:[]},{level:2,title:"84. 把 script 标签放在页面的最底部的 body 封闭之前和封闭之后有什么区别？浏览器会如何解析它们？",slug:"_84-把-script-标签放在页面的最底部的-body-封闭之前和封闭之后有什么区别-浏览器会如何解析它们",children:[]},{level:2,title:"85. 移动端的点击事件的有延迟，时间是多久，为什么会有？ 怎么解决这个延时？",slug:"_85-移动端的点击事件的有延迟-时间是多久-为什么会有-怎么解决这个延时",children:[]},{level:2,title:"86. 什么是“前端路由”？什么时候适合使用“前端路由”？“前端路由”有哪些优点和缺点？",slug:"_86-什么是-前端路由-什么时候适合使用-前端路由-前端路由-有哪些优点和缺点",children:[]},{level:2,title:"87. 如何测试前端代码么？ 知道 BDD, TDD, Unit Test 么？ 知道怎么测试你的前端工程么(mocha, sinon, jasmin, qUnit..)？",slug:"_87-如何测试前端代码么-知道-bdd-tdd-unit-test-么-知道怎么测试你的前端工程么-mocha-sinon-jasmin-qunit",children:[]},{level:2,title:"88. 检测浏览器版本版本有哪些方式？",slug:"_88-检测浏览器版本版本有哪些方式",children:[]},{level:2,title:"89. 什么是 Polyfill ？",slug:"_89-什么是-polyfill",children:[]},{level:2,title:"90. 使用 JS 实现获取文件扩展名？",slug:"_90-使用-js-实现获取文件扩展名",children:[]},{level:2,title:"91. 介绍一下 js 的节流与防抖？",slug:"_91-介绍一下-js-的节流与防抖",children:[]},{level:2,title:"92. Object.is() 与原来的比较操作符 “=”、“” 的区别？",slug:"_92-object-is-与原来的比较操作符-、-的区别",children:[]},{level:2,title:"93. escape,encodeURI,encodeURIComponent 有什么区别？",slug:"_93-escape-encodeuri-encodeuricomponent-有什么区别",children:[]},{level:2,title:"94. Unicode 和 UTF-8 之间的关系？",slug:"_94-unicode-和-utf-8-之间的关系",children:[]},{level:2,title:"95. js 的事件循环是什么？",slug:"_95-js-的事件循环是什么",children:[]},{level:2,title:"96. js 中的深浅拷贝实现？",slug:"_96-js-中的深浅拷贝实现",children:[]},{level:2,title:"97. 手写 call、apply 及 bind 函数",slug:"_97-手写-call、apply-及-bind-函数",children:[]},{level:2,title:"98. 函数柯里化的实现",slug:"_98-函数柯里化的实现",children:[]},{level:2,title:"99. 为什么 0.1 + 0.2 != 0.3？如何解决这个问题？",slug:"_99-为什么-0-1-0-2-0-3-如何解决这个问题",children:[]},{level:2,title:"100. 原码、反码和补码的介绍",slug:"_100-原码、反码和补码的介绍",children:[]},{level:2,title:"101. toPrecision 和 toFixed 和 Math.round 的区别？",slug:"_101-toprecision-和-tofixed-和-math-round-的区别",children:[]},{level:2,title:"102. 什么是 XSS 攻击？如何防范 XSS 攻击？",slug:"_102-什么是-xss-攻击-如何防范-xss-攻击",children:[]},{level:2,title:"103. 什么是 CSP？",slug:"_103-什么是-csp",children:[]},{level:2,title:"104. 什么是 CSRF 攻击？如何防范 CSRF 攻击？",slug:"_104-什么是-csrf-攻击-如何防范-csrf-攻击",children:[]},{level:2,title:"105. 什么是 Samesite Cookie 属性？",slug:"_105-什么是-samesite-cookie-属性",children:[]},{level:2,title:"106. 什么是点击劫持？如何防范点击劫持？",slug:"_106-什么是点击劫持-如何防范点击劫持",children:[]},{level:2,title:"107. SQL 注入攻击？",slug:"_107-sql-注入攻击",children:[]},{level:2,title:"108. 什么是 MVVM？比之 MVC 有什么区别？什么又是 MVP ？",slug:"_108-什么是-mvvm-比之-mvc-有什么区别-什么又是-mvp",children:[]},{level:2,title:"109. vue 双向数据绑定原理？",slug:"_109-vue-双向数据绑定原理",children:[]},{level:2,title:"110. Object.defineProperty 介绍？",slug:"_110-object-defineproperty-介绍",children:[]},{level:2,title:"111. 使用 Object.defineProperty() 来进行数据劫持有什么缺点？",slug:"_111-使用-object-defineproperty-来进行数据劫持有什么缺点",children:[]},{level:2,title:"112. 什么是 Virtual DOM？为什么 Virtual DOM 比原生 DOM 快？",slug:"_112-什么是-virtual-dom-为什么-virtual-dom-比原生-dom-快",children:[]},{level:2,title:"113. 如何比较两个 DOM 树的差异？",slug:"_113-如何比较两个-dom-树的差异",children:[]},{level:2,title:"114. 什么是 requestAnimationFrame ？",slug:"_114-什么是-requestanimationframe",children:[]},{level:2,title:"115. 谈谈你对 webpack 的看法",slug:"_115-谈谈你对-webpack-的看法",children:[]},{level:2,title:"116. offsetWidth/offsetHeight,clientWidth/clientHeight 与 scrollWidth/scrollHeight 的区别？",slug:"_116-offsetwidth-offsetheight-clientwidth-clientheight-与-scrollwidth-scrollheight-的区别",children:[]},{level:2,title:"117. 谈一谈你理解的函数式编程？",slug:"_117-谈一谈你理解的函数式编程",children:[]},{level:2,title:"118. 异步编程的实现方式？",slug:"_118-异步编程的实现方式",children:[]},{level:2,title:"119. Js 动画与 CSS 动画区别及相应实现",slug:"_119-js-动画与-css-动画区别及相应实现",children:[]},{level:2,title:"120. get 请求传参长度的误区",slug:"_120-get-请求传参长度的误区",children:[]},{level:2,title:"121. URL 和 URI 的区别？",slug:"_121-url-和-uri-的区别",children:[]},{level:2,title:"122. get 和 post 请求在缓存方面的区别",slug:"_122-get-和-post-请求在缓存方面的区别",children:[]},{level:2,title:"123. 图片的懒加载和预加载",slug:"_123-图片的懒加载和预加载",children:[]},{level:2,title:"124. mouseover 和 mouseenter 的区别？",slug:"_124-mouseover-和-mouseenter-的区别",children:[]},{level:2,title:"125. js 拖拽功能的实现",slug:"_125-js-拖拽功能的实现",children:[]},{level:2,title:"126. 为什么使用 setTimeout 实现 setInterval？怎么模拟？",slug:"_126-为什么使用-settimeout-实现-setinterval-怎么模拟",children:[]},{level:2,title:"127. let 和 const 的注意点？",slug:"_127-let-和-const-的注意点",children:[]},{level:2,title:"128. 什么是 rest 参数？",slug:"_128-什么是-rest-参数",children:[]},{level:2,title:"129. 什么是尾调用，使用尾调用有什么好处？",slug:"_129-什么是尾调用-使用尾调用有什么好处",children:[]},{level:2,title:"130. Symbol 类型的注意点？",slug:"_130-symbol-类型的注意点",children:[]},{level:2,title:"131. Set 和 WeakSet 结构？",slug:"_131-set-和-weakset-结构",children:[]},{level:2,title:"132. Map 和 WeakMap 结构？",slug:"_132-map-和-weakmap-结构",children:[]},{level:2,title:"133. 什么是 Proxy ？",slug:"_133-什么是-proxy",children:[]},{level:2,title:"134. Reflect 对象创建目的？",slug:"_134-reflect-对象创建目的",children:[]},{level:2,title:"135. require 模块引入的查找方式？",slug:"_135-require-模块引入的查找方式",children:[]},{level:2,title:"136. 什么是 Promise 对象，什么是 Promises/A+ 规范？",slug:"_136-什么是-promise-对象-什么是-promises-a-规范",children:[]},{level:2,title:"137. 手写一个 Promise",slug:"_137-手写一个-promise",children:[]},{level:2,title:"138. 如何检测浏览器所支持的最小字体大小？",slug:"_138-如何检测浏览器所支持的最小字体大小",children:[]},{level:2,title:"139. 怎么做 JS 代码 Error 统计？",slug:"_139-怎么做-js-代码-error-统计",children:[]},{level:2,title:"140. 单例模式模式是什么？",slug:"_140-单例模式模式是什么",children:[]},{level:2,title:"141. 策略模式是什么？",slug:"_141-策略模式是什么",children:[]},{level:2,title:"142. 代理模式是什么？",slug:"_142-代理模式是什么",children:[]},{level:2,title:"143. 中介者模式是什么？",slug:"_143-中介者模式是什么",children:[]},{level:2,title:"144. 适配器模式是什么？",slug:"_144-适配器模式是什么",children:[]},{level:2,title:"145. 观察者模式和发布订阅模式有什么不同？",slug:"_145-观察者模式和发布订阅模式有什么不同",children:[]},{level:2,title:"146. Vue 的生命周期是什么？",slug:"_146-vue-的生命周期是什么",children:[]},{level:2,title:"147. Vue 的各个生命阶段是什么？",slug:"_147-vue-的各个生命阶段是什么",children:[]},{level:2,title:"148. Vue 组件间的参数传递方式？",slug:"_148-vue-组件间的参数传递方式",children:[]},{level:2,title:"149. computed 和 watch 的差异？",slug:"_149-computed-和-watch-的差异",children:[]},{level:2,title:"150. vue-router 中的导航钩子函数",slug:"_150-vue-router-中的导航钩子函数",children:[]},{level:2,title:"151. $route 和 $router 的区别？",slug:"_151-route-和-router-的区别",children:[]},{level:2,title:"152. vue 常用的修饰符？",slug:"_152-vue-常用的修饰符",children:[]},{level:2,title:"153. vue 中 key 值的作用？",slug:"_153-vue-中-key-值的作用",children:[]},{level:2,title:"154. computed 和 watch 区别？",slug:"_154-computed-和-watch-区别",children:[]},{level:2,title:"155. keep-alive 组件有什么作用？",slug:"_155-keep-alive-组件有什么作用",children:[]},{level:2,title:"156. vue 中 mixin 和 mixins 区别？",slug:"_156-vue-中-mixin-和-mixins-区别",children:[]},{level:2,title:"157. 开发中常用的几种 Content-Type ？",slug:"_157-开发中常用的几种-content-type",children:[]},{level:2,title:"158. 如何封装一个 javascript 的类型判断函数？",slug:"_158-如何封装一个-javascript-的类型判断函数",children:[]},{level:2,title:"159. 如何判断一个对象是否为空对象？",slug:"_159-如何判断一个对象是否为空对象",children:[]},{level:2,title:"160. 使用闭包实现每隔一秒打印 1,2,3,4",slug:"_160-使用闭包实现每隔一秒打印-1-2-3-4",children:[]},{level:2,title:"161. 手写一个 jsonp",slug:"_161-手写一个-jsonp",children:[]},{level:2,title:"162. 手写一个观察者模式？",slug:"_162-手写一个观察者模式",children:[]},{level:2,title:"163. EventEmitter 实现",slug:"_163-eventemitter-实现",children:[]},{level:2,title:"164. 一道常被人轻视的前端 JS 面试题",slug:"_164-一道常被人轻视的前端-js-面试题",children:[]},{level:2,title:"165. 如何确定页面的可用性时间，什么是 Performance API？",slug:"_165-如何确定页面的可用性时间-什么是-performance-api",children:[]},{level:2,title:"166. js 中的命名规则",slug:"_166-js-中的命名规则",children:[]},{level:2,title:"167. js 语句末尾分号是否可以省略？",slug:"_167-js-语句末尾分号是否可以省略",children:[]},{level:2,title:"168. Object.assign()",slug:"_168-object-assign",children:[]},{level:2,title:"169. Math.ceil 和 Math.floor",slug:"_169-math-ceil-和-math-floor",children:[]},{level:2,title:"170. js for 循环注意点",slug:"_170-js-for-循环注意点",children:[]}],content:'\r\n::: tip\r\n\r\n本篇主要是笔者在复习 JavaScript 相关知识和一些相关面试题时所做的笔记，如果出现错误，希望大家指出！\r\n\r\n:::\r\n\r\n## 1. 介绍 js 的基本数据类型。\r\n\r\n```js\r\njs 一共有六种基本数据类型，分别是 Undefined、Null、Boolean、Number、String，还有在 ES6 中新增的 Symbol 类型，\r\n代表创建后独一无二且不可变的数据类型，它的出现我认为主要是为了解决可能出现的全局变量冲突的问题。\r\n```\r\n\r\n## 2. JavaScript 有几种类型的值？你能画一下他们的内存图吗？\r\n\r\n涉及知识点：\r\n\r\n- 栈：原始数据类型（Undefined、Null、Boolean、Number、String）\r\n- 堆：引用数据类型（对象、数组和函数）\r\n\r\n```\r\n两种类型的区别是：存储位置不同。\r\n原始数据类型直接存储在栈（stack）中的简单数据段，占据空间小、大小固定，属于被频繁使用数据，所以放入栈中存储。\r\n \r\n引用数据类型存储在堆（heap）中的对象，占据空间大、大小不固定。如果存储在栈中，将会影响程序运行的性能；引用数据类型在\r\n栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实\r\n体。\r\n```\r\n\r\n回答：\r\n\r\n```\r\njs 可以分为两种类型的值，一种是基本数据类型，一种是复杂数据类型。\r\n \r\n基本数据类型....（参考1）\r\n \r\n复杂数据类型指的是 Object 类型，所有其他的如 Array、Date 等数据类型都可以理解为 Object 类型的子类。\r\n \r\n两种类型间的主要区别是它们的存储位置不同，基本数据类型的值直接保存在栈中，而复杂数据类型的值保存在堆中，通过使用在栈中\r\n保存对应的指针来获取堆中的值。\r\n```\r\n\r\n详细资料可以参考：\r\n[《JavaScript 有几种类型的值？》](https://blog.csdn.net/lxcao/article/details/52749421)\r\n[《JavaScript 有几种类型的值？能否画一下它们的内存图；》](https://blog.csdn.net/jiangjuanjaun/article/details/80327342)\r\n\r\n## 3. 什么是堆？什么是栈？它们之间有什么区别和联系？\r\n\r\n```\r\n堆和栈的概念存在于数据结构中和操作系统内存中。\r\n \r\n在数据结构中，栈中数据的存取方式为先进后出。而堆是一个优先队列，是按优先级来进行排序的，优先级可以按照大小来规定。完全\r\n二叉树是堆的一种实现方式。\r\n \r\n在操作系统中，内存被分为栈区和堆区。\r\n \r\n栈区内存由编译器自动分配释放，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。\r\n \r\n堆区内存一般由程序员分配释放，若程序员不释放，程序结束时可能由垃圾回收机制回收。\r\n```\r\n\r\n详细资料可以参考：\r\n[《什么是堆？什么是栈？他们之间有什么区别和联系？》](https://www.zhihu.com/question/19729973)\r\n\r\n## 4. 内部属性 [[Class]] 是什么？\r\n\r\n```\r\n所有 typeof 返回值为 "object" 的对象（如数组）都包含一个内部属性 [[Class]]（我们可以把它看作一个内部的分类，而非\r\n传统的面向对象意义上的类）。这个属性无法直接访问，一般通过 Object.prototype.toString(..) 来查看。例如：\r\n \r\nObject.prototype.toString.call( [1,2,3] );\r\n// "[object Array]"\r\n \r\nObject.prototype.toString.call( /regex-literal/i );\r\n// "[object RegExp]"\r\n```\r\n\r\n## 5. 介绍 js 有哪些内置对象？\r\n\r\n涉及知识点：\r\n\r\n```\r\n全局的对象（ global objects ）或称标准内置对象，不要和 "全局对象（global object）" 混淆。这里说的全局的对象是说在\r\n全局作用域里的对象。全局作用域中的其他对象可以由用户的脚本创建或由宿主程序提供。\r\n \r\n标准内置对象的分类\r\n \r\n（1）值属性，这些全局属性返回一个简单值，这些值没有自己的属性和方法。\r\n \r\n例如 Infinity、NaN、undefined、null 字面量\r\n \r\n（2）函数属性，全局函数可以直接调用，不需要在调用时指定所属对象，执行结束后会将结果直接返回给调用者。\r\n \r\n例如 eval()、parseFloat()、parseInt() 等\r\n \r\n（3）基本对象，基本对象是定义或使用其他对象的基础。基本对象包括一般对象、函数对象和错误对象。\r\n \r\n例如 Object、Function、Boolean、Symbol、Error 等\r\n \r\n（4）数字和日期对象，用来表示数字、日期和执行数学计算的对象。\r\n \r\n例如 Number、Math、Date\r\n \r\n（5）字符串，用来表示和操作字符串的对象。\r\n \r\n例如 String、RegExp\r\n \r\n（6）可索引的集合对象，这些对象表示按照索引值来排序的数据集合，包括数组和类型数组，以及类数组结构的对象。例如 Array\r\n \r\n（7）使用键的集合对象，这些集合对象在存储数据时会使用到键，支持按照插入顺序来迭代元素。\r\n \r\n例如 Map、Set、WeakMap、WeakSet\r\n \r\n（8）矢量集合，SIMD 矢量集合中的数据会被组织为一个数据序列。\r\n \r\n例如 SIMD 等\r\n \r\n（9）结构化数据，这些对象用来表示和操作结构化的缓冲区数据，或使用 JSON 编码的数据。\r\n \r\n例如 JSON 等\r\n \r\n（10）控制抽象对象\r\n \r\n例如 Promise、Generator 等\r\n \r\n（11）反射\r\n \r\n例如 Reflect、Proxy\r\n \r\n（12）国际化，为了支持多语言处理而加入 ECMAScript 的对象。\r\n \r\n例如 Intl、Intl.Collator 等\r\n \r\n（13）WebAssembly\r\n \r\n（14）其他\r\n \r\n例如 arguments\r\n```\r\n\r\n回答：\r\n\r\n```\r\njs 中的内置对象主要指的是在程序执行前存在全局作用域里的由 js 定义的一些全局值属性、函数和用来实例化其他对象的构造函\r\n数对象。一般我们经常用到的如全局变量值 NaN、undefined，全局函数如 parseInt()、parseFloat() 用来实例化对象的构\r\n造函数如 Date、Object 等，还有提供数学计算的单体内置对象如 Math 对象。\r\n```\r\n\r\n详细资料可以参考：\r\n[《标准内置对象的分类》](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects)\r\n[《JS 所有内置对象属性和方法汇总》](https://segmentfault.com/a/1190000011467723#articleHeader24)\r\n\r\n## 6. undefined 与 undeclared 的区别？\r\n\r\n```\r\n已在作用域中声明但还没有赋值的变量，是 undefined 的。相反，还没有在作用域中声明过的变量，是 undeclared 的。\r\n \r\n对于 undeclared 变量的引用，浏览器会报引用错误，如 ReferenceError: b is not defined 。但是我们可以使用 typ\r\neof 的安全防范机制来避免报错，因为对于 undeclared（或者 not defined ）变量，typeof 会返回 "undefined"。\r\n```\r\n\r\n## 7. null 和 undefined 的区别？\r\n\r\n```\r\n首先 Undefined 和 Null 都是基本数据类型，这两个基本数据类型分别都只有一个值，就是 undefined 和 null。\r\n \r\nundefined 代表的含义是未定义，null 代表的含义是空对象。一般变量声明了但还没有定义的时候会返回 undefined，null\r\n主要用于赋值给一些可能会返回对象的变量，作为初始化。\r\n \r\nundefined 在 js 中不是一个保留字，这意味着我们可以使用 undefined 来作为一个变量名，这样的做法是非常危险的，它\r\n会影响我们对 undefined 值的判断。但是我们可以通过一些方法获得安全的 undefined 值，比如说 void 0。\r\n \r\n当我们对两种类型使用 typeof 进行判断的时候，Null 类型化会返回 “object”，这是一个历史遗留的问题。当我们使用双等\r\n号对两种类型的值进行比较时会返回 true，使用三个等号时会返回 false。\r\n```\r\n\r\n详细资料可以参考：\r\n[《JavaScript 深入理解之 undefined 与 null》](http://cavszhouyou.top/JavaScript深入理解之undefined与null.html)\r\n\r\n## 8. 如何获取安全的 undefined 值？\r\n\r\n```\r\n因为 undefined 是一个标识符，所以可以被当作变量来使用和赋值，但是这样会影响 undefined 的正常判断。\r\n \r\n表达式 void ___ 没有返回值，因此返回结果是 undefined。void 并不改变表达式的结果，只是让表达式不返回值。\r\n \r\n按惯例我们用 void 0 来获得 undefined。\r\n```\r\n\r\n## 9. 说几条写 JavaScript 的基本规范？\r\n\r\n```\r\n在平常项目开发中，我们遵守一些这样的基本规范，比如说：\r\n \r\n（1）一个函数作用域中所有的变量声明应该尽量提到函数首部，用一个 var 声明，不允许出现两个连续的 var 声明，声明时\r\n    如果变量没有值，应该给该变量赋值对应类型的初始值，便于他人阅读代码时，能够一目了然的知道变量对应的类型值。\r\n \r\n（2）代码中出现地址、时间等字符串时需要使用常量代替。\r\n \r\n（3）在进行比较的时候吧，尽量使用\'===\', \'!==\'代替\'==\', \'!=\'。\r\n \r\n（4）不要在内置对象的原型上添加方法，如 Array, Date。\r\n \r\n（5）switch 语句必须带有 default 分支。\r\n \r\n（6）for 循环必须使用大括号。\r\n \r\n（7）if 语句必须使用大括号。\r\n```\r\n\r\n## 10. JavaScript 原型，原型链？ 有什么特点？\r\n\r\n```\r\n在 js 中我们是使用构造函数来新建一个对象的，每一个构造函数的内部都有一个 prototype 属性值，这个属性值是一个对\r\n象，这个对象包含了可以由该构造函数的所有实例共享的属性和方法。当我们使用构造函数新建一个对象后，在这个对象的内部\r\n将包含一个指针，这个指针指向构造函数的 prototype 属性对应的值，在 ES5 中这个指针被称为对象的原型。一般来说我们\r\n是不应该能够获取到这个值的，但是现在浏览器中都实现了 __proto__ 属性来让我们访问这个属性，但是我们最好不要使用这\r\n个属性，因为它不是规范中规定的。ES5 中新增了一个 Object.getPrototypeOf() 方法，我们可以通过这个方法来获取对\r\n象的原型。\r\n \r\n当我们访问一个对象的属性时，如果这个对象内部不存在这个属性，那么它就会去它的原型对象里找这个属性，这个原型对象又\r\n会有自己的原型，于是就这样一直找下去，也就是原型链的概念。原型链的尽头一般来说都是 Object.prototype 所以这就\r\n是我们新建的对象为什么能够使用 toString() 等方法的原因。\r\n \r\n特点：\r\n \r\nJavaScript 对象是通过引用来传递的，我们创建的每个新对象实体中并没有一份属于自己的原型副本。当我们修改原型时，与\r\n之相关的对象也会继承这一改变。\r\n```\r\n\r\n详细资料可以参考：\r\n[《JavaScript 深入理解之原型与原型链》](http://cavszhouyou.top/JavaScript深入理解之原型与原型链.html)\r\n\r\n## 11. js 获取原型的方法？\r\n\r\n- p.**proto**\r\n- p.constructor.prototype\r\n- Object.getPrototypeOf(p)\r\n\r\n## 12. 在 js 中不同进制数字的表示方式\r\n\r\n- 以 0X、0x 开头的表示为十六进制。\r\n\r\n  \r\n\r\n- 以 0、0O、0o 开头的表示为八进制。\r\n\r\n- 以 0B、0b 开头的表示为二进制格式。\r\n\r\n## 13. js 中整数的安全范围是多少？\r\n\r\n```\r\n安全整数指的是，在这个范围内的整数转化为二进制存储的时候不会出现精度丢失，能够被“安全”呈现的最大整数是 2^53 - 1，\r\n即9007199254740991，在 ES6 中被定义为 Number.MAX_SAFE_INTEGER。最小整数是-9007199254740991，在 ES6 中\r\n被定义为 Number.MIN_SAFE_INTEGER。\r\n \r\n如果某次计算的结果得到了一个超过 JavaScript 数值范围的值，那么这个值会被自动转换为特殊的 Infinity 值。如果某次\r\n计算返回了正或负的 Infinity 值，那么该值将无法参与下一次的计算。判断一个数是不是有穷的，可以使用 isFinite 函数\r\n来判断。\r\n```\r\n\r\n## 14. typeof NaN 的结果是什么？\r\n\r\n```\r\nNaN 意指“不是一个数字”（not a number），NaN 是一个“警戒值”（sentinel value，有特殊用途的常规值），用于指出\r\n数字类型中的错误情况，即“执行数学运算没有成功，这是失败后返回的结果”。\r\n \r\ntypeof NaN; // "number"\r\n \r\nNaN 是一个特殊值，它和自身不相等，是唯一一个非自反（自反，reflexive，即 x === x 不成立）的值。而 NaN != NaN\r\n为 true。\r\n```\r\n\r\n## 15. isNaN 和 Number.isNaN 函数的区别？\r\n\r\n```\r\n函数 isNaN 接收参数后，会尝试将这个参数转换为数值，任何不能被转换为数值的的值都会返回 true，因此非数字值传入也会\r\n返回 true ，会影响 NaN 的判断。\r\n \r\n函数 Number.isNaN 会首先判断传入参数是否为数字，如果是数字再继续判断是否为 NaN ，这种方法对于 NaN 的判断更为\r\n准确。\r\n```\r\n\r\n## 16. Array 构造函数只有一个参数值时的表现？\r\n\r\n```\r\nArray 构造函数只带一个数字参数的时候，该参数会被作为数组的预设长度（length），而非只充当数组中的一个元素。这样\r\n创建出来的只是一个空数组，只不过它的 length 属性被设置成了指定的值。\r\n \r\n构造函数 Array(..) 不要求必须带 new 关键字。不带时，它会被自动补上。\r\n```\r\n\r\n## 17. 其他值到字符串的转换规则？\r\n\r\n```\r\n规范的 9.8 节中定义了抽象操作 ToString ，它负责处理非字符串到字符串的强制类型转换。\r\n \r\n（1）Null 和 Undefined 类型 ，null 转换为 "null"，undefined 转换为 "undefined"，\r\n \r\n（2）Boolean 类型，true 转换为 "true"，false 转换为 "false"。\r\n \r\n（3）Number 类型的值直接转换，不过那些极小和极大的数字会使用指数形式。\r\n \r\n（4）Symbol 类型的值直接转换，但是只允许显式强制类型转换，使用隐式强制类型转换会产生错误。\r\n \r\n（3）对普通对象来说，除非自行定义 toString() 方法，否则会调用 toString()（Object.prototype.toString()）\r\n    来返回内部属性 [[Class]] 的值，如"[object Object]"。如果对象有自己的 toString() 方法，字符串化时就会\r\n    调用该方法并使用其返回值。\r\n```\r\n\r\n## 18. 其他值到数字值的转换规则？\r\n\r\n```\r\n有时我们需要将非数字值当作数字来使用，比如数学运算。为此 ES5 规范在 9.3 节定义了抽象操作 ToNumber。\r\n \r\n（1）Undefined 类型的值转换为 NaN。\r\n \r\n（2）Null 类型的值转换为 0。\r\n \r\n（3）Boolean 类型的值，true 转换为 1，false 转换为 0。\r\n \r\n（4）String 类型的值转换如同使用 Number() 函数进行转换，如果包含非数字值则转换为 NaN，空字符串为 0。\r\n \r\n（5）Symbol 类型的值不能转换为数字，会报错。\r\n \r\n（6）对象（包括数组）会首先被转换为相应的基本类型值，如果返回的是非数字的基本类型值，则再遵循以上规则将其强制转换为数字。\r\n \r\n为了将值转换为相应的基本类型值，抽象操作 ToPrimitive 会首先（通过内部操作 DefaultValue）检查该值是否有valueOf() 方法。如果有并且返回基本类型值，就使用该值进行强制类型转换。如果没有就使用 toString() 的返回值（如果存在）来进行强制类型转换。\r\n \r\n如果 valueOf() 和 toString() 均不返回基本类型值，会产生 TypeError 错误。\r\n```\r\n\r\n## 19. 其他值到布尔类型的值的转换规则？\r\n\r\n```\r\nES5 规范 9.2 节中定义了抽象操作 ToBoolean，列举了布尔强制类型转换所有可能出现的结果。\r\n \r\n以下这些是假值：\r\n• undefined\r\n• null\r\n• false\r\n• +0、-0 和 NaN\r\n• ""\r\n \r\n假值的布尔强制类型转换结果为 false。从逻辑上说，假值列表以外的都应该是真值。\r\n```\r\n\r\n## 20. {} 和 [] 的 valueOf 和 toString 的结果是什么？\r\n\r\n```\r\n{} 的 valueOf 结果为 {} ，toString 的结果为 "[object Object]"\r\n \r\n[] 的 valueOf 结果为 [] ，toString 的结果为 ""\r\n```\r\n\r\n## 21. 什么是假值对象？\r\n\r\n```\r\n浏览器在某些特定情况下，在常规 JavaScript 语法基础上自己创建了一些外来值，这些就是“假值对象”。假值对象看起来和\r\n普通对象并无二致（都有属性，等等），但将它们强制类型转换为布尔值时结果为 false 最常见的例子是 document.all，它\r\n是一个类数组对象，包含了页面上的所有元素，由 DOM（而不是 JavaScript 引擎）提供给 JavaScript 程序使用。\r\n```\r\n\r\n## 22. ~ 操作符的作用？\r\n\r\n```\r\n~ 返回 2 的补码，并且 ~ 会将数字转换为 32 位整数，因此我们可以使用 ~ 来进行取整操作。\r\n \r\n~x 大致等同于 -(x+1)。\r\n```\r\n\r\n## 23. 解析字符串中的数字和将字符串强制类型转换为数字的返回结果都是数字，它们之间的区别是什么？\r\n\r\n```\r\n解析允许字符串（如 parseInt() ）中含有非数字字符，解析按从左到右的顺序，如果遇到非数字字符就停止。而转换（如 Nu\r\nmber ()）不允许出现非数字字符，否则会失败并返回 NaN。\r\n```\r\n\r\n## 24. + 操作符什么时候用于字符串的拼接？\r\n\r\n```\r\n根据 ES5 规范 11.6.1 节，如果某个操作数是字符串或者能够通过以下步骤转换为字符串的话，+ 将进行拼接操作。如果其\r\n中一个操作数是对象（包括数组），则首先对其调用 ToPrimitive 抽象操作，该抽象操作再调用 [[DefaultValue]]，以\r\n数字作为上下文。如果不能转换为字符串，则会将其转换为数字类型来进行计算。\r\n \r\n简单来说就是，如果 + 的其中一个操作数是字符串（或者通过以上步骤最终得到字符串），则执行字符串拼接，否则执行数字\r\n加法。\r\n \r\n那么对于除了加法的运算符来说，只要其中一方是数字，那么另一方就会被转为数字。\r\n```\r\n\r\n## 25. 什么情况下会发生布尔值的隐式强制类型转换？\r\n\r\n```\r\n（1） if (..) 语句中的条件判断表达式。\r\n（2） for ( .. ; .. ; .. ) 语句中的条件判断表达式（第二个）。\r\n（3） while (..) 和 do..while(..) 循环中的条件判断表达式。\r\n（4） ? : 中的条件判断表达式。\r\n（5） 逻辑运算符 ||（逻辑或）和 &&（逻辑与）左边的操作数（作为条件判断表达式）。\r\n```\r\n\r\n## 26. || 和 && 操作符的返回值？\r\n\r\n```\r\n 和 && 首先会对第一个操作数执行条件判断，如果其不是布尔值就先进行 ToBoolean 强制类型转换，然后再执行条件\r\n判断。\r\n \r\n对于 || 来说，如果条件判断结果为 true 就返回第一个操作数的值，如果为 false 就返回第二个操作数的值。\r\n \r\n&& 则相反，如果条件判断结果为 true 就返回第二个操作数的值，如果为 false 就返回第一个操作数的值。\r\n \r\n|| 和 && 返回它们其中一个操作数的值，而非条件判断的结果\r\n```\r\n\r\n## 27. Symbol 值的强制类型转换？\r\n\r\n```\r\nES6 允许从符号到字符串的显式强制类型转换，然而隐式强制类型转换会产生错误。\r\n \r\nSymbol 值不能够被强制类型转换为数字（显式和隐式都会产生错误），但可以被强制类型转换为布尔值（显式和隐式结果\r\n都是 true ）。\r\n```\r\n\r\n## 28. 操作符的强制类型转换规则？\r\n\r\n```\r\n（1）字符串和数字之间的相等比较，将字符串转换为数字之后再进行比较。\r\n \r\n（2）其他类型和布尔类型之间的相等比较，先将布尔值转换为数字后，再应用其他规则进行比较。\r\n \r\n（3）null 和 undefined 之间的相等比较，结果为真。其他值和它们进行比较都返回假值。\r\n \r\n（4）对象和非对象之间的相等比较，对象先调用 ToPrimitive 抽象操作后，再进行比较。\r\n \r\n（5）如果一个操作值为 NaN ，则相等比较返回 false（ NaN 本身也不等于 NaN ）。\r\n \r\n（6）如果两个操作值都是对象，则比较它们是不是指向同一个对象。如果两个操作数都指向同一个对象，则相等操作符返回 true，否则，返回 false。\r\n```\r\n\r\n详细资料可以参考：\r\n[《JavaScript 字符串间的比较》](https://www.jeffjade.com/2015/08/28/2015-09-02-js-string-compare/)\r\n\r\n## 29. 如何将字符串转化为数字，例如 \'12.3b\'?\r\n\r\n```\r\n（1）使用 Number() 方法，前提是所包含的字符串不包含不合法字符。\r\n \r\n（2）使用 parseInt() 方法，parseInt() 函数可解析一个字符串，并返回一个整数。还可以设置要解析的数字的基数。当基数的值为 0，或没有设置该参数时，parseInt() 会根据 string 来判断数字的基数。\r\n \r\n（3）使用 parseFloat() 方法，该函数解析一个字符串参数并返回一个浮点数。\r\n \r\n（4）使用 + 操作符的隐式转换。\r\n```\r\n\r\n详细资料可以参考：\r\n[《详解 JS 中 Number()、parseInt() 和 parseFloat() 的区别》](https://blog.csdn.net/m0_38099607/article/details/72638678)\r\n\r\n## 30. 如何将浮点数点左边的数每三位添加一个逗号，如 12000000.11 转化为『12,000,000.11』?\r\n\r\n```\r\nfunction format(number) {\r\n  return number && number.replace(/(?!^)(?=(\\d{3})+\\.)/g, ",");\r\n}\r\n```\r\n\r\n## 31. 常用正则表达式\r\n\r\n```\r\n// （1）匹配 16 进制颜色值\r\nvar regex = /#([0-9a-fA-F]{6}|[0-9a-fA-F]{3})/g;\r\n \r\n// （2）匹配日期，如 yyyy-mm-dd 格式\r\nvar regex = /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/;\r\n \r\n// （3）匹配 qq 号\r\nvar regex = /^[1-9][0-9]{4,10}$/g;\r\n \r\n// （4）手机号码正则\r\nvar regex = /^1[34578]\\d{9}$/g;\r\n \r\n// （5）用户名正则\r\nvar regex = /^[a-zA-Z\\$][a-zA-Z0-9_\\$]{4,16}$/;\r\n```\r\n\r\n详细资料可以参考：\r\n[《前端表单验证常用的 15 个 JS 正则表达式》](http://caibaojian.com/form-regexp.html)\r\n[《JS 常用正则汇总》](https://www.jianshu.com/p/1cb5229325a7)\r\n\r\n## 32. 生成随机数的各种方法？\r\n\r\n[《JS - 生成随机数的方法汇总（不同范围、类型的随机数）》](http://www.hangge.com/blog/cache/detail_1872.html)\r\n\r\n## 33. 如何实现数组的随机排序？\r\n\r\n```\r\n// （1）使用数组 sort 方法对数组元素随机排序，让 Math.random() 出来的数与 0.5 比较，如果大于就返回 1 交换位置，如果小于就返回 -1，不交换位置。\r\n \r\nfunction randomSort(a, b) {\r\n  return Math.random() > 0.5 ? -1 : 1;\r\n}\r\n \r\n//  缺点：每个元素被派到新数组的位置不是随机的，原因是 sort() 方法是依次比较的。\r\n \r\n// （2）随机从原数组抽取一个元素，加入到新数组\r\n \r\nfunction randomSort(arr) {\r\n  var result = [];\r\n \r\n  while (arr.length > 0) {\r\n    var randomIndex = Math.floor(Math.random() * arr.length);\r\n    result.push(arr[randomIndex]);\r\n    arr.splice(randomIndex, 1);\r\n  }\r\n \r\n  return result;\r\n}\r\n \r\n// （3）随机交换数组内的元素（洗牌算法类似）\r\n \r\nfunction randomSort(arr) {\r\n  var index,\r\n    randomIndex,\r\n    temp,\r\n    len = arr.length;\r\n \r\n  for (index = 0; index < len; index++) {\r\n    randomIndex = Math.floor(Math.random() * (len - index)) + index;\r\n \r\n    temp = arr[index];\r\n    arr[index] = arr[randomIndex];\r\n    arr[randomIndex] = temp;\r\n  }\r\n \r\n  return arr;\r\n}\r\n \r\n// es6\r\nfunction randomSort(array) {\r\n  let length = array.length;\r\n \r\n  if (!Array.isArray(array) || length <= 1) return;\r\n \r\n  for (let index = 0; index < length - 1; index++) {\r\n    let randomIndex = Math.floor(Math.random() * (length - index)) + index;\r\n \r\n    [array[index], array[randomIndex]] = [array[randomIndex], array[index]];\r\n  }\r\n \r\n  return array;\r\n}\r\n```\r\n\r\n详细资料可以参考：\r\n[《Fisher and Yates 的原始版》](https://gaohaoyang.github.io/2016/10/16/shuffle-algorithm/#top)\r\n[《javascript 实现数组随机排序?》](https://www.zhihu.com/question/32303195)\r\n[《JavaScript 学习笔记：数组随机排序》](https://www.w3cplus.com/javascript/how-to-randomize-shuffle-a-javascript-array.html)\r\n\r\n## 34. javascript 创建对象的几种方式？\r\n\r\n```\r\n我们一般使用字面量的形式直接创建对象，但是这种创建方式对于创建大量相似对象的时候，会产生大量的重复代码。但 js\r\n和一般的面向对象的语言不同，在 ES6 之前它没有类的概念。但是我们可以使用函数来进行模拟，从而产生出可复用的对象\r\n创建方式，我了解到的方式有这么几种：\r\n \r\n（1）第一种是工厂模式，工厂模式的主要工作原理是用函数来封装创建对象的细节，从而通过调用函数来达到复用的目的。但是它有一个很大的问题就是创建出来的对象无法和某个类型联系起来，它只是简单的封装了复用代码，而没有建立起对象和类型间的关系。\r\n \r\n（2）第二种是构造函数模式。js 中每一个函数都可以作为构造函数，只要一个函数是通过 new 来调用的，那么我们就可以把它称为构造函数。执行构造函数首先会创建一个对象，然后将对象的原型指向构造函数的 prototype 属性，然后将执行上下文中的 this 指向这个对象，最后再执行整个函数，如果返回值不是对象，则返回新建的对象。因为 this 的值指向了新建的对象，因此我们可以使用 this 给对象赋值。构造函数模式相对于工厂模式的优点是，所创建的对象和构造函数建立起了联系，因此我们可以通过原型来识别对象的类型。但是构造函数存在一个缺点就是，造成了不必要的函数对象的创建，因为在 js 中函数也是一个对象，因此如果对象属性中如果包含函数的话，那么每次我们都会新建一个函数对象，浪费了不必要的内存空间，因为函数是所有的实例都可以通用的。\r\n \r\n（3）第三种模式是原型模式，因为每一个函数都有一个 prototype 属性，这个属性是一个对象，它包含了通过构造函数创建的所有实例都能共享的属性和方法。因此我们可以使用原型对象来添加公用属性和方法，从而实现代码的复用。这种方式相对于构造函数模式来说，解决了函数对象的复用问题。但是这种模式也存在一些问题，一个是没有办法通过传入参数来初始化值，另一个是如果存在一个引用类型如 Array 这样的值，那么所有的实例将共享一个对象，一个实例对引用类型值的改变会影响所有的实例。\r\n \r\n（4）第四种模式是组合使用构造函数模式和原型模式，这是创建自定义类型的最常见方式。因为构造函数模式和原型模式分开使用都存在一些问题，因此我们可以组合使用这两种模式，通过构造函数来初始化对象的属性，通过原型对象来实现函数方法的复用。这种方法很好的解决了两种模式单独使用时的缺点，但是有一点不足的就是，因为使用了两种不同的模式，所以对于代码的封装性不够好。\r\n \r\n（5）第五种模式是动态原型模式，这一种模式将原型方法赋值的创建过程移动到了构造函数的内部，通过对属性是否存在的判断，可以实现仅在第一次调用函数时对原型对象赋值一次的效果。这一种方式很好地对上面的混合模式进行了封装。\r\n \r\n（6）第六种模式是寄生构造函数模式，这一种模式和工厂模式的实现基本相同，我对这个模式的理解是，它主要是基于一个已有的类型，在实例化时对实例化的对象进行扩展。这样既不用修改原来的构造函数，也达到了扩展对象的目的。它的一个缺点和工厂模式一样，无法实现对象的识别。\r\n \r\n嗯我目前了解到的就是这么几种方式。\r\n```\r\n\r\n详细资料可以参考：\r\n[《JavaScript 深入理解之对象创建》](http://cavszhouyou.top/JavaScript深入理解之对象创建.html)\r\n\r\n## 35. JavaScript 继承的几种实现方式？\r\n\r\n```\r\n我了解的 js 中实现继承的几种方式有：\r\n \r\n（1）第一种是以原型链的方式来实现继承，但是这种实现方式存在的缺点是，在包含有引用类型的数据时，会被所有的实例对象所共享，容易造成修改的混乱。还有就是在创建子类型的时候不能向超类型传递参数。\r\n \r\n（2）第二种方式是使用借用构造函数的方式，这种方式是通过在子类型的函数中调用超类型的构造函数来实现的，这一种方法解决了不能向超类型传递参数的缺点，但是它存在的一个问题就是无法实现函数方法的复用，并且超类型原型定义的方法子类型也没有办法访问到。\r\n \r\n（3）第三种方式是组合继承，组合继承是将原型链和借用构造函数组合起来使用的一种方式。通过借用构造函数的方式来实现类型的属性的继承，通过将子类型的原型设置为超类型的实例来实现方法的继承。这种方式解决了上面的两种模式单独使用时的问题，但是由于我们是以超类型的实例来作为子类型的原型，所以调用了两次超类的构造函数，造成了子类型的原型中多了很多不必要的属性。\r\n \r\n（4）第四种方式是原型式继承，原型式继承的主要思路就是基于已有的对象来创建新的对象，实现的原理是，向函数中传入一个对象，然后返回一个以这个对象为原型的对象。这种继承的思路主要不是为了实现创造一种新的类型，只是对某个对象实现一种简单继承，ES5 中定义的 Object.create() 方法就是原型式继承的实现。缺点与原型链方式相同。\r\n \r\n（5）第五种方式是寄生式继承，寄生式继承的思路是创建一个用于封装继承过程的函数，通过传入一个对象，然后复制一个对象的副本，然后对象进行扩展，最后返回这个对象。这个扩展的过程就可以理解是一种继承。这种继承的优点就是对一个简单对象实现继承，如果这个对象不是我们的自定义类型时。缺点是没有办法实现函数的复用。\r\n \r\n（6）第六种方式是寄生式组合继承，组合继承的缺点就是使用超类型的实例做为子类型的原型，导致添加了不必要的原型属性。寄生式组合继承的方式是使用超类型的原型的副本来作为子类型的原型，这样就避免了创建不必要的属性。\r\n```\r\n\r\n详细资料可以参考：\r\n[《JavaScript 深入理解之继承》](http://cavszhouyou.top/JavaScript深入理解之继承.html)\r\n\r\n## 36. 寄生式组合继承的实现？\r\n\r\n```\r\nfunction Person(name) {\r\n  this.name = name;\r\n}\r\n \r\nPerson.prototype.sayName = function() {\r\n  console.log("My name is " + this.name + ".");\r\n};\r\n \r\nfunction Student(name, grade) {\r\n  Person.call(this, name);\r\n  this.grade = grade;\r\n}\r\n \r\nStudent.prototype = Object.create(Person.prototype);\r\nStudent.prototype.constructor = Student;\r\n \r\nStudent.prototype.sayMyGrade = function() {\r\n  console.log("My grade is " + this.grade + ".");\r\n};\r\n```\r\n\r\n## 37. Javascript 的作用域链？\r\n\r\n```\r\n作用域链的作用是保证对执行环境有权访问的所有变量和函数的有序访问，通过作用域链，我们可以访问到外层环境的变量和\r\n函数。\r\n \r\n作用域链的本质上是一个指向变量对象的指针列表。变量对象是一个包含了执行环境中所有变量和函数的对象。作用域链的前\r\n端始终都是当前执行上下文的变量对象。全局执行上下文的变量对象（也就是全局对象）始终是作用域链的最后一个对象。\r\n \r\n当我们查找一个变量时，如果当前执行环境中没有找到，我们可以沿着作用域链向后查找。\r\n \r\n作用域链的创建过程跟执行上下文的建立有关....\r\n```\r\n\r\n详细资料可以参考：\r\n[《JavaScript 深入理解之作用域链》](http://cavszhouyou.top/JavaScript深入理解之作用域链.html)\r\n\r\n## 38. 谈谈 This 对象的理解。\r\n\r\n```\r\nthis 是执行上下文中的一个属性，它指向最后一次调用这个方法的对象。在实际开发中，this 的指向可以通过四种调用模\r\n式来判断。\r\n```\r\n\r\n- 1.第一种是函数调用模式，当一个函数不是一个对象的属性时，直接作为函数来调用时，this 指向全局对象。\r\n\r\n  \r\n\r\n- 2.第二种是方法调用模式，如果一个函数作为一个对象的方法来调用时，this 指向这个对象。\r\n\r\n- 3.第三种是构造器调用模式，如果一个函数用 new 调用时，函数执行前会新创建一个对象，this 指向这个新创建的对象。\r\n\r\n- 4.第四种是 apply 、 call 和 bind 调用模式，这三个方法都可以显示的指定调用函数的 this 指向。其中 apply 方法接收两个参数：一个是 this 绑定的对象，一个是参数数组。call 方法接收的参数，第一个是 this 绑定的对象，后面的其余参数是传入函数执行的参数。也就是说，在使用 call() 方法时，传递给函数的参数必须逐个列举出来。bind 方法通过传入一个对象，返回一个 this 绑定了传入对象的新函数。这个函数的 this 指向除了使用 new 时会被改变，其他情况下都不会改变。\r\n\r\n```\r\n这四种方式，使用构造器调用模式的优先级最高，然后是 apply 、 call 和 bind 调用模式，然后是方法调用模式，然后\r\n是函数调用模式。\r\n```\r\n\r\n[《JavaScript 深入理解之 this 详解》](http://cavszhouyou.top/JavaScript深入理解之this详解.html)\r\n\r\n## 39. eval 是做什么的？\r\n\r\n```\r\n它的功能是把对应的字符串解析成 JS 代码并运行。\r\n \r\n应该避免使用 eval，不安全，非常耗性能（2次，一次解析成 js 语句，一次执行）。\r\n```\r\n\r\n详细资料可以参考：\r\n[《eval()》](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/eval)\r\n\r\n## 40. 什么是 DOM 和 BOM？\r\n\r\n```\r\nDOM 指的是文档对象模型，它指的是把文档当做一个对象来对待，这个对象主要定义了处理网页内容的方法和接口。\r\n \r\nBOM 指的是浏览器对象模型，它指的是把浏览器当做一个对象来对待，这个对象主要定义了与浏览器进行交互的法和接口。BOM\r\n的核心是 window，而 window 对象具有双重角色，它既是通过 js 访问浏览器窗口的一个接口，又是一个 Global（全局）\r\n对象。这意味着在网页中定义的任何对象，变量和函数，都作为全局对象的一个属性或者方法存在。window 对象含有 locati\r\non 对象、navigator 对象、screen 对象等子对象，并且 DOM 的最根本的对象 document 对象也是 BOM 的 window 对\r\n象的子对象。\r\n```\r\n\r\n详细资料可以参考：\r\n[《DOM, DOCUMENT, BOM, WINDOW 有什么区别?》](https://www.zhihu.com/question/33453164)\r\n[《Window 对象》](http://www.w3school.com.cn/jsref/dom_obj_window.asp)\r\n[《DOM 与 BOM 分别是什么，有何关联？》](https://www.zhihu.com/question/20724662)\r\n[《JavaScript 学习总结（三）BOM 和 DOM 详解》](https://segmentfault.com/a/1190000000654274#articleHeader21)\r\n\r\n## 41. 写一个通用的事件侦听器函数。\r\n\r\n```\r\nconst EventUtils = {\r\n  // 视能力分别使用dom0||dom2||IE方式 来绑定事件\r\n  // 添加事件\r\n  addEvent: function(element, type, handler) {\r\n    if (element.addEventListener) {\r\n      element.addEventListener(type, handler, false);\r\n    } else if (element.attachEvent) {\r\n      element.attachEvent("on" + type, handler);\r\n    } else {\r\n      element["on" + type] = handler;\r\n    }\r\n  },\r\n \r\n  // 移除事件\r\n  removeEvent: function(element, type, handler) {\r\n    if (element.removeEventListener) {\r\n      element.removeEventListener(type, handler, false);\r\n    } else if (element.detachEvent) {\r\n      element.detachEvent("on" + type, handler);\r\n    } else {\r\n      element["on" + type] = null;\r\n    }\r\n  },\r\n \r\n  // 获取事件目标\r\n  getTarget: function(event) {\r\n    return event.target || event.srcElement;\r\n  },\r\n \r\n  // 获取 event 对象的引用，取到事件的所有信息，确保随时能使用 event\r\n  getEvent: function(event) {\r\n    return event || window.event;\r\n  },\r\n \r\n  // 阻止事件（主要是事件冒泡，因为 IE 不支持事件捕获）\r\n  stopPropagation: function(event) {\r\n    if (event.stopPropagation) {\r\n      event.stopPropagation();\r\n    } else {\r\n      event.cancelBubble = true;\r\n    }\r\n  },\r\n \r\n  // 取消事件的默认行为\r\n  preventDefault: function(event) {\r\n    if (event.preventDefault) {\r\n      event.preventDefault();\r\n    } else {\r\n      event.returnValue = false;\r\n    }\r\n  }\r\n};\r\n```\r\n\r\n详细资料可以参考：\r\n[《JS 事件模型》](https://segmentfault.com/a/1190000006934031#articleHeader6)\r\n\r\n## 42. 事件是什么？IE 与火狐的事件机制有什么区别？ 如何阻止冒泡？\r\n\r\n- 1.事件是用户操作网页时发生的交互动作，比如 click/move， 事件除了用户触发的动作外，还可以是文档加载，窗口滚动和大小调整。事件被封装成一个 event 对象，包含了该事件发生时的所有相关信息（ event 的属性）以及可以对事件进行的操作（ event 的方法）。\r\n\r\n  \r\n\r\n- 2.事件处理机制：IE 支持事件冒泡、Firefox 同时支持两种事件模型，也就是：事件冒泡和事件捕获。\r\n\r\n- 3.event.stopPropagation() 或者 ie 下的方法 event.cancelBubble = true;\r\n\r\n详细资料可以参考：\r\n[《Javascript 事件模型系列（一）事件及事件的三种模型》](https://www.cnblogs.com/lvdabao/p/3265870.html)\r\n[《Javascript 事件模型：事件捕获和事件冒泡》](https://blog.csdn.net/wuseyukui/article/details/13771493)\r\n\r\n## 43. 三种事件模型是什么？\r\n\r\n```\r\n事件是用户操作网页时发生的交互动作或者网页本身的一些操作，现代浏览器一共有三种事件模型。\r\n \r\n第一种事件模型是最早的 DOM0 级模型，这种模型不会传播，所以没有事件流的概念，但是现在有的浏览器支持以冒泡的方式实\r\n现，它可以在网页中直接定义监听函数，也可以通过 js 属性来指定监听函数。这种方式是所有浏览器都兼容的。\r\n \r\n第二种事件模型是 IE 事件模型，在该事件模型中，一次事件共有两个过程，事件处理阶段，和事件冒泡阶段。事件处理阶段会首先执行目标元素绑定的监听事件。然后是事件冒泡阶段，冒泡指的是事件从目标元素冒泡到 document，依次检查经过的节点是否绑定了事件监听函数，如果有则执行。这种模型通过 attachEvent 来添加监听函数，可以添加多个监听函数，会按顺序依次执行。\r\n \r\n第三种是 DOM2 级事件模型，在该事件模型中，一次事件共有三个过程，第一个过程是事件捕获阶段。捕获指的是事件从 document 一直向下传播到目标元素，依次检查经过的节点是否绑定了事件监听函数，如果有则执行。后面两个阶段和 IE 事件模型的两个阶段相同。这种事件模型，事件绑定的函数是 addEventListener，其中第三个参数可以指定事件是否在捕获阶段执行。\r\n```\r\n\r\n详细资料可以参考：\r\n[《一个 DOM 元素绑定多个事件时，先执行冒泡还是捕获》](https://blog.csdn.net/u013217071/article/details/77613706)\r\n\r\n## 44. 事件委托是什么？\r\n\r\n```\r\n事件委托本质上是利用了浏览器事件冒泡的机制。因为事件在冒泡过程中会上传到父节点，并且父节点可以通过事件对象获取到\r\n目标节点，因此可以把子节点的监听函数定义在父节点上，由父节点的监听函数统一处理多个子元素的事件，这种方式称为事件代理。\r\n \r\n使用事件代理我们可以不必要为每一个子元素都绑定一个监听事件，这样减少了内存上的消耗。并且使用事件代理我们还可以实现事件的动态绑定，比如说新增了一个子节点，我们并不需要单独地为它添加一个监听事件，它所发生的事件会交给父元素中的监听函数来处理。\r\n```\r\n\r\n详细资料可以参考：\r\n[《JavaScript 事件委托详解》](https://zhuanlan.zhihu.com/p/26536815)\r\n\r\n## 45. ["1", "2", "3"].map(parseInt) 答案是多少？\r\n\r\n```\r\nparseInt() 函数能解析一个字符串，并返回一个整数，需要两个参数 (val, radix)，其中 radix 表示要解析的数字的基数。（该值介于 2 ~ 36 之间，并且字符串中的数字不能大于 radix 才能正确返回数字结果值）。\r\n \r\n \r\n此处 map 传了 3 个参数 (element, index, array)，默认第三个参数被忽略掉，因此三次传入的参数分别为 "1-0", "2-1", "3-2"\r\n \r\n因为字符串的值不能大于基数，因此后面两次调用均失败，返回 NaN ，第一次基数为 0 ，按十进制解析返回 1。\r\n```\r\n\r\n详细资料可以参考：\r\n[《为什么 ["1", "2", "3"\\].map(parseInt) 返回 [1,NaN,NaN]？》](https://blog.csdn.net/justjavac/article/details/19473199)\r\n\r\n## 46. 什么是闭包，为什么要用它？\r\n\r\n```\r\n闭包是指有权访问另一个函数作用域中变量的函数，创建闭包的最常见的方式就是在一个函数内创建另一个函数，创建的函数可以\r\n访问到当前函数的局部变量。\r\n \r\n闭包有两个常用的用途。\r\n \r\n闭包的第一个用途是使我们在函数外部能够访问到函数内部的变量。通过使用闭包，我们可以通过在外部调用闭包函数，从而在外\r\n部访问到函数内部的变量，可以使用这种方法来创建私有变量。\r\n \r\n函数的另一个用途是使已经运行结束的函数上下文中的变量对象继续留在内存中，因为闭包函数保留了这个变量对象的引用，所以\r\n这个变量对象不会被回收。\r\n \r\n其实闭包的本质就是作用域链的一个特殊的应用，只要了解了作用域链的创建过程，就能够理解闭包的实现原理。\r\n```\r\n\r\n详细资料可以参考：\r\n[《JavaScript 深入理解之闭包》](http://cavszhouyou.top/JavaScript深入理解之闭包.html)\r\n\r\n## 47. javascript 代码中的 "use strict"; 是什么意思 ? 使用它区别是什么？\r\n\r\n相关知识点：\r\n\r\n```\r\nuse strict 是一种 ECMAscript5 添加的（严格）运行模式，这种模式使得 Javascript 在更严格的条件下运行。\r\n \r\n设立"严格模式"的目的，主要有以下几个：\r\n```\r\n\r\n- 消除 Javascript 语法的一些不合理、不严谨之处，减少一些怪异行为;\r\n- 消除代码运行的一些不安全之处，保证代码运行的安全；\r\n- 提高编译器效率，增加运行速度；\r\n- 为未来新版本的 Javascript 做好铺垫。\r\n\r\n区别：\r\n\r\n- 1.禁止使用 with 语句。\r\n- 2.禁止 this 关键字指向全局对象。\r\n- 3.对象不能有重名的属性。\r\n\r\n回答：\r\n\r\n```\r\nuse strict 指的是严格运行模式，在这种模式对 js 的使用添加了一些限制。比如说禁止 this 指向全局对象，还有禁止使\r\n用 with 语句等。设立严格模式的目的，主要是为了消除代码使用中的一些不安全的使用方式，也是为了消除 js 语法本身的一\r\n些不合理的地方，以此来减少一些运行时的怪异的行为。同时使用严格运行模式也能够提高编译的效率，从而提高代码的运行速度。\r\n我认为严格模式代表了 js 一种更合理、更安全、更严谨的发展方向。\r\n```\r\n\r\n详细资料可以参考：\r\n[《Javascript 严格模式详解》](http://www.ruanyifeng.com/blog/2013/01/javascript_strict_mode.html)\r\n\r\n## 48. 如何判断一个对象是否属于某个类？\r\n\r\n```\r\n第一种方式是使用 instanceof 运算符来判断构造函数的 prototype 属性是否出现在对象的原型链中的任何位置。\r\n \r\n第二种方式可以通过对象的 constructor 属性来判断，对象的 constructor 属性指向该对象的构造函数，但是这种方式不是很安全，因为 constructor 属性可以被改写。\r\n \r\n第三种方式，如果需要判断的是某个内置的引用类型的话，可以使用 Object.prototype.toString() 方法来打印对象的\r\n[[Class]] 属性来进行判断。\r\n```\r\n\r\n详细资料可以参考：\r\n[《js 判断一个对象是否属于某一类》](https://blog.csdn.net/haitunmin/article/details/78418522)\r\n\r\n## 49. instanceof 的作用？\r\n\r\n```\r\n// instanceof 运算符用于判断构造函数的 prototype 属性是否出现在对象的原型链中的任何位置。\r\n// 实现：\r\n \r\nfunction myInstanceof(left, right) {\r\n  let proto = Object.getPrototypeOf(left), // 获取对象的原型\r\n    prototype = right.prototype; // 获取构造函数的 prototype 对象\r\n \r\n  // 判断构造函数的 prototype 对象是否在对象的原型链上\r\n  while (true) {\r\n    if (!proto) return false;\r\n    if (proto === prototype) return true;\r\n \r\n    proto = Object.getPrototypeOf(proto);\r\n  }\r\n}\r\n```\r\n\r\n详细资料可以参考：\r\n[《instanceof》](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/instanceof)\r\n\r\n## 50. new 操作符具体干了什么呢？如何实现？\r\n\r\n```\r\n// （1）首先创建了一个新的空对象\r\n// （2）设置原型，将对象的原型设置为函数的 prototype 对象。\r\n// （3）让函数的 this 指向这个对象，执行构造函数的代码（为这个新对象添加属性）\r\n// （4）判断函数的返回值类型，如果是值类型，返回创建的对象。如果是引用类型，就返回这个引用类型的对象。\r\n \r\n// 实现:\r\n \r\nfunction objectFactory() {\r\n  let newObject = null,\r\n    constructor = Array.prototype.shift.call(arguments),\r\n    result = null;\r\n \r\n  // 参数判断\r\n  if (typeof constructor !== "function") {\r\n    console.error("type error");\r\n    return;\r\n  }\r\n \r\n  // 新建一个空对象，对象的原型为构造函数的 prototype 对象\r\n  newObject = Object.create(constructor.prototype);\r\n \r\n  // 将 this 指向新建对象，并执行函数\r\n  result = constructor.apply(newObject, arguments);\r\n \r\n  // 判断返回对象\r\n  let flag =\r\n    result && (typeof result === "object" || typeof result === "function");\r\n \r\n  // 判断返回结果\r\n  return flag ? result : newObject;\r\n}\r\n \r\n// 使用方法\r\n// objectFactory(构造函数, 初始化参数);\r\n```\r\n\r\n详细资料可以参考：\r\n[《new 操作符具体干了什么？》](https://segmentfault.com/a/1190000008576048)\r\n[《JavaScript 深入之 new 的模拟实现》](https://github.com/mqyqingfeng/Blog/issues/13)\r\n\r\n## 51. Javascript 中，有一个函数，执行时对象查找时，永远不会去查找原型，这个函数是？\r\n\r\n```\r\nhasOwnProperty\r\n \r\n所有继承了 Object 的对象都会继承到 hasOwnProperty 方法。这个方法可以用来检测一个对象是否含有特定的自身属性，和\r\nin 运算符不同，该方法会忽略掉那些从原型链上继承到的属性。\r\n```\r\n\r\n详细资料可以参考：\r\n[《Object.prototype.hasOwnProperty()》](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty)\r\n\r\n## 52. 对于 JSON 的了解？\r\n\r\n相关知识点：\r\n\r\n```\r\nJSON 是一种数据交换格式，基于文本，优于轻量，用于交换数据。\r\n \r\nJSON 可以表示数字、布尔值、字符串、null、数组（值的有序序列），以及由这些值（或数组、对象）所组成的对象（字符串与\r\n值的映射）。\r\n \r\nJSON 使用 JavaScript 语法，但是 JSON 格式仅仅是一个文本。文本可以被任何编程语言读取及作为数据格式传递。\r\n```\r\n\r\n回答：\r\n\r\n```\r\nJSON 是一种基于文本的轻量级的数据交换格式。它可以被任何的编程语言读取和作为数据格式来传递。\r\n \r\n在项目开发中，我们使用 JSON 作为前后端数据交换的方式。在前端我们通过将一个符合 JSON 格式的数据结构序列化为 JSON 字符串，然后将它传递到后端，后端通过 JSON 格式的字符串解析后生成对应的数据结构，以此来实现前后端数据的一个传递。\r\n \r\n因为 JSON 的语法是基于 js 的，因此很容易将 JSON 和 js 中的对象弄混，但是我们应该注意的是 JSON 和 js 中的对象不是一回事，JSON 中对象格式更加严格，比如说在 JSON 中属性值不能为函数，不能出现 NaN 这样的属性值等，因此大多数的 js 对象是不符合 JSON 对象的格式的。\r\n \r\n在 js 中提供了两个函数来实现 js 数据结构和 JSON 格式的转换处理，一个是 JSON.stringify 函数，通过传入一个符合 JSON 格式的数据结构，将其转换为一个 JSON 字符串。如果传入的数据结构不符合 JSON 格式，那么在序列化的时候会对这些值进行对应的特殊处理，使其符合规范。在前端向后端发送数据时，我们可以调用这个函数将数据对象转化为 JSON 格式的字符串。\r\n \r\n另一个函数 JSON.parse() 函数，这个函数用来将 JSON 格式的字符串转换为一个 js 数据结构，如果传入的字符串不是标准的 JSON 格式的字符串的话，将会抛出错误。当我们从后端接收到 JSON 格式的字符串时，我们可以通过这个方法来将其解析为一个 js 数据结构，以此来进行数据的访问。\r\n```\r\n\r\n详细资料可以参考：\r\n[《深入了解 JavaScript 中的 JSON 》](https://my.oschina.net/u/3284240/blog/874368)\r\n\r\n## 53. [].forEach.call(\\$\\$("*"),function(a){a.style.outline="1px solid #"+(~~(Math.random()~~*(1<<24))).toString(16)}) 能解释一下这段代码的意思吗？\r\n\r\n```\r\n（1）选取页面所有 DOM 元素。在浏览器的控制台中可以使用$$()方法来获取页面中相应的元素，这是现代浏览器提供的一个命令行 API 相当于 document.querySelectorAll 方法。\r\n \r\n（2）循环遍历 DOM 元素\r\n \r\n（3）给元素添加 outline 。由于渲染的 outline 是不在 CSS 盒模型中的，所以为元素添加 outline 并不会影响元素的大小和页面的布局。\r\n \r\n（4）生成随机颜色函数。Math.random()*(1<<24) 可以得到 0~2^24 - 1 之间的随机数，因为得到的是一个浮点数，但我们只需要整数部分，使用取反操作符 ~ 连续两次取反获得整数部分，然后再用 toString(16) 的方式，转换为一个十六进制的字符串。\r\n```\r\n\r\n详细资料可以参考：\r\n[《通过一行代码学 JavaScript》](https://2008winstar.iteye.com/blog/2128290)\r\n\r\n## 54. js 延迟加载的方式有哪些？\r\n\r\n相关知识点：\r\n\r\n```\r\njs 延迟加载，也就是等页面加载完成之后再加载 JavaScript 文件。 js 延迟加载有助于提高页面加载速度。\r\n```\r\n\r\n一般有以下几种方式：\r\n\r\n- defer 属性\r\n- async 属性\r\n- 动态创建 DOM 方式\r\n- 使用 setTimeout 延迟方法\r\n- 让 JS 最后加载\r\n\r\n回答：\r\n\r\n```\r\njs 的加载、解析和执行会阻塞页面的渲染过程，因此我们希望 js 脚本能够尽可能的延迟加载，提高页面的渲染速度。\r\n \r\n我了解到的几种方式是：\r\n \r\n第一种方式是我们一般采用的是将 js 脚本放在文档的底部，来使 js 脚本尽可能的在最后来加载执行。\r\n \r\n第二种方式是给 js 脚本添加 defer 属性，这个属性会让脚本的加载与文档的解析同步解析，然后在文档解析完成后再执行这个脚本文件，这样的话就能使页面的渲染不被阻塞。多个设置了 defer 属性的脚本按规范来说最后是顺序执行的，但是在一些浏览器中可能不是这样。\r\n \r\n第三种方式是给 js 脚本添加 async 属性，这个属性会使脚本异步加载，不会阻塞页面的解析过程，但是当脚本加载完成后立即执行 js 脚本，这个时候如果文档没有解析完成的话同样会阻塞。多个 async 属性的脚本的执行顺序是不可预测的，一般不会按照代码的顺序依次执行。\r\n \r\n第四种方式是动态创建 DOM 标签的方式，我们可以对文档的加载事件进行监听，当文档加载完成后再动态的创建 script 标签来引入 js 脚本。\r\n```\r\n\r\n详细资料可以参考：\r\n[《JS 延迟加载的几种方式》](https://blog.csdn.net/meijory/article/details/76389762)\r\n[《HTML 5  async 属性》](http://www.w3school.com.cn/html5/att_script_async.asp)\r\n\r\n## 55. Ajax 是什么? 如何创建一个 Ajax？\r\n\r\n相关知识点：\r\n\r\n2005 年 2 月，AJAX 这个词第一次正式提出，它是 Asynchronous JavaScript and XML 的缩写，指的是通过 JavaScript 的\r\n异步通信，从服务器获取 XML 文档从中提取数据，再更新当前网页的对应部分，而不用刷新整个网页。\r\n\r\n具体来说，AJAX 包括以下几个步骤。\r\n\r\n- 1.创建 XMLHttpRequest 对象，也就是创建一个异步调用对象\r\n- 2.创建一个新的 HTTP 请求，并指定该 HTTP 请求的方法、URL 及验证信息\r\n- 3.设置响应 HTTP 请求状态变化的函数\r\n- 4.发送 HTTP 请求\r\n- 5.获取异步调用返回的数据\r\n- 6.使用 JavaScript 和 DOM 实现局部刷新\r\n\r\n一般实现：\r\n\r\n```\r\nconst SERVER_URL = "/server";\r\n \r\nlet xhr = new XMLHttpRequest();\r\n \r\n// 创建 Http 请求\r\nxhr.open("GET", SERVER_URL, true);\r\n \r\n// 设置状态监听函数\r\nxhr.onreadystatechange = function() {\r\n  if (this.readyState !== 4) return;\r\n \r\n  // 当请求成功时\r\n  if (this.status === 200) {\r\n    handle(this.response);\r\n  } else {\r\n    console.error(this.statusText);\r\n  }\r\n};\r\n \r\n// 设置请求失败时的监听函数\r\nxhr.onerror = function() {\r\n  console.error(this.statusText);\r\n};\r\n \r\n// 设置请求头信息\r\nxhr.responseType = "json";\r\nxhr.setRequestHeader("Accept", "application/json");\r\n \r\n// 发送 Http 请求\r\nxhr.send(null);\r\n \r\n// promise 封装实现：\r\n \r\nfunction getJSON(url) {\r\n  // 创建一个 promise 对象\r\n  let promise = new Promise(function(resolve, reject) {\r\n    let xhr = new XMLHttpRequest();\r\n \r\n    // 新建一个 http 请求\r\n    xhr.open("GET", url, true);\r\n \r\n    // 设置状态的监听函数\r\n    xhr.onreadystatechange = function() {\r\n      if (this.readyState !== 4) return;\r\n \r\n      // 当请求成功或失败时，改变 promise 的状态\r\n      if (this.status === 200) {\r\n        resolve(this.response);\r\n      } else {\r\n        reject(new Error(this.statusText));\r\n      }\r\n    };\r\n \r\n    // 设置错误监听函数\r\n    xhr.onerror = function() {\r\n      reject(new Error(this.statusText));\r\n    };\r\n \r\n    // 设置响应的数据类型\r\n    xhr.responseType = "json";\r\n \r\n    // 设置请求头信息\r\n    xhr.setRequestHeader("Accept", "application/json");\r\n \r\n    // 发送 http 请求\r\n    xhr.send(null);\r\n  });\r\n \r\n  return promise;\r\n}\r\n```\r\n\r\n回答：\r\n\r\n```\r\n我对 ajax 的理解是，它是一种异步通信的方法，通过直接由 js 脚本向服务器发起 http 通信，然后根据服务器返回的数据，更新网页的相应部分，而不用刷新整个页面的一种方法。\r\n \r\n创建一个 ajax 有这样几个步骤\r\n \r\n首先是创建一个 XMLHttpRequest 对象。\r\n \r\n然后在这个对象上使用 open 方法创建一个 http 请求，open 方法所需要的参数是请求的方法、请求的地址、是否异步和用户的认证信息。\r\n \r\n在发起请求前，我们可以为这个对象添加一些信息和监听函数。比如说我们可以通过 setRequestHeader 方法来为请求添加头信息。我们还可以为这个对象添加一个状态监听函数。一个 XMLHttpRequest 对象一共有 5 个状态，当它的状态变化时会触发onreadystatechange 事件，我们可以通过设置监听函数，来处理请求成功后的结果。当对象的 readyState 变为 4 的时候，代表服务器返回的数据接收完成，这个时候我们可以通过判断请求的状态，如果状态是 2xx 或者 304 的话则代表返回正常。这个时候我们就可以通过 response 中的数据来对页面进行更新了。\r\n \r\n当对象的属性和监听函数设置完成后，最后我们调用 sent 方法来向服务器发起请求，可以传入参数作为发送的数据体。\r\n```\r\n\r\n详细资料可以参考：\r\n[《XMLHttpRequest 对象》](https://wangdoc.com/javascript/bom/xmlhttprequest.html)\r\n[《从 ajax 到 fetch、axios》](https://juejin.im/post/5acde23c5188255cb32e7e76)\r\n[《Fetch 入门》](https://juejin.im/post/5c160937f265da61180199b2)\r\n[《传统 Ajax 已死，Fetch 永生》](https://segmentfault.com/a/1190000003810652)\r\n\r\n## 56. 谈一谈浏览器的缓存机制？\r\n\r\n```\r\n浏览器的缓存机制指的是通过在一段时间内保留已接收到的 web 资源的一个副本，如果在资源的有效时间内，发起了对这个资源的再一次请求，那么浏览器会直接使用缓存的副本，而不是向服务器发起请求。使用 web 缓存可以有效地提高页面的打开速度，减少不必要的网络带宽的消耗。\r\n \r\nweb 资源的缓存策略一般由服务器来指定，可以分为两种，分别是强缓存策略和协商缓存策略。\r\n \r\n使用强缓存策略时，如果缓存资源有效，则直接使用缓存资源，不必再向服务器发起请求。强缓存策略可以通过两种方式来设置，分别是 http 头信息中的 Expires 属性和 Cache-Control 属性。\r\n \r\n服务器通过在响应头中添加 Expires 属性，来指定资源的过期时间。在过期时间以内，该资源可以被缓存使用，不必再向服务器发送请求。这个时间是一个绝对时间，它是服务器的时间，因此可能存在这样的问题，就是客户端的时间和服务器端的时间不一致，或者用户可以对客户端时间进行修改的情况，这样就可能会影响缓存命中的结果。\r\n \r\nExpires 是 http1.0 中的方式，因为它的一些缺点，在 http 1.1 中提出了一个新的头部属性就是 Cache-Control 属性，\r\n它提供了对资源的缓存的更精确的控制。它有很多不同的值，常用的比如我们可以通过设置 max-age 来指定资源能够被缓存的时间\r\n的大小，这是一个相对的时间，它会根据这个时间的大小和资源第一次请求时的时间来计算出资源过期的时间，因此相对于 Expires\r\n来说，这种方式更加有效一些。常用的还有比如 private ，用来规定资源只能被客户端缓存，不能够代理服务器所缓存。还有如 n\r\no-store ，用来指定资源不能够被缓存，no-cache 代表该资源能够被缓存，但是立即失效，每次都需要向服务器发起请求。\r\n \r\n一般来说只需要设置其中一种方式就可以实现强缓存策略，当两种方式一起使用时，Cache-Control 的优先级要高于 Expires 。\r\n \r\n使用协商缓存策略时，会先向服务器发送一个请求，如果资源没有发生修改，则返回一个 304 状态，让浏览器使用本地的缓存副本。\r\n如果资源发生了修改，则返回修改后的资源。协商缓存也可以通过两种方式来设置，分别是 http 头信息中的 Etag 和 Last-Modified 属性。\r\n \r\n服务器通过在响应头中添加 Last-Modified 属性来指出资源最后一次修改的时间，当浏览器下一次发起请求时，会在请求头中添加一个 If-Modified-Since 的属性，属性值为上一次资源返回时的 Last-Modified 的值。当请求发送到服务器后服务器会通过这个属性来和资源的最后一次的修改时间来进行比较，以此来判断资源是否做了修改。如果资源没有修改，那么返回 304 状态，让客户端使用本地的缓存。如果资源已经被修改了，则返回修改后的资源。使用这种方法有一个缺点，就是 Last-Modified 标注的最后修改时间只能精确到秒级，如果某些文件在1秒钟以内，被修改多次的话，那么文件已将改变了但是 Last-Modified 却没有改变，\r\n这样会造成缓存命中的不准确。\r\n \r\n因为 Last-Modified 的这种可能发生的不准确性，http 中提供了另外一种方式，那就是 Etag 属性。服务器在返回资源的时候，在头信息中添加了 Etag 属性，这个属性是资源生成的唯一标识符，当资源发生改变的时候，这个值也会发生改变。在下一次资源请求时，浏览器会在请求头中添加一个 If-None-Match 属性，这个属性的值就是上次返回的资源的 Etag 的值。服务接收到请求后会根据这个值来和资源当前的 Etag 的值来进行比较，以此来判断资源是否发生改变，是否需要返回资源。通过这种方式，比 Last-Modified 的方式更加精确。\r\n \r\n当 Last-Modified 和 Etag 属性同时出现的时候，Etag 的优先级更高。使用协商缓存的时候，服务器需要考虑负载平衡的问题，因此多个服务器上资源的 Last-Modified 应该保持一致，因为每个服务器上 Etag 的值都不一样，因此在考虑负载平衡时，最好不要设置 Etag 属性。\r\n \r\n强缓存策略和协商缓存策略在缓存命中时都会直接使用本地的缓存副本，区别只在于协商缓存会向服务器发送一次请求。它们缓存不命中时，都会向服务器发送请求来获取资源。在实际的缓存机制中，强缓存策略和协商缓存策略是一起合作使用的。浏览器首先会根据请求的信息判断，强缓存是否命中，如果命中则直接使用资源。如果不命中则根据头信息向服务器发起请求，使用协商缓存，如果协商缓存命中的话，则服务器不返回资源，浏览器直接使用本地资源的副本，如果协商缓存不命中，则浏览器返回最新的资源给浏览器。\r\n```\r\n\r\n详细资料可以参考：\r\n[《浅谈浏览器缓存》](https://segmentfault.com/a/1190000012573337)\r\n[《前端优化：浏览器缓存技术介绍》](https://juejin.im/post/5b9346dcf265da0aac6fbe57#heading-3)\r\n[《请求头中的 Cache-Control》](https://www.web-tinker.com/article/21221.html)\r\n[《Cache-Control 字段值详解》](https://juejin.im/post/5c2d6c9ae51d450cf4195a08)\r\n\r\n## 57. Ajax 解决浏览器缓存问题？\r\n\r\n- 1.在 ajax 发送请求前加上 anyAjaxObj.setRequestHeader("If-Modified-Since","0")。\r\n\r\n  \r\n\r\n- 2.在 ajax 发送请求前加上 anyAjaxObj.setRequestHeader("Cache-Control","no-cache")。\r\n\r\n- 3.在 URL 后面加上一个随机数： "fresh=" + Math.random();。\r\n\r\n- 4.在 URL 后面加上时间戳："nowtime=" + new Date().getTime();。\r\n\r\n- 5.如果是使用 jQuery，直接这样就可以了\\$.ajaxSetup({cache:false})。这样页面的所有 ajax 都会执行这条语句就是不需要保存缓存记录。\r\n\r\n详细资料可以参考：\r\n[《Ajax 中浏览器的缓存问题解决方法》](https://www.cnblogs.com/cwzqianduan/p/8632009.html)\r\n[《浅谈浏览器缓存》](https://segmentfault.com/a/1190000012573337)\r\n\r\n## 58. 同步和异步的区别？\r\n\r\n相关知识点：\r\n\r\n```\r\n同步，可以理解为在执行完一个函数或方法之后，一直等待系统返回值或消息，这时程序是处于阻塞的，只有接收到返回的值或消息后才往下执行其他的命令。  \r\n \r\n异步，执行完函数或方法后，不必阻塞性地等待返回值或消息，只需要向系统委托一个异步过程，那么当系统接收到返回值或消息时，系统会自动触发委托的异步过程，从而完成一个完整的流程。 \r\n```\r\n\r\n回答：\r\n\r\n```\r\n同步指的是当一个进程在执行某个请求的时候，如果这个请求需要等待一段时间才能返回，那么这个进程会一直等待下去，直到消息返\r\n回为止再继续向下执行。\r\n \r\n异步指的是当一个进程在执行某个请求的时候，如果这个请求需要等待一段时间才能返回，这个时候进程会继续往下执行，不会阻塞等\r\n待消息的返回，当消息返回时系统再通知进程进行处理。\r\n```\r\n\r\n详细资料可以参考：\r\n[《同步和异步的区别》](https://blog.csdn.net/tennysonsky/article/details/45111623)\r\n\r\n## 59. 什么是浏览器的同源政策？\r\n\r\n```\r\n我对浏览器的同源政策的理解是，一个域下的 js 脚本在未经允许的情况下，不能够访问另一个域的内容。这里的同源的指的是两个\r\n域的协议、域名、端口号必须相同，否则则不属于同一个域。\r\n \r\n同源政策主要限制了三个方面\r\n \r\n第一个是当前域下的 js 脚本不能够访问其他域下的 cookie、localStorage 和 indexDB。\r\n \r\n第二个是当前域下的 js 脚本不能够操作访问操作其他域下的 DOM。\r\n \r\n第三个是当前域下 ajax 无法发送跨域请求。\r\n \r\n同源政策的目的主要是为了保证用户的信息安全，它只是对 js 脚本的一种限制，并不是对浏览器的限制，对于一般的 img、或者\r\nscript 脚本请求都不会有跨域的限制，这是因为这些操作都不会通过响应结果来进行可能出现安全问题的操作。\r\n```\r\n\r\n## 60. 如何解决跨域问题？\r\n\r\n相关知识点：\r\n\r\n- 1. 通过 jsonp 跨域\r\n- 1. document.domain + iframe 跨域\r\n- 1. location.hash + iframe\r\n- 1. window.name + iframe 跨域\r\n- 1. postMessage 跨域\r\n- 1. 跨域资源共享（CORS)\r\n- 1. nginx 代理跨域\r\n- 1. nodejs 中间件代理跨域\r\n- 1. WebSocket 协议跨域\r\n\r\n回答：\r\n\r\n```\r\n解决跨域的方法我们可以根据我们想要实现的目的来划分。\r\n \r\n首先我们如果只是想要实现主域名下的不同子域名的跨域操作，我们可以使用设置 document.domain 来解决。\r\n \r\n（1）将 document.domain 设置为主域名，来实现相同子域名的跨域操作，这个时候主域名下的 cookie 就能够被子域名所访问。同时如果文档中含有主域名相同，子域名不同的 iframe 的话，我们也可以对这个 iframe 进行操作。\r\n \r\n如果是想要解决不同跨域窗口间的通信问题，比如说一个页面想要和页面的中的不同源的 iframe 进行通信的问题，我们可以使用 location.hash 或者 window.name 或者 postMessage 来解决。\r\n \r\n（2）使用 location.hash 的方法，我们可以在主页面动态的修改 iframe 窗口的 hash 值，然后在 iframe 窗口里实现监听函数来实现这样一个单向的通信。因为在 iframe 是没有办法访问到不同源的父级窗口的，所以我们不能直接修改父级窗口的 hash 值来实现通信，我们可以在 iframe 中再加入一个 iframe ，这个 iframe 的内容是和父级页面同源的，所以我们可以 window.parent.parent 来修改最顶级页面的 src，以此来实现双向通信。\r\n \r\n（3）使用 window.name 的方法，主要是基于同一个窗口中设置了 window.name 后不同源的页面也可以访问，所以不同源的子页面可以首先在 window.name 中写入数据，然后跳转到一个和父级同源的页面。这个时候级页面就可以访问同源的子页面中 window.name 中的数据了，这种方式的好处是可以传输的数据量大。\r\n \r\n（4）使用 postMessage 来解决的方法，这是一个 h5 中新增的一个 api。通过它我们可以实现多窗口间的信息传递，通过获取到指定窗口的引用，然后调用 postMessage 来发送信息，在窗口中我们通过对 message 信息的监听来接收信息，以此来实现不同源间的信息交换。\r\n \r\n如果是像解决 ajax 无法提交跨域请求的问题，我们可以使用 jsonp、cors、websocket 协议、服务器代理来解决问题。\r\n \r\n（5）使用 jsonp 来实现跨域请求，它的主要原理是通过动态构建 script  标签来实现跨域请求，因为浏览器对 script 标签的引入没有跨域的访问限制 。通过在请求的 url 后指定一个回调函数，然后服务器在返回数据的时候，构建一个 json 数据的包装，这个包装就是回调函数，然后返回给前端，前端接收到数据后，因为请求的是脚本文件，所以会直接执行，这样我们先前定义好的回调函数就可以被调用，从而实现了跨域请求的处理。这种方式只能用于 get 请求。\r\n \r\n（6）使用 CORS 的方式，CORS 是一个 W3C 标准，全称是"跨域资源共享"。CORS 需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，因此我们只需要在服务器端配置就行。浏览器将 CORS 请求分成两类：简单请求和非简单请求。对于简单请求，浏览器直接发出 CORS 请求。具体来说，就是会在头信息之中，增加一个 Origin 字段。Origin 字段用来说明本次请求来自哪个源。服务器根据这个值，决定是否同意这次请求。对于如果 Origin 指定的源，不在许可范围内，服务器会返回一个正常的 HTTP 回应。浏览器发现，这个回应的头信息没有包含 Access-Control-Allow-Origin 字段，就知道出错了，从而抛出一个错误，ajax 不会收到响应信息。如果成功的话会包含一些以 Access-Control- 开头的字段。\r\n \r\n非简单请求，浏览器会先发出一次预检请求，来判断该域名是否在服务器的白名单中，如果收到肯定回复后才会发起请求。\r\n \r\n（7）使用 websocket 协议，这个协议没有同源限制。\r\n \r\n（8）使用服务器来代理跨域的访问请求，就是有跨域的请求操作时发送请求给后端，让后端代为请求，然后最后将获取的结果发返回。\r\n```\r\n\r\n详细资料可以参考：\r\n[《前端常见跨域解决方案（全）》](https://segmentfault.com/a/1190000011145364)\r\n[《浏览器同源政策及其规避方法》](http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html)\r\n[《跨域，你需要知道的全在这里》](https://juejin.im/entry/59feae9df265da43094488f6)\r\n[《为什么 form 表单提交没有跨域问题，但 ajax 提交有跨域问题？》](https://www.zhihu.com/question/31592553)\r\n\r\n## 61. 服务器代理转发时，该如何处理 cookie？\r\n\r\n详细资料可以参考：\r\n[《深入浅出 Nginx》](https://www.jianshu.com/p/5eab0f83e3b4)\r\n\r\n## 62. 简单谈一下 cookie ？\r\n\r\n```\r\n我的理解是 cookie 是服务器提供的一种用于维护会话状态信息的数据，通过服务器发送到浏览器，浏览器保存在本地，当下一次有同源的请求时，将保存的 cookie 值添加到请求头部，发送给服务端。这可以用来实现记录用户登录状态等功能。cookie 一般可以存储 4k 大小的数据，并且只能够被同源的网页所共享访问。\r\n \r\n服务器端可以使用 Set-Cookie 的响应头部来配置 cookie 信息。一条cookie 包括了5个属性值 expires、domain、path、secure、HttpOnly。其中 expires 指定了 cookie 失效的时间，domain 是域名、path是路径，domain 和 path 一起限制了 cookie 能够被哪些 url 访问。secure 规定了 cookie 只能在确保安全的情况下传输，HttpOnly 规定了这个 cookie 只能被服务器访问，不能使用 js 脚本访问。\r\n \r\n在发生 xhr 的跨域请求的时候，即使是同源下的 cookie，也不会被自动添加到请求头部，除非显示地规定。\r\n```\r\n\r\n详细资料可以参考：\r\n[《HTTP cookies》](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Cookies)\r\n[《聊一聊 cookie》](https://segmentfault.com/a/1190000004556040)\r\n\r\n## 63. 模块化开发怎么做？\r\n\r\n```\r\n我对模块的理解是，一个模块是实现一个特定功能的一组方法。在最开始的时候，js 只实现一些简单的功能，所以并没有模块的概念\r\n，但随着程序越来越复杂，代码的模块化开发变得越来越重要。\r\n \r\n由于函数具有独立作用域的特点，最原始的写法是使用函数来作为模块，几个函数作为一个模块，但是这种方式容易造成全局变量的污\r\n染，并且模块间没有联系。\r\n \r\n后面提出了对象写法，通过将函数作为一个对象的方法来实现，这样解决了直接使用函数作为模块的一些缺点，但是这种办法会暴露所\r\n有的所有的模块成员，外部代码可以修改内部属性的值。\r\n \r\n现在最常用的是立即执行函数的写法，通过利用闭包来实现模块私有作用域的建立，同时不会对全局作用域造成污染。\r\n```\r\n\r\n详细资料可以参考：\r\n[《浅谈模块化开发》](https://juejin.im/post/5ab378c46fb9a028ce7b824f)\r\n[《Javascript 模块化编程（一）：模块的写法》](http://www.ruanyifeng.com/blog/2012/10/javascript_module.html)\r\n[《前端模块化：CommonJS，AMD，CMD，ES6》](https://juejin.im/post/5aaa37c8f265da23945f365c)\r\n[《Module 的语法》](http://es6.ruanyifeng.com/#docs/module)\r\n\r\n## 64. js 的几种模块规范？\r\n\r\n```\r\njs 中现在比较成熟的有四种模块加载方案。\r\n \r\n第一种是 CommonJS 方案，它通过 require 来引入模块，通过 module.exports 定义模块的输出接口。这种模块加载方案是\r\n服务器端的解决方案，它是以同步的方式来引入模块的，因为在服务端文件都存储在本地磁盘，所以读取非常快，所以以同步的方式\r\n加载没有问题。但如果是在浏览器端，由于模块的加载是使用网络请求，因此使用异步加载的方式更加合适。\r\n \r\n第二种是 AMD 方案，这种方案采用异步加载的方式来加载模块，模块的加载不影响后面语句的执行，所有依赖这个模块的语句都定\r\n义在一个回调函数里，等到加载完成后再执行回调函数。require.js 实现了 AMD 规范。\r\n \r\n第三种是 CMD 方案，这种方案和 AMD 方案都是为了解决异步模块加载的问题，sea.js 实现了 CMD 规范。它和 require.js\r\n的区别在于模块定义时对依赖的处理不同和对依赖模块的执行时机的处理不同。参考60\r\n \r\n第四种方案是 ES6 提出的方案，使用 import 和 export 的形式来导入导出模块。这种方案和上面三种方案都不同。参考 61。\r\n```\r\n\r\n## 65. AMD 和 CMD 规范的区别？\r\n\r\n它们之间的主要区别有两个方面。\r\n\r\n（1）第一个方面是在模块定义时对依赖的处理不同。AMD 推崇依赖前置，在定义模块的时候就要声明其依赖的模块。而 CMD 推崇\r\n就近依赖，只有在用到某个模块的时候再去 require。\r\n\r\n（2）第二个方面是对依赖模块的执行时机处理不同。首先 AMD 和 CMD 对于模块的加载方式都是异步加载，不过它们的区别在于\r\n模块的执行时机，AMD 在依赖模块加载完成后就直接执行依赖模块，依赖模块的执行顺序和我们书写的顺序不一定一致。而 CMD\r\n在依赖模块加载完成后并不执行，只是下载而已，等到所有的依赖模块都加载好后，进入回调函数逻辑，遇到 require 语句\r\n的时候才执行对应的模块，这样模块的执行顺序就和我们书写的顺序保持一致了。\r\n\r\n```\r\n// CMD\r\ndefine(function(require, exports, module) {\r\n  var a = require("./a");\r\n  a.doSomething();\r\n  // 此处略去 100 行\r\n  var b = require("./b"); // 依赖可以就近书写\r\n  b.doSomething();\r\n  // ...\r\n});\r\n \r\n// AMD 默认推荐\r\ndefine(["./a", "./b"], function(a, b) {\r\n  // 依赖必须一开始就写好\r\n  a.doSomething();\r\n  // 此处略去 100 行\r\n  b.doSomething();\r\n  // ...\r\n});\r\n```\r\n\r\n详细资料可以参考：\r\n[《前端模块化，AMD 与 CMD 的区别》](https://juejin.im/post/5a422b036fb9a045211ef789)\r\n\r\n## 66. ES6 模块与 CommonJS 模块、AMD、CMD 的差异。\r\n\r\n- 1.CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。CommonJS 模块输出的是值的拷贝，也就是说，一旦输出一个值，模块内部的变化就影响不到这个值。ES6 模块的运行机制与 CommonJS 不一样。JS 引擎对脚本静态分析的时候，遇到模块加载命令 import，就会生成一个只读引用。等到脚本真正执行时，再根据这个只读引用，到被加载的那个模块里面去取值。\r\n\r\n  \r\n\r\n- 2.CommonJS 模块是运行时加载，ES6 模块是编译时输出接口。CommonJS 模块就是对象，即在输入时是先加载整个模块，生成一个对象，然后再从这个对象上面读取方法，这种加载称为“运行时加载”。而 ES6 模块不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成。\r\n\r\n## 67. requireJS 的核心原理是什么？（如何动态加载的？如何避免多次加载的？如何 缓存的？）\r\n\r\n```\r\nrequire.js 的核心原理是通过动态创建 script 脚本来异步引入模块，然后对每个脚本的 load 事件进行监听，如果每个脚本都加载完成了，再调用回调函数。\r\n```\r\n\r\n详细资料可以参考：\r\n[《requireJS 的用法和原理分析》](https://github.com/HRFE/blog/issues/10)\r\n[《requireJS 的核心原理是什么？》](https://zhuanlan.zhihu.com/p/55039478)\r\n[《从 RequireJs 源码剖析脚本加载原理》](https://www.cnblogs.com/dong-xu/p/7160919.html)\r\n[《requireJS 原理分析》](https://www.jianshu.com/p/5a39535909e4)\r\n\r\n## 68. JS 模块加载器的轮子怎么造，也就是如何实现一个模块加载器？\r\n\r\n详细资料可以参考：\r\n[《JS 模块加载器加载原理是怎么样的？》](https://www.zhihu.com/question/21157540)\r\n\r\n## 69. ECMAScript6 怎么写 class，为什么会出现 class 这种东西?\r\n\r\n```\r\n在我看来 ES6 新添加的 class 只是为了补充 js 中缺少的一些面向对象语言的特性，但本质上来说它只是一种语法糖，不是一个新的东西，其背后还是原型继承的思想。通过加入 class 可以有利于我们更好的组织代码。\r\n \r\n在 class 中添加的方法，其实是添加在类的原型上的。\r\n```\r\n\r\n详细资料可以参考：\r\n[《ECMAScript 6 实现了 class，对 JavaScript 前端开发有什么意义？》](https://www.zhihu.com/question/29789315)\r\n[《Class 的基本语法》](http://es6.ruanyifeng.com/#docs/class)\r\n\r\n## 70. documen.write 和 innerHTML 的区别？\r\n\r\n```\r\ndocument.write 的内容会代替整个文档内容，会重写整个页面。\r\n \r\ninnerHTML 的内容只是替代指定元素的内容，只会重写页面中的部分内容。\r\n```\r\n\r\n详细资料可以参考：\r\n[《简述 document.write 和 innerHTML 的区别。》](https://www.nowcoder.com/questionTerminal/2c5d8105b2694d85b06eff85e871cf50)\r\n\r\n## 71. DOM 操作——怎样添加、移除、移动、复制、创建和查找节点？\r\n\r\n（1）创建新节点\r\n\r\n```\r\ncreateDocumentFragment(node);\r\ncreateElement(node);\r\ncreateTextNode(text);\r\n```\r\n\r\n（2）添加、移除、替换、插入\r\n\r\n```\r\nappendChild(node)\r\nremoveChild(node)\r\nreplaceChild(new,old)\r\ninsertBefore(new,old)\r\n```\r\n\r\n（3）查找\r\n\r\n```\r\ngetElementById();\r\ngetElementsByName();\r\ngetElementsByTagName();\r\ngetElementsByClassName();\r\nquerySelector();\r\nquerySelectorAll();\r\n```\r\n\r\n（4）属性操作\r\n\r\n```\r\ngetAttribute(key);\r\nsetAttribute(key, value);\r\nhasAttribute(key);\r\nremoveAttribute(key);\r\n```\r\n\r\n详细资料可以参考：\r\n[《DOM 概述》](https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model/Introduction#DOM_interfaces)\r\n[《原生 JavaScript 的 DOM 操作汇总》](https://harttle.land/2015/10/01/javascript-dom-api.html)\r\n[《原生 JS 中 DOM 节点相关 API 合集》](https://microzz.com/2017/04/06/jsdom/)\r\n\r\n## 72. innerHTML 与 outerHTML 的区别？\r\n\r\n```\r\n对于这样一个 HTML 元素：<div>content<br/></div>。\r\n \r\ninnerHTML：内部 HTML，content<br/>；\r\nouterHTML：外部 HTML，<div>content<br/></div>；\r\ninnerText：内部文本，content ；\r\nouterText：内部文本，content ；\r\n```\r\n\r\n## 73. .call() 和 .apply() 的区别？\r\n\r\n```\r\n它们的作用一模一样，区别仅在于传入参数的形式的不同。\r\n \r\napply 接受两个参数，第一个参数指定了函数体内 this 对象的指向，第二个参数为一个带下标的集合，这个集合可以为数组，也可以为类数组，apply 方法把这个集合中的元素作为参数传递给被调用的函数。\r\n \r\ncall 传入的参数数量不固定，跟 apply 相同的是，第一个参数也是代表函数体内的 this 指向，从第二个参数开始往后，每个参数被依次传入函数。\r\n```\r\n\r\n详细资料可以参考：\r\n[《apply、call 的区别和用途》](https://juejin.im/entry/58d0a7b22f301e007e5a15ae)\r\n\r\n## 74. JavaScript 类数组对象的定义？\r\n\r\n```\r\n一个拥有 length 属性和若干索引属性的对象就可以被称为类数组对象，类数组对象和数组类似，但是不能调用数组的方法。\r\n \r\n常见的类数组对象有 arguments 和 DOM 方法的返回结果，还有一个函数也可以被看作是类数组对象，因为它含有 length\r\n属性值，代表可接收的参数个数。\r\n```\r\n\r\n常见的类数组转换为数组的方法有这样几种：\r\n\r\n（1）通过 call 调用数组的 slice 方法来实现转换\r\n\r\n```\r\nArray.prototype.slice.call(arrayLike);\r\n```\r\n\r\n（2）通过 call 调用数组的 splice 方法来实现转换\r\n\r\n```\r\nArray.prototype.splice.call(arrayLike, 0);\r\n```\r\n\r\n（3）通过 apply 调用数组的 concat 方法来实现转换\r\n\r\n```\r\nArray.prototype.concat.apply([], arrayLike);\r\n```\r\n\r\n（4）通过 Array.from 方法来实现转换\r\n\r\n```\r\nArray.from(arrayLike);\r\n```\r\n\r\n详细的资料可以参考：\r\n[《JavaScript 深入之类数组对象与 arguments》](https://github.com/mqyqingfeng/Blog/issues/14)\r\n[《javascript 类数组》](https://segmentfault.com/a/1190000000415572)\r\n[《深入理解 JavaScript 类数组》](https://blog.lxxyx.cn/2016/05/07/深入理解JavaScript类数组/)\r\n\r\n## 75. 数组和对象有哪些原生方法，列举一下？\r\n\r\n```\r\n数组和字符串的转换方法：toString()、toLocalString()、join() 其中 join() 方法可以指定转换为字符串时的分隔符。\r\n \r\n数组尾部操作的方法 pop() 和 push()，push 方法可以传入多个参数。\r\n \r\n数组首部操作的方法 shift() 和 unshift() 重排序的方法 reverse() 和 sort()，sort() 方法可以传入一个函数来进行比较，传入前后两个值，如果返回值为正数，则交换两个参数的位置。\r\n \r\n数组连接的方法 concat() ，返回的是拼接好的数组，不影响原数组。\r\n \r\n数组截取办法 slice()，用于截取数组中的一部分返回，不影响原数组。\r\n \r\n数组插入方法 splice()，影响原数组查找特定项的索引的方法，indexOf() 和 lastIndexOf() 迭代方法 every()、some()、filter()、map() 和 forEach() 方法\r\n \r\n数组归并方法 reduce() 和 reduceRight() 方法\r\n```\r\n\r\n详细资料可以参考：\r\n[《JavaScript 深入理解之 Array 类型详解》](http://cavszhouyou.top/JavaScript深入理解之Array详解.html)\r\n\r\n## 76. 数组的 fill 方法？\r\n\r\n```\r\nfill() 方法用一个固定值填充一个数组中从起始索引到终止索引内的全部元素。不包括终止索引。\r\nfill 方法接受三个参数 value，start 以及 end，start 和 end 参数是可选的，其默认值分别为 0 和 this 对象的 length 属性值。\r\n```\r\n\r\n详细资料可以参考：\r\n[《Array.prototype.fill()》](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/fill)\r\n\r\n## 77. [,,,] 的长度？\r\n\r\n```\r\n尾后逗号 （有时叫做“终止逗号”）在向 JavaScript 代码添加元素、参数、属性时十分有用。如果你想要添加新的属性，并且上一行已经使用了尾后逗号，你可以仅仅添加新的一行，而不需要修改上一行。这使得版本控制更加清晰，以及代码维护麻烦更少。\r\n \r\nJavaScript 一开始就支持数组字面值中的尾后逗号，随后向对象字面值（ECMAScript 5）中添加了尾后逗号。最近（ECMAS\r\ncript 2017），又将其添加到函数参数中。但是 JSON 不支持尾后逗号。\r\n \r\n如果使用了多于一个尾后逗号，会产生间隙。 带有间隙的数组叫做稀疏数组（密致数组没有间隙）。稀疏数组的长度为逗号的数\r\n量。\r\n```\r\n\r\n详细资料可以参考：\r\n[《尾后逗号》](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Trailing_commas)\r\n\r\n## 78. JavaScript 中的作用域与变量声明提升？\r\n\r\n```\r\n变量提升的表现是，无论我们在函数中何处位置声明的变量，好像都被提升到了函数的首部，我们可以在变量声明前访问到而不会报错。\r\n \r\n造成变量声明提升的本质原因是 js 引擎在代码执行前有一个解析的过程，创建了执行上下文，初始化了一些代码执行时需要用到的对象。当我们访问一个变量时，我们会到当前执行上下文中的作用域链中去查找，而作用域链的首端指向的是当前执行上下文的变量对象，这个变量对象是执行上下文的一个属性，它包含了函数的形参、所有的函数和变量声明，这个对象的是在代码解析的时候创建的。这就是会出现变量声明提升的根本原因。\r\n```\r\n\r\n详细资料可以参考：\r\n[《JavaScript 深入理解之变量对象》](http://cavszhouyou.top/JavaScript深入理解之变量对象.html)\r\n\r\n## 79. 如何编写高性能的 Javascript ？\r\n\r\n- 1.使用位运算代替一些简单的四则运算。\r\n- 2.避免使用过深的嵌套循环。\r\n- 3.不要使用未定义的变量。\r\n- 4.当需要多次访问数组长度时，可以用变量保存起来，避免每次都会去进行属性查找。\r\n\r\n详细资料可以参考：\r\n[《如何编写高性能的 Javascript？》](https://zhuanlan.zhihu.com/p/34780474)\r\n\r\n## 80. 简单介绍一下 V8 引擎的垃圾回收机制\r\n\r\n```\r\nv8 的垃圾回收机制基于分代回收机制，这个机制又基于世代假说，这个假说有两个特点，一是新生的对象容易早死，另一个是不死的对象会活得更久。基于这个假说，v8 引擎将内存分为了新生代和老生代。\r\n \r\n新创建的对象或者只经历过一次的垃圾回收的对象被称为新生代。经历过多次垃圾回收的对象被称为老生代。\r\n \r\n新生代被分为 From 和 To 两个空间，To 一般是闲置的。当 From 空间满了的时候会执行 Scavenge 算法进行垃圾回收。当我们执行垃圾回收算法的时候应用逻辑将会停止，等垃圾回收结束后再继续执行。这个算法分为三步：\r\n \r\n（1）首先检查 From 空间的存活对象，如果对象存活则判断对象是否满足晋升到老生代的条件，如果满足条件则晋升到老生代。如果不满足条件则移动 To 空间。\r\n \r\n（2）如果对象不存活，则释放对象的空间。\r\n \r\n（3）最后将 From 空间和 To 空间角色进行交换。\r\n \r\n新生代对象晋升到老生代有两个条件：\r\n \r\n（1）第一个是判断是对象否已经经过一次 Scavenge 回收。若经历过，则将对象从 From 空间复制到老生代中；若没有经历，则复制到 To 空间。\r\n \r\n（2）第二个是 To 空间的内存使用占比是否超过限制。当对象从 From 空间复制到 To 空间时，若 To 空间使用超过 25%，则对象直接晋升到老生代中。设置 25% 的原因主要是因为算法结束后，两个空间结束后会交换位置，如果 To 空间的内存太小，会影响后续的内存分配。\r\n \r\n老生代采用了标记清除法和标记压缩法。标记清除法首先会对内存中存活的对象进行标记，标记结束后清除掉那些没有标记的对象。由于标记清除后会造成很多的内存碎片，不便于后面的内存分配。所以了解决内存碎片的问题引入了标记压缩法。\r\n \r\n由于在进行垃圾回收的时候会暂停应用的逻辑，对于新生代方法由于内存小，每次停顿的时间不会太长，但对于老生代来说每次垃圾回收的时间长，停顿会造成很大的影响。 为了解决这个问题 V8 引入了增量标记的方法，将一次停顿进行的过程分为了多步，每次执行完一小步就让运行逻辑执行一会，就这样交替运行。\r\n```\r\n\r\n详细资料可以参考：\r\n[《深入理解 V8 的垃圾回收原理》](https://www.jianshu.com/p/b8ed21e8a4fb)\r\n[《JavaScript 中的垃圾回收》](https://zhuanlan.zhihu.com/p/23992332)\r\n\r\n## 81. 哪些操作会造成内存泄漏？\r\n\r\n相关知识点：\r\n\r\n- 1.意外的全局变量\r\n- 2.被遗忘的计时器或回调函数\r\n- 3.脱离 DOM 的引用\r\n- 4.闭包\r\n\r\n回答：\r\n\r\n```\r\n第一种情况是我们由于使用未声明的变量，而意外的创建了一个全局变量，而使这个变量一直留在内存中无法被回收。\r\n \r\n第二种情况是我们设置了 setInterval 定时器，而忘记取消它，如果循环函数有对外部变量的引用的话，那么这个变量会被一直留\r\n在内存中，而无法被回收。\r\n \r\n第三种情况是我们获取一个 DOM 元素的引用，而后面这个元素被删除，由于我们一直保留了对这个元素的引用，所以它也无法被回\r\n收。\r\n \r\n第四种情况是不合理的使用闭包，从而导致某些变量一直被留在内存当中。\r\n```\r\n\r\n详细资料可以参考：\r\n[《JavaScript 内存泄漏教程》](http://www.ruanyifeng.com/blog/2017/04/memory-leak.html)\r\n[《4 类 JavaScript 内存泄漏及如何避免》](https://jinlong.github.io/2016/05/01/4-Types-of-Memory-Leaks-in-JavaScript-and-How-to-Get-Rid-Of-Them/)\r\n[《杜绝 js 中四种内存泄漏类型的发生》](https://juejin.im/entry/5a64366c6fb9a01c9332c706)\r\n[《javascript 典型内存泄漏及 chrome 的排查方法》](https://segmentfault.com/a/1190000008901861)\r\n\r\n## 82. 需求：实现一个页面操作不会整页刷新的网站，并且能在浏览器前进、后退时正确响应。给出你的技术实现方案？\r\n\r\n```\r\n通过使用 pushState + ajax 实现浏览器无刷新前进后退，当一次 ajax 调用成功后我们将一条 state 记录加入到 history\r\n对象中。一条 state 记录包含了 url、title 和 content 属性，在 popstate 事件中可以获取到这个 state 对象，我们可\r\n以使用 content 来传递数据。最后我们通过对 window.onpopstate 事件监听来响应浏览器的前进后退操作。\r\n \r\n使用 pushState 来实现有两个问题，一个是打开首页时没有记录，我们可以使用 replaceState 来将首页的记录替换，另一个问\r\n题是当一个页面刷新的时候，仍然会向服务器端请求数据，因此如果请求的 url 需要后端的配合将其重定向到一个页面。\r\n```\r\n\r\n详细资料可以参考：\r\n[《pushState + ajax 实现浏览器无刷新前进后退》](http://blog.chenxu.me/post/detail?id=ed4f0732-897f-48e4-9d4f-821e82f17fad)\r\n[《Manipulating the browser history》](https://developer.mozilla.org/zh-CN/docs/Web/API/History_API)\r\n\r\n## 83. 如何判断当前脚本运行在浏览器还是 node 环境中？（阿里）\r\n\r\n```\r\nthis === window ? \'browser\' : \'node\';\r\n \r\n通过判断 Global 对象是否为 window，如果不为 window，当前脚本没有运行在浏览器中。\r\n```\r\n\r\n## 84. 把 script 标签放在页面的最底部的 body 封闭之前和封闭之后有什么区别？浏览器会如何解析它们？\r\n\r\n详细资料可以参考：\r\n[《为什么把 script 标签放在 body 结束标签之后 html 结束标签之前？》](https://www.zhihu.com/question/20027966)\r\n[《从 Chrome 源码看浏览器如何加载资源》](https://zhuanlan.zhihu.com/p/30558018)\r\n\r\n## 85. 移动端的点击事件的有延迟，时间是多久，为什么会有？ 怎么解决这个延时？\r\n\r\n```\r\n移动端点击有 300ms 的延迟是因为移动端会有双击缩放的这个操作，因此浏览器在 click 之后要等待 300ms，看用户有没有下一次点击，来判断这次操作是不是双击。\r\n```\r\n\r\n有三种办法来解决这个问题：\r\n\r\n- 1.通过 meta 标签禁用网页的缩放。\r\n- 2.通过 meta 标签将网页的 viewport 设置为 ideal viewport。\r\n- 3.调用一些 js 库，比如 FastClick\r\n\r\n```\r\nclick 延时问题还可能引起点击穿透的问题，就是如果我们在一个元素上注册了 touchStart 的监听事件，这个事件会将这个元素隐藏掉，我们发现当这个元素隐藏后，触发了这个元素下的一个元素的点击事件，这就是点击穿透。\r\n```\r\n\r\n详细资料可以参考：\r\n[《移动端 300ms 点击延迟和点击穿透》](https://juejin.im/post/5b3cc9836fb9a04f9a5cb0e0)\r\n\r\n## 86. 什么是“前端路由”？什么时候适合使用“前端路由”？“前端路由”有哪些优点和缺点？\r\n\r\n```\r\n（1）什么是前端路由？\r\n \r\n前端路由就是把不同路由对应不同的内容或页面的任务交给前端来做，之前是通过服务端根据 url 的不同返回不同的页面实现的。\r\n \r\n（2）什么时候使用前端路由？\r\n \r\n在单页面应用，大部分页面结构不变，只改变部分内容的使用\r\n \r\n（3）前端路由有什么优点和缺点？\r\n \r\n优点：用户体验好，不需要每次都从服务器全部获取，快速展现给用户\r\n \r\n缺点：单页面无法记住之前滚动的位置，无法在前进，后退的时候记住滚动的位置\r\n \r\n前端路由一共有两种实现方式，一种是通过 hash 的方式，一种是通过使用 pushState 的方式。\r\n```\r\n\r\n详细资料可以参考：\r\n[《什么是“前端路由”》](https://segmentfault.com/q/1010000005336260)\r\n[《浅谈前端路由》](https://github.com/kaola-fed/blog/issues/137)\r\n[《前端路由是什么东西？》](https://www.zhihu.com/question/53064386)\r\n\r\n## 87. 如何测试前端代码么？ 知道 BDD, TDD, Unit Test 么？ 知道怎么测试你的前端工程么(mocha, sinon, jasmin, qUnit..)？\r\n\r\n详细资料可以参考：\r\n[《浅谈前端单元测试》](https://juejin.im/post/5b2da89cf265da597f1c7cab)\r\n\r\n## 88. 检测浏览器版本版本有哪些方式？\r\n\r\n```\r\n检测浏览器版本一共有两种方式：\r\n \r\n一种是检测 window.navigator.userAgent 的值，但这种方式很不可靠，因为 userAgent 可以被改写，并且早期的浏览器如 ie，会通过伪装自己的 userAgent 的值为 Mozilla 来躲过服务器的检测。\r\n \r\n第二种方式是功能检测，根据每个浏览器独有的特性来进行判断，如 ie 下独有的 ActiveXObject。\r\n```\r\n\r\n详细资料可以参考：\r\n[《JavaScript 判断浏览器类型》](https://www.jianshu.com/p/d99f4ca385ac)\r\n\r\n## 89. 什么是 Polyfill ？\r\n\r\n```\r\nPolyfill 指的是用于实现浏览器并不支持的原生 API 的代码。\r\n \r\n比如说 querySelectorAll 是很多现代浏览器都支持的原生 Web API，但是有些古老的浏览器并不支持，那么假设有人写了一段代码来实现这个功能使这些浏览器也支持了这个功能，那么这就可以成为一个 Polyfill。\r\n \r\n一个 shim 是一个库，有自己的 API，而不是单纯实现原生不支持的 API。\r\n```\r\n\r\n详细资料可以参考：\r\n[《Web 开发中的“黑话”》](https://segmentfault.com/a/1190000002593432)\r\n[《Polyfill 为何物》](https://juejin.im/post/5a579bc7f265da3e38496ba1)\r\n\r\n## 90. 使用 JS 实现获取文件扩展名？\r\n\r\n```\r\n// String.lastIndexOf() 方法返回指定值（本例中的\'.\'）在调用该方法的字符串中最后出现的位置，如果没找到则返回 -1。\r\n \r\n// 对于 \'filename\' 和 \'.hiddenfile\' ，lastIndexOf 的返回值分别为 0 和 -1 无符号右移操作符(>>>) 将 -1 转换为 4294967295 ，将 -2 转换为 4294967294 ，这个方法可以保证边缘情况时文件名不变。\r\n \r\n// String.prototype.slice() 从上面计算的索引处提取文件的扩展名。如果索引比文件名的长度大，结果为""。\r\nfunction getFileExtension(filename) {\r\n  return filename.slice(((filename.lastIndexOf(".") - 1) >>> 0) + 2);\r\n}\r\n```\r\n\r\n详细资料可以参考：\r\n[《如何更有效的获取文件扩展名》](https://segmentfault.com/a/1190000004993946)\r\n\r\n## 91. 介绍一下 js 的节流与防抖？\r\n\r\n相关知识点：\r\n\r\n```\r\n// 函数防抖： 在事件被触发 n 秒后再执行回调，如果在这 n 秒内事件又被触发，则重新计时。\r\n \r\n// 函数节流： 规定一个单位时间，在这个单位时间内，只能有一次触发事件的回调函数执行，如果在同一个单位时间内某事件被触发多次，只有一次能生效。\r\n \r\n// 函数防抖的实现\r\nfunction debounce(fn, wait) {\r\n  var timer = null;\r\n \r\n  return function() {\r\n    var context = this,\r\n      args = arguments;\r\n \r\n    // 如果此时存在定时器的话，则取消之前的定时器重新记时\r\n    if (timer) {\r\n      clearTimeout(timer);\r\n      timer = null;\r\n    }\r\n \r\n    // 设置定时器，使事件间隔指定事件后执行\r\n    timer = setTimeout(() => {\r\n      fn.apply(context, args);\r\n    }, wait);\r\n  };\r\n}\r\n \r\n// 函数节流的实现;\r\nfunction throttle(fn, delay) {\r\n  var preTime = Date.now();\r\n \r\n  return function() {\r\n    var context = this,\r\n      args = arguments,\r\n      nowTime = Date.now();\r\n \r\n    // 如果两次时间间隔超过了指定时间，则执行函数。\r\n    if (nowTime - preTime >= delay) {\r\n      preTime = Date.now();\r\n      return fn.apply(context, args);\r\n    }\r\n  };\r\n}\r\n```\r\n\r\n回答：\r\n\r\n```\r\n函数防抖是指在事件被触发 n 秒后再执行回调，如果在这 n 秒内事件又被触发，则重新计时。这可以使用在一些点击请求的事件上，避免因为用户的多次点击向后端发送多次请求。\r\n \r\n函数节流是指规定一个单位时间，在这个单位时间内，只能有一次触发事件的回调函数执行，如果在同一个单位时间内某事件被触发多次，只有一次能生效。节流可以使用在 scroll 函数的事件监听上，通过事件节流来降低事件调用的频率。\r\n```\r\n\r\n详细资料可以参考：\r\n[《轻松理解 JS 函数节流和函数防抖》](https://juejin.im/post/5a35ed25f265da431d3cc1b1)\r\n[《JavaScript 事件节流和事件防抖》](https://juejin.im/post/5aa60b0e518825556b6c6d1a)\r\n[《JS 的防抖与节流》](https://juejin.im/entry/5b1d2d54f265da6e2545bfa4)\r\n\r\n## 92. Object.is() 与原来的比较操作符 “=”、“” 的区别？\r\n\r\n相关知识点：\r\n\r\n```\r\n两等号判等，会在比较时进行类型转换。\r\n三等号判等（判断严格），比较时不进行隐式类型转换，（类型不同则会返回false）。\r\n \r\nObject.is 在三等号判等的基础上特别处理了 NaN 、-0 和 +0 ，保证 -0 和 +0 不再相同，但 Object.is(NaN, NaN) 会返回 true.\r\n \r\nObject.is 应被认为有其特殊的用途，而不能用它认为它比其它的相等对比更宽松或严格。\r\n```\r\n\r\n回答：\r\n\r\n```\r\n使用双等号进行相等判断时，如果两边的类型不一致，则会进行强制类型转化后再进行比较。\r\n \r\n使用三等号进行相等判断时，如果两边的类型不一致时，不会做强制类型准换，直接返回 false。\r\n \r\n使用 Object.is 来进行相等判断时，一般情况下和三等号的判断相同，它处理了一些特殊的情况，比如 -0 和 +0 不再相等，两个 NaN 认定为是相等的。\r\n```\r\n\r\n## 93. escape,encodeURI,encodeURIComponent 有什么区别？\r\n\r\n相关知识点：\r\n\r\n```\r\nescape 和 encodeURI 都属于 Percent-encoding，基本功能都是把 URI 非法字符转化成合法字符，转化后形式类似「%*」。\r\n它们的根本区别在于，escape 在处理 0xff 之外字符的时候，是直接使用字符的 unicode 在前面加上一个「%u」，而 encode URI 则是先进行 UTF-8，再在 UTF-8 的每个字节码前加上一个「%」；在处理 0xff 以内字符时，编码方式是一样的（都是「%XX」，XX 为字符的 16 进制 unicode，同时也是字符的 UTF-8），只是范围（即哪些字符编码哪些字符不编码）不一样。\r\n```\r\n\r\n回答：\r\n\r\n```\r\nencodeURI 是对整个 URI 进行转义，将 URI 中的非法字符转换为合法字符，所以对于一些在 URI 中有特殊意义的字符不会进行转义。\r\n \r\nencodeURIComponent 是对 URI 的组成部分进行转义，所以一些特殊字符也会得到转义。\r\n \r\nescape 和 encodeURI 的作用相同，不过它们对于 unicode 编码为 0xff 之外字符的时候会有区别，escape 是直接在字符的 unicode 编码前加上 %u，而 encodeURI 首先会将字符转换为 UTF-8 的格式，再在每个字节前加上 %。\r\n```\r\n\r\n详细资料可以参考：\r\n[《escape,encodeURI,encodeURIComponent 有什么区别?》](https://www.zhihu.com/question/21861899)\r\n\r\n## 94. Unicode 和 UTF-8 之间的关系？\r\n\r\n```\r\nUnicode 是一种字符集合，现在可容纳 100 多万个字符。每个字符对应一个不同的 Unicode 编码，它只规定了符号的二进制代码，却没有规定这个二进制代码在计算机中如何编码传输。\r\n \r\nUTF-8 是一种对 Unicode 的编码方式，它是一种变长的编码方式，可以用 1~4 个字节来表示一个字符。\r\n```\r\n\r\n详细资料可以参考：\r\n[《字符编码详解》](https://blog.51cto.com/polaris/377468)\r\n[《字符编码笔记：ASCII，Unicode 和 UTF-8》](http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html)\r\n\r\n## 95. js 的事件循环是什么？\r\n\r\n相关知识点：\r\n\r\n```\r\n事件队列是一个存储着待执行任务的队列，其中的任务严格按照时间先后顺序执行，排在队头的任务将会率先执行，而排在队尾的任务会最后执行。事件队列每次仅执行一个任务，在该任务执行完毕之后，再执行下一个任务。执行栈则是一个类似于函数调用栈的运行容器，当执行栈为空时，JS 引擎便检查事件队列，如果不为空的话，事件队列便将第一个任务压入执行栈中运行。\r\n```\r\n\r\n回答：\r\n\r\n```\r\n因为 js 是单线程运行的，在代码执行的时候，通过将不同函数的执行上下文压入执行栈中来保证代码的有序执行。在执行同步代码的时候，如果遇到了异步事件，js 引擎并不会一直等待其返回结果，而是会将这个事件挂起，继续执行执行栈中的其他任务。当异步事件执行完毕后，再将异步事件对应的回调加入到与当前执行栈中不同的另一个任务队列中等待执行。任务队列可以分为宏任务对列和微任务对列，当当前执行栈中的事件执行完毕后，js 引擎首先会判断微任务对列中是否有任务可以执行，如果有就将微任务队首的事件压入栈中执行。当微任务对列中的任务都执行完成后再去判断宏任务对列中的任务。\r\n \r\n微任务包括了 promise 的回调、node 中的 process.nextTick 、对 Dom 变化监听的 MutationObserver。\r\n \r\n宏任务包括了 script 脚本的执行、setTimeout ，setInterval ，setImmediate 一类的定时事件，还有如 I/O 操作、UI 渲\r\n染等。\r\n```\r\n\r\n详细资料可以参考：\r\n[《浏览器事件循环机制（event loop）》](https://juejin.im/post/5afbc62151882542af04112d)\r\n[《详解 JavaScript 中的 Event Loop（事件循环）机制》](https://zhuanlan.zhihu.com/p/33058983)\r\n[《什么是 Event Loop？》](http://www.ruanyifeng.com/blog/2013/10/event_loop.html)\r\n[《这一次，彻底弄懂 JavaScript 执行机制》](https://juejin.im/post/59e85eebf265da430d571f89)\r\n\r\n## 96. js 中的深浅拷贝实现？\r\n\r\n相关资料：\r\n\r\n```\r\n// 浅拷贝的实现;\r\n \r\nfunction shallowCopy(object) {\r\n  // 只拷贝对象\r\n  if (!object || typeof object !== "object") return;\r\n \r\n  // 根据 object 的类型判断是新建一个数组还是对象\r\n  let newObject = Array.isArray(object) ? [] : {};\r\n \r\n  // 遍历 object，并且判断是 object 的属性才拷贝\r\n  for (let key in object) {\r\n    if (object.hasOwnProperty(key)) {\r\n      newObject[key] = object[key];\r\n    }\r\n  }\r\n \r\n  return newObject;\r\n}\r\n \r\n// 深拷贝的实现;\r\n \r\nfunction deepCopy(object) {\r\n  if (!object || typeof object !== "object") return;\r\n \r\n  let newObject = Array.isArray(object) ? [] : {};\r\n \r\n  for (let key in object) {\r\n    if (object.hasOwnProperty(key)) {\r\n      newObject[key] =\r\n        typeof object[key] === "object" ? deepCopy(object[key]) : object[key];\r\n    }\r\n  }\r\n \r\n  return newObject;\r\n}\r\n```\r\n\r\n回答：\r\n\r\n```\r\n浅拷贝指的是将一个对象的属性值复制到另一个对象，如果有的属性的值为引用类型的话，那么会将这个引用的地址复制给对象，因此两个对象会有同一个引用类型的引用。浅拷贝可以使用  Object.assign 和展开运算符来实现。\r\n \r\n深拷贝相对浅拷贝而言，如果遇到属性值为引用类型的时候，它新建一个引用类型并将对应的值复制给它，因此对象获得的一个新的引用类型而不是一个原有类型的引用。深拷贝对于一些对象可以使用 JSON 的两个函数来实现，但是由于 JSON 的对象格式比 js 的对象格式更加严格，所以如果属性值里边出现函数或者 Symbol 类型的值时，会转换失败。\r\n```\r\n\r\n详细资料可以参考：\r\n[《JavaScript 专题之深浅拷贝》](https://github.com/mqyqingfeng/Blog/issues/32)\r\n[《前端面试之道》](https://juejin.im/book/5bdc715fe51d454e755f75ef/section/5bed40d951882545f73004f6)\r\n\r\n## 97. 手写 call、apply 及 bind 函数\r\n\r\n相关资料：\r\n\r\n```\r\n// call函数实现\r\nFunction.prototype.myCall = function(context) {\r\n  // 判断调用对象\r\n  if (typeof this !== "function") {\r\n    console.error("type error");\r\n  }\r\n \r\n  // 获取参数\r\n  let args = [...arguments].slice(1),\r\n    result = null;\r\n \r\n  // 判断 context 是否传入，如果未传入则设置为 window\r\n  context = context || window;\r\n \r\n  // 将调用函数设为对象的方法\r\n  context.fn = this;\r\n \r\n  // 调用函数\r\n  result = context.fn(...args);\r\n \r\n  // 将属性删除\r\n  delete context.fn;\r\n \r\n  return result;\r\n};\r\n \r\n// apply 函数实现\r\n \r\nFunction.prototype.myApply = function(context) {\r\n  // 判断调用对象是否为函数\r\n  if (typeof this !== "function") {\r\n    throw new TypeError("Error");\r\n  }\r\n \r\n  let result = null;\r\n \r\n  // 判断 context 是否存在，如果未传入则为 window\r\n  context = context || window;\r\n \r\n  // 将函数设为对象的方法\r\n  context.fn = this;\r\n \r\n  // 调用方法\r\n  if (arguments[1]) {\r\n    result = context.fn(...arguments[1]);\r\n  } else {\r\n    result = context.fn();\r\n  }\r\n \r\n  // 将属性删除\r\n  delete context.fn;\r\n \r\n  return result;\r\n};\r\n \r\n// bind 函数实现\r\nFunction.prototype.myBind = function(context) {\r\n  // 判断调用对象是否为函数\r\n  if (typeof this !== "function") {\r\n    throw new TypeError("Error");\r\n  }\r\n \r\n  // 获取参数\r\n  var args = [...arguments].slice(1),\r\n    fn = this;\r\n \r\n  return function Fn() {\r\n    // 根据调用方式，传入不同绑定值\r\n    return fn.apply(\r\n      this instanceof Fn ? this : context,\r\n      args.concat(...arguments)\r\n    );\r\n  };\r\n};\r\n```\r\n\r\n回答：\r\n\r\ncall 函数的实现步骤：\r\n\r\n- 1.判断调用对象是否为函数，即使我们是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。\r\n- 2.判断传入上下文对象是否存在，如果不存在，则设置为 window 。\r\n- 3.处理传入的参数，截取第一个参数后的所有参数。\r\n- 4.将函数作为上下文对象的一个属性。\r\n- 5.使用上下文对象来调用这个方法，并保存返回结果。\r\n- 6.删除刚才新增的属性。\r\n- 7.返回结果。\r\n\r\napply 函数的实现步骤：\r\n\r\n- 1.判断调用对象是否为函数，即使我们是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。\r\n- 2.判断传入上下文对象是否存在，如果不存在，则设置为 window 。\r\n- 3.将函数作为上下文对象的一个属性。\r\n- 4.判断参数值是否传入\r\n- 4.使用上下文对象来调用这个方法，并保存返回结果。\r\n- 5.删除刚才新增的属性\r\n- 6.返回结果\r\n\r\nbind 函数的实现步骤：\r\n\r\n- 1.判断调用对象是否为函数，即使我们是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。\r\n- 2.保存当前函数的引用，获取其余传入参数值。\r\n- 3.创建一个函数返回\r\n- 4.函数内部使用 apply 来绑定函数调用，需要判断函数作为构造函数的情况，这个时候需要传入当前函数的 this 给 apply 调用，其余情况都传入指定的上下文对象。\r\n\r\n详细资料可以参考：\r\n[《手写 call、apply 及 bind 函数》](https://juejin.im/book/5bdc715fe51d454e755f75ef/section/5bdd0d8e6fb9a04a044073fe)\r\n[《JavaScript 深入之 call 和 apply 的模拟实现》](https://github.com/mqyqingfeng/Blog/issues/11)\r\n\r\n## 98. 函数柯里化的实现\r\n\r\n```\r\n// 函数柯里化指的是一种将使用多个参数的一个函数转换成一系列使用一个参数的函数的技术。\r\n \r\nfunction curry(fn, args) {\r\n  // 获取函数需要的参数长度\r\n  let length = fn.length;\r\n \r\n  args = args || [];\r\n \r\n  return function() {\r\n    let subArgs = args.slice(0);\r\n \r\n    // 拼接得到现有的所有参数\r\n    for (let i = 0; i < arguments.length; i++) {\r\n      subArgs.push(arguments[i]);\r\n    }\r\n \r\n    // 判断参数的长度是否已经满足函数所需参数的长度\r\n    if (subArgs.length >= length) {\r\n      // 如果满足，执行函数\r\n      return fn.apply(this, subArgs);\r\n    } else {\r\n      // 如果不满足，递归返回科里化的函数，等待参数的传入\r\n      return curry.call(this, fn, subArgs);\r\n    }\r\n  };\r\n}\r\n \r\n// es6 实现\r\nfunction curry(fn, ...args) {\r\n  return fn.length <= args.length ? fn(...args) : curry.bind(null, fn, ...args);\r\n}\r\n```\r\n\r\n详细资料可以参考：\r\n[《JavaScript 专题之函数柯里化》](https://github.com/mqyqingfeng/Blog/issues/42)\r\n\r\n## 99. 为什么 0.1 + 0.2 != 0.3？如何解决这个问题？\r\n\r\n```\r\n当计算机计算 0.1+0.2 的时候，实际上计算的是这两个数字在计算机里所存储的二进制，0.1 和 0.2 在转换为二进制表示的时候会出现位数无限循环的情况。js 中是以 64 位双精度格式来存储数字的，只有 53 位的有效数字，超过这个长度的位数会被截取掉这样就造成了精度丢失的问题。这是第一个会造成精度丢失的地方。在对两个以 64 位双精度格式的数据进行计算的时候，首先会进行对阶的处理，对阶指的是将阶码对齐，也就是将小数点的位置对齐后，再进行计算，一般是小阶向大阶对齐，因此小阶的数在对齐的过程中，有效数字会向右移动，移动后超过有效位数的位会被截取掉，这是第二个可能会出现精度丢失的地方。当两个数据阶码对齐后，进行相加运算后，得到的结果可能会超过 53 位有效数字，因此超过的位数也会被截取掉，这是可能发生精度丢失的第三个地方。\r\n \r\n对于这样的情况，我们可以将其转换为整数后再进行运算，运算后再转换为对应的小数，以这种方式来解决这个问题。\r\n \r\n我们还可以将两个数相加的结果和右边相减，如果相减的结果小于一个极小数，那么我们就可以认定结果是相等的，这个极小数可以\r\n使用 es6 的 Number.EPSILON\r\n```\r\n\r\n详细资料可以参考：\r\n[《十进制的 0.1 为什么不能用二进制很好的表示？》](https://blog.csdn.net/Lixuanshengchao/article/details/82049191)\r\n[《十进制浮点数转成二进制》](https://blog.csdn.net/zhengyanan815/article/details/78550073)\r\n[《浮点数的二进制表示》](http://www.ruanyifeng.com/blog/2010/06/ieee_floating-point_representation.html)\r\n[《js 浮点数存储精度丢失原理》](https://juejin.im/post/5b372f106fb9a00e6714aa21)\r\n[《浮点数精度之谜》](https://juejin.im/post/594a31d0a0bb9f006b0b2624)\r\n[《JavaScript 浮点数陷阱及解法》](https://github.com/camsong/blog/issues/9)\r\n[《0.1+0.2 ! 0.3？》](https://juejin.im/post/5bd2f10a51882555e072d0c4)\r\n[《JavaScript 中奇特的~运算符》](https://juejin.im/entry/59cdd7fb6fb9a00a600f8eef)\r\n\r\n## 100. 原码、反码和补码的介绍\r\n\r\n```\r\n原码是计算机中对数字的二进制的定点表示方法，最高位表示符号位，其余位表示数值位。优点是易于分辨，缺点是不能够直接参与运算。\r\n \r\n正数的反码和其原码一样；负数的反码，符号位为1，数值部分按原码取反。\r\n如 [+7]原 = 00000111，[+7]反 = 00000111； [-7]原 = 10000111，[-7]反 = 11111000。\r\n \r\n正数的补码和其原码一样；负数的补码为其反码加1。\r\n \r\n例如 [+7]原 = 00000111，[+7]反 = 00000111，[+7]补 = 00000111；\r\n[-7]原 = 10000111，[-7]反 = 11111000，[-7]补 = 11111001\r\n \r\n之所以在计算机中使用补码来表示负数的原因是，这样可以将加法运算扩展到所有的数值计算上，因此在数字电路中我们只需要考虑加法器的设计就行了，而不用再为减法设置新的数字电路。\r\n```\r\n\r\n详细资料可以参考：\r\n[《关于 2 的补码》](http://www.ruanyifeng.com/blog/2009/08/twos_complement.html)\r\n\r\n## 101. toPrecision 和 toFixed 和 Math.round 的区别？\r\n\r\n```\r\ntoPrecision 用于处理精度，精度是从左至右第一个不为 0 的数开始数起。\r\ntoFixed 是对小数点后指定位数取整，从小数点开始数起。\r\nMath.round 是将一个数字四舍五入到一个整数。\r\n```\r\n\r\n## 102. 什么是 XSS 攻击？如何防范 XSS 攻击？\r\n\r\n```\r\nXSS 攻击指的是跨站脚本攻击，是一种代码注入攻击。攻击者通过在网站注入恶意脚本，使之在用户的浏览器上运行，从而盗取用户的信息如 cookie 等。\r\n \r\nXSS 的本质是因为网站没有对恶意代码进行过滤，与正常的代码混合在一起了，浏览器没有办法分辨哪些脚本是可信的，从而导致了恶意代码的执行。\r\n \r\nXSS 一般分为存储型、反射型和 DOM 型。\r\n \r\n存储型指的是恶意代码提交到了网站的数据库中，当用户请求数据的时候，服务器将其拼接为 HTML 后返回给了用户，从而导致了恶意代码的执行。\r\n \r\n反射型指的是攻击者构建了特殊的 URL，当服务器接收到请求后，从 URL 中获取数据，拼接到 HTML 后返回，从而导致了恶意代码的执行。\r\n \r\nDOM 型指的是攻击者构建了特殊的 URL，用户打开网站后，js 脚本从 URL 中获取数据，从而导致了恶意代码的执行。\r\n \r\nXSS 攻击的预防可以从两个方面入手，一个是恶意代码提交的时候，一个是浏览器执行恶意代码的时候。\r\n \r\n对于第一个方面，如果我们对存入数据库的数据都进行的转义处理，但是一个数据可能在多个地方使用，有的地方可能不需要转义，由于我们没有办法判断数据最后的使用场景，所以直接在输入端进行恶意代码的处理，其实是不太可靠的。\r\n \r\n因此我们可以从浏览器的执行来进行预防，一种是使用纯前端的方式，不用服务器端拼接后返回。另一种是对需要插入到 HTML 中的代码做好充分的转义。对于 DOM 型的攻击，主要是前端脚本的不可靠而造成的，我们对于数据获取渲染和字符串拼接的时候应该对可能出现的恶意代码情况进行判断。\r\n \r\n还有一些方式，比如使用 CSP ，CSP 的本质是建立一个白名单，告诉浏览器哪些外部资源可以加载和执行，从而防止恶意代码的注入攻击。\r\n \r\n还可以对一些敏感信息进行保护，比如 cookie 使用 http-only ，使得脚本无法获取。也可以使用验证码，避免脚本伪装成用户执行一些操作。\r\n```\r\n\r\n详细资料可以参考：\r\n[《前端安全系列（一）：如何防止 XSS 攻击？》](https://juejin.im/post/5bad9140e51d450e935c6d64)\r\n\r\n## 103. 什么是 CSP？\r\n\r\n```\r\nCSP 指的是内容安全策略，它的本质是建立一个白名单，告诉浏览器哪些外部资源可以加载和执行。我们只需要配置规则，如何拦截由浏览器自己来实现。\r\n \r\n通常有两种方式来开启 CSP，一种是设置 HTTP 首部中的 Content-Security-Policy，一种是设置 meta 标签的方式 <meta\r\nhttp-equiv="Content-Security-Policy">\r\n```\r\n\r\n详细资料可以参考：\r\n[《内容安全策略（CSP）》](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CSP)\r\n[《前端面试之道》](https://juejin.im/book/5bdc715fe51d454e755f75ef/section/5bdc721851882516c33430a2)\r\n\r\n## 104. 什么是 CSRF 攻击？如何防范 CSRF 攻击？\r\n\r\n```\r\nCSRF 攻击指的是跨站请求伪造攻击，攻击者诱导用户进入一个第三方网站，然后该网站向被攻击网站发送跨站请求。如果用户在被\r\n攻击网站中保存了登录状态，那么攻击者就可以利用这个登录状态，绕过后台的用户验证，冒充用户向服务器执行一些操作。\r\n \r\nCSRF 攻击的本质是利用了 cookie 会在同源请求中携带发送给服务器的特点，以此来实现用户的冒充。\r\n \r\n一般的 CSRF 攻击类型有三种：\r\n \r\n第一种是 GET 类型的 CSRF 攻击，比如在网站中的一个 img 标签里构建一个请求，当用户打开这个网站的时候就会自动发起提\r\n交。\r\n \r\n第二种是 POST 类型的 CSRF 攻击，比如说构建一个表单，然后隐藏它，当用户进入页面时，自动提交这个表单。\r\n \r\n第三种是链接类型的 CSRF 攻击，比如说在 a 标签的 href 属性里构建一个请求，然后诱导用户去点击。\r\n \r\nCSRF 可以用下面几种方法来防护：\r\n \r\n第一种是同源检测的方法，服务器根据 http 请求头中 origin 或者 referer 信息来判断请求是否为允许访问的站点，从而对请求进行过滤。当 origin 或者 referer 信息都不存在的时候，直接阻止。这种方式的缺点是有些情况下 referer 可以被伪造。还有就是我们这种方法同时把搜索引擎的链接也给屏蔽了，所以一般网站会允许搜索引擎的页面请求，但是相应的页面请求这种请求方式也可能被攻击者给利用。\r\n \r\n第二种方法是使用 CSRF Token 来进行验证，服务器向用户返回一个随机数 Token ，当网站再次发起请求时，在请求参数中加入服务器端返回的 token ，然后服务器对这个 token 进行验证。这种方法解决了使用 cookie 单一验证方式时，可能会被冒用的问题，但是这种方法存在一个缺点就是，我们需要给网站中的所有请求都添加上这个 token，操作比较繁琐。还有一个问题是一般不会只有一台网站服务器，如果我们的请求经过负载平衡转移到了其他的服务器，但是这个服务器的 session 中没有保留这个 token 的话，就没有办法验证了。这种情况我们可以通过改变 token 的构建方式来解决。\r\n \r\n第三种方式使用双重 Cookie 验证的办法，服务器在用户访问网站页面时，向请求域名注入一个Cookie，内容为随机字符串，然后当用户再次向服务器发送请求的时候，从 cookie 中取出这个字符串，添加到 URL 参数中，然后服务器通过对 cookie 中的数据和参数中的数据进行比较，来进行验证。使用这种方式是利用了攻击者只能利用 cookie，但是不能访问获取 cookie 的特点。并且这种方法比 CSRF Token 的方法更加方便，并且不涉及到分布式访问的问题。这种方法的缺点是如果网站存在 XSS 漏洞的，那么这种方式会失效。同时这种方式不能做到子域名的隔离。\r\n \r\n第四种方式是使用在设置 cookie 属性的时候设置 Samesite ，限制 cookie 不能作为被第三方使用，从而可以避免被攻击者利用。Samesite 一共有两种模式，一种是严格模式，在严格模式下 cookie 在任何情况下都不可能作为第三方 Cookie 使用，在宽松模式下，cookie 可以被请求是 GET 请求，且会发生页面跳转的请求所使用。\r\n```\r\n\r\n详细资料可以参考：\r\n[《前端安全系列之二：如何防止 CSRF 攻击？》](https://juejin.im/post/5bc009996fb9a05d0a055192)\r\n[《[ HTTP 趣谈\\] origin, referer 和 host 区别》](https://www.jianshu.com/p/1f9c71850299)\r\n\r\n## 105. 什么是 Samesite Cookie 属性？\r\n\r\n```\r\nSamesite Cookie 表示同站 cookie，避免 cookie 被第三方所利用。\r\n \r\n将 Samesite 设为 strict ，这种称为严格模式，表示这个 cookie 在任何情况下都不可能作为第三方 cookie。\r\n \r\n将 Samesite 设为 Lax ，这种模式称为宽松模式，如果这个请求是个 GET 请求，并且这个请求改变了当前页面或者打开了新的页面，那么这个 cookie 可以作为第三方 cookie，其余情况下都不能作为第三方 cookie。\r\n \r\n使用这种方法的缺点是，因为它不支持子域，所以子域没有办法与主域共享登录信息，每次转入子域的网站，都回重新登录。还有一个问题就是它的兼容性不够好。\r\n```\r\n\r\n## 106. 什么是点击劫持？如何防范点击劫持？\r\n\r\n```\r\n点击劫持是一种视觉欺骗的攻击手段，攻击者将需要攻击的网站通过 iframe 嵌套的方式嵌入自己的网页中，并将 iframe 设置为透明，在页面中透出一个按钮诱导用户点击。\r\n \r\n我们可以在 http 相应头中设置 X-FRAME-OPTIONS 来防御用 iframe 嵌套的点击劫持攻击。通过不同的值，可以规定页面在特\r\n定的一些情况才能作为 iframe 来使用。\r\n```\r\n\r\n详细资料可以参考：\r\n[《web 安全之--点击劫持攻击与防御技术简介》](https://www.jianshu.com/p/251704d8ff18)\r\n\r\n## 107. SQL 注入攻击？\r\n\r\n```\r\nSQL 注入攻击指的是攻击者在 HTTP 请求中注入恶意的 SQL 代码，服务器使用参数构建数据库 SQL 命令时，恶意 SQL 被一起构\r\n造，破坏原有 SQL 结构，并在数据库中执行，达到编写程序时意料之外结果的攻击行为。\r\n```\r\n\r\n详细资料可以参考：\r\n[《Web 安全漏洞之 SQL 注入》](https://juejin.im/post/5bd5b820e51d456f72531fa8)\r\n[《如何防范常见的 Web 攻击》](http://blog.720ui.com/2016/security_web/#SQL注入攻击)\r\n\r\n## 108. 什么是 MVVM？比之 MVC 有什么区别？什么又是 MVP ？\r\n\r\n```\r\nMVC、MVP 和 MVVM 是三种常见的软件架构设计模式，主要通过分离关注点的方式来组织代码结构，优化我们的开发效率。\r\n \r\n比如说我们实验室在以前项目开发的时候，使用单页应用时，往往一个路由页面对应了一个脚本文件，所有的页面逻辑都在一个脚本文件里。页面的渲染、数据的获取，对用户事件的响应所有的应用逻辑都混合在一起，这样在开发简单项目时，可能看不出什么问题，当时一旦项目变得复杂，那么整个文件就会变得冗长，混乱，这样对我们的项目开发和后期的项目维护是非常不利的。\r\n \r\nMVC 通过分离 Model、View 和 Controller 的方式来组织代码结构。其中 View 负责页面的显示逻辑，Model 负责存储页面的业务数据，以及对相应数据的操作。并且 View 和 Model 应用了观察者模式，当 Model 层发生改变的时候它会通知有关 View 层更新页面。Controller 层是 View 层和 Model 层的纽带，它主要负责用户与应用的响应操作，当用户与页面产生交互的时候，Co\r\nntroller 中的事件触发器就开始工作了，通过调用 Model 层，来完成对 Model 的修改，然后 Model 层再去通知 View 层更新。\r\n \r\nMVP 模式与 MVC 唯一不同的在于 Presenter 和 Controller。在 MVC 模式中我们使用观察者模式，来实现当 Model 层数据发生变化的时候，通知 View 层的更新。这样 View 层和 Model 层耦合在一起，当项目逻辑变得复杂的时候，可能会造成代码的混乱，并且可能会对代码的复用性造成一些问题。MVP 的模式通过使用 Presenter 来实现对 View 层和 Model 层的解耦。MVC 中的\r\nController 只知道 Model 的接口，因此它没有办法控制 View 层的更新，MVP 模式中，View 层的接口暴露给了 Presenter 因此我们可以在 Presenter 中将 Model 的变化和 View 的变化绑定在一起，以此来实现 View 和 Model 的同步更新。这样就实现了对 View 和 Model 的解耦，Presenter 还包含了其他的响应逻辑。\r\n \r\nMVVM 模式中的 VM，指的是 ViewModel，它和 MVP 的思想其实是相同的，不过它通过双向的数据绑定，将 View 和 Model 的同步更新给自动化了。当 Model 发生变化的时候，ViewModel 就会自动更新；ViewModel 变化了，View 也会更新。这样就将 Presenter 中的工作给自动化了。我了解过一点双向数据绑定的原理，比如 vue 是通过使用数据劫持和发布订阅者模式来实现的这一功\r\n能。\r\n```\r\n\r\n详细资料可以参考：\r\n[《浅析前端开发中的 MVC/MVP/MVVM 模式》](https://juejin.im/post/593021272f301e0058273468)\r\n[《MVC，MVP 和 MVVM 的图示》](http://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html)\r\n[《MVVM》](https://juejin.im/book/5bdc715fe51d454e755f75ef/section/5bdc72e6e51d45054f664dbf)\r\n[《一篇文章了解架构模式：MVC/MVP/MVVM》](https://segmentfault.com/a/1190000015310674)\r\n\r\n## 109. vue 双向数据绑定原理？\r\n\r\n```\r\nvue 通过使用双向数据绑定，来实现了 View 和 Model 的同步更新。vue 的双向数据绑定主要是通过使用数据劫持和发布订阅者模式来实现的。\r\n \r\n首先我们通过 Object.defineProperty() 方法来对 Model 数据各个属性添加访问器属性，以此来实现数据的劫持，因此当 Model 中的数据发生变化的时候，我们可以通过配置的 setter 和 getter 方法来实现对 View 层数据更新的通知。\r\n \r\n数据在 html 模板中一共有两种绑定情况，一种是使用 v-model 来对 value 值进行绑定，一种是作为文本绑定，在对模板引擎进行解析的过程中。\r\n \r\n如果遇到元素节点，并且属性值包含 v-model 的话，我们就从 Model 中去获取 v-model 所对应的属性的值，并赋值给元素的 value 值。然后给这个元素设置一个监听事件，当 View 中元素的数据发生变化的时候触发该事件，通知 Model 中的对应的属性的值进行更新。\r\n \r\n如果遇到了绑定的文本节点，我们使用 Model 中对应的属性的值来替换这个文本。对于文本节点的更新，我们使用了发布订阅者模式，属性作为一个主题，我们为这个节点设置一个订阅者对象，将这个订阅者对象加入这个属性主题的订阅者列表中。当 Model 层数据发生改变的时候，Model 作为发布者向主题发出通知，主题收到通知再向它的所有订阅者推送，订阅者收到通知后更改自己的数\r\n据。\r\n```\r\n\r\n详细资料可以参考：\r\n[《Vue.js 双向绑定的实现原理》](http://www.cnblogs.com/kidney/p/6052935.html?utm_source=gold_browser_extension)\r\n\r\n## 110. Object.defineProperty 介绍？\r\n\r\n```\r\nObject.defineProperty 函数一共有三个参数，第一个参数是需要定义属性的对象，第二个参数是需要定义的属性，第三个是该属性描述符。\r\n \r\n一个属性的描述符有四个属性，分别是 value 属性的值，writable 属性是否可写，enumerable 属性是否可枚举，configurable 属性是否可配置修改。\r\n```\r\n\r\n详细资料可以参考：\r\n[《Object.defineProperty()》](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty)\r\n\r\n## 111. 使用 Object.defineProperty() 来进行数据劫持有什么缺点？\r\n\r\n```\r\n有一些对属性的操作，使用这种方法无法拦截，比如说通过下标方式修改数组数据或者给对象新增属性，vue 内部通过重写函数解决了这个问题。在 Vue3.0 中已经不使用这种方式了，而是通过使用 Proxy 对对象进行代理，从而实现数据劫持。使用 Proxy 的好处是它可以完美的监听到任何方式的数据改变，唯一的缺点是兼容性的问题，因为这是 ES6 的语法。\r\n```\r\n\r\n## 112. 什么是 Virtual DOM？为什么 Virtual DOM 比原生 DOM 快？\r\n\r\n```\r\n我对 Virtual DOM 的理解是，\r\n \r\n首先对我们将要插入到文档中的 DOM 树结构进行分析，使用 js 对象将其表示出来，比如一个元素对象，包含 TagName、props 和 Children 这些属性。然后我们将这个 js 对象树给保存下来，最后再将 DOM 片段插入到文档中。\r\n \r\n当页面的状态发生改变，我们需要对页面的 DOM 的结构进行调整的时候，我们首先根据变更的状态，重新构建起一棵对象树，然后将这棵新的对象树和旧的对象树进行比较，记录下两棵树的的差异。\r\n \r\n最后将记录的有差异的地方应用到真正的 DOM 树中去，这样视图就更新了。\r\n \r\n我认为 Virtual DOM 这种方法对于我们需要有大量的 DOM 操作的时候，能够很好的提高我们的操作效率，通过在操作前确定需要做的最小修改，尽可能的减少 DOM 操作带来的重流和重绘的影响。其实 Virtual DOM 并不一定比我们真实的操作 DOM 要快，这种方法的目的是为了提高我们开发时的可维护性，在任意的情况下，都能保证一个尽量小的性能消耗去进行操作。\r\n```\r\n\r\n详细资料可以参考：\r\n[《Virtual DOM》](https://juejin.im/book/5bdc715fe51d454e755f75ef/section/5bdc72e6e51d45054f664dbf)\r\n[《理解 Virtual DOM》](https://github.com/y8n/blog/issues/5)\r\n[《深度剖析：如何实现一个 Virtual DOM 算法》](https://github.com/livoras/blog/issues/13)\r\n[《网上都说操作真实 DOM 慢，但测试结果却比 React 更快，为什么？》](https://www.zhihu.com/question/31809713/answer/53544875)\r\n\r\n## 113. 如何比较两个 DOM 树的差异？\r\n\r\n```\r\n两个树的完全 diff 算法的时间复杂度为 O(n^3) ，但是在前端中，我们很少会跨层级的移动元素，所以我们只需要比较同一层级的元素进行比较，这样就可以将算法的时间复杂度降低为 O(n)。\r\n \r\n算法首先会对新旧两棵树进行一个深度优先的遍历，这样每个节点都会有一个序号。在深度遍历的时候，每遍历到一个节点，我们就将这个节点和新的树中的节点进行比较，如果有差异，则将这个差异记录到一个对象中。\r\n \r\n在对列表元素进行对比的时候，由于 TagName 是重复的，所以我们不能使用这个来对比。我们需要给每一个子节点加上一个 key，列表对比的时候使用 key 来进行比较，这样我们才能够复用老的 DOM 树上的节点。\r\n```\r\n\r\n## 114. 什么是 requestAnimationFrame ？\r\n\r\n详细资料可以参考：\r\n[《你需要知道的 requestAnimationFrame》](https://juejin.im/post/5a82f0626fb9a06358657c9c)\r\n[《CSS3 动画那么强，requestAnimationFrame 还有毛线用？》](https://www.zhangxinxu.com/wordpress/2013/09/css3-animation-requestanimationframe-tween-动画算法/)\r\n\r\n## 115. 谈谈你对 webpack 的看法\r\n\r\n```\r\n我当时使用 webpack 的一个最主要原因是为了简化页面依赖的管理，并且通过将其打包为一个文件来降低页面加载时请求的资源\r\n数。\r\n \r\n我认为 webpack 的主要原理是，它将所有的资源都看成是一个模块，并且把页面逻辑当作一个整体，通过一个给定的入口文件，webpack 从这个文件开始，找到所有的依赖文件，将各个依赖文件模块通过 loader 和 plugins 处理后，然后打包在一起，最后输出一个浏览器可识别的 JS 文件。\r\n \r\nWebpack 具有四个核心的概念，分别是 Entry（入口）、Output（输出）、loader 和 Plugins（插件）。\r\n \r\nEntry 是 webpack 的入口起点，它指示 webpack 应该从哪个模块开始着手，来作为其构建内部依赖图的开始。\r\n \r\nOutput 属性告诉 webpack 在哪里输出它所创建的打包文件，也可指定打包文件的名称，默认位置为 ./dist。\r\n \r\nloader 可以理解为 webpack 的编译器，它使得 webpack 可以处理一些非 JavaScript 文件。在对 loader 进行配置的时候，test 属性，标志有哪些后缀的文件应该被处理，是一个正则表达式。use 属性，指定 test 类型的文件应该使用哪个 loader 进行预处理。常用的 loader 有 css-loader、style-loader 等。\r\n \r\n插件可以用于执行范围更广的任务，包括打包、优化、压缩、搭建服务器等等，要使用一个插件，一般是先使用 npm 包管理器进行安装，然后在配置文件中引入，最后将其实例化后传递给 plugins 数组属性。\r\n \r\n使用 webpack 的确能够提供我们对于项目的管理，但是它的缺点就是调试和配置起来太麻烦了。但现在 webpack4.0 的免配置一定程度上解决了这个问题。但是我感觉就是对我来说，就是一个黑盒，很多时候出现了问题，没有办法很好的定位。\r\n```\r\n\r\n详细资料可以参考：\r\n[《不聊 webpack 配置，来说说它的原理》](https://juejin.im/post/5b38d27451882574d87aa5d5#heading-0)\r\n[《前端工程化——构建工具选型：grunt、gulp、webpack》](https://juejin.im/entry/5b5724d05188251aa01647fd)\r\n[《浅入浅出 webpack》](https://juejin.im/post/5afa9cd0f265da0b981b9af9#heading-0)\r\n[《前端构建工具发展及其比较》](https://juejin.im/entry/5ae5c8c9f265da0b9f400d8e)\r\n\r\n## 116. offsetWidth/offsetHeight,clientWidth/clientHeight 与 scrollWidth/scrollHeight 的区别？\r\n\r\n```\r\nclientWidth/clientHeight 返回的是元素的内部宽度，它的值只包含 content + padding，如果有滚动条，不包含滚动条。\r\nclientTop 返回的是上边框的宽度。\r\nclientLeft 返回的左边框的宽度。\r\n \r\noffsetWidth/offsetHeight 返回的是元素的布局宽度，它的值包含 content + padding + border 包含了滚动条。\r\noffsetTop 返回的是当前元素相对于其 offsetParent 元素的顶部的距离。\r\noffsetLeft 返回的是当前元素相对于其 offsetParent 元素的左部的距离。\r\n \r\nscrollWidth/scrollHeight 返回值包含 content + padding + 溢出内容的尺寸。\r\nscrollTop 属性返回的是一个元素的内容垂直滚动的像素数。\r\nscrollLeft 属性返回的是元素滚动条到元素左边的距离。\r\n```\r\n\r\n详细资料可以参考：\r\n[《最全的获取元素宽高及位置的方法》](https://juejin.im/post/5bc9366d5188255c4834e75a)\r\n[《用 Javascript 获取页面元素的位置》](http://www.ruanyifeng.com/blog/2009/09/find_element_s_position_using_javascript.html)\r\n\r\n## 117. 谈一谈你理解的函数式编程？\r\n\r\n```\r\n简单说，"函数式编程"是一种"编程范式"（programming paradigm），也就是如何编写程序的方法论。\r\n \r\n它具有以下特性：闭包和高阶函数、惰性计算、递归、函数是"第一等公民"、只用"表达式"。\r\n```\r\n\r\n详细资料可以参考：\r\n[《函数式编程初探》](http://www.ruanyifeng.com/blog/2012/04/functional_programming.html)\r\n\r\n## 118. 异步编程的实现方式？\r\n\r\n相关资料：\r\n\r\n```\r\n回调函数\r\n优点：简单、容易理解\r\n缺点：不利于维护，代码耦合高\r\n \r\n事件监听（采用时间驱动模式，取决于某个事件是否发生）：\r\n优点：容易理解，可以绑定多个事件，每个事件可以指定多个回调函数\r\n缺点：事件驱动型，流程不够清晰\r\n \r\n发布/订阅（观察者模式）\r\n类似于事件监听，但是可以通过‘消息中心’，了解现在有多少发布者，多少订阅者\r\n \r\nPromise 对象\r\n优点：可以利用 then 方法，进行链式写法；可以书写错误时的回调函数；\r\n缺点：编写和理解，相对比较难\r\n \r\nGenerator 函数\r\n优点：函数体内外的数据交换、错误处理机制\r\n缺点：流程管理不方便\r\n \r\nasync 函数\r\n优点：内置执行器、更好的语义、更广的适用性、返回的是 Promise、结构清晰。\r\n缺点：错误处理机制\r\n```\r\n\r\n回答：\r\n\r\n```\r\njs 中的异步机制可以分为以下几种：\r\n \r\n第一种最常见的是使用回调函数的方式，使用回调函数的方式有一个缺点是，多个回调函数嵌套的时候会造成回调函数地狱，上下两层的回调函数间的代码耦合度太高，不利于代码的可维护。\r\n \r\n第二种是 Promise 的方式，使用 Promise 的方式可以将嵌套的回调函数作为链式调用。但是使用这种方法，有时会造成多个 then 的链式调用，可能会造成代码的语义不够明确。\r\n \r\n第三种是使用 generator 的方式，它可以在函数的执行过程中，将函数的执行权转移出去，在函数外部我们还可以将执行权转移回来。当我们遇到异步函数执行的时候，将函数执行权转移出去，当异步函数执行完毕的时候我们再将执行权给转移回来。因此我们在 generator 内部对于异步操作的方式，可以以同步的顺序来书写。使用这种方式我们需要考虑的问题是何时将函数的控制权转移回来，因此我们需要有一个自动执行 generator 的机制，比如说 co 模块等方式来实现 generator 的自动执行。\r\n \r\n第四种是使用 async 函数的形式，async 函数是 generator 和 promise 实现的一个自动执行的语法糖，它内部自带执行器，当函数内部执行到一个 await 语句的时候，如果语句返回一个 promise 对象，那么函数将会等待 promise 对象的状态变为 resolve 后再继续向下执行。因此我们可以将异步逻辑，转化为同步的顺序来书写，并且这个函数可以自动执行。\r\n```\r\n\r\n## 119. Js 动画与 CSS 动画区别及相应实现\r\n\r\n```\r\nCSS3 的动画的优点\r\n \r\n在性能上会稍微好一些，浏览器会对 CSS3 的动画做一些优化\r\n代码相对简单\r\n \r\n缺点\r\n \r\n在动画控制上不够灵活\r\n兼容性不好\r\n \r\nJavaScript 的动画正好弥补了这两个缺点，控制能力很强，可以单帧的控制、变换，同时写得好完全可以兼容 IE6，并且功能强大。对于一些复杂控制的动画，使用 javascript 会比较靠谱。而在实现一些小的交互动效的时候，就多考虑考虑 CSS 吧\r\n```\r\n\r\n## 120. get 请求传参长度的误区\r\n\r\n```\r\n误区：我们经常说 get 请求参数的大小存在限制，而 post 请求的参数大小是无限制的。\r\n \r\n实际上 HTTP 协议从未规定 GET/POST 的请求长度限制是多少。对 get 请求参数的限制是来源与浏览器或web 服务器，浏览器或 web 服务器限制了 url 的长度。为了明确这个概念，我们必须再次强调下面几点:\r\n```\r\n\r\n- 1.HTTP 协议未规定 GET 和 POST 的长度限制\r\n- 2.GET 的最大长度显示是因为浏览器和 web 服务器限制了 URI 的长度\r\n- 3.不同的浏览器和 WEB 服务器，限制的最大长度不一样\r\n- 4.要支持 IE，则最大长度为 2083byte，若只支持 Chrome，则最大长度 8182byte\r\n\r\n## 121. URL 和 URI 的区别？\r\n\r\n```\r\nURI: Uniform Resource Identifier      指的是统一资源标识符\r\nURL: Uniform Resource Location        指的是统一资源定位符\r\nURN: Universal Resource Name          指的是统一资源名称\r\n \r\nURI 指的是统一资源标识符，用唯一的标识来确定一个资源，它是一种抽象的定义，也就是说，不管使用什么方法来定义，只要能唯一的标识一个资源，就可以称为 URI。\r\n \r\nURL 指的是统一资源定位符，URN 指的是统一资源名称。URL 和 URN 是 URI 的子集，URL 可以理解为使用地址来标识资源，URN 可以理解为使用名称来标识资源。\r\n```\r\n\r\n详细资料可以参考：\r\n[《HTTP 协议中 URI 和 URL 有什么区别？》](https://www.zhihu.com/question/21950864)\r\n[《你知道 URL、URI 和 URN 三者之间的区别吗？》](http://web.jobbole.com/83452/)\r\n[《URI、URL 和 URN 的区别》](https://segmentfault.com/a/1190000006081973)\r\n\r\n## 122. get 和 post 请求在缓存方面的区别\r\n\r\n相关知识点：\r\n\r\n```\r\nget 请求类似于查找的过程，用户获取数据，可以不用每次都与数据库连接，所以可以使用缓存。\r\n \r\npost 不同，post 做的一般是修改和删除的工作，所以必须与数据库交互，所以不能使用缓存。因此 get 请求适合于请求缓存。\r\n```\r\n\r\n回答：\r\n\r\n```\r\n缓存一般只适用于那些不会更新服务端数据的请求。一般 get 请求都是查找请求，不会对服务器资源数据造成修改，而 post 请求一般都会对服务器数据造成修改，所以，一般会对 get 请求进行缓存，很少会对 post 请求进行缓存。\r\n```\r\n\r\n详细资料可以参考：\r\n[《HTML 关于 post 和 get 的区别以及缓存问题的理解》](https://blog.csdn.net/qq_27093465/article/details/50479289)\r\n\r\n## 123. 图片的懒加载和预加载\r\n\r\n相关知识点：\r\n\r\n```\r\n预加载：提前加载图片，当用户需要查看时可直接从本地缓存中渲染。\r\n \r\n懒加载：懒加载的主要目的是作为服务器前端的优化，减少请求数或延迟请求数。\r\n \r\n两种技术的本质：两者的行为是相反的，一个是提前加载，一个是迟缓甚至不加载。 懒加载对服务器前端有一定的缓解压力作用，预加载则会增加服务器前端压力。\r\n```\r\n\r\n回答：\r\n\r\n```\r\n懒加载也叫延迟加载，指的是在长网页中延迟加载图片的时机，当用户需要访问时，再去加载，这样可以提高网站的首屏加载速度，提升用户的体验，并且可以减少服务器的压力。它适用于图片很多，页面很长的电商网站的场景。懒加载的实现原理是，将页面上的图片的 src 属性设置为空字符串，将图片的真实路径保存在一个自定义属性中，当页面滚动的时候，进行判断，如果图片进入页面可视区域内，则从自定义属性中取出真实路径赋值给图片的 src 属性，以此来实现图片的延迟加载。\r\n \r\n预加载指的是将所需的资源提前请求加载到本地，这样后面在需要用到时就直接从缓存取资源。通过预加载能够减少用户的等待时间，提高用户的体验。我了解的预加载的最常用的方式是使用 js 中的 image 对象，通过为 image 对象来设置 scr 属性，来实现图片的预加载。\r\n \r\n这两种方式都是提高网页性能的方式，两者主要区别是一个是提前加载，一个是迟缓甚至不加载。懒加载对服务器前端有一定的缓解压力作用，预加载则会增加服务器前端压力。\r\n```\r\n\r\n详细资料可以参考：\r\n[《懒加载和预加载》](https://juejin.im/post/5b0c3b53f265da09253cbed0)\r\n[《网页图片加载优化方案》](https://juejin.im/entry/5a73f38cf265da4e99575be3)\r\n[《基于用户行为的图片等资源预加载》](https://www.zhangxinxu.com/wordpress/2016/06/image-preload-based-on-user-behavior/)\r\n\r\n## 124. mouseover 和 mouseenter 的区别？\r\n\r\n```\r\n当鼠标移动到元素上时就会触发 mouseenter 事件，类似 mouseover，它们两者之间的差别是 mouseenter 不会冒泡。\r\n \r\n由于 mouseenter 不支持事件冒泡，导致在一个元素的子元素上进入或离开的时候会触发其 mouseover 和 mouseout 事件，但是却不会触发 mouseenter 和 mouseleave 事件。\r\n```\r\n\r\n详细资料可以参考：\r\n[《mouseenter 与 mouseover 为何这般纠缠不清？》](https://github.com/qianlongo/zepto-analysis/issues/1)\r\n\r\n## 125. js 拖拽功能的实现\r\n\r\n相关知识点：\r\n\r\n```\r\n首先是三个事件，分别是 mousedown，mousemove，mouseup\r\n当鼠标点击按下的时候，需要一个 tag 标识此时已经按下，可以执行 mousemove 里面的具体方法。\r\nclientX，clientY 标识的是鼠标的坐标，分别标识横坐标和纵坐标，并且我们用 offsetX 和 offsetY 来表示\r\n元素的元素的初始坐标，移动的举例应该是：\r\n鼠标移动时候的坐标-鼠标按下去时候的坐标。\r\n也就是说定位信息为：\r\n鼠标移动时候的坐标-鼠标按下去时候的坐标+元素初始情况下的 offetLeft.\r\n```\r\n\r\n回答：\r\n\r\n```\r\n一个元素的拖拽过程，我们可以分为三个步骤，第一步是鼠标按下目标元素，第二步是鼠标保持按下的状态移动鼠标，第三步是鼠\r\n标抬起，拖拽过程结束。\r\n \r\n这三步分别对应了三个事件，mousedown 事件，mousemove 事件和 mouseup 事件。只有在鼠标按下的状态移动鼠标我们才会\r\n执行拖拽事件，因此我们需要在 mousedown 事件中设置一个状态来标识鼠标已经按下，然后在 mouseup 事件中再取消这个状\r\n态。在 mousedown 事件中我们首先应该判断，目标元素是否为拖拽元素，如果是拖拽元素，我们就设置状态并且保存这个时候鼠\r\n标的位置。然后在 mousemove 事件中，我们通过判断鼠标现在的位置和以前位置的相对移动，来确定拖拽元素在移动中的坐标。\r\n最后 mouseup 事件触发后，清除状态，结束拖拽事件。\r\n```\r\n\r\n详细资料可以参考：\r\n[《原生 js 实现拖拽功能基本思路》](https://blog.csdn.net/LZGS_4/article/details/43523465)\r\n\r\n## 126. 为什么使用 setTimeout 实现 setInterval？怎么模拟？\r\n\r\n相关知识点：\r\n\r\n```\r\n// 思路是使用递归函数，不断地去执行 setTimeout 从而达到 setInterval 的效果\r\n \r\nfunction mySetInterval(fn, timeout) {\r\n  // 控制器，控制定时器是否继续执行\r\n  var timer = {\r\n    flag: true\r\n  };\r\n \r\n  // 设置递归函数，模拟定时器执行。\r\n  function interval() {\r\n    if (timer.flag) {\r\n      fn();\r\n      setTimeout(interval, timeout);\r\n    }\r\n  }\r\n \r\n  // 启动定时器\r\n  setTimeout(interval, timeout);\r\n \r\n  // 返回控制器\r\n  return timer;\r\n}\r\n```\r\n\r\n回答：\r\n\r\n```\r\nsetInterval 的作用是每隔一段指定时间执行一个函数，但是这个执行不是真的到了时间立即执行，它真正的作用是每隔一段时间将事件加入事件队列中去，只有当当前的执行栈为空的时候，才能去从事件队列中取出事件执行。所以可能会出现这样的情况，就是当前执行栈执行的时间很长，导致事件队列里边积累多个定时器加入的事件，当执行栈结束的时候，这些事件会依次执行，因此就不能到间隔一段时间执行的效果。\r\n \r\n针对 setInterval 的这个缺点，我们可以使用 setTimeout 递归调用来模拟 setInterval，这样我们就确保了只有一个事件结束了，我们才会触发下一个定时器事件，这样解决了 setInterval 的问题。\r\n```\r\n\r\n详细资料可以参考：\r\n[《用 setTimeout 实现 setInterval》](https://www.jianshu.com/p/32479bdfd851)\r\n[《setInterval 有什么缺点？》](https://zhuanlan.zhihu.com/p/51995737)\r\n\r\n## 127. let 和 const 的注意点？\r\n\r\n- 1.声明的变量只在声明时的代码块内有效\r\n- 2.不存在声明提升\r\n- 3.存在暂时性死区，如果在变量声明前使用，会报错\r\n- 4.不允许重复声明，重复声明会报错\r\n\r\n## 128. 什么是 rest 参数？\r\n\r\n```\r\nrest 参数（形式为...变量名），用于获取函数的多余参数。\r\n```\r\n\r\n## 129. 什么是尾调用，使用尾调用有什么好处？\r\n\r\n```\r\n尾调用指的是函数的最后一步调用另一个函数。我们代码执行是基于执行栈的，所以当我们在一个函数里调用另一个函数时，我们会保留当前的执行上下文，然后再新建另外一个执行上下文加入栈中。使用尾调用的话，因为已经是函数的最后一步，所以这个时候我们可以不必再保留当前的执行上下文，从而节省了内存，这就是尾调用优化。但是 ES6 的尾调用优化只在严格模式下开启，正常模式是无效的。\r\n```\r\n\r\n## 130. Symbol 类型的注意点？\r\n\r\n- 1.Symbol 函数前不能使用 new 命令，否则会报错。\r\n- 2.Symbol 函数可以接受一个字符串作为参数，表示对 Symbol 实例的描述，主要是为了在控制台显示，或者转为字符串时，比较容易区分。\r\n- 3.Symbol 作为属性名，该属性不会出现在 for...in、for...of 循环中，也不会被 Object.keys()、Object.getOwnPropertyNames()、JSON.stringify() 返回。\r\n- 4.Object.getOwnPropertySymbols 方法返回一个数组，成员是当前对象的所有用作属性名的 Symbol 值。\r\n- 5.Symbol.for 接受一个字符串作为参数，然后搜索有没有以该参数作为名称的 Symbol 值。如果有，就返回这个 Symbol 值，否则就新建并返回一个以该字符串为名称的 Symbol 值。\r\n- 6.Symbol.keyFor 方法返回一个已登记的 Symbol 类型值的 key。\r\n\r\n## 131. Set 和 WeakSet 结构？\r\n\r\n- 1.ES6 提供了新的数据结构 Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。\r\n- 2.WeakSet 结构与 Set 类似，也是不重复的值的集合。但是 WeakSet 的成员只能是对象，而不能是其他类型的值。WeakSet 中的对象都是弱引用，即垃圾回收机制不考虑 WeakSet 对该对象的引用，\r\n\r\n## 132. Map 和 WeakMap 结构？\r\n\r\n- 1.Map 数据结构。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。\r\n- 2.WeakMap 结构与 Map 结构类似，也是用于生成键值对的集合。但是 WeakMap 只接受对象作为键名（ null 除外），不接受其他类型的值作为键名。而且 WeakMap 的键名所指向的对象，不计入垃圾回收机制。\r\n\r\n## 133. 什么是 Proxy ？\r\n\r\n```\r\nProxy 用于修改某些操作的默认行为，等同于在语言层面做出修改，所以属于一种“元编程”，即对编程语言进行编程。\r\n \r\nProxy 可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。Proxy 这个词的原意是代理，用在这里表示由它来“代理”某些操作，可以译为“代理器”。\r\n```\r\n\r\n## 134. Reflect 对象创建目的？\r\n\r\n- 1.将 Object 对象的一些明显属于语言内部的方法（比如 Object.defineProperty，放到 Reflect 对象上。\r\n- 2.修改某些 Object 方法的返回结果，让其变得更合理。\r\n- 3.让 Object 操作都变成函数行为。\r\n- 4.Reflect 对象的方法与 Proxy 对象的方法一一对应，只要是 Proxy 对象的方法，就能在 Reflect 对象上找到对应的方法。这就让 Proxy 对象可以方便地调用对应的 Reflect 方法，完成默认行为，作为修改行为的基础。也就是说，不管 Proxy 怎么修改默认行为，你总可以在 Reflect 上获取默认行为。\r\n\r\n## 135. require 模块引入的查找方式？\r\n\r\n```\r\n当 Node 遇到 require(X) 时，按下面的顺序处理。\r\n \r\n（1）如果 X 是内置模块（比如 require(\'http\')）\r\n　　a. 返回该模块。\r\n　　b. 不再继续执行。\r\n \r\n（2）如果 X 以 "./" 或者 "/" 或者 "../" 开头\r\n　　a. 根据 X 所在的父模块，确定 X 的绝对路径。\r\n　　b. 将 X 当成文件，依次查找下面文件，只要其中有一个存在，就返回该文件，不再继续执行。\r\n    X\r\n    X.js\r\n    X.json\r\n    X.node\r\n \r\n　　c. 将 X 当成目录，依次查找下面文件，只要其中有一个存在，就返回该文件，不再继续执行。\r\n    X/package.json（main字段）\r\n    X/index.js\r\n    X/index.json\r\n    X/index.node\r\n \r\n（3）如果 X 不带路径\r\n　　a. 根据 X 所在的父模块，确定 X 可能的安装目录。\r\n　　b. 依次在每个目录中，将 X 当成文件名或目录名加载。\r\n \r\n（4）抛出 "not found"\r\n```\r\n\r\n详细资料可以参考：\r\n[《require() 源码解读》](http://www.ruanyifeng.com/blog/2015/05/require.html)\r\n\r\n## 136. 什么是 Promise 对象，什么是 Promises/A+ 规范？\r\n\r\n```\r\nPromise 对象是异步编程的一种解决方案，最早由社区提出。Promises/A+ 规范是 JavaScript Promise 的标准，规定了一个 Promise 所必须具有的特性。\r\n \r\nPromise 是一个构造函数，接收一个函数作为参数，返回一个 Promise 实例。一个 Promise 实例有三种状态，分别是 pending、resolved 和 rejected，分别代表了进行中、已成功和已失败。实例的状态只能由 pending 转变 resolved 或者 rejected 状态，并且状态一经改变，就凝固了，无法再被改变了。状态的改变是通过 resolve() 和 reject() 函数来实现的，我们\r\n可以在异步操作结束后调用这两个函数改变 Promise 实例的状态，它的原型上定义了一个 then 方法，使用这个 then 方法可以为两个状态的改变注册回调函数。这个回调函数属于微任务，会在本轮事件循环的末尾执行。\r\n```\r\n\r\n详细资料可以参考：\r\n[《Promises/A+ 规范》](http://www.ituring.com.cn/article/66566)\r\n[《Promise》](http://es6.ruanyifeng.com/#docs/promise#Promise-resolve)\r\n\r\n## 137. 手写一个 Promise\r\n\r\n```\r\nconst PENDING = "pending";\r\nconst RESOLVED = "resolved";\r\nconst REJECTED = "rejected";\r\n \r\nfunction MyPromise(fn) {\r\n  // 保存初始化状态\r\n  var self = this;\r\n \r\n  // 初始化状态\r\n  this.state = PENDING;\r\n \r\n  // 用于保存 resolve 或者 rejected 传入的值\r\n  this.value = null;\r\n \r\n  // 用于保存 resolve 的回调函数\r\n  this.resolvedCallbacks = [];\r\n \r\n  // 用于保存 reject 的回调函数\r\n  this.rejectedCallbacks = [];\r\n \r\n  // 状态转变为 resolved 方法\r\n  function resolve(value) {\r\n    // 判断传入元素是否为 Promise 值，如果是，则状态改变必须等待前一个状态改变后再进行改变\r\n    if (value instanceof MyPromise) {\r\n      return value.then(resolve, reject);\r\n    }\r\n \r\n    // 保证代码的执行顺序为本轮事件循环的末尾\r\n    setTimeout(() => {\r\n      // 只有状态为 pending 时才能转变，\r\n      if (self.state === PENDING) {\r\n        // 修改状态\r\n        self.state = RESOLVED;\r\n \r\n        // 设置传入的值\r\n        self.value = value;\r\n \r\n        // 执行回调函数\r\n        self.resolvedCallbacks.forEach(callback => {\r\n          callback(value);\r\n        });\r\n      }\r\n    }, 0);\r\n  }\r\n \r\n  // 状态转变为 rejected 方法\r\n  function reject(value) {\r\n    // 保证代码的执行顺序为本轮事件循环的末尾\r\n    setTimeout(() => {\r\n      // 只有状态为 pending 时才能转变\r\n      if (self.state === PENDING) {\r\n        // 修改状态\r\n        self.state = REJECTED;\r\n \r\n        // 设置传入的值\r\n        self.value = value;\r\n \r\n        // 执行回调函数\r\n        self.rejectedCallbacks.forEach(callback => {\r\n          callback(value);\r\n        });\r\n      }\r\n    }, 0);\r\n  }\r\n \r\n  // 将两个方法传入函数执行\r\n  try {\r\n    fn(resolve, reject);\r\n  } catch (e) {\r\n    // 遇到错误时，捕获错误，执行 reject 函数\r\n    reject(e);\r\n  }\r\n}\r\n \r\nMyPromise.prototype.then = function(onResolved, onRejected) {\r\n  // 首先判断两个参数是否为函数类型，因为这两个参数是可选参数\r\n  onResolved =\r\n    typeof onResolved === "function"\r\n      ? onResolved\r\n      : function(value) {\r\n          return value;\r\n        };\r\n \r\n  onRejected =\r\n    typeof onRejected === "function"\r\n      ? onRejected\r\n      : function(error) {\r\n          throw error;\r\n        };\r\n \r\n  // 如果是等待状态，则将函数加入对应列表中\r\n  if (this.state === PENDING) {\r\n    this.resolvedCallbacks.push(onResolved);\r\n    this.rejectedCallbacks.push(onRejected);\r\n  }\r\n \r\n  // 如果状态已经凝固，则直接执行对应状态的函数\r\n \r\n  if (this.state === RESOLVED) {\r\n    onResolved(this.value);\r\n  }\r\n \r\n  if (this.state === REJECTED) {\r\n    onRejected(this.value);\r\n  }\r\n};\r\n```\r\n\r\n## 138. 如何检测浏览器所支持的最小字体大小？\r\n\r\n```\r\n用 JS 设置 DOM 的字体为某一个值，然后再取出来，如果值设置成功，就说明支持。\r\n```\r\n\r\n## 139. 怎么做 JS 代码 Error 统计？\r\n\r\n```\r\nerror 统计使用浏览器的 window.error 事件。\r\n```\r\n\r\n## 140. 单例模式模式是什么？\r\n\r\n```\r\n单例模式保证了全局只有一个实例来被访问。比如说常用的如弹框组件的实现和全局状态的实现。\r\n```\r\n\r\n## 141. 策略模式是什么？\r\n\r\n```\r\n策略模式主要是用来将方法的实现和方法的调用分离开，外部通过不同的参数可以调用不同的策略。我主要在 MVP 模式解耦的时候\r\n用来将视图层的方法定义和方法调用分离。\r\n```\r\n\r\n## 142. 代理模式是什么？\r\n\r\n```\r\n 代理模式是为一个对象提供一个代用品或占位符，以便控制对它的访问。比如说常见的事件代理。\r\n```\r\n\r\n## 143. 中介者模式是什么？\r\n\r\n```\r\n中介者模式指的是，多个对象通过一个中介者进行交流，而不是直接进行交流，这样能够将通信的各个对象解耦。\r\n```\r\n\r\n## 144. 适配器模式是什么？\r\n\r\n```\r\n适配器用来解决两个接口不兼容的情况，不需要改变已有的接口，通过包装一层的方式实现两个接口的正常协作。假如我们需要一种\r\n新的接口返回方式，但是老的接口由于在太多地方已经使用了，不能随意更改，这个时候就可以使用适配器模式。比如我们需要一种\r\n自定义的时间返回格式，但是我们又不能对 js 时间格式化的接口进行修改，这个时候就可以使用适配器模式。\r\n```\r\n\r\n更多关于设计模式的资料可以参考：\r\n[《前端面试之道》](https://juejin.im/book/5bdc715fe51d454e755f75ef/section/5bdc74186fb9a049ab0d0b6b)\r\n[《JavaScript 设计模式》](https://juejin.im/post/59df4f74f265da430f311909#heading-3)\r\n[《JavaScript 中常见设计模式整理》](https://juejin.im/post/5afe6430518825428630bc4d)\r\n\r\n## 145. 观察者模式和发布订阅模式有什么不同？\r\n\r\n```\r\n发布订阅模式其实属于广义上的观察者模式\r\n \r\n在观察者模式中，观察者需要直接订阅目标事件。在目标发出内容改变的事件后，直接接收事件并作出响应。\r\n \r\n而在发布订阅模式中，发布者和订阅者之间多了一个调度中心。调度中心一方面从发布者接收事件，另一方面向订阅者发布事件，订阅者需要在调度中心中订阅事件。通过调度中心实现了发布者和订阅者关系的解耦。使用发布订阅者模式更利于我们代码的可维护性。\r\n```\r\n\r\n详细资料可以参考：\r\n[《观察者模式和发布订阅模式有什么不同？》](https://www.zhihu.com/question/23486749)\r\n\r\n## 146. Vue 的生命周期是什么？\r\n\r\n```\r\nVue 的生命周期指的是组件从创建到销毁的一系列的过程，被称为 Vue 的生命周期。通过提供的 Vue 在生命周期各个阶段的钩子函数，我们可以很好的在 Vue 的各个生命阶段实现一些操作。\r\n```\r\n\r\n## 147. Vue 的各个生命阶段是什么？\r\n\r\n```\r\nVue 一共有8个生命阶段，分别是创建前、创建后、加载前、加载后、更新前、更新后、销毁前和销毁后，每个阶段对应了一个生命周期的钩子函数。\r\n \r\n（1）beforeCreate 钩子函数，在实例初始化之后，在数据监听和事件配置之前触发。因此在这个事件中我们是获取不到 data 数据的。\r\n \r\n（2）created 钩子函数，在实例创建完成后触发，此时可以访问 data、methods 等属性。但这个时候组件还没有被挂载到页面中去，所以这个时候访问不到 $el 属性。一般我们可以在这个函数中进行一些页面初始化的工作，比如通过 ajax 请求数据来对页面进行初始化。\r\n \r\n（3）beforeMount 钩子函数，在组件被挂载到页面之前触发。在 beforeMount 之前，会找到对应的 template，并编译成 render 函数。\r\n \r\n（4）mounted 钩子函数，在组件挂载到页面之后触发。此时可以通过 DOM API 获取到页面中的 DOM 元素。\r\n \r\n（5）beforeUpdate 钩子函数，在响应式数据更新时触发，发生在虚拟 DOM 重新渲染和打补丁之前，这个时候我们可以对可能会被移除的元素做一些操作，比如移除事件监听器。\r\n \r\n（6）updated 钩子函数，虚拟 DOM 重新渲染和打补丁之后调用。\r\n \r\n（7）beforeDestroy 钩子函数，在实例销毁之前调用。一般在这一步我们可以销毁定时器、解绑全局事件等。\r\n \r\n（8）destroyed 钩子函数，在实例销毁之后调用，调用后，Vue 实例中的所有东西都会解除绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。\r\n \r\n当我们使用 keep-alive 的时候，还有两个钩子函数，分别是 activated 和 deactivated 。用 keep-alive 包裹的组件在切换时不会进行销毁，而是缓存到内存中并执行 deactivated 钩子函数，命中缓存渲染后会执行 actived 钩子函数。\r\n```\r\n\r\n详细资料可以参考：\r\n[《vue 生命周期深入》](https://juejin.im/entry/5aee8fbb518825671952308c)\r\n[《Vue 实例》](https://cn.vuejs.org/v2/guide/instance.html)\r\n\r\n## 148. Vue 组件间的参数传递方式？\r\n\r\n```\r\n（1）父子组件间通信\r\n \r\n第一种方法是子组件通过 props 属性来接受父组件的数据，然后父组件在子组件上注册监听事件，子组件通过 emit 触发事\r\n件来向父组件发送数据。\r\n \r\n第二种是通过 ref 属性给子组件设置一个名字。父组件通过 $refs 组件名来获得子组件，子组件通过 $parent 获得父组\r\n件，这样也可以实现通信。\r\n \r\n第三种是使用 provider/inject，在父组件中通过 provider 提供变量，在子组件中通过 inject 来将变量注入到组件\r\n中。不论子组件有多深，只要调用了 inject 那么就可以注入 provider 中的数据。\r\n \r\n（2）兄弟组件间通信\r\n \r\n第一种是使用 eventBus 的方法，它的本质是通过创建一个空的 Vue 实例来作为消息传递的对象，通信的组件引入这个实\r\n例，通信的组件通过在这个实例上监听和触发事件，来实现消息的传递。\r\n \r\n第二种是通过 $parent.$refs 来获取到兄弟组件，也可以进行通信。\r\n \r\n（3）任意组件之间\r\n \r\n使用 eventBus ，其实就是创建一个事件中心，相当于中转站，可以用它来传递事件和接收事件。\r\n \r\n \r\n如果业务逻辑复杂，很多组件之间需要同时处理一些公共的数据，这个时候采用上面这一些方法可能不利于项目的维护。这个时候\r\n可以使用 vuex ，vuex 的思想就是将这一些公共的数据抽离出来，将它作为一个全局的变量来管理，然后其他组件就可以对这个\r\n公共数据进行读写操作，这样达到了解耦的目的。\r\n```\r\n\r\n详细资料可以参考：\r\n[《VUE 组件之间数据传递全集》](https://juejin.im/entry/5ba215ac5188255c6d0d8345)\r\n\r\n## 149. computed 和 watch 的差异？\r\n\r\n```\r\n（1）computed 是计算一个新的属性，并将该属性挂载到 Vue 实例上，而 watch 是监听已经存在且已挂载到 Vue 实例上的数据，所以用 watch 同样可以监听 computed 计算属性的变化。\r\n \r\n（2）computed 本质是一个惰性求值的观察者，具有缓存性，只有当依赖变化后，第一次访问 computed 属性，才会计算新的值。而 watch 则是当数据发生变化便会调用执行函数。\r\n \r\n（3）从使用场景上说，computed 适用一个数据被多个数据影响，而 watch 适用一个数据影响多个数据。\r\n```\r\n\r\n详细资料可以参考：\r\n[《做面试的不倒翁：浅谈 Vue 中 computed 实现原理》](https://juejin.im/post/5b98c4da6fb9a05d353c5fd7)\r\n[《深入理解 Vue 的 watch 实现原理及其实现方式》](https://juejin.im/post/5af908ea5188254265399009)\r\n\r\n## 150. vue-router 中的导航钩子函数\r\n\r\n```\r\n（1）全局的钩子函数 beforeEach 和 afterEach\r\n \r\nbeforeEach 有三个参数，to 代表要进入的路由对象，from 代表离开的路由对象。next 是一个必须要执行的函数，如果不传参数，那就执行下一个钩子函数，如果传入 false，则终止跳转，如果传入一个路径，则导航到对应的路由，如果传入 error ，则导航终止，error 传入错误的监听函数。\r\n \r\n（2）单个路由独享的钩子函数 beforeEnter，它是在路由配置上直接进行定义的。\r\n \r\n（3）组件内的导航钩子主要有这三种：beforeRouteEnter、beforeRouteUpdate、beforeRouteLeave。它们是直接在路由组\r\n件内部直接进行定义的。\r\n```\r\n\r\n详细资料可以参考：\r\n[《导航守卫》](https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#全局前置守卫)\r\n\r\n## 151. $route 和 $router 的区别？\r\n\r\n```\r\n$route 是“路由信息对象”，包括 path，params，hash，query，fullPath，matched，name 等路由信息参数。而 $router 是“路由实例”对象包括了路由的跳转方法，钩子函数等。\r\n```\r\n\r\n## 152. vue 常用的修饰符？\r\n\r\n```\r\n.prevent: 提交事件不再重载页面；.stop: 阻止单击事件冒泡；.self: 当事件发生在该元素本身而不是子元素的时候会触发；\r\n```\r\n\r\n## 153. vue 中 key 值的作用？\r\n\r\n```\r\nvue 中 key 值的作用可以分为两种情况来考虑。\r\n \r\n第一种情况是 v-if 中使用 key。由于 Vue 会尽可能高效地渲染元素，通常会复用已有元素而不是从头开始渲染。因此当我们使用 v-if 来实现元素切换的时候，如果切换前后含有相同类型的元素，那么这个元素就会被复用。如果是相同的 input 元素，那么切换前后用户的输入不会被清除掉，这样是不符合需求的。因此我们可以通过使用 key 来唯一的标识一个元素，这个情况下，使用 key 的元素不会被复用。这个时候 key 的作用是用来标识一个独立的元素。\r\n \r\n第二种情况是 v-for 中使用 key。用 v-for 更新已渲染过的元素列表时，它默认使用“就地复用”的策略。如果数据项的顺序发生了改变，Vue 不会移动 DOM 元素来匹配数据项的顺序，而是简单复用此处的每个元素。因此通过为每个列表项提供一个 key 值，来以便 Vue 跟踪元素的身份，从而高效的实现复用。这个时候 key 的作用是为了高效的更新渲染虚拟 DOM。\r\n```\r\n\r\n详细资料可以参考：\r\n[《Vue 面试中，经常会被问到的面试题 Vue 知识点整理》](https://segmentfault.com/a/1190000016344599)\r\n[《Vue2.0 v-for 中 :key 到底有什么用？》](https://www.zhihu.com/question/61064119)\r\n[《vue 中 key 的作用》](https://www.cnblogs.com/RainyBear/p/8563101.html)\r\n\r\n## 154. computed 和 watch 区别？\r\n\r\n```\r\ncomputed 是计算属性，依赖其他属性计算值，并且 computed 的值有缓存，只有当计算值变化才会返回内容。\r\n \r\nwatch 监听到值的变化就会执行回调，在回调中可以进行一些逻辑操作。\r\n```\r\n\r\n## 155. keep-alive 组件有什么作用？\r\n\r\n```\r\n如果你需要在组件切换的时候，保存一些组件的状态防止多次渲染，就可以使用 keep-alive 组件包裹需要保存的组件。\r\n```\r\n\r\n## 156. vue 中 mixin 和 mixins 区别？\r\n\r\n```\r\nmixin 用于全局混入，会影响到每个组件实例。\r\n \r\nmixins 应该是我们最常使用的扩展组件的方式了。如果多个组件中有相同的业务逻辑，就可以将这些逻辑剥离出来，通过 mixins 混入代码，比如上拉下拉加载数据这种逻辑等等。另外需要注意的是 mixins 混入的钩子函数会先于组件内的钩子函数执行，并且在遇到同名选项的时候也会有选择性的进行合并\r\n```\r\n\r\n详细资料可以参考：\r\n[《前端面试之道》](https://juejin.im/book/5bdc715fe51d454e755f75ef/section/5bdc731b51882516c56ced6f)\r\n[《混入》](https://cn.vuejs.org/v2/guide/mixins.html)\r\n\r\n## 157. 开发中常用的几种 Content-Type ？\r\n\r\n```\r\n（1）application/x-www-form-urlencoded\r\n \r\n浏览器的原生 form 表单，如果不设置 enctype 属性，那么最终就会以 application/x-www-form-urlencoded 方式提交数据。该种方式提交的数据放在 body 里面，数据按照 key1=val1&key2=val2 的方式进行编码，key 和 val 都进行了 URL\r\n转码。\r\n \r\n（2）multipart/form-data\r\n \r\n该种方式也是一个常见的 POST 提交方式，通常表单上传文件时使用该种方式。\r\n \r\n（3）application/json\r\n \r\n告诉服务器消息主体是序列化后的 JSON 字符串。\r\n \r\n（4）text/xml\r\n \r\n该种方式主要用来提交 XML 格式的数据。\r\n```\r\n\r\n详细资料可以参考：\r\n[《常用的几种 Content-Type》](https://honglu.me/2015/07/13/常用的几种Content-Type/)\r\n\r\n## 158. 如何封装一个 javascript 的类型判断函数？\r\n\r\n```\r\nfunction getType(value) {\r\n  // 判断数据是 null 的情况\r\n  if (value === null) {\r\n    return value + "";\r\n  }\r\n \r\n  // 判断数据是引用类型的情况\r\n  if (typeof value === "object") {\r\n    let valueClass = Object.prototype.toString.call(value),\r\n      type = valueClass.split(" ")[1].split("");\r\n \r\n    type.pop();\r\n \r\n    return type.join("").toLowerCase();\r\n  } else {\r\n    // 判断数据是基本数据类型的情况和函数的情况\r\n    return typeof value;\r\n  }\r\n}\r\n```\r\n\r\n详细资料可以参考：\r\n[《JavaScript 专题之类型判断(上)》](https://github.com/mqyqingfeng/Blog/issues/28)\r\n\r\n## 159. 如何判断一个对象是否为空对象？\r\n\r\n```\r\nfunction checkNullObj(obj) {\r\n  return Object.keys(obj).length === 0;\r\n}\r\n```\r\n\r\n详细资料可以参考：\r\n[《js 判断一个 object 对象是否为空》](https://blog.csdn.net/FungLeo/article/details/78113661)\r\n\r\n## 160. 使用闭包实现每隔一秒打印 1,2,3,4\r\n\r\n```\r\n// 使用闭包实现\r\nfor (var i = 0; i < 5; i++) {\r\n  (function(i) {\r\n    setTimeout(function() {\r\n      console.log(i);\r\n    }, i * 1000);\r\n  })(i);\r\n}\r\n \r\n// 使用 let 块级作用域\r\n \r\nfor (let i = 0; i < 5; i++) {\r\n  setTimeout(function() {\r\n    console.log(i);\r\n  }, i * 1000);\r\n}\r\n```\r\n\r\n## 161. 手写一个 jsonp\r\n\r\n```\r\nfunction jsonp(url, params, callback) {\r\n  // 判断是否含有参数\r\n  let queryString = url.indexOf("?") === "-1" ? "?" : "&";\r\n \r\n  // 添加参数\r\n  for (var k in params) {\r\n    if (params.hasOwnProperty(k)) {\r\n      queryString += k + "=" + params[k] + "&";\r\n    }\r\n  }\r\n \r\n  // 处理回调函数名\r\n  let random = Math.random()\r\n      .toString()\r\n      .replace(".", ""),\r\n    callbackName = "myJsonp" + random;\r\n \r\n  // 添加回调函数\r\n  queryString += "callback=" + callbackName;\r\n \r\n  // 构建请求\r\n  let scriptNode = document.createElement("script");\r\n  scriptNode.src = url + queryString;\r\n \r\n  window[callbackName] = function() {\r\n    // 调用回调函数\r\n    callback(...arguments);\r\n \r\n    // 删除这个引入的脚本\r\n    document.getElementsByTagName("head")[0].removeChild(scriptNode);\r\n  };\r\n \r\n  // 发起请求\r\n  document.getElementsByTagName("head")[0].appendChild(scriptNode);\r\n}\r\n```\r\n\r\n详细资料可以参考：\r\n[《原生 jsonp 具体实现》](https://www.cnblogs.com/zzc5464/p/jsonp.html)\r\n[《jsonp 的原理与实现》](https://segmentfault.com/a/1190000007665361#articleHeader1)\r\n\r\n## 162. 手写一个观察者模式？\r\n\r\n```\r\nvar events = (function() {\r\n  var topics = {};\r\n \r\n  return {\r\n    // 注册监听函数\r\n    subscribe: function(topic, handler) {\r\n      if (!topics.hasOwnProperty(topic)) {\r\n        topics[topic] = [];\r\n      }\r\n      topics[topic].push(handler);\r\n    },\r\n \r\n    // 发布事件，触发观察者回调事件\r\n    publish: function(topic, info) {\r\n      if (topics.hasOwnProperty(topic)) {\r\n        topics[topic].forEach(function(handler) {\r\n          handler(info);\r\n        });\r\n      }\r\n    },\r\n \r\n    // 移除主题的一个观察者的回调事件\r\n    remove: function(topic, handler) {\r\n      if (!topics.hasOwnProperty(topic)) return;\r\n \r\n      var handlerIndex = -1;\r\n      topics[topic].forEach(function(item, index) {\r\n        if (item === handler) {\r\n          handlerIndex = index;\r\n        }\r\n      });\r\n \r\n      if (handlerIndex >= 0) {\r\n        topics[topic].splice(handlerIndex, 1);\r\n      }\r\n    },\r\n \r\n    // 移除主题的所有观察者的回调事件\r\n    removeAll: function(topic) {\r\n      if (topics.hasOwnProperty(topic)) {\r\n        topics[topic] = [];\r\n      }\r\n    }\r\n  };\r\n})();\r\n```\r\n\r\n详细资料可以参考：\r\n[《JS 事件模型》](https://segmentfault.com/a/1190000006934031#articleHeader1)\r\n\r\n## 163. EventEmitter 实现\r\n\r\n```\r\nclass EventEmitter {\r\n  constructor() {\r\n    this.events = {};\r\n  }\r\n \r\n  on(event, callback) {\r\n    let callbacks = this.events[event] || [];\r\n    callbacks.push(callback);\r\n    this.events[event] = callbacks;\r\n \r\n    return this;\r\n  }\r\n \r\n  off(event, callback) {\r\n    let callbacks = this.events[event];\r\n    this.events[event] = callbacks && callbacks.filter(fn => fn !== callback);\r\n \r\n    return this;\r\n  }\r\n \r\n  emit(event, ...args) {\r\n    let callbacks = this.events[event];\r\n    callbacks.forEach(fn => {\r\n      fn(...args);\r\n    });\r\n \r\n    return this;\r\n  }\r\n \r\n  once(event, callback) {\r\n    let wrapFun = function(...args) {\r\n      callback(...args);\r\n \r\n      this.off(event, wrapFun);\r\n    };\r\n    this.on(event, wrapFun);\r\n \r\n    return this;\r\n  }\r\n}\r\n```\r\n\r\n## 164. 一道常被人轻视的前端 JS 面试题\r\n\r\n```\r\nfunction Foo() {\r\n  getName = function() {\r\n    alert(1);\r\n  };\r\n  return this;\r\n}\r\nFoo.getName = function() {\r\n  alert(2);\r\n};\r\nFoo.prototype.getName = function() {\r\n  alert(3);\r\n};\r\nvar getName = function() {\r\n  alert(4);\r\n};\r\nfunction getName() {\r\n  alert(5);\r\n}\r\n \r\n//请写出以下输出结果：\r\nFoo.getName(); // 2\r\ngetName(); // 4\r\nFoo().getName(); // 1\r\ngetName(); // 1\r\nnew Foo.getName(); // 2\r\nnew Foo().getName(); // 3\r\nnew new Foo().getName(); // 3\r\n```\r\n\r\n详细资料可以参考：\r\n[《前端程序员经常忽视的一个 JavaScript 面试题》](https://github.com/Wscats/Good-text-Share/issues/85)\r\n[《一道考察运算符优先级的 JavaScript 面试题》](https://segmentfault.com/q/1010000008430170)\r\n[《一道常被人轻视的前端 JS 面试题》](https://www.cnblogs.com/xxcanghai/p/5189353.html)\r\n\r\n## 165. 如何确定页面的可用性时间，什么是 Performance API？\r\n\r\n```\r\nPerformance API 用于精确度量、控制、增强浏览器的性能表现。这个 API 为测量网站性能，提供以前没有办法做到的精度。\r\n \r\n使用 getTime 来计算脚本耗时的缺点，首先，getTime方法（以及 Date 对象的其他方法）都只能精确到毫秒级别（一秒的千分之一），想要得到更小的时间差别就无能为力了。其次，这种写法只能获取代码运行过程中的时间进度，无法知道一些后台事件的时间进度，比如浏览器用了多少时间从服务器加载网页。\r\n \r\n为了解决这两个不足之处，ECMAScript 5引入“高精度时间戳”这个 API，部署在 performance 对象上。它的精度可以达到1毫秒\r\n的千分之一（1秒的百万分之一）。\r\n \r\nnavigationStart：当前浏览器窗口的前一个网页关闭，发生 unload 事件时的 Unix 毫秒时间戳。如果没有前一个网页，则等于 fetchStart 属性。\r\n \r\nloadEventEnd：返回当前网页 load 事件的回调函数运行结束时的 Unix 毫秒时间戳。如果该事件还没有发生，返回 0。\r\n```\r\n\r\n根据上面这些属性，可以计算出网页加载各个阶段的耗时。比如，网页加载整个过程的耗时的计算方法如下：\r\n\r\n```\r\nvar t = performance.timing;\r\nvar pageLoadTime = t.loadEventEnd - t.navigationStart;\r\n```\r\n\r\n详细资料可以参考：\r\n[《Performance API》](http://javascript.ruanyifeng.com/bom/performance.html)\r\n\r\n## 166. js 中的命名规则\r\n\r\n```\r\n（1）第一个字符必须是字母、下划线（_）或美元符号（$）\r\n（2）余下的字符可以是下划线、美元符号或任何字母或数字字符\r\n \r\n一般我们推荐使用驼峰法来对变量名进行命名，因为这样可以与 ECMAScript 内置的函数和对象命名格式保持一致。\r\n```\r\n\r\n详细资料可以参考：\r\n[《ECMAScript 变量》](http://www.w3school.com.cn/js/pro_js_variables.asp)\r\n\r\n## 167. js 语句末尾分号是否可以省略？\r\n\r\n```\r\n在 ECMAScript 规范中，语句结尾的分号并不是必需的。但是我们一般最好不要省略分号，因为加上分号一方面有\r\n利于我们代码的可维护性，另一方面也可以避免我们在对代码进行压缩时出现错误。\r\n```\r\n\r\n## 168. Object.assign()\r\n\r\n```\r\nObject.assign() 方法用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象。\r\n```\r\n\r\n## 169. Math.ceil 和 Math.floor\r\n\r\n```js\r\nMath.ceil() === 向上取整，函数返回一个大于或等于给定数字的最小整数。\r\n \r\nMath.floor() === 向下取整，函数返回一个小于或等于给定数字的最大整数。\r\n```\r\n\r\n## 170. js for 循环注意点\r\n\r\n```js\r\nfor (var i = 0, j = 0; i < 5, j < 9; i++, j++) {\r\n  console.log(i, j);\r\n}\r\n \r\n// 当判断语句含有多个语句时，以最后一个判断语句的值为准，因此上面的代码会执行 10 次。\r\n// 当判断语句为空时，循环会一直进行。\r\n```',contentRendered:'<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>本篇主要是笔者在复习 JavaScript 相关知识和一些相关面试题时所做的笔记，如果出现错误，希望大家指出！</p>\n</div>\n<h2 id="_1-介绍-js-的基本数据类型。" tabindex="-1"><a class="header-anchor" href="#_1-介绍-js-的基本数据类型。" aria-hidden="true">#</a> 1. 介绍 js 的基本数据类型。</h2>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>js 一共有六种基本数据类型，分别是 Undefined、Null、Boolean、Number、String，还有在 <span class="token constant">ES6</span> 中新增的 Symbol 类型，\n代表创建后独一无二且不可变的数据类型，它的出现我认为主要是为了解决可能出现的全局变量冲突的问题。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="_2-javascript-有几种类型的值-你能画一下他们的内存图吗" tabindex="-1"><a class="header-anchor" href="#_2-javascript-有几种类型的值-你能画一下他们的内存图吗" aria-hidden="true">#</a> 2. JavaScript 有几种类型的值？你能画一下他们的内存图吗？</h2>\n<p>涉及知识点：</p>\n<ul>\n<li>栈：原始数据类型（Undefined、Null、Boolean、Number、String）</li>\n<li>堆：引用数据类型（对象、数组和函数）</li>\n</ul>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>两种类型的区别是：存储位置不同。\n原始数据类型直接存储在栈（stack）中的简单数据段，占据空间小、大小固定，属于被频繁使用数据，所以放入栈中存储。\n \n引用数据类型存储在堆（heap）中的对象，占据空间大、大小不固定。如果存储在栈中，将会影响程序运行的性能；引用数据类型在\n栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实\n体。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>回答：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>js 可以分为两种类型的值，一种是基本数据类型，一种是复杂数据类型。\n \n基本数据类型....（参考1）\n \n复杂数据类型指的是 Object 类型，所有其他的如 Array、Date 等数据类型都可以理解为 Object 类型的子类。\n \n两种类型间的主要区别是它们的存储位置不同，基本数据类型的值直接保存在栈中，而复杂数据类型的值保存在堆中，通过使用在栈中\n保存对应的指针来获取堆中的值。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>详细资料可以参考：\n<a href="https://blog.csdn.net/lxcao/article/details/52749421" target="_blank" rel="noopener noreferrer">《JavaScript 有几种类型的值？》<ExternalLinkIcon/></a>\n<a href="https://blog.csdn.net/jiangjuanjaun/article/details/80327342" target="_blank" rel="noopener noreferrer">《JavaScript 有几种类型的值？能否画一下它们的内存图；》<ExternalLinkIcon/></a></p>\n<h2 id="_3-什么是堆-什么是栈-它们之间有什么区别和联系" tabindex="-1"><a class="header-anchor" href="#_3-什么是堆-什么是栈-它们之间有什么区别和联系" aria-hidden="true">#</a> 3. 什么是堆？什么是栈？它们之间有什么区别和联系？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>堆和栈的概念存在于数据结构中和操作系统内存中。\n \n在数据结构中，栈中数据的存取方式为先进后出。而堆是一个优先队列，是按优先级来进行排序的，优先级可以按照大小来规定。完全\n二叉树是堆的一种实现方式。\n \n在操作系统中，内存被分为栈区和堆区。\n \n栈区内存由编译器自动分配释放，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。\n \n堆区内存一般由程序员分配释放，若程序员不释放，程序结束时可能由垃圾回收机制回收。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>详细资料可以参考：\n<a href="https://www.zhihu.com/question/19729973" target="_blank" rel="noopener noreferrer">《什么是堆？什么是栈？他们之间有什么区别和联系？》<ExternalLinkIcon/></a></p>\n<h2 id="_4-内部属性-class-是什么" tabindex="-1"><a class="header-anchor" href="#_4-内部属性-class-是什么" aria-hidden="true">#</a> 4. 内部属性 [[Class]] 是什么？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>所有 typeof 返回值为 "object" 的对象（如数组）都包含一个内部属性 [[Class]]（我们可以把它看作一个内部的分类，而非\n传统的面向对象意义上的类）。这个属性无法直接访问，一般通过 Object.prototype.toString(..) 来查看。例如：\n \nObject.prototype.toString.call( [1,2,3] );\n// "[object Array]"\n \nObject.prototype.toString.call( /regex-literal/i );\n// "[object RegExp]"\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="_5-介绍-js-有哪些内置对象" tabindex="-1"><a class="header-anchor" href="#_5-介绍-js-有哪些内置对象" aria-hidden="true">#</a> 5. 介绍 js 有哪些内置对象？</h2>\n<p>涉及知识点：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>全局的对象（ global objects ）或称标准内置对象，不要和 "全局对象（global object）" 混淆。这里说的全局的对象是说在\n全局作用域里的对象。全局作用域中的其他对象可以由用户的脚本创建或由宿主程序提供。\n \n标准内置对象的分类\n \n（1）值属性，这些全局属性返回一个简单值，这些值没有自己的属性和方法。\n \n例如 Infinity、NaN、undefined、null 字面量\n \n（2）函数属性，全局函数可以直接调用，不需要在调用时指定所属对象，执行结束后会将结果直接返回给调用者。\n \n例如 eval()、parseFloat()、parseInt() 等\n \n（3）基本对象，基本对象是定义或使用其他对象的基础。基本对象包括一般对象、函数对象和错误对象。\n \n例如 Object、Function、Boolean、Symbol、Error 等\n \n（4）数字和日期对象，用来表示数字、日期和执行数学计算的对象。\n \n例如 Number、Math、Date\n \n（5）字符串，用来表示和操作字符串的对象。\n \n例如 String、RegExp\n \n（6）可索引的集合对象，这些对象表示按照索引值来排序的数据集合，包括数组和类型数组，以及类数组结构的对象。例如 Array\n \n（7）使用键的集合对象，这些集合对象在存储数据时会使用到键，支持按照插入顺序来迭代元素。\n \n例如 Map、Set、WeakMap、WeakSet\n \n（8）矢量集合，SIMD 矢量集合中的数据会被组织为一个数据序列。\n \n例如 SIMD 等\n \n（9）结构化数据，这些对象用来表示和操作结构化的缓冲区数据，或使用 JSON 编码的数据。\n \n例如 JSON 等\n \n（10）控制抽象对象\n \n例如 Promise、Generator 等\n \n（11）反射\n \n例如 Reflect、Proxy\n \n（12）国际化，为了支持多语言处理而加入 ECMAScript 的对象。\n \n例如 Intl、Intl.Collator 等\n \n（13）WebAssembly\n \n（14）其他\n \n例如 arguments\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br></div></div><p>回答：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>js 中的内置对象主要指的是在程序执行前存在全局作用域里的由 js 定义的一些全局值属性、函数和用来实例化其他对象的构造函\n数对象。一般我们经常用到的如全局变量值 NaN、undefined，全局函数如 parseInt()、parseFloat() 用来实例化对象的构\n造函数如 Date、Object 等，还有提供数学计算的单体内置对象如 Math 对象。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>详细资料可以参考：\n<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects" target="_blank" rel="noopener noreferrer">《标准内置对象的分类》<ExternalLinkIcon/></a>\n<a href="https://segmentfault.com/a/1190000011467723#articleHeader24" target="_blank" rel="noopener noreferrer">《JS 所有内置对象属性和方法汇总》<ExternalLinkIcon/></a></p>\n<h2 id="_6-undefined-与-undeclared-的区别" tabindex="-1"><a class="header-anchor" href="#_6-undefined-与-undeclared-的区别" aria-hidden="true">#</a> 6. undefined 与 undeclared 的区别？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>已在作用域中声明但还没有赋值的变量，是 undefined 的。相反，还没有在作用域中声明过的变量，是 undeclared 的。\n \n对于 undeclared 变量的引用，浏览器会报引用错误，如 ReferenceError: b is not defined 。但是我们可以使用 typ\neof 的安全防范机制来避免报错，因为对于 undeclared（或者 not defined ）变量，typeof 会返回 "undefined"。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="_7-null-和-undefined-的区别" tabindex="-1"><a class="header-anchor" href="#_7-null-和-undefined-的区别" aria-hidden="true">#</a> 7. null 和 undefined 的区别？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>首先 Undefined 和 Null 都是基本数据类型，这两个基本数据类型分别都只有一个值，就是 undefined 和 null。\n \nundefined 代表的含义是未定义，null 代表的含义是空对象。一般变量声明了但还没有定义的时候会返回 undefined，null\n主要用于赋值给一些可能会返回对象的变量，作为初始化。\n \nundefined 在 js 中不是一个保留字，这意味着我们可以使用 undefined 来作为一个变量名，这样的做法是非常危险的，它\n会影响我们对 undefined 值的判断。但是我们可以通过一些方法获得安全的 undefined 值，比如说 void 0。\n \n当我们对两种类型使用 typeof 进行判断的时候，Null 类型化会返回 “object”，这是一个历史遗留的问题。当我们使用双等\n号对两种类型的值进行比较时会返回 true，使用三个等号时会返回 false。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>详细资料可以参考：\n<a href="http://cavszhouyou.top/JavaScript%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E4%B9%8Bundefined%E4%B8%8Enull.html" target="_blank" rel="noopener noreferrer">《JavaScript 深入理解之 undefined 与 null》<ExternalLinkIcon/></a></p>\n<h2 id="_8-如何获取安全的-undefined-值" tabindex="-1"><a class="header-anchor" href="#_8-如何获取安全的-undefined-值" aria-hidden="true">#</a> 8. 如何获取安全的 undefined 值？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>因为 undefined 是一个标识符，所以可以被当作变量来使用和赋值，但是这样会影响 undefined 的正常判断。\n \n表达式 void ___ 没有返回值，因此返回结果是 undefined。void 并不改变表达式的结果，只是让表达式不返回值。\n \n按惯例我们用 void 0 来获得 undefined。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="_9-说几条写-javascript-的基本规范" tabindex="-1"><a class="header-anchor" href="#_9-说几条写-javascript-的基本规范" aria-hidden="true">#</a> 9. 说几条写 JavaScript 的基本规范？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>在平常项目开发中，我们遵守一些这样的基本规范，比如说：\n \n（1）一个函数作用域中所有的变量声明应该尽量提到函数首部，用一个 var 声明，不允许出现两个连续的 var 声明，声明时\n    如果变量没有值，应该给该变量赋值对应类型的初始值，便于他人阅读代码时，能够一目了然的知道变量对应的类型值。\n \n（2）代码中出现地址、时间等字符串时需要使用常量代替。\n \n（3）在进行比较的时候吧，尽量使用\'===\', \'!==\'代替\'==\', \'!=\'。\n \n（4）不要在内置对象的原型上添加方法，如 Array, Date。\n \n（5）switch 语句必须带有 default 分支。\n \n（6）for 循环必须使用大括号。\n \n（7）if 语句必须使用大括号。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="_10-javascript-原型-原型链-有什么特点" tabindex="-1"><a class="header-anchor" href="#_10-javascript-原型-原型链-有什么特点" aria-hidden="true">#</a> 10. JavaScript 原型，原型链？ 有什么特点？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>在 js 中我们是使用构造函数来新建一个对象的，每一个构造函数的内部都有一个 prototype 属性值，这个属性值是一个对\n象，这个对象包含了可以由该构造函数的所有实例共享的属性和方法。当我们使用构造函数新建一个对象后，在这个对象的内部\n将包含一个指针，这个指针指向构造函数的 prototype 属性对应的值，在 ES5 中这个指针被称为对象的原型。一般来说我们\n是不应该能够获取到这个值的，但是现在浏览器中都实现了 __proto__ 属性来让我们访问这个属性，但是我们最好不要使用这\n个属性，因为它不是规范中规定的。ES5 中新增了一个 Object.getPrototypeOf() 方法，我们可以通过这个方法来获取对\n象的原型。\n \n当我们访问一个对象的属性时，如果这个对象内部不存在这个属性，那么它就会去它的原型对象里找这个属性，这个原型对象又\n会有自己的原型，于是就这样一直找下去，也就是原型链的概念。原型链的尽头一般来说都是 Object.prototype 所以这就\n是我们新建的对象为什么能够使用 toString() 等方法的原因。\n \n特点：\n \nJavaScript 对象是通过引用来传递的，我们创建的每个新对象实体中并没有一份属于自己的原型副本。当我们修改原型时，与\n之相关的对象也会继承这一改变。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>详细资料可以参考：\n<a href="http://cavszhouyou.top/JavaScript%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E4%B9%8B%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE.html" target="_blank" rel="noopener noreferrer">《JavaScript 深入理解之原型与原型链》<ExternalLinkIcon/></a></p>\n<h2 id="_11-js-获取原型的方法" tabindex="-1"><a class="header-anchor" href="#_11-js-获取原型的方法" aria-hidden="true">#</a> 11. js 获取原型的方法？</h2>\n<ul>\n<li>p.<strong>proto</strong></li>\n<li>p.constructor.prototype</li>\n<li>Object.getPrototypeOf(p)</li>\n</ul>\n<h2 id="_12-在-js-中不同进制数字的表示方式" tabindex="-1"><a class="header-anchor" href="#_12-在-js-中不同进制数字的表示方式" aria-hidden="true">#</a> 12. 在 js 中不同进制数字的表示方式</h2>\n<ul>\n<li>\n<p>以 0X、0x 开头的表示为十六进制。</p>\n</li>\n<li>\n<p>以 0、0O、0o 开头的表示为八进制。</p>\n</li>\n<li>\n<p>以 0B、0b 开头的表示为二进制格式。</p>\n</li>\n</ul>\n<h2 id="_13-js-中整数的安全范围是多少" tabindex="-1"><a class="header-anchor" href="#_13-js-中整数的安全范围是多少" aria-hidden="true">#</a> 13. js 中整数的安全范围是多少？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>安全整数指的是，在这个范围内的整数转化为二进制存储的时候不会出现精度丢失，能够被“安全”呈现的最大整数是 2^53 - 1，\n即9007199254740991，在 ES6 中被定义为 Number.MAX_SAFE_INTEGER。最小整数是-9007199254740991，在 ES6 中\n被定义为 Number.MIN_SAFE_INTEGER。\n \n如果某次计算的结果得到了一个超过 JavaScript 数值范围的值，那么这个值会被自动转换为特殊的 Infinity 值。如果某次\n计算返回了正或负的 Infinity 值，那么该值将无法参与下一次的计算。判断一个数是不是有穷的，可以使用 isFinite 函数\n来判断。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="_14-typeof-nan-的结果是什么" tabindex="-1"><a class="header-anchor" href="#_14-typeof-nan-的结果是什么" aria-hidden="true">#</a> 14. typeof NaN 的结果是什么？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>NaN 意指“不是一个数字”（not a number），NaN 是一个“警戒值”（sentinel value，有特殊用途的常规值），用于指出\n数字类型中的错误情况，即“执行数学运算没有成功，这是失败后返回的结果”。\n \ntypeof NaN; // "number"\n \nNaN 是一个特殊值，它和自身不相等，是唯一一个非自反（自反，reflexive，即 x === x 不成立）的值。而 NaN != NaN\n为 true。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="_15-isnan-和-number-isnan-函数的区别" tabindex="-1"><a class="header-anchor" href="#_15-isnan-和-number-isnan-函数的区别" aria-hidden="true">#</a> 15. isNaN 和 Number.isNaN 函数的区别？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>函数 isNaN 接收参数后，会尝试将这个参数转换为数值，任何不能被转换为数值的的值都会返回 true，因此非数字值传入也会\n返回 true ，会影响 NaN 的判断。\n \n函数 Number.isNaN 会首先判断传入参数是否为数字，如果是数字再继续判断是否为 NaN ，这种方法对于 NaN 的判断更为\n准确。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="_16-array-构造函数只有一个参数值时的表现" tabindex="-1"><a class="header-anchor" href="#_16-array-构造函数只有一个参数值时的表现" aria-hidden="true">#</a> 16. Array 构造函数只有一个参数值时的表现？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>Array 构造函数只带一个数字参数的时候，该参数会被作为数组的预设长度（length），而非只充当数组中的一个元素。这样\n创建出来的只是一个空数组，只不过它的 length 属性被设置成了指定的值。\n \n构造函数 Array(..) 不要求必须带 new 关键字。不带时，它会被自动补上。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="_17-其他值到字符串的转换规则" tabindex="-1"><a class="header-anchor" href="#_17-其他值到字符串的转换规则" aria-hidden="true">#</a> 17. 其他值到字符串的转换规则？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>规范的 9.8 节中定义了抽象操作 ToString ，它负责处理非字符串到字符串的强制类型转换。\n \n（1）Null 和 Undefined 类型 ，null 转换为 "null"，undefined 转换为 "undefined"，\n \n（2）Boolean 类型，true 转换为 "true"，false 转换为 "false"。\n \n（3）Number 类型的值直接转换，不过那些极小和极大的数字会使用指数形式。\n \n（4）Symbol 类型的值直接转换，但是只允许显式强制类型转换，使用隐式强制类型转换会产生错误。\n \n（3）对普通对象来说，除非自行定义 toString() 方法，否则会调用 toString()（Object.prototype.toString()）\n    来返回内部属性 [[Class]] 的值，如"[object Object]"。如果对象有自己的 toString() 方法，字符串化时就会\n    调用该方法并使用其返回值。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="_18-其他值到数字值的转换规则" tabindex="-1"><a class="header-anchor" href="#_18-其他值到数字值的转换规则" aria-hidden="true">#</a> 18. 其他值到数字值的转换规则？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>有时我们需要将非数字值当作数字来使用，比如数学运算。为此 ES5 规范在 9.3 节定义了抽象操作 ToNumber。\n \n（1）Undefined 类型的值转换为 NaN。\n \n（2）Null 类型的值转换为 0。\n \n（3）Boolean 类型的值，true 转换为 1，false 转换为 0。\n \n（4）String 类型的值转换如同使用 Number() 函数进行转换，如果包含非数字值则转换为 NaN，空字符串为 0。\n \n（5）Symbol 类型的值不能转换为数字，会报错。\n \n（6）对象（包括数组）会首先被转换为相应的基本类型值，如果返回的是非数字的基本类型值，则再遵循以上规则将其强制转换为数字。\n \n为了将值转换为相应的基本类型值，抽象操作 ToPrimitive 会首先（通过内部操作 DefaultValue）检查该值是否有valueOf() 方法。如果有并且返回基本类型值，就使用该值进行强制类型转换。如果没有就使用 toString() 的返回值（如果存在）来进行强制类型转换。\n \n如果 valueOf() 和 toString() 均不返回基本类型值，会产生 TypeError 错误。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="_19-其他值到布尔类型的值的转换规则" tabindex="-1"><a class="header-anchor" href="#_19-其他值到布尔类型的值的转换规则" aria-hidden="true">#</a> 19. 其他值到布尔类型的值的转换规则？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>ES5 规范 9.2 节中定义了抽象操作 ToBoolean，列举了布尔强制类型转换所有可能出现的结果。\n \n以下这些是假值：\n• undefined\n• null\n• false\n• +0、-0 和 NaN\n• ""\n \n假值的布尔强制类型转换结果为 false。从逻辑上说，假值列表以外的都应该是真值。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="_20-和-的-valueof-和-tostring-的结果是什么" tabindex="-1"><a class="header-anchor" href="#_20-和-的-valueof-和-tostring-的结果是什么" aria-hidden="true">#</a> 20. {} 和 [] 的 valueOf 和 toString 的结果是什么？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>{} 的 valueOf 结果为 {} ，toString 的结果为 "[object Object]"\n \n[] 的 valueOf 结果为 [] ，toString 的结果为 ""\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="_21-什么是假值对象" tabindex="-1"><a class="header-anchor" href="#_21-什么是假值对象" aria-hidden="true">#</a> 21. 什么是假值对象？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>浏览器在某些特定情况下，在常规 JavaScript 语法基础上自己创建了一些外来值，这些就是“假值对象”。假值对象看起来和\n普通对象并无二致（都有属性，等等），但将它们强制类型转换为布尔值时结果为 false 最常见的例子是 document.all，它\n是一个类数组对象，包含了页面上的所有元素，由 DOM（而不是 JavaScript 引擎）提供给 JavaScript 程序使用。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="_22-操作符的作用" tabindex="-1"><a class="header-anchor" href="#_22-操作符的作用" aria-hidden="true">#</a> 22. ~ 操作符的作用？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>~ 返回 2 的补码，并且 ~ 会将数字转换为 32 位整数，因此我们可以使用 ~ 来进行取整操作。\n \n~x 大致等同于 -(x+1)。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="_23-解析字符串中的数字和将字符串强制类型转换为数字的返回结果都是数字-它们之间的区别是什么" tabindex="-1"><a class="header-anchor" href="#_23-解析字符串中的数字和将字符串强制类型转换为数字的返回结果都是数字-它们之间的区别是什么" aria-hidden="true">#</a> 23. 解析字符串中的数字和将字符串强制类型转换为数字的返回结果都是数字，它们之间的区别是什么？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>解析允许字符串（如 parseInt() ）中含有非数字字符，解析按从左到右的顺序，如果遇到非数字字符就停止。而转换（如 Nu\nmber ()）不允许出现非数字字符，否则会失败并返回 NaN。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="_24-操作符什么时候用于字符串的拼接" tabindex="-1"><a class="header-anchor" href="#_24-操作符什么时候用于字符串的拼接" aria-hidden="true">#</a> 24. + 操作符什么时候用于字符串的拼接？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>根据 ES5 规范 11.6.1 节，如果某个操作数是字符串或者能够通过以下步骤转换为字符串的话，+ 将进行拼接操作。如果其\n中一个操作数是对象（包括数组），则首先对其调用 ToPrimitive 抽象操作，该抽象操作再调用 [[DefaultValue]]，以\n数字作为上下文。如果不能转换为字符串，则会将其转换为数字类型来进行计算。\n \n简单来说就是，如果 + 的其中一个操作数是字符串（或者通过以上步骤最终得到字符串），则执行字符串拼接，否则执行数字\n加法。\n \n那么对于除了加法的运算符来说，只要其中一方是数字，那么另一方就会被转为数字。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="_25-什么情况下会发生布尔值的隐式强制类型转换" tabindex="-1"><a class="header-anchor" href="#_25-什么情况下会发生布尔值的隐式强制类型转换" aria-hidden="true">#</a> 25. 什么情况下会发生布尔值的隐式强制类型转换？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>（1） if (..) 语句中的条件判断表达式。\n（2） for ( .. ; .. ; .. ) 语句中的条件判断表达式（第二个）。\n（3） while (..) 和 do..while(..) 循环中的条件判断表达式。\n（4） ? : 中的条件判断表达式。\n（5） 逻辑运算符 ||（逻辑或）和 &amp;&amp;（逻辑与）左边的操作数（作为条件判断表达式）。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="_26-和-操作符的返回值" tabindex="-1"><a class="header-anchor" href="#_26-和-操作符的返回值" aria-hidden="true">#</a> 26. || 和 &amp;&amp; 操作符的返回值？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code> 和 &amp;&amp; 首先会对第一个操作数执行条件判断，如果其不是布尔值就先进行 ToBoolean 强制类型转换，然后再执行条件\n判断。\n \n对于 || 来说，如果条件判断结果为 true 就返回第一个操作数的值，如果为 false 就返回第二个操作数的值。\n \n&amp;&amp; 则相反，如果条件判断结果为 true 就返回第二个操作数的值，如果为 false 就返回第一个操作数的值。\n \n|| 和 &amp;&amp; 返回它们其中一个操作数的值，而非条件判断的结果\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="_27-symbol-值的强制类型转换" tabindex="-1"><a class="header-anchor" href="#_27-symbol-值的强制类型转换" aria-hidden="true">#</a> 27. Symbol 值的强制类型转换？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>ES6 允许从符号到字符串的显式强制类型转换，然而隐式强制类型转换会产生错误。\n \nSymbol 值不能够被强制类型转换为数字（显式和隐式都会产生错误），但可以被强制类型转换为布尔值（显式和隐式结果\n都是 true ）。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="_28-操作符的强制类型转换规则" tabindex="-1"><a class="header-anchor" href="#_28-操作符的强制类型转换规则" aria-hidden="true">#</a> 28. 操作符的强制类型转换规则？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>（1）字符串和数字之间的相等比较，将字符串转换为数字之后再进行比较。\n \n（2）其他类型和布尔类型之间的相等比较，先将布尔值转换为数字后，再应用其他规则进行比较。\n \n（3）null 和 undefined 之间的相等比较，结果为真。其他值和它们进行比较都返回假值。\n \n（4）对象和非对象之间的相等比较，对象先调用 ToPrimitive 抽象操作后，再进行比较。\n \n（5）如果一个操作值为 NaN ，则相等比较返回 false（ NaN 本身也不等于 NaN ）。\n \n（6）如果两个操作值都是对象，则比较它们是不是指向同一个对象。如果两个操作数都指向同一个对象，则相等操作符返回 true，否则，返回 false。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>详细资料可以参考：\n<a href="https://www.jeffjade.com/2015/08/28/2015-09-02-js-string-compare/" target="_blank" rel="noopener noreferrer">《JavaScript 字符串间的比较》<ExternalLinkIcon/></a></p>\n<h2 id="_29-如何将字符串转化为数字-例如-12-3b" tabindex="-1"><a class="header-anchor" href="#_29-如何将字符串转化为数字-例如-12-3b" aria-hidden="true">#</a> 29. 如何将字符串转化为数字，例如 \'12.3b\'?</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>（1）使用 Number() 方法，前提是所包含的字符串不包含不合法字符。\n \n（2）使用 parseInt() 方法，parseInt() 函数可解析一个字符串，并返回一个整数。还可以设置要解析的数字的基数。当基数的值为 0，或没有设置该参数时，parseInt() 会根据 string 来判断数字的基数。\n \n（3）使用 parseFloat() 方法，该函数解析一个字符串参数并返回一个浮点数。\n \n（4）使用 + 操作符的隐式转换。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>详细资料可以参考：\n<a href="https://blog.csdn.net/m0_38099607/article/details/72638678" target="_blank" rel="noopener noreferrer">《详解 JS 中 Number()、parseInt() 和 parseFloat() 的区别》<ExternalLinkIcon/></a></p>\n<h2 id="_30-如何将浮点数点左边的数每三位添加一个逗号-如-12000000-11-转化为『12-000-000-11』" tabindex="-1"><a class="header-anchor" href="#_30-如何将浮点数点左边的数每三位添加一个逗号-如-12000000-11-转化为『12-000-000-11』" aria-hidden="true">#</a> 30. 如何将浮点数点左边的数每三位添加一个逗号，如 12000000.11 转化为『12,000,000.11』?</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>function format(number) {\n  return number &amp;&amp; number.replace(/(?!^)(?=(\\d{3})+\\.)/g, ",");\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="_31-常用正则表达式" tabindex="-1"><a class="header-anchor" href="#_31-常用正则表达式" aria-hidden="true">#</a> 31. 常用正则表达式</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>// （1）匹配 16 进制颜色值\nvar regex = /#([0-9a-fA-F]{6}|[0-9a-fA-F]{3})/g;\n \n// （2）匹配日期，如 yyyy-mm-dd 格式\nvar regex = /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/;\n \n// （3）匹配 qq 号\nvar regex = /^[1-9][0-9]{4,10}$/g;\n \n// （4）手机号码正则\nvar regex = /^1[34578]\\d{9}$/g;\n \n// （5）用户名正则\nvar regex = /^[a-zA-Z\\$][a-zA-Z0-9_\\$]{4,16}$/;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>详细资料可以参考：\n<a href="http://caibaojian.com/form-regexp.html" target="_blank" rel="noopener noreferrer">《前端表单验证常用的 15 个 JS 正则表达式》<ExternalLinkIcon/></a>\n<a href="https://www.jianshu.com/p/1cb5229325a7" target="_blank" rel="noopener noreferrer">《JS 常用正则汇总》<ExternalLinkIcon/></a></p>\n<h2 id="_32-生成随机数的各种方法" tabindex="-1"><a class="header-anchor" href="#_32-生成随机数的各种方法" aria-hidden="true">#</a> 32. 生成随机数的各种方法？</h2>\n<p><a href="http://www.hangge.com/blog/cache/detail_1872.html" target="_blank" rel="noopener noreferrer">《JS - 生成随机数的方法汇总（不同范围、类型的随机数）》<ExternalLinkIcon/></a></p>\n<h2 id="_33-如何实现数组的随机排序" tabindex="-1"><a class="header-anchor" href="#_33-如何实现数组的随机排序" aria-hidden="true">#</a> 33. 如何实现数组的随机排序？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>// （1）使用数组 sort 方法对数组元素随机排序，让 Math.random() 出来的数与 0.5 比较，如果大于就返回 1 交换位置，如果小于就返回 -1，不交换位置。\n \nfunction randomSort(a, b) {\n  return Math.random() > 0.5 ? -1 : 1;\n}\n \n//  缺点：每个元素被派到新数组的位置不是随机的，原因是 sort() 方法是依次比较的。\n \n// （2）随机从原数组抽取一个元素，加入到新数组\n \nfunction randomSort(arr) {\n  var result = [];\n \n  while (arr.length > 0) {\n    var randomIndex = Math.floor(Math.random() * arr.length);\n    result.push(arr[randomIndex]);\n    arr.splice(randomIndex, 1);\n  }\n \n  return result;\n}\n \n// （3）随机交换数组内的元素（洗牌算法类似）\n \nfunction randomSort(arr) {\n  var index,\n    randomIndex,\n    temp,\n    len = arr.length;\n \n  for (index = 0; index &lt; len; index++) {\n    randomIndex = Math.floor(Math.random() * (len - index)) + index;\n \n    temp = arr[index];\n    arr[index] = arr[randomIndex];\n    arr[randomIndex] = temp;\n  }\n \n  return arr;\n}\n \n// es6\nfunction randomSort(array) {\n  let length = array.length;\n \n  if (!Array.isArray(array) || length &lt;= 1) return;\n \n  for (let index = 0; index &lt; length - 1; index++) {\n    let randomIndex = Math.floor(Math.random() * (length - index)) + index;\n \n    [array[index], array[randomIndex]] = [array[randomIndex], array[index]];\n  }\n \n  return array;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br></div></div><p>详细资料可以参考：\n<a href="https://gaohaoyang.github.io/2016/10/16/shuffle-algorithm/#top" target="_blank" rel="noopener noreferrer">《Fisher and Yates 的原始版》<ExternalLinkIcon/></a>\n<a href="https://www.zhihu.com/question/32303195" target="_blank" rel="noopener noreferrer">《javascript 实现数组随机排序?》<ExternalLinkIcon/></a>\n<a href="https://www.w3cplus.com/javascript/how-to-randomize-shuffle-a-javascript-array.html" target="_blank" rel="noopener noreferrer">《JavaScript 学习笔记：数组随机排序》<ExternalLinkIcon/></a></p>\n<h2 id="_34-javascript-创建对象的几种方式" tabindex="-1"><a class="header-anchor" href="#_34-javascript-创建对象的几种方式" aria-hidden="true">#</a> 34. javascript 创建对象的几种方式？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>我们一般使用字面量的形式直接创建对象，但是这种创建方式对于创建大量相似对象的时候，会产生大量的重复代码。但 js\n和一般的面向对象的语言不同，在 ES6 之前它没有类的概念。但是我们可以使用函数来进行模拟，从而产生出可复用的对象\n创建方式，我了解到的方式有这么几种：\n \n（1）第一种是工厂模式，工厂模式的主要工作原理是用函数来封装创建对象的细节，从而通过调用函数来达到复用的目的。但是它有一个很大的问题就是创建出来的对象无法和某个类型联系起来，它只是简单的封装了复用代码，而没有建立起对象和类型间的关系。\n \n（2）第二种是构造函数模式。js 中每一个函数都可以作为构造函数，只要一个函数是通过 new 来调用的，那么我们就可以把它称为构造函数。执行构造函数首先会创建一个对象，然后将对象的原型指向构造函数的 prototype 属性，然后将执行上下文中的 this 指向这个对象，最后再执行整个函数，如果返回值不是对象，则返回新建的对象。因为 this 的值指向了新建的对象，因此我们可以使用 this 给对象赋值。构造函数模式相对于工厂模式的优点是，所创建的对象和构造函数建立起了联系，因此我们可以通过原型来识别对象的类型。但是构造函数存在一个缺点就是，造成了不必要的函数对象的创建，因为在 js 中函数也是一个对象，因此如果对象属性中如果包含函数的话，那么每次我们都会新建一个函数对象，浪费了不必要的内存空间，因为函数是所有的实例都可以通用的。\n \n（3）第三种模式是原型模式，因为每一个函数都有一个 prototype 属性，这个属性是一个对象，它包含了通过构造函数创建的所有实例都能共享的属性和方法。因此我们可以使用原型对象来添加公用属性和方法，从而实现代码的复用。这种方式相对于构造函数模式来说，解决了函数对象的复用问题。但是这种模式也存在一些问题，一个是没有办法通过传入参数来初始化值，另一个是如果存在一个引用类型如 Array 这样的值，那么所有的实例将共享一个对象，一个实例对引用类型值的改变会影响所有的实例。\n \n（4）第四种模式是组合使用构造函数模式和原型模式，这是创建自定义类型的最常见方式。因为构造函数模式和原型模式分开使用都存在一些问题，因此我们可以组合使用这两种模式，通过构造函数来初始化对象的属性，通过原型对象来实现函数方法的复用。这种方法很好的解决了两种模式单独使用时的缺点，但是有一点不足的就是，因为使用了两种不同的模式，所以对于代码的封装性不够好。\n \n（5）第五种模式是动态原型模式，这一种模式将原型方法赋值的创建过程移动到了构造函数的内部，通过对属性是否存在的判断，可以实现仅在第一次调用函数时对原型对象赋值一次的效果。这一种方式很好地对上面的混合模式进行了封装。\n \n（6）第六种模式是寄生构造函数模式，这一种模式和工厂模式的实现基本相同，我对这个模式的理解是，它主要是基于一个已有的类型，在实例化时对实例化的对象进行扩展。这样既不用修改原来的构造函数，也达到了扩展对象的目的。它的一个缺点和工厂模式一样，无法实现对象的识别。\n \n嗯我目前了解到的就是这么几种方式。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>详细资料可以参考：\n<a href="http://cavszhouyou.top/JavaScript%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E4%B9%8B%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA.html" target="_blank" rel="noopener noreferrer">《JavaScript 深入理解之对象创建》<ExternalLinkIcon/></a></p>\n<h2 id="_35-javascript-继承的几种实现方式" tabindex="-1"><a class="header-anchor" href="#_35-javascript-继承的几种实现方式" aria-hidden="true">#</a> 35. JavaScript 继承的几种实现方式？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>我了解的 js 中实现继承的几种方式有：\n \n（1）第一种是以原型链的方式来实现继承，但是这种实现方式存在的缺点是，在包含有引用类型的数据时，会被所有的实例对象所共享，容易造成修改的混乱。还有就是在创建子类型的时候不能向超类型传递参数。\n \n（2）第二种方式是使用借用构造函数的方式，这种方式是通过在子类型的函数中调用超类型的构造函数来实现的，这一种方法解决了不能向超类型传递参数的缺点，但是它存在的一个问题就是无法实现函数方法的复用，并且超类型原型定义的方法子类型也没有办法访问到。\n \n（3）第三种方式是组合继承，组合继承是将原型链和借用构造函数组合起来使用的一种方式。通过借用构造函数的方式来实现类型的属性的继承，通过将子类型的原型设置为超类型的实例来实现方法的继承。这种方式解决了上面的两种模式单独使用时的问题，但是由于我们是以超类型的实例来作为子类型的原型，所以调用了两次超类的构造函数，造成了子类型的原型中多了很多不必要的属性。\n \n（4）第四种方式是原型式继承，原型式继承的主要思路就是基于已有的对象来创建新的对象，实现的原理是，向函数中传入一个对象，然后返回一个以这个对象为原型的对象。这种继承的思路主要不是为了实现创造一种新的类型，只是对某个对象实现一种简单继承，ES5 中定义的 Object.create() 方法就是原型式继承的实现。缺点与原型链方式相同。\n \n（5）第五种方式是寄生式继承，寄生式继承的思路是创建一个用于封装继承过程的函数，通过传入一个对象，然后复制一个对象的副本，然后对象进行扩展，最后返回这个对象。这个扩展的过程就可以理解是一种继承。这种继承的优点就是对一个简单对象实现继承，如果这个对象不是我们的自定义类型时。缺点是没有办法实现函数的复用。\n \n（6）第六种方式是寄生式组合继承，组合继承的缺点就是使用超类型的实例做为子类型的原型，导致添加了不必要的原型属性。寄生式组合继承的方式是使用超类型的原型的副本来作为子类型的原型，这样就避免了创建不必要的属性。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>详细资料可以参考：\n<a href="http://cavszhouyou.top/JavaScript%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E4%B9%8B%E7%BB%A7%E6%89%BF.html" target="_blank" rel="noopener noreferrer">《JavaScript 深入理解之继承》<ExternalLinkIcon/></a></p>\n<h2 id="_36-寄生式组合继承的实现" tabindex="-1"><a class="header-anchor" href="#_36-寄生式组合继承的实现" aria-hidden="true">#</a> 36. 寄生式组合继承的实现？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>function Person(name) {\n  this.name = name;\n}\n \nPerson.prototype.sayName = function() {\n  console.log("My name is " + this.name + ".");\n};\n \nfunction Student(name, grade) {\n  Person.call(this, name);\n  this.grade = grade;\n}\n \nStudent.prototype = Object.create(Person.prototype);\nStudent.prototype.constructor = Student;\n \nStudent.prototype.sayMyGrade = function() {\n  console.log("My grade is " + this.grade + ".");\n};\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h2 id="_37-javascript-的作用域链" tabindex="-1"><a class="header-anchor" href="#_37-javascript-的作用域链" aria-hidden="true">#</a> 37. Javascript 的作用域链？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>作用域链的作用是保证对执行环境有权访问的所有变量和函数的有序访问，通过作用域链，我们可以访问到外层环境的变量和\n函数。\n \n作用域链的本质上是一个指向变量对象的指针列表。变量对象是一个包含了执行环境中所有变量和函数的对象。作用域链的前\n端始终都是当前执行上下文的变量对象。全局执行上下文的变量对象（也就是全局对象）始终是作用域链的最后一个对象。\n \n当我们查找一个变量时，如果当前执行环境中没有找到，我们可以沿着作用域链向后查找。\n \n作用域链的创建过程跟执行上下文的建立有关....\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>详细资料可以参考：\n<a href="http://cavszhouyou.top/JavaScript%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E4%B9%8B%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE.html" target="_blank" rel="noopener noreferrer">《JavaScript 深入理解之作用域链》<ExternalLinkIcon/></a></p>\n<h2 id="_38-谈谈-this-对象的理解。" tabindex="-1"><a class="header-anchor" href="#_38-谈谈-this-对象的理解。" aria-hidden="true">#</a> 38. 谈谈 This 对象的理解。</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>this 是执行上下文中的一个属性，它指向最后一次调用这个方法的对象。在实际开发中，this 的指向可以通过四种调用模\n式来判断。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul>\n<li>\n<p>1.第一种是函数调用模式，当一个函数不是一个对象的属性时，直接作为函数来调用时，this 指向全局对象。</p>\n</li>\n<li>\n<p>2.第二种是方法调用模式，如果一个函数作为一个对象的方法来调用时，this 指向这个对象。</p>\n</li>\n<li>\n<p>3.第三种是构造器调用模式，如果一个函数用 new 调用时，函数执行前会新创建一个对象，this 指向这个新创建的对象。</p>\n</li>\n<li>\n<p>4.第四种是 apply 、 call 和 bind 调用模式，这三个方法都可以显示的指定调用函数的 this 指向。其中 apply 方法接收两个参数：一个是 this 绑定的对象，一个是参数数组。call 方法接收的参数，第一个是 this 绑定的对象，后面的其余参数是传入函数执行的参数。也就是说，在使用 call() 方法时，传递给函数的参数必须逐个列举出来。bind 方法通过传入一个对象，返回一个 this 绑定了传入对象的新函数。这个函数的 this 指向除了使用 new 时会被改变，其他情况下都不会改变。</p>\n</li>\n</ul>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>这四种方式，使用构造器调用模式的优先级最高，然后是 apply 、 call 和 bind 调用模式，然后是方法调用模式，然后\n是函数调用模式。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><a href="http://cavszhouyou.top/JavaScript%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E4%B9%8Bthis%E8%AF%A6%E8%A7%A3.html" target="_blank" rel="noopener noreferrer">《JavaScript 深入理解之 this 详解》<ExternalLinkIcon/></a></p>\n<h2 id="_39-eval-是做什么的" tabindex="-1"><a class="header-anchor" href="#_39-eval-是做什么的" aria-hidden="true">#</a> 39. eval 是做什么的？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>它的功能是把对应的字符串解析成 JS 代码并运行。\n \n应该避免使用 eval，不安全，非常耗性能（2次，一次解析成 js 语句，一次执行）。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>详细资料可以参考：\n<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/eval" target="_blank" rel="noopener noreferrer">《eval()》<ExternalLinkIcon/></a></p>\n<h2 id="_40-什么是-dom-和-bom" tabindex="-1"><a class="header-anchor" href="#_40-什么是-dom-和-bom" aria-hidden="true">#</a> 40. 什么是 DOM 和 BOM？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>DOM 指的是文档对象模型，它指的是把文档当做一个对象来对待，这个对象主要定义了处理网页内容的方法和接口。\n \nBOM 指的是浏览器对象模型，它指的是把浏览器当做一个对象来对待，这个对象主要定义了与浏览器进行交互的法和接口。BOM\n的核心是 window，而 window 对象具有双重角色，它既是通过 js 访问浏览器窗口的一个接口，又是一个 Global（全局）\n对象。这意味着在网页中定义的任何对象，变量和函数，都作为全局对象的一个属性或者方法存在。window 对象含有 locati\non 对象、navigator 对象、screen 对象等子对象，并且 DOM 的最根本的对象 document 对象也是 BOM 的 window 对\n象的子对象。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>详细资料可以参考：\n<a href="https://www.zhihu.com/question/33453164" target="_blank" rel="noopener noreferrer">《DOM, DOCUMENT, BOM, WINDOW 有什么区别?》<ExternalLinkIcon/></a>\n<a href="http://www.w3school.com.cn/jsref/dom_obj_window.asp" target="_blank" rel="noopener noreferrer">《Window 对象》<ExternalLinkIcon/></a>\n<a href="https://www.zhihu.com/question/20724662" target="_blank" rel="noopener noreferrer">《DOM 与 BOM 分别是什么，有何关联？》<ExternalLinkIcon/></a>\n<a href="https://segmentfault.com/a/1190000000654274#articleHeader21" target="_blank" rel="noopener noreferrer">《JavaScript 学习总结（三）BOM 和 DOM 详解》<ExternalLinkIcon/></a></p>\n<h2 id="_41-写一个通用的事件侦听器函数。" tabindex="-1"><a class="header-anchor" href="#_41-写一个通用的事件侦听器函数。" aria-hidden="true">#</a> 41. 写一个通用的事件侦听器函数。</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>const EventUtils = {\n  // 视能力分别使用dom0||dom2||IE方式 来绑定事件\n  // 添加事件\n  addEvent: function(element, type, handler) {\n    if (element.addEventListener) {\n      element.addEventListener(type, handler, false);\n    } else if (element.attachEvent) {\n      element.attachEvent("on" + type, handler);\n    } else {\n      element["on" + type] = handler;\n    }\n  },\n \n  // 移除事件\n  removeEvent: function(element, type, handler) {\n    if (element.removeEventListener) {\n      element.removeEventListener(type, handler, false);\n    } else if (element.detachEvent) {\n      element.detachEvent("on" + type, handler);\n    } else {\n      element["on" + type] = null;\n    }\n  },\n \n  // 获取事件目标\n  getTarget: function(event) {\n    return event.target || event.srcElement;\n  },\n \n  // 获取 event 对象的引用，取到事件的所有信息，确保随时能使用 event\n  getEvent: function(event) {\n    return event || window.event;\n  },\n \n  // 阻止事件（主要是事件冒泡，因为 IE 不支持事件捕获）\n  stopPropagation: function(event) {\n    if (event.stopPropagation) {\n      event.stopPropagation();\n    } else {\n      event.cancelBubble = true;\n    }\n  },\n \n  // 取消事件的默认行为\n  preventDefault: function(event) {\n    if (event.preventDefault) {\n      event.preventDefault();\n    } else {\n      event.returnValue = false;\n    }\n  }\n};\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br></div></div><p>详细资料可以参考：\n<a href="https://segmentfault.com/a/1190000006934031#articleHeader6" target="_blank" rel="noopener noreferrer">《JS 事件模型》<ExternalLinkIcon/></a></p>\n<h2 id="_42-事件是什么-ie-与火狐的事件机制有什么区别-如何阻止冒泡" tabindex="-1"><a class="header-anchor" href="#_42-事件是什么-ie-与火狐的事件机制有什么区别-如何阻止冒泡" aria-hidden="true">#</a> 42. 事件是什么？IE 与火狐的事件机制有什么区别？ 如何阻止冒泡？</h2>\n<ul>\n<li>\n<p>1.事件是用户操作网页时发生的交互动作，比如 click/move， 事件除了用户触发的动作外，还可以是文档加载，窗口滚动和大小调整。事件被封装成一个 event 对象，包含了该事件发生时的所有相关信息（ event 的属性）以及可以对事件进行的操作（ event 的方法）。</p>\n</li>\n<li>\n<p>2.事件处理机制：IE 支持事件冒泡、Firefox 同时支持两种事件模型，也就是：事件冒泡和事件捕获。</p>\n</li>\n<li>\n<p>3.event.stopPropagation() 或者 ie 下的方法 event.cancelBubble = true;</p>\n</li>\n</ul>\n<p>详细资料可以参考：\n<a href="https://www.cnblogs.com/lvdabao/p/3265870.html" target="_blank" rel="noopener noreferrer">《Javascript 事件模型系列（一）事件及事件的三种模型》<ExternalLinkIcon/></a>\n<a href="https://blog.csdn.net/wuseyukui/article/details/13771493" target="_blank" rel="noopener noreferrer">《Javascript 事件模型：事件捕获和事件冒泡》<ExternalLinkIcon/></a></p>\n<h2 id="_43-三种事件模型是什么" tabindex="-1"><a class="header-anchor" href="#_43-三种事件模型是什么" aria-hidden="true">#</a> 43. 三种事件模型是什么？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>事件是用户操作网页时发生的交互动作或者网页本身的一些操作，现代浏览器一共有三种事件模型。\n \n第一种事件模型是最早的 DOM0 级模型，这种模型不会传播，所以没有事件流的概念，但是现在有的浏览器支持以冒泡的方式实\n现，它可以在网页中直接定义监听函数，也可以通过 js 属性来指定监听函数。这种方式是所有浏览器都兼容的。\n \n第二种事件模型是 IE 事件模型，在该事件模型中，一次事件共有两个过程，事件处理阶段，和事件冒泡阶段。事件处理阶段会首先执行目标元素绑定的监听事件。然后是事件冒泡阶段，冒泡指的是事件从目标元素冒泡到 document，依次检查经过的节点是否绑定了事件监听函数，如果有则执行。这种模型通过 attachEvent 来添加监听函数，可以添加多个监听函数，会按顺序依次执行。\n \n第三种是 DOM2 级事件模型，在该事件模型中，一次事件共有三个过程，第一个过程是事件捕获阶段。捕获指的是事件从 document 一直向下传播到目标元素，依次检查经过的节点是否绑定了事件监听函数，如果有则执行。后面两个阶段和 IE 事件模型的两个阶段相同。这种事件模型，事件绑定的函数是 addEventListener，其中第三个参数可以指定事件是否在捕获阶段执行。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>详细资料可以参考：\n<a href="https://blog.csdn.net/u013217071/article/details/77613706" target="_blank" rel="noopener noreferrer">《一个 DOM 元素绑定多个事件时，先执行冒泡还是捕获》<ExternalLinkIcon/></a></p>\n<h2 id="_44-事件委托是什么" tabindex="-1"><a class="header-anchor" href="#_44-事件委托是什么" aria-hidden="true">#</a> 44. 事件委托是什么？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>事件委托本质上是利用了浏览器事件冒泡的机制。因为事件在冒泡过程中会上传到父节点，并且父节点可以通过事件对象获取到\n目标节点，因此可以把子节点的监听函数定义在父节点上，由父节点的监听函数统一处理多个子元素的事件，这种方式称为事件代理。\n \n使用事件代理我们可以不必要为每一个子元素都绑定一个监听事件，这样减少了内存上的消耗。并且使用事件代理我们还可以实现事件的动态绑定，比如说新增了一个子节点，我们并不需要单独地为它添加一个监听事件，它所发生的事件会交给父元素中的监听函数来处理。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>详细资料可以参考：\n<a href="https://zhuanlan.zhihu.com/p/26536815" target="_blank" rel="noopener noreferrer">《JavaScript 事件委托详解》<ExternalLinkIcon/></a></p>\n<h2 id="_45-1-2-3-map-parseint-答案是多少" tabindex="-1"><a class="header-anchor" href="#_45-1-2-3-map-parseint-答案是多少" aria-hidden="true">#</a> 45. [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;].map(parseInt) 答案是多少？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>parseInt() 函数能解析一个字符串，并返回一个整数，需要两个参数 (val, radix)，其中 radix 表示要解析的数字的基数。（该值介于 2 ~ 36 之间，并且字符串中的数字不能大于 radix 才能正确返回数字结果值）。\n \n \n此处 map 传了 3 个参数 (element, index, array)，默认第三个参数被忽略掉，因此三次传入的参数分别为 "1-0", "2-1", "3-2"\n \n因为字符串的值不能大于基数，因此后面两次调用均失败，返回 NaN ，第一次基数为 0 ，按十进制解析返回 1。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>详细资料可以参考：\n[《为什么 <a href="https://blog.csdn.net/justjavac/article/details/19473199" target="_blank" rel="noopener noreferrer">&quot;1&quot;, &quot;2&quot;, &quot;3&quot;].map(parseInt) 返回 [1,NaN,NaN]？》<ExternalLinkIcon/></a></p>\n<h2 id="_46-什么是闭包-为什么要用它" tabindex="-1"><a class="header-anchor" href="#_46-什么是闭包-为什么要用它" aria-hidden="true">#</a> 46. 什么是闭包，为什么要用它？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>闭包是指有权访问另一个函数作用域中变量的函数，创建闭包的最常见的方式就是在一个函数内创建另一个函数，创建的函数可以\n访问到当前函数的局部变量。\n \n闭包有两个常用的用途。\n \n闭包的第一个用途是使我们在函数外部能够访问到函数内部的变量。通过使用闭包，我们可以通过在外部调用闭包函数，从而在外\n部访问到函数内部的变量，可以使用这种方法来创建私有变量。\n \n函数的另一个用途是使已经运行结束的函数上下文中的变量对象继续留在内存中，因为闭包函数保留了这个变量对象的引用，所以\n这个变量对象不会被回收。\n \n其实闭包的本质就是作用域链的一个特殊的应用，只要了解了作用域链的创建过程，就能够理解闭包的实现原理。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>详细资料可以参考：\n<a href="http://cavszhouyou.top/JavaScript%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E4%B9%8B%E9%97%AD%E5%8C%85.html" target="_blank" rel="noopener noreferrer">《JavaScript 深入理解之闭包》<ExternalLinkIcon/></a></p>\n<h2 id="_47-javascript-代码中的-use-strict-是什么意思-使用它区别是什么" tabindex="-1"><a class="header-anchor" href="#_47-javascript-代码中的-use-strict-是什么意思-使用它区别是什么" aria-hidden="true">#</a> 47. javascript 代码中的 &quot;use strict&quot;; 是什么意思 ? 使用它区别是什么？</h2>\n<p>相关知识点：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>use strict 是一种 ECMAscript5 添加的（严格）运行模式，这种模式使得 Javascript 在更严格的条件下运行。\n \n设立"严格模式"的目的，主要有以下几个：\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul>\n<li>消除 Javascript 语法的一些不合理、不严谨之处，减少一些怪异行为;</li>\n<li>消除代码运行的一些不安全之处，保证代码运行的安全；</li>\n<li>提高编译器效率，增加运行速度；</li>\n<li>为未来新版本的 Javascript 做好铺垫。</li>\n</ul>\n<p>区别：</p>\n<ul>\n<li>1.禁止使用 with 语句。</li>\n<li>2.禁止 this 关键字指向全局对象。</li>\n<li>3.对象不能有重名的属性。</li>\n</ul>\n<p>回答：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>use strict 指的是严格运行模式，在这种模式对 js 的使用添加了一些限制。比如说禁止 this 指向全局对象，还有禁止使\n用 with 语句等。设立严格模式的目的，主要是为了消除代码使用中的一些不安全的使用方式，也是为了消除 js 语法本身的一\n些不合理的地方，以此来减少一些运行时的怪异的行为。同时使用严格运行模式也能够提高编译的效率，从而提高代码的运行速度。\n我认为严格模式代表了 js 一种更合理、更安全、更严谨的发展方向。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>详细资料可以参考：\n<a href="http://www.ruanyifeng.com/blog/2013/01/javascript_strict_mode.html" target="_blank" rel="noopener noreferrer">《Javascript 严格模式详解》<ExternalLinkIcon/></a></p>\n<h2 id="_48-如何判断一个对象是否属于某个类" tabindex="-1"><a class="header-anchor" href="#_48-如何判断一个对象是否属于某个类" aria-hidden="true">#</a> 48. 如何判断一个对象是否属于某个类？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>第一种方式是使用 instanceof 运算符来判断构造函数的 prototype 属性是否出现在对象的原型链中的任何位置。\n \n第二种方式可以通过对象的 constructor 属性来判断，对象的 constructor 属性指向该对象的构造函数，但是这种方式不是很安全，因为 constructor 属性可以被改写。\n \n第三种方式，如果需要判断的是某个内置的引用类型的话，可以使用 Object.prototype.toString() 方法来打印对象的\n[[Class]] 属性来进行判断。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>详细资料可以参考：\n<a href="https://blog.csdn.net/haitunmin/article/details/78418522" target="_blank" rel="noopener noreferrer">《js 判断一个对象是否属于某一类》<ExternalLinkIcon/></a></p>\n<h2 id="_49-instanceof-的作用" tabindex="-1"><a class="header-anchor" href="#_49-instanceof-的作用" aria-hidden="true">#</a> 49. instanceof 的作用？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>// instanceof 运算符用于判断构造函数的 prototype 属性是否出现在对象的原型链中的任何位置。\n// 实现：\n \nfunction myInstanceof(left, right) {\n  let proto = Object.getPrototypeOf(left), // 获取对象的原型\n    prototype = right.prototype; // 获取构造函数的 prototype 对象\n \n  // 判断构造函数的 prototype 对象是否在对象的原型链上\n  while (true) {\n    if (!proto) return false;\n    if (proto === prototype) return true;\n \n    proto = Object.getPrototypeOf(proto);\n  }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>详细资料可以参考：\n<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/instanceof" target="_blank" rel="noopener noreferrer">《instanceof》<ExternalLinkIcon/></a></p>\n<h2 id="_50-new-操作符具体干了什么呢-如何实现" tabindex="-1"><a class="header-anchor" href="#_50-new-操作符具体干了什么呢-如何实现" aria-hidden="true">#</a> 50. new 操作符具体干了什么呢？如何实现？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>// （1）首先创建了一个新的空对象\n// （2）设置原型，将对象的原型设置为函数的 prototype 对象。\n// （3）让函数的 this 指向这个对象，执行构造函数的代码（为这个新对象添加属性）\n// （4）判断函数的返回值类型，如果是值类型，返回创建的对象。如果是引用类型，就返回这个引用类型的对象。\n \n// 实现:\n \nfunction objectFactory() {\n  let newObject = null,\n    constructor = Array.prototype.shift.call(arguments),\n    result = null;\n \n  // 参数判断\n  if (typeof constructor !== "function") {\n    console.error("type error");\n    return;\n  }\n \n  // 新建一个空对象，对象的原型为构造函数的 prototype 对象\n  newObject = Object.create(constructor.prototype);\n \n  // 将 this 指向新建对象，并执行函数\n  result = constructor.apply(newObject, arguments);\n \n  // 判断返回对象\n  let flag =\n    result &amp;&amp; (typeof result === "object" || typeof result === "function");\n \n  // 判断返回结果\n  return flag ? result : newObject;\n}\n \n// 使用方法\n// objectFactory(构造函数, 初始化参数);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><p>详细资料可以参考：\n<a href="https://segmentfault.com/a/1190000008576048" target="_blank" rel="noopener noreferrer">《new 操作符具体干了什么？》<ExternalLinkIcon/></a>\n<a href="https://github.com/mqyqingfeng/Blog/issues/13" target="_blank" rel="noopener noreferrer">《JavaScript 深入之 new 的模拟实现》<ExternalLinkIcon/></a></p>\n<h2 id="_51-javascript-中-有一个函数-执行时对象查找时-永远不会去查找原型-这个函数是" tabindex="-1"><a class="header-anchor" href="#_51-javascript-中-有一个函数-执行时对象查找时-永远不会去查找原型-这个函数是" aria-hidden="true">#</a> 51. Javascript 中，有一个函数，执行时对象查找时，永远不会去查找原型，这个函数是？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>hasOwnProperty\n \n所有继承了 Object 的对象都会继承到 hasOwnProperty 方法。这个方法可以用来检测一个对象是否含有特定的自身属性，和\nin 运算符不同，该方法会忽略掉那些从原型链上继承到的属性。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>详细资料可以参考：\n<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty" target="_blank" rel="noopener noreferrer">《Object.prototype.hasOwnProperty()》<ExternalLinkIcon/></a></p>\n<h2 id="_52-对于-json-的了解" tabindex="-1"><a class="header-anchor" href="#_52-对于-json-的了解" aria-hidden="true">#</a> 52. 对于 JSON 的了解？</h2>\n<p>相关知识点：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>JSON 是一种数据交换格式，基于文本，优于轻量，用于交换数据。\n \nJSON 可以表示数字、布尔值、字符串、null、数组（值的有序序列），以及由这些值（或数组、对象）所组成的对象（字符串与\n值的映射）。\n \nJSON 使用 JavaScript 语法，但是 JSON 格式仅仅是一个文本。文本可以被任何编程语言读取及作为数据格式传递。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>回答：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>JSON 是一种基于文本的轻量级的数据交换格式。它可以被任何的编程语言读取和作为数据格式来传递。\n \n在项目开发中，我们使用 JSON 作为前后端数据交换的方式。在前端我们通过将一个符合 JSON 格式的数据结构序列化为 JSON 字符串，然后将它传递到后端，后端通过 JSON 格式的字符串解析后生成对应的数据结构，以此来实现前后端数据的一个传递。\n \n因为 JSON 的语法是基于 js 的，因此很容易将 JSON 和 js 中的对象弄混，但是我们应该注意的是 JSON 和 js 中的对象不是一回事，JSON 中对象格式更加严格，比如说在 JSON 中属性值不能为函数，不能出现 NaN 这样的属性值等，因此大多数的 js 对象是不符合 JSON 对象的格式的。\n \n在 js 中提供了两个函数来实现 js 数据结构和 JSON 格式的转换处理，一个是 JSON.stringify 函数，通过传入一个符合 JSON 格式的数据结构，将其转换为一个 JSON 字符串。如果传入的数据结构不符合 JSON 格式，那么在序列化的时候会对这些值进行对应的特殊处理，使其符合规范。在前端向后端发送数据时，我们可以调用这个函数将数据对象转化为 JSON 格式的字符串。\n \n另一个函数 JSON.parse() 函数，这个函数用来将 JSON 格式的字符串转换为一个 js 数据结构，如果传入的字符串不是标准的 JSON 格式的字符串的话，将会抛出错误。当我们从后端接收到 JSON 格式的字符串时，我们可以通过这个方法来将其解析为一个 js 数据结构，以此来进行数据的访问。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>详细资料可以参考：\n<a href="https://my.oschina.net/u/3284240/blog/874368" target="_blank" rel="noopener noreferrer">《深入了解 JavaScript 中的 JSON 》<ExternalLinkIcon/></a></p>\n<h2 id="_53-foreach-call-function-a-a-style-outline-1px-solid-math-random-1-24-tostring-16-能解释一下这段代码的意思吗" tabindex="-1"><a class="header-anchor" href="#_53-foreach-call-function-a-a-style-outline-1px-solid-math-random-1-24-tostring-16-能解释一下这段代码的意思吗" aria-hidden="true">#</a> 53. [].forEach.call($$(&quot;<em>&quot;),function(a){a.style.outline=&quot;1px solid #&quot;+(<s>(Math.random()</s></em>(1&lt;&lt;24))).toString(16)}) 能解释一下这段代码的意思吗？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>（1）选取页面所有 DOM 元素。在浏览器的控制台中可以使用$$()方法来获取页面中相应的元素，这是现代浏览器提供的一个命令行 API 相当于 document.querySelectorAll 方法。\n \n（2）循环遍历 DOM 元素\n \n（3）给元素添加 outline 。由于渲染的 outline 是不在 CSS 盒模型中的，所以为元素添加 outline 并不会影响元素的大小和页面的布局。\n \n（4）生成随机颜色函数。Math.random()*(1&lt;&lt;24) 可以得到 0~2^24 - 1 之间的随机数，因为得到的是一个浮点数，但我们只需要整数部分，使用取反操作符 ~ 连续两次取反获得整数部分，然后再用 toString(16) 的方式，转换为一个十六进制的字符串。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>详细资料可以参考：\n<a href="https://2008winstar.iteye.com/blog/2128290" target="_blank" rel="noopener noreferrer">《通过一行代码学 JavaScript》<ExternalLinkIcon/></a></p>\n<h2 id="_54-js-延迟加载的方式有哪些" tabindex="-1"><a class="header-anchor" href="#_54-js-延迟加载的方式有哪些" aria-hidden="true">#</a> 54. js 延迟加载的方式有哪些？</h2>\n<p>相关知识点：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>js 延迟加载，也就是等页面加载完成之后再加载 JavaScript 文件。 js 延迟加载有助于提高页面加载速度。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>一般有以下几种方式：</p>\n<ul>\n<li>defer 属性</li>\n<li>async 属性</li>\n<li>动态创建 DOM 方式</li>\n<li>使用 setTimeout 延迟方法</li>\n<li>让 JS 最后加载</li>\n</ul>\n<p>回答：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>js 的加载、解析和执行会阻塞页面的渲染过程，因此我们希望 js 脚本能够尽可能的延迟加载，提高页面的渲染速度。\n \n我了解到的几种方式是：\n \n第一种方式是我们一般采用的是将 js 脚本放在文档的底部，来使 js 脚本尽可能的在最后来加载执行。\n \n第二种方式是给 js 脚本添加 defer 属性，这个属性会让脚本的加载与文档的解析同步解析，然后在文档解析完成后再执行这个脚本文件，这样的话就能使页面的渲染不被阻塞。多个设置了 defer 属性的脚本按规范来说最后是顺序执行的，但是在一些浏览器中可能不是这样。\n \n第三种方式是给 js 脚本添加 async 属性，这个属性会使脚本异步加载，不会阻塞页面的解析过程，但是当脚本加载完成后立即执行 js 脚本，这个时候如果文档没有解析完成的话同样会阻塞。多个 async 属性的脚本的执行顺序是不可预测的，一般不会按照代码的顺序依次执行。\n \n第四种方式是动态创建 DOM 标签的方式，我们可以对文档的加载事件进行监听，当文档加载完成后再动态的创建 script 标签来引入 js 脚本。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>详细资料可以参考：\n<a href="https://blog.csdn.net/meijory/article/details/76389762" target="_blank" rel="noopener noreferrer">《JS 延迟加载的几种方式》<ExternalLinkIcon/></a>\n<a href="http://www.w3school.com.cn/html5/att_script_async.asp" target="_blank" rel="noopener noreferrer">《HTML 5  async 属性》<ExternalLinkIcon/></a></p>\n<h2 id="_55-ajax-是什么-如何创建一个-ajax" tabindex="-1"><a class="header-anchor" href="#_55-ajax-是什么-如何创建一个-ajax" aria-hidden="true">#</a> 55. Ajax 是什么? 如何创建一个 Ajax？</h2>\n<p>相关知识点：</p>\n<p>2005 年 2 月，AJAX 这个词第一次正式提出，它是 Asynchronous JavaScript and XML 的缩写，指的是通过 JavaScript 的\n异步通信，从服务器获取 XML 文档从中提取数据，再更新当前网页的对应部分，而不用刷新整个网页。</p>\n<p>具体来说，AJAX 包括以下几个步骤。</p>\n<ul>\n<li>1.创建 XMLHttpRequest 对象，也就是创建一个异步调用对象</li>\n<li>2.创建一个新的 HTTP 请求，并指定该 HTTP 请求的方法、URL 及验证信息</li>\n<li>3.设置响应 HTTP 请求状态变化的函数</li>\n<li>4.发送 HTTP 请求</li>\n<li>5.获取异步调用返回的数据</li>\n<li>6.使用 JavaScript 和 DOM 实现局部刷新</li>\n</ul>\n<p>一般实现：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>const SERVER_URL = "/server";\n \nlet xhr = new XMLHttpRequest();\n \n// 创建 Http 请求\nxhr.open("GET", SERVER_URL, true);\n \n// 设置状态监听函数\nxhr.onreadystatechange = function() {\n  if (this.readyState !== 4) return;\n \n  // 当请求成功时\n  if (this.status === 200) {\n    handle(this.response);\n  } else {\n    console.error(this.statusText);\n  }\n};\n \n// 设置请求失败时的监听函数\nxhr.onerror = function() {\n  console.error(this.statusText);\n};\n \n// 设置请求头信息\nxhr.responseType = "json";\nxhr.setRequestHeader("Accept", "application/json");\n \n// 发送 Http 请求\nxhr.send(null);\n \n// promise 封装实现：\n \nfunction getJSON(url) {\n  // 创建一个 promise 对象\n  let promise = new Promise(function(resolve, reject) {\n    let xhr = new XMLHttpRequest();\n \n    // 新建一个 http 请求\n    xhr.open("GET", url, true);\n \n    // 设置状态的监听函数\n    xhr.onreadystatechange = function() {\n      if (this.readyState !== 4) return;\n \n      // 当请求成功或失败时，改变 promise 的状态\n      if (this.status === 200) {\n        resolve(this.response);\n      } else {\n        reject(new Error(this.statusText));\n      }\n    };\n \n    // 设置错误监听函数\n    xhr.onerror = function() {\n      reject(new Error(this.statusText));\n    };\n \n    // 设置响应的数据类型\n    xhr.responseType = "json";\n \n    // 设置请求头信息\n    xhr.setRequestHeader("Accept", "application/json");\n \n    // 发送 http 请求\n    xhr.send(null);\n  });\n \n  return promise;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br></div></div><p>回答：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>我对 ajax 的理解是，它是一种异步通信的方法，通过直接由 js 脚本向服务器发起 http 通信，然后根据服务器返回的数据，更新网页的相应部分，而不用刷新整个页面的一种方法。\n \n创建一个 ajax 有这样几个步骤\n \n首先是创建一个 XMLHttpRequest 对象。\n \n然后在这个对象上使用 open 方法创建一个 http 请求，open 方法所需要的参数是请求的方法、请求的地址、是否异步和用户的认证信息。\n \n在发起请求前，我们可以为这个对象添加一些信息和监听函数。比如说我们可以通过 setRequestHeader 方法来为请求添加头信息。我们还可以为这个对象添加一个状态监听函数。一个 XMLHttpRequest 对象一共有 5 个状态，当它的状态变化时会触发onreadystatechange 事件，我们可以通过设置监听函数，来处理请求成功后的结果。当对象的 readyState 变为 4 的时候，代表服务器返回的数据接收完成，这个时候我们可以通过判断请求的状态，如果状态是 2xx 或者 304 的话则代表返回正常。这个时候我们就可以通过 response 中的数据来对页面进行更新了。\n \n当对象的属性和监听函数设置完成后，最后我们调用 sent 方法来向服务器发起请求，可以传入参数作为发送的数据体。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>详细资料可以参考：\n<a href="https://wangdoc.com/javascript/bom/xmlhttprequest.html" target="_blank" rel="noopener noreferrer">《XMLHttpRequest 对象》<ExternalLinkIcon/></a>\n<a href="https://juejin.im/post/5acde23c5188255cb32e7e76" target="_blank" rel="noopener noreferrer">《从 ajax 到 fetch、axios》<ExternalLinkIcon/></a>\n<a href="https://juejin.im/post/5c160937f265da61180199b2" target="_blank" rel="noopener noreferrer">《Fetch 入门》<ExternalLinkIcon/></a>\n<a href="https://segmentfault.com/a/1190000003810652" target="_blank" rel="noopener noreferrer">《传统 Ajax 已死，Fetch 永生》<ExternalLinkIcon/></a></p>\n<h2 id="_56-谈一谈浏览器的缓存机制" tabindex="-1"><a class="header-anchor" href="#_56-谈一谈浏览器的缓存机制" aria-hidden="true">#</a> 56. 谈一谈浏览器的缓存机制？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>浏览器的缓存机制指的是通过在一段时间内保留已接收到的 web 资源的一个副本，如果在资源的有效时间内，发起了对这个资源的再一次请求，那么浏览器会直接使用缓存的副本，而不是向服务器发起请求。使用 web 缓存可以有效地提高页面的打开速度，减少不必要的网络带宽的消耗。\n \nweb 资源的缓存策略一般由服务器来指定，可以分为两种，分别是强缓存策略和协商缓存策略。\n \n使用强缓存策略时，如果缓存资源有效，则直接使用缓存资源，不必再向服务器发起请求。强缓存策略可以通过两种方式来设置，分别是 http 头信息中的 Expires 属性和 Cache-Control 属性。\n \n服务器通过在响应头中添加 Expires 属性，来指定资源的过期时间。在过期时间以内，该资源可以被缓存使用，不必再向服务器发送请求。这个时间是一个绝对时间，它是服务器的时间，因此可能存在这样的问题，就是客户端的时间和服务器端的时间不一致，或者用户可以对客户端时间进行修改的情况，这样就可能会影响缓存命中的结果。\n \nExpires 是 http1.0 中的方式，因为它的一些缺点，在 http 1.1 中提出了一个新的头部属性就是 Cache-Control 属性，\n它提供了对资源的缓存的更精确的控制。它有很多不同的值，常用的比如我们可以通过设置 max-age 来指定资源能够被缓存的时间\n的大小，这是一个相对的时间，它会根据这个时间的大小和资源第一次请求时的时间来计算出资源过期的时间，因此相对于 Expires\n来说，这种方式更加有效一些。常用的还有比如 private ，用来规定资源只能被客户端缓存，不能够代理服务器所缓存。还有如 n\no-store ，用来指定资源不能够被缓存，no-cache 代表该资源能够被缓存，但是立即失效，每次都需要向服务器发起请求。\n \n一般来说只需要设置其中一种方式就可以实现强缓存策略，当两种方式一起使用时，Cache-Control 的优先级要高于 Expires 。\n \n使用协商缓存策略时，会先向服务器发送一个请求，如果资源没有发生修改，则返回一个 304 状态，让浏览器使用本地的缓存副本。\n如果资源发生了修改，则返回修改后的资源。协商缓存也可以通过两种方式来设置，分别是 http 头信息中的 Etag 和 Last-Modified 属性。\n \n服务器通过在响应头中添加 Last-Modified 属性来指出资源最后一次修改的时间，当浏览器下一次发起请求时，会在请求头中添加一个 If-Modified-Since 的属性，属性值为上一次资源返回时的 Last-Modified 的值。当请求发送到服务器后服务器会通过这个属性来和资源的最后一次的修改时间来进行比较，以此来判断资源是否做了修改。如果资源没有修改，那么返回 304 状态，让客户端使用本地的缓存。如果资源已经被修改了，则返回修改后的资源。使用这种方法有一个缺点，就是 Last-Modified 标注的最后修改时间只能精确到秒级，如果某些文件在1秒钟以内，被修改多次的话，那么文件已将改变了但是 Last-Modified 却没有改变，\n这样会造成缓存命中的不准确。\n \n因为 Last-Modified 的这种可能发生的不准确性，http 中提供了另外一种方式，那就是 Etag 属性。服务器在返回资源的时候，在头信息中添加了 Etag 属性，这个属性是资源生成的唯一标识符，当资源发生改变的时候，这个值也会发生改变。在下一次资源请求时，浏览器会在请求头中添加一个 If-None-Match 属性，这个属性的值就是上次返回的资源的 Etag 的值。服务接收到请求后会根据这个值来和资源当前的 Etag 的值来进行比较，以此来判断资源是否发生改变，是否需要返回资源。通过这种方式，比 Last-Modified 的方式更加精确。\n \n当 Last-Modified 和 Etag 属性同时出现的时候，Etag 的优先级更高。使用协商缓存的时候，服务器需要考虑负载平衡的问题，因此多个服务器上资源的 Last-Modified 应该保持一致，因为每个服务器上 Etag 的值都不一样，因此在考虑负载平衡时，最好不要设置 Etag 属性。\n \n强缓存策略和协商缓存策略在缓存命中时都会直接使用本地的缓存副本，区别只在于协商缓存会向服务器发送一次请求。它们缓存不命中时，都会向服务器发送请求来获取资源。在实际的缓存机制中，强缓存策略和协商缓存策略是一起合作使用的。浏览器首先会根据请求的信息判断，强缓存是否命中，如果命中则直接使用资源。如果不命中则根据头信息向服务器发起请求，使用协商缓存，如果协商缓存命中的话，则服务器不返回资源，浏览器直接使用本地资源的副本，如果协商缓存不命中，则浏览器返回最新的资源给浏览器。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><p>详细资料可以参考：\n<a href="https://segmentfault.com/a/1190000012573337" target="_blank" rel="noopener noreferrer">《浅谈浏览器缓存》<ExternalLinkIcon/></a>\n<a href="https://juejin.im/post/5b9346dcf265da0aac6fbe57#heading-3" target="_blank" rel="noopener noreferrer">《前端优化：浏览器缓存技术介绍》<ExternalLinkIcon/></a>\n<a href="https://www.web-tinker.com/article/21221.html" target="_blank" rel="noopener noreferrer">《请求头中的 Cache-Control》<ExternalLinkIcon/></a>\n<a href="https://juejin.im/post/5c2d6c9ae51d450cf4195a08" target="_blank" rel="noopener noreferrer">《Cache-Control 字段值详解》<ExternalLinkIcon/></a></p>\n<h2 id="_57-ajax-解决浏览器缓存问题" tabindex="-1"><a class="header-anchor" href="#_57-ajax-解决浏览器缓存问题" aria-hidden="true">#</a> 57. Ajax 解决浏览器缓存问题？</h2>\n<ul>\n<li>\n<p>1.在 ajax 发送请求前加上 anyAjaxObj.setRequestHeader(&quot;If-Modified-Since&quot;,&quot;0&quot;)。</p>\n</li>\n<li>\n<p>2.在 ajax 发送请求前加上 anyAjaxObj.setRequestHeader(&quot;Cache-Control&quot;,&quot;no-cache&quot;)。</p>\n</li>\n<li>\n<p>3.在 URL 后面加上一个随机数： &quot;fresh=&quot; + Math.random();。</p>\n</li>\n<li>\n<p>4.在 URL 后面加上时间戳：&quot;nowtime=&quot; + new Date().getTime();。</p>\n</li>\n<li>\n<p>5.如果是使用 jQuery，直接这样就可以了$.ajaxSetup({cache:false})。这样页面的所有 ajax 都会执行这条语句就是不需要保存缓存记录。</p>\n</li>\n</ul>\n<p>详细资料可以参考：\n<a href="https://www.cnblogs.com/cwzqianduan/p/8632009.html" target="_blank" rel="noopener noreferrer">《Ajax 中浏览器的缓存问题解决方法》<ExternalLinkIcon/></a>\n<a href="https://segmentfault.com/a/1190000012573337" target="_blank" rel="noopener noreferrer">《浅谈浏览器缓存》<ExternalLinkIcon/></a></p>\n<h2 id="_58-同步和异步的区别" tabindex="-1"><a class="header-anchor" href="#_58-同步和异步的区别" aria-hidden="true">#</a> 58. 同步和异步的区别？</h2>\n<p>相关知识点：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>同步，可以理解为在执行完一个函数或方法之后，一直等待系统返回值或消息，这时程序是处于阻塞的，只有接收到返回的值或消息后才往下执行其他的命令。  \n \n异步，执行完函数或方法后，不必阻塞性地等待返回值或消息，只需要向系统委托一个异步过程，那么当系统接收到返回值或消息时，系统会自动触发委托的异步过程，从而完成一个完整的流程。 \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>回答：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>同步指的是当一个进程在执行某个请求的时候，如果这个请求需要等待一段时间才能返回，那么这个进程会一直等待下去，直到消息返\n回为止再继续向下执行。\n \n异步指的是当一个进程在执行某个请求的时候，如果这个请求需要等待一段时间才能返回，这个时候进程会继续往下执行，不会阻塞等\n待消息的返回，当消息返回时系统再通知进程进行处理。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>详细资料可以参考：\n<a href="https://blog.csdn.net/tennysonsky/article/details/45111623" target="_blank" rel="noopener noreferrer">《同步和异步的区别》<ExternalLinkIcon/></a></p>\n<h2 id="_59-什么是浏览器的同源政策" tabindex="-1"><a class="header-anchor" href="#_59-什么是浏览器的同源政策" aria-hidden="true">#</a> 59. 什么是浏览器的同源政策？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>我对浏览器的同源政策的理解是，一个域下的 js 脚本在未经允许的情况下，不能够访问另一个域的内容。这里的同源的指的是两个\n域的协议、域名、端口号必须相同，否则则不属于同一个域。\n \n同源政策主要限制了三个方面\n \n第一个是当前域下的 js 脚本不能够访问其他域下的 cookie、localStorage 和 indexDB。\n \n第二个是当前域下的 js 脚本不能够操作访问操作其他域下的 DOM。\n \n第三个是当前域下 ajax 无法发送跨域请求。\n \n同源政策的目的主要是为了保证用户的信息安全，它只是对 js 脚本的一种限制，并不是对浏览器的限制，对于一般的 img、或者\nscript 脚本请求都不会有跨域的限制，这是因为这些操作都不会通过响应结果来进行可能出现安全问题的操作。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="_60-如何解决跨域问题" tabindex="-1"><a class="header-anchor" href="#_60-如何解决跨域问题" aria-hidden="true">#</a> 60. 如何解决跨域问题？</h2>\n<p>相关知识点：</p>\n<ul>\n<li>\n<ol>\n<li>通过 jsonp 跨域</li>\n</ol>\n</li>\n<li>\n<ol>\n<li>document.domain + iframe 跨域</li>\n</ol>\n</li>\n<li>\n<ol>\n<li>location.hash + iframe</li>\n</ol>\n</li>\n<li>\n<ol>\n<li>window.name + iframe 跨域</li>\n</ol>\n</li>\n<li>\n<ol>\n<li>postMessage 跨域</li>\n</ol>\n</li>\n<li>\n<ol>\n<li>跨域资源共享（CORS)</li>\n</ol>\n</li>\n<li>\n<ol>\n<li>nginx 代理跨域</li>\n</ol>\n</li>\n<li>\n<ol>\n<li>nodejs 中间件代理跨域</li>\n</ol>\n</li>\n<li>\n<ol>\n<li>WebSocket 协议跨域</li>\n</ol>\n</li>\n</ul>\n<p>回答：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>解决跨域的方法我们可以根据我们想要实现的目的来划分。\n \n首先我们如果只是想要实现主域名下的不同子域名的跨域操作，我们可以使用设置 document.domain 来解决。\n \n（1）将 document.domain 设置为主域名，来实现相同子域名的跨域操作，这个时候主域名下的 cookie 就能够被子域名所访问。同时如果文档中含有主域名相同，子域名不同的 iframe 的话，我们也可以对这个 iframe 进行操作。\n \n如果是想要解决不同跨域窗口间的通信问题，比如说一个页面想要和页面的中的不同源的 iframe 进行通信的问题，我们可以使用 location.hash 或者 window.name 或者 postMessage 来解决。\n \n（2）使用 location.hash 的方法，我们可以在主页面动态的修改 iframe 窗口的 hash 值，然后在 iframe 窗口里实现监听函数来实现这样一个单向的通信。因为在 iframe 是没有办法访问到不同源的父级窗口的，所以我们不能直接修改父级窗口的 hash 值来实现通信，我们可以在 iframe 中再加入一个 iframe ，这个 iframe 的内容是和父级页面同源的，所以我们可以 window.parent.parent 来修改最顶级页面的 src，以此来实现双向通信。\n \n（3）使用 window.name 的方法，主要是基于同一个窗口中设置了 window.name 后不同源的页面也可以访问，所以不同源的子页面可以首先在 window.name 中写入数据，然后跳转到一个和父级同源的页面。这个时候级页面就可以访问同源的子页面中 window.name 中的数据了，这种方式的好处是可以传输的数据量大。\n \n（4）使用 postMessage 来解决的方法，这是一个 h5 中新增的一个 api。通过它我们可以实现多窗口间的信息传递，通过获取到指定窗口的引用，然后调用 postMessage 来发送信息，在窗口中我们通过对 message 信息的监听来接收信息，以此来实现不同源间的信息交换。\n \n如果是像解决 ajax 无法提交跨域请求的问题，我们可以使用 jsonp、cors、websocket 协议、服务器代理来解决问题。\n \n（5）使用 jsonp 来实现跨域请求，它的主要原理是通过动态构建 script  标签来实现跨域请求，因为浏览器对 script 标签的引入没有跨域的访问限制 。通过在请求的 url 后指定一个回调函数，然后服务器在返回数据的时候，构建一个 json 数据的包装，这个包装就是回调函数，然后返回给前端，前端接收到数据后，因为请求的是脚本文件，所以会直接执行，这样我们先前定义好的回调函数就可以被调用，从而实现了跨域请求的处理。这种方式只能用于 get 请求。\n \n（6）使用 CORS 的方式，CORS 是一个 W3C 标准，全称是"跨域资源共享"。CORS 需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，因此我们只需要在服务器端配置就行。浏览器将 CORS 请求分成两类：简单请求和非简单请求。对于简单请求，浏览器直接发出 CORS 请求。具体来说，就是会在头信息之中，增加一个 Origin 字段。Origin 字段用来说明本次请求来自哪个源。服务器根据这个值，决定是否同意这次请求。对于如果 Origin 指定的源，不在许可范围内，服务器会返回一个正常的 HTTP 回应。浏览器发现，这个回应的头信息没有包含 Access-Control-Allow-Origin 字段，就知道出错了，从而抛出一个错误，ajax 不会收到响应信息。如果成功的话会包含一些以 Access-Control- 开头的字段。\n \n非简单请求，浏览器会先发出一次预检请求，来判断该域名是否在服务器的白名单中，如果收到肯定回复后才会发起请求。\n \n（7）使用 websocket 协议，这个协议没有同源限制。\n \n（8）使用服务器来代理跨域的访问请求，就是有跨域的请求操作时发送请求给后端，让后端代为请求，然后最后将获取的结果发返回。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>详细资料可以参考：\n<a href="https://segmentfault.com/a/1190000011145364" target="_blank" rel="noopener noreferrer">《前端常见跨域解决方案（全）》<ExternalLinkIcon/></a>\n<a href="http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html" target="_blank" rel="noopener noreferrer">《浏览器同源政策及其规避方法》<ExternalLinkIcon/></a>\n<a href="https://juejin.im/entry/59feae9df265da43094488f6" target="_blank" rel="noopener noreferrer">《跨域，你需要知道的全在这里》<ExternalLinkIcon/></a>\n<a href="https://www.zhihu.com/question/31592553" target="_blank" rel="noopener noreferrer">《为什么 form 表单提交没有跨域问题，但 ajax 提交有跨域问题？》<ExternalLinkIcon/></a></p>\n<h2 id="_61-服务器代理转发时-该如何处理-cookie" tabindex="-1"><a class="header-anchor" href="#_61-服务器代理转发时-该如何处理-cookie" aria-hidden="true">#</a> 61. 服务器代理转发时，该如何处理 cookie？</h2>\n<p>详细资料可以参考：\n<a href="https://www.jianshu.com/p/5eab0f83e3b4" target="_blank" rel="noopener noreferrer">《深入浅出 Nginx》<ExternalLinkIcon/></a></p>\n<h2 id="_62-简单谈一下-cookie" tabindex="-1"><a class="header-anchor" href="#_62-简单谈一下-cookie" aria-hidden="true">#</a> 62. 简单谈一下 cookie ？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>我的理解是 cookie 是服务器提供的一种用于维护会话状态信息的数据，通过服务器发送到浏览器，浏览器保存在本地，当下一次有同源的请求时，将保存的 cookie 值添加到请求头部，发送给服务端。这可以用来实现记录用户登录状态等功能。cookie 一般可以存储 4k 大小的数据，并且只能够被同源的网页所共享访问。\n \n服务器端可以使用 Set-Cookie 的响应头部来配置 cookie 信息。一条cookie 包括了5个属性值 expires、domain、path、secure、HttpOnly。其中 expires 指定了 cookie 失效的时间，domain 是域名、path是路径，domain 和 path 一起限制了 cookie 能够被哪些 url 访问。secure 规定了 cookie 只能在确保安全的情况下传输，HttpOnly 规定了这个 cookie 只能被服务器访问，不能使用 js 脚本访问。\n \n在发生 xhr 的跨域请求的时候，即使是同源下的 cookie，也不会被自动添加到请求头部，除非显示地规定。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>详细资料可以参考：\n<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Cookies" target="_blank" rel="noopener noreferrer">《HTTP cookies》<ExternalLinkIcon/></a>\n<a href="https://segmentfault.com/a/1190000004556040" target="_blank" rel="noopener noreferrer">《聊一聊 cookie》<ExternalLinkIcon/></a></p>\n<h2 id="_63-模块化开发怎么做" tabindex="-1"><a class="header-anchor" href="#_63-模块化开发怎么做" aria-hidden="true">#</a> 63. 模块化开发怎么做？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>我对模块的理解是，一个模块是实现一个特定功能的一组方法。在最开始的时候，js 只实现一些简单的功能，所以并没有模块的概念\n，但随着程序越来越复杂，代码的模块化开发变得越来越重要。\n \n由于函数具有独立作用域的特点，最原始的写法是使用函数来作为模块，几个函数作为一个模块，但是这种方式容易造成全局变量的污\n染，并且模块间没有联系。\n \n后面提出了对象写法，通过将函数作为一个对象的方法来实现，这样解决了直接使用函数作为模块的一些缺点，但是这种办法会暴露所\n有的所有的模块成员，外部代码可以修改内部属性的值。\n \n现在最常用的是立即执行函数的写法，通过利用闭包来实现模块私有作用域的建立，同时不会对全局作用域造成污染。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>详细资料可以参考：\n<a href="https://juejin.im/post/5ab378c46fb9a028ce7b824f" target="_blank" rel="noopener noreferrer">《浅谈模块化开发》<ExternalLinkIcon/></a>\n<a href="http://www.ruanyifeng.com/blog/2012/10/javascript_module.html" target="_blank" rel="noopener noreferrer">《Javascript 模块化编程（一）：模块的写法》<ExternalLinkIcon/></a>\n<a href="https://juejin.im/post/5aaa37c8f265da23945f365c" target="_blank" rel="noopener noreferrer">《前端模块化：CommonJS，AMD，CMD，ES6》<ExternalLinkIcon/></a>\n<a href="http://es6.ruanyifeng.com/#docs/module" target="_blank" rel="noopener noreferrer">《Module 的语法》<ExternalLinkIcon/></a></p>\n<h2 id="_64-js-的几种模块规范" tabindex="-1"><a class="header-anchor" href="#_64-js-的几种模块规范" aria-hidden="true">#</a> 64. js 的几种模块规范？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>js 中现在比较成熟的有四种模块加载方案。\n \n第一种是 CommonJS 方案，它通过 require 来引入模块，通过 module.exports 定义模块的输出接口。这种模块加载方案是\n服务器端的解决方案，它是以同步的方式来引入模块的，因为在服务端文件都存储在本地磁盘，所以读取非常快，所以以同步的方式\n加载没有问题。但如果是在浏览器端，由于模块的加载是使用网络请求，因此使用异步加载的方式更加合适。\n \n第二种是 AMD 方案，这种方案采用异步加载的方式来加载模块，模块的加载不影响后面语句的执行，所有依赖这个模块的语句都定\n义在一个回调函数里，等到加载完成后再执行回调函数。require.js 实现了 AMD 规范。\n \n第三种是 CMD 方案，这种方案和 AMD 方案都是为了解决异步模块加载的问题，sea.js 实现了 CMD 规范。它和 require.js\n的区别在于模块定义时对依赖的处理不同和对依赖模块的执行时机的处理不同。参考60\n \n第四种方案是 ES6 提出的方案，使用 import 和 export 的形式来导入导出模块。这种方案和上面三种方案都不同。参考 61。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="_65-amd-和-cmd-规范的区别" tabindex="-1"><a class="header-anchor" href="#_65-amd-和-cmd-规范的区别" aria-hidden="true">#</a> 65. AMD 和 CMD 规范的区别？</h2>\n<p>它们之间的主要区别有两个方面。</p>\n<p>（1）第一个方面是在模块定义时对依赖的处理不同。AMD 推崇依赖前置，在定义模块的时候就要声明其依赖的模块。而 CMD 推崇\n就近依赖，只有在用到某个模块的时候再去 require。</p>\n<p>（2）第二个方面是对依赖模块的执行时机处理不同。首先 AMD 和 CMD 对于模块的加载方式都是异步加载，不过它们的区别在于\n模块的执行时机，AMD 在依赖模块加载完成后就直接执行依赖模块，依赖模块的执行顺序和我们书写的顺序不一定一致。而 CMD\n在依赖模块加载完成后并不执行，只是下载而已，等到所有的依赖模块都加载好后，进入回调函数逻辑，遇到 require 语句\n的时候才执行对应的模块，这样模块的执行顺序就和我们书写的顺序保持一致了。</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>// CMD\ndefine(function(require, exports, module) {\n  var a = require("./a");\n  a.doSomething();\n  // 此处略去 100 行\n  var b = require("./b"); // 依赖可以就近书写\n  b.doSomething();\n  // ...\n});\n \n// AMD 默认推荐\ndefine(["./a", "./b"], function(a, b) {\n  // 依赖必须一开始就写好\n  a.doSomething();\n  // 此处略去 100 行\n  b.doSomething();\n  // ...\n});\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>详细资料可以参考：\n<a href="https://juejin.im/post/5a422b036fb9a045211ef789" target="_blank" rel="noopener noreferrer">《前端模块化，AMD 与 CMD 的区别》<ExternalLinkIcon/></a></p>\n<h2 id="_66-es6-模块与-commonjs-模块、amd、cmd-的差异。" tabindex="-1"><a class="header-anchor" href="#_66-es6-模块与-commonjs-模块、amd、cmd-的差异。" aria-hidden="true">#</a> 66. ES6 模块与 CommonJS 模块、AMD、CMD 的差异。</h2>\n<ul>\n<li>\n<p>1.CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。CommonJS 模块输出的是值的拷贝，也就是说，一旦输出一个值，模块内部的变化就影响不到这个值。ES6 模块的运行机制与 CommonJS 不一样。JS 引擎对脚本静态分析的时候，遇到模块加载命令 import，就会生成一个只读引用。等到脚本真正执行时，再根据这个只读引用，到被加载的那个模块里面去取值。</p>\n</li>\n<li>\n<p>2.CommonJS 模块是运行时加载，ES6 模块是编译时输出接口。CommonJS 模块就是对象，即在输入时是先加载整个模块，生成一个对象，然后再从这个对象上面读取方法，这种加载称为“运行时加载”。而 ES6 模块不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成。</p>\n</li>\n</ul>\n<h2 id="_67-requirejs-的核心原理是什么-如何动态加载的-如何避免多次加载的-如何-缓存的" tabindex="-1"><a class="header-anchor" href="#_67-requirejs-的核心原理是什么-如何动态加载的-如何避免多次加载的-如何-缓存的" aria-hidden="true">#</a> 67. requireJS 的核心原理是什么？（如何动态加载的？如何避免多次加载的？如何 缓存的？）</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>require.js 的核心原理是通过动态创建 script 脚本来异步引入模块，然后对每个脚本的 load 事件进行监听，如果每个脚本都加载完成了，再调用回调函数。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>详细资料可以参考：\n<a href="https://github.com/HRFE/blog/issues/10" target="_blank" rel="noopener noreferrer">《requireJS 的用法和原理分析》<ExternalLinkIcon/></a>\n<a href="https://zhuanlan.zhihu.com/p/55039478" target="_blank" rel="noopener noreferrer">《requireJS 的核心原理是什么？》<ExternalLinkIcon/></a>\n<a href="https://www.cnblogs.com/dong-xu/p/7160919.html" target="_blank" rel="noopener noreferrer">《从 RequireJs 源码剖析脚本加载原理》<ExternalLinkIcon/></a>\n<a href="https://www.jianshu.com/p/5a39535909e4" target="_blank" rel="noopener noreferrer">《requireJS 原理分析》<ExternalLinkIcon/></a></p>\n<h2 id="_68-js-模块加载器的轮子怎么造-也就是如何实现一个模块加载器" tabindex="-1"><a class="header-anchor" href="#_68-js-模块加载器的轮子怎么造-也就是如何实现一个模块加载器" aria-hidden="true">#</a> 68. JS 模块加载器的轮子怎么造，也就是如何实现一个模块加载器？</h2>\n<p>详细资料可以参考：\n<a href="https://www.zhihu.com/question/21157540" target="_blank" rel="noopener noreferrer">《JS 模块加载器加载原理是怎么样的？》<ExternalLinkIcon/></a></p>\n<h2 id="_69-ecmascript6-怎么写-class-为什么会出现-class-这种东西" tabindex="-1"><a class="header-anchor" href="#_69-ecmascript6-怎么写-class-为什么会出现-class-这种东西" aria-hidden="true">#</a> 69. ECMAScript6 怎么写 class，为什么会出现 class 这种东西?</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>在我看来 ES6 新添加的 class 只是为了补充 js 中缺少的一些面向对象语言的特性，但本质上来说它只是一种语法糖，不是一个新的东西，其背后还是原型继承的思想。通过加入 class 可以有利于我们更好的组织代码。\n \n在 class 中添加的方法，其实是添加在类的原型上的。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>详细资料可以参考：\n<a href="https://www.zhihu.com/question/29789315" target="_blank" rel="noopener noreferrer">《ECMAScript 6 实现了 class，对 JavaScript 前端开发有什么意义？》<ExternalLinkIcon/></a>\n<a href="http://es6.ruanyifeng.com/#docs/class" target="_blank" rel="noopener noreferrer">《Class 的基本语法》<ExternalLinkIcon/></a></p>\n<h2 id="_70-documen-write-和-innerhtml-的区别" tabindex="-1"><a class="header-anchor" href="#_70-documen-write-和-innerhtml-的区别" aria-hidden="true">#</a> 70. documen.write 和 innerHTML 的区别？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>document.write 的内容会代替整个文档内容，会重写整个页面。\n \ninnerHTML 的内容只是替代指定元素的内容，只会重写页面中的部分内容。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>详细资料可以参考：\n<a href="https://www.nowcoder.com/questionTerminal/2c5d8105b2694d85b06eff85e871cf50" target="_blank" rel="noopener noreferrer">《简述 document.write 和 innerHTML 的区别。》<ExternalLinkIcon/></a></p>\n<h2 id="_71-dom-操作——怎样添加、移除、移动、复制、创建和查找节点" tabindex="-1"><a class="header-anchor" href="#_71-dom-操作——怎样添加、移除、移动、复制、创建和查找节点" aria-hidden="true">#</a> 71. DOM 操作——怎样添加、移除、移动、复制、创建和查找节点？</h2>\n<p>（1）创建新节点</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>createDocumentFragment(node);\ncreateElement(node);\ncreateTextNode(text);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>（2）添加、移除、替换、插入</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>appendChild(node)\nremoveChild(node)\nreplaceChild(new,old)\ninsertBefore(new,old)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>（3）查找</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>getElementById();\ngetElementsByName();\ngetElementsByTagName();\ngetElementsByClassName();\nquerySelector();\nquerySelectorAll();\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>（4）属性操作</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>getAttribute(key);\nsetAttribute(key, value);\nhasAttribute(key);\nremoveAttribute(key);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>详细资料可以参考：\n<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model/Introduction#DOM_interfaces" target="_blank" rel="noopener noreferrer">《DOM 概述》<ExternalLinkIcon/></a>\n<a href="https://harttle.land/2015/10/01/javascript-dom-api.html" target="_blank" rel="noopener noreferrer">《原生 JavaScript 的 DOM 操作汇总》<ExternalLinkIcon/></a>\n<a href="https://microzz.com/2017/04/06/jsdom/" target="_blank" rel="noopener noreferrer">《原生 JS 中 DOM 节点相关 API 合集》<ExternalLinkIcon/></a></p>\n<h2 id="_72-innerhtml-与-outerhtml-的区别" tabindex="-1"><a class="header-anchor" href="#_72-innerhtml-与-outerhtml-的区别" aria-hidden="true">#</a> 72. innerHTML 与 outerHTML 的区别？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>对于这样一个 HTML 元素：&lt;div>content&lt;br/>&lt;/div>。\n \ninnerHTML：内部 HTML，content&lt;br/>；\nouterHTML：外部 HTML，&lt;div>content&lt;br/>&lt;/div>；\ninnerText：内部文本，content ；\nouterText：内部文本，content ；\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="_73-call-和-apply-的区别" tabindex="-1"><a class="header-anchor" href="#_73-call-和-apply-的区别" aria-hidden="true">#</a> 73. .call() 和 .apply() 的区别？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>它们的作用一模一样，区别仅在于传入参数的形式的不同。\n \napply 接受两个参数，第一个参数指定了函数体内 this 对象的指向，第二个参数为一个带下标的集合，这个集合可以为数组，也可以为类数组，apply 方法把这个集合中的元素作为参数传递给被调用的函数。\n \ncall 传入的参数数量不固定，跟 apply 相同的是，第一个参数也是代表函数体内的 this 指向，从第二个参数开始往后，每个参数被依次传入函数。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>详细资料可以参考：\n<a href="https://juejin.im/entry/58d0a7b22f301e007e5a15ae" target="_blank" rel="noopener noreferrer">《apply、call 的区别和用途》<ExternalLinkIcon/></a></p>\n<h2 id="_74-javascript-类数组对象的定义" tabindex="-1"><a class="header-anchor" href="#_74-javascript-类数组对象的定义" aria-hidden="true">#</a> 74. JavaScript 类数组对象的定义？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>一个拥有 length 属性和若干索引属性的对象就可以被称为类数组对象，类数组对象和数组类似，但是不能调用数组的方法。\n \n常见的类数组对象有 arguments 和 DOM 方法的返回结果，还有一个函数也可以被看作是类数组对象，因为它含有 length\n属性值，代表可接收的参数个数。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>常见的类数组转换为数组的方法有这样几种：</p>\n<p>（1）通过 call 调用数组的 slice 方法来实现转换</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>Array.prototype.slice.call(arrayLike);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>（2）通过 call 调用数组的 splice 方法来实现转换</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>Array.prototype.splice.call(arrayLike, 0);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>（3）通过 apply 调用数组的 concat 方法来实现转换</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>Array.prototype.concat.apply([], arrayLike);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>（4）通过 Array.from 方法来实现转换</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>Array.from(arrayLike);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>详细的资料可以参考：\n<a href="https://github.com/mqyqingfeng/Blog/issues/14" target="_blank" rel="noopener noreferrer">《JavaScript 深入之类数组对象与 arguments》<ExternalLinkIcon/></a>\n<a href="https://segmentfault.com/a/1190000000415572" target="_blank" rel="noopener noreferrer">《javascript 类数组》<ExternalLinkIcon/></a>\n<a href="https://blog.lxxyx.cn/2016/05/07/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JavaScript%E7%B1%BB%E6%95%B0%E7%BB%84/" target="_blank" rel="noopener noreferrer">《深入理解 JavaScript 类数组》<ExternalLinkIcon/></a></p>\n<h2 id="_75-数组和对象有哪些原生方法-列举一下" tabindex="-1"><a class="header-anchor" href="#_75-数组和对象有哪些原生方法-列举一下" aria-hidden="true">#</a> 75. 数组和对象有哪些原生方法，列举一下？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>数组和字符串的转换方法：toString()、toLocalString()、join() 其中 join() 方法可以指定转换为字符串时的分隔符。\n \n数组尾部操作的方法 pop() 和 push()，push 方法可以传入多个参数。\n \n数组首部操作的方法 shift() 和 unshift() 重排序的方法 reverse() 和 sort()，sort() 方法可以传入一个函数来进行比较，传入前后两个值，如果返回值为正数，则交换两个参数的位置。\n \n数组连接的方法 concat() ，返回的是拼接好的数组，不影响原数组。\n \n数组截取办法 slice()，用于截取数组中的一部分返回，不影响原数组。\n \n数组插入方法 splice()，影响原数组查找特定项的索引的方法，indexOf() 和 lastIndexOf() 迭代方法 every()、some()、filter()、map() 和 forEach() 方法\n \n数组归并方法 reduce() 和 reduceRight() 方法\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>详细资料可以参考：\n<a href="http://cavszhouyou.top/JavaScript%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E4%B9%8BArray%E8%AF%A6%E8%A7%A3.html" target="_blank" rel="noopener noreferrer">《JavaScript 深入理解之 Array 类型详解》<ExternalLinkIcon/></a></p>\n<h2 id="_76-数组的-fill-方法" tabindex="-1"><a class="header-anchor" href="#_76-数组的-fill-方法" aria-hidden="true">#</a> 76. 数组的 fill 方法？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>fill() 方法用一个固定值填充一个数组中从起始索引到终止索引内的全部元素。不包括终止索引。\nfill 方法接受三个参数 value，start 以及 end，start 和 end 参数是可选的，其默认值分别为 0 和 this 对象的 length 属性值。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>详细资料可以参考：\n<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/fill" target="_blank" rel="noopener noreferrer">《Array.prototype.fill()》<ExternalLinkIcon/></a></p>\n<h2 id="_77-的长度" tabindex="-1"><a class="header-anchor" href="#_77-的长度" aria-hidden="true">#</a> 77. [,,,] 的长度？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>尾后逗号 （有时叫做“终止逗号”）在向 JavaScript 代码添加元素、参数、属性时十分有用。如果你想要添加新的属性，并且上一行已经使用了尾后逗号，你可以仅仅添加新的一行，而不需要修改上一行。这使得版本控制更加清晰，以及代码维护麻烦更少。\n \nJavaScript 一开始就支持数组字面值中的尾后逗号，随后向对象字面值（ECMAScript 5）中添加了尾后逗号。最近（ECMAS\ncript 2017），又将其添加到函数参数中。但是 JSON 不支持尾后逗号。\n \n如果使用了多于一个尾后逗号，会产生间隙。 带有间隙的数组叫做稀疏数组（密致数组没有间隙）。稀疏数组的长度为逗号的数\n量。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>详细资料可以参考：\n<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Trailing_commas" target="_blank" rel="noopener noreferrer">《尾后逗号》<ExternalLinkIcon/></a></p>\n<h2 id="_78-javascript-中的作用域与变量声明提升" tabindex="-1"><a class="header-anchor" href="#_78-javascript-中的作用域与变量声明提升" aria-hidden="true">#</a> 78. JavaScript 中的作用域与变量声明提升？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>变量提升的表现是，无论我们在函数中何处位置声明的变量，好像都被提升到了函数的首部，我们可以在变量声明前访问到而不会报错。\n \n造成变量声明提升的本质原因是 js 引擎在代码执行前有一个解析的过程，创建了执行上下文，初始化了一些代码执行时需要用到的对象。当我们访问一个变量时，我们会到当前执行上下文中的作用域链中去查找，而作用域链的首端指向的是当前执行上下文的变量对象，这个变量对象是执行上下文的一个属性，它包含了函数的形参、所有的函数和变量声明，这个对象的是在代码解析的时候创建的。这就是会出现变量声明提升的根本原因。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>详细资料可以参考：\n<a href="http://cavszhouyou.top/JavaScript%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E4%B9%8B%E5%8F%98%E9%87%8F%E5%AF%B9%E8%B1%A1.html" target="_blank" rel="noopener noreferrer">《JavaScript 深入理解之变量对象》<ExternalLinkIcon/></a></p>\n<h2 id="_79-如何编写高性能的-javascript" tabindex="-1"><a class="header-anchor" href="#_79-如何编写高性能的-javascript" aria-hidden="true">#</a> 79. 如何编写高性能的 Javascript ？</h2>\n<ul>\n<li>1.使用位运算代替一些简单的四则运算。</li>\n<li>2.避免使用过深的嵌套循环。</li>\n<li>3.不要使用未定义的变量。</li>\n<li>4.当需要多次访问数组长度时，可以用变量保存起来，避免每次都会去进行属性查找。</li>\n</ul>\n<p>详细资料可以参考：\n<a href="https://zhuanlan.zhihu.com/p/34780474" target="_blank" rel="noopener noreferrer">《如何编写高性能的 Javascript？》<ExternalLinkIcon/></a></p>\n<h2 id="_80-简单介绍一下-v8-引擎的垃圾回收机制" tabindex="-1"><a class="header-anchor" href="#_80-简单介绍一下-v8-引擎的垃圾回收机制" aria-hidden="true">#</a> 80. 简单介绍一下 V8 引擎的垃圾回收机制</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>v8 的垃圾回收机制基于分代回收机制，这个机制又基于世代假说，这个假说有两个特点，一是新生的对象容易早死，另一个是不死的对象会活得更久。基于这个假说，v8 引擎将内存分为了新生代和老生代。\n \n新创建的对象或者只经历过一次的垃圾回收的对象被称为新生代。经历过多次垃圾回收的对象被称为老生代。\n \n新生代被分为 From 和 To 两个空间，To 一般是闲置的。当 From 空间满了的时候会执行 Scavenge 算法进行垃圾回收。当我们执行垃圾回收算法的时候应用逻辑将会停止，等垃圾回收结束后再继续执行。这个算法分为三步：\n \n（1）首先检查 From 空间的存活对象，如果对象存活则判断对象是否满足晋升到老生代的条件，如果满足条件则晋升到老生代。如果不满足条件则移动 To 空间。\n \n（2）如果对象不存活，则释放对象的空间。\n \n（3）最后将 From 空间和 To 空间角色进行交换。\n \n新生代对象晋升到老生代有两个条件：\n \n（1）第一个是判断是对象否已经经过一次 Scavenge 回收。若经历过，则将对象从 From 空间复制到老生代中；若没有经历，则复制到 To 空间。\n \n（2）第二个是 To 空间的内存使用占比是否超过限制。当对象从 From 空间复制到 To 空间时，若 To 空间使用超过 25%，则对象直接晋升到老生代中。设置 25% 的原因主要是因为算法结束后，两个空间结束后会交换位置，如果 To 空间的内存太小，会影响后续的内存分配。\n \n老生代采用了标记清除法和标记压缩法。标记清除法首先会对内存中存活的对象进行标记，标记结束后清除掉那些没有标记的对象。由于标记清除后会造成很多的内存碎片，不便于后面的内存分配。所以了解决内存碎片的问题引入了标记压缩法。\n \n由于在进行垃圾回收的时候会暂停应用的逻辑，对于新生代方法由于内存小，每次停顿的时间不会太长，但对于老生代来说每次垃圾回收的时间长，停顿会造成很大的影响。 为了解决这个问题 V8 引入了增量标记的方法，将一次停顿进行的过程分为了多步，每次执行完一小步就让运行逻辑执行一会，就这样交替运行。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>详细资料可以参考：\n<a href="https://www.jianshu.com/p/b8ed21e8a4fb" target="_blank" rel="noopener noreferrer">《深入理解 V8 的垃圾回收原理》<ExternalLinkIcon/></a>\n<a href="https://zhuanlan.zhihu.com/p/23992332" target="_blank" rel="noopener noreferrer">《JavaScript 中的垃圾回收》<ExternalLinkIcon/></a></p>\n<h2 id="_81-哪些操作会造成内存泄漏" tabindex="-1"><a class="header-anchor" href="#_81-哪些操作会造成内存泄漏" aria-hidden="true">#</a> 81. 哪些操作会造成内存泄漏？</h2>\n<p>相关知识点：</p>\n<ul>\n<li>1.意外的全局变量</li>\n<li>2.被遗忘的计时器或回调函数</li>\n<li>3.脱离 DOM 的引用</li>\n<li>4.闭包</li>\n</ul>\n<p>回答：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>第一种情况是我们由于使用未声明的变量，而意外的创建了一个全局变量，而使这个变量一直留在内存中无法被回收。\n \n第二种情况是我们设置了 setInterval 定时器，而忘记取消它，如果循环函数有对外部变量的引用的话，那么这个变量会被一直留\n在内存中，而无法被回收。\n \n第三种情况是我们获取一个 DOM 元素的引用，而后面这个元素被删除，由于我们一直保留了对这个元素的引用，所以它也无法被回\n收。\n \n第四种情况是不合理的使用闭包，从而导致某些变量一直被留在内存当中。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>详细资料可以参考：\n<a href="http://www.ruanyifeng.com/blog/2017/04/memory-leak.html" target="_blank" rel="noopener noreferrer">《JavaScript 内存泄漏教程》<ExternalLinkIcon/></a>\n<a href="https://jinlong.github.io/2016/05/01/4-Types-of-Memory-Leaks-in-JavaScript-and-How-to-Get-Rid-Of-Them/" target="_blank" rel="noopener noreferrer">《4 类 JavaScript 内存泄漏及如何避免》<ExternalLinkIcon/></a>\n<a href="https://juejin.im/entry/5a64366c6fb9a01c9332c706" target="_blank" rel="noopener noreferrer">《杜绝 js 中四种内存泄漏类型的发生》<ExternalLinkIcon/></a>\n<a href="https://segmentfault.com/a/1190000008901861" target="_blank" rel="noopener noreferrer">《javascript 典型内存泄漏及 chrome 的排查方法》<ExternalLinkIcon/></a></p>\n<h2 id="_82-需求-实现一个页面操作不会整页刷新的网站-并且能在浏览器前进、后退时正确响应。给出你的技术实现方案" tabindex="-1"><a class="header-anchor" href="#_82-需求-实现一个页面操作不会整页刷新的网站-并且能在浏览器前进、后退时正确响应。给出你的技术实现方案" aria-hidden="true">#</a> 82. 需求：实现一个页面操作不会整页刷新的网站，并且能在浏览器前进、后退时正确响应。给出你的技术实现方案？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>通过使用 pushState + ajax 实现浏览器无刷新前进后退，当一次 ajax 调用成功后我们将一条 state 记录加入到 history\n对象中。一条 state 记录包含了 url、title 和 content 属性，在 popstate 事件中可以获取到这个 state 对象，我们可\n以使用 content 来传递数据。最后我们通过对 window.onpopstate 事件监听来响应浏览器的前进后退操作。\n \n使用 pushState 来实现有两个问题，一个是打开首页时没有记录，我们可以使用 replaceState 来将首页的记录替换，另一个问\n题是当一个页面刷新的时候，仍然会向服务器端请求数据，因此如果请求的 url 需要后端的配合将其重定向到一个页面。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>详细资料可以参考：\n<a href="http://blog.chenxu.me/post/detail?id=ed4f0732-897f-48e4-9d4f-821e82f17fad" target="_blank" rel="noopener noreferrer">《pushState + ajax 实现浏览器无刷新前进后退》<ExternalLinkIcon/></a>\n<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/History_API" target="_blank" rel="noopener noreferrer">《Manipulating the browser history》<ExternalLinkIcon/></a></p>\n<h2 id="_83-如何判断当前脚本运行在浏览器还是-node-环境中-阿里" tabindex="-1"><a class="header-anchor" href="#_83-如何判断当前脚本运行在浏览器还是-node-环境中-阿里" aria-hidden="true">#</a> 83. 如何判断当前脚本运行在浏览器还是 node 环境中？（阿里）</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>this === window ? \'browser\' : \'node\';\n \n通过判断 Global 对象是否为 window，如果不为 window，当前脚本没有运行在浏览器中。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="_84-把-script-标签放在页面的最底部的-body-封闭之前和封闭之后有什么区别-浏览器会如何解析它们" tabindex="-1"><a class="header-anchor" href="#_84-把-script-标签放在页面的最底部的-body-封闭之前和封闭之后有什么区别-浏览器会如何解析它们" aria-hidden="true">#</a> 84. 把 script 标签放在页面的最底部的 body 封闭之前和封闭之后有什么区别？浏览器会如何解析它们？</h2>\n<p>详细资料可以参考：\n<a href="https://www.zhihu.com/question/20027966" target="_blank" rel="noopener noreferrer">《为什么把 script 标签放在 body 结束标签之后 html 结束标签之前？》<ExternalLinkIcon/></a>\n<a href="https://zhuanlan.zhihu.com/p/30558018" target="_blank" rel="noopener noreferrer">《从 Chrome 源码看浏览器如何加载资源》<ExternalLinkIcon/></a></p>\n<h2 id="_85-移动端的点击事件的有延迟-时间是多久-为什么会有-怎么解决这个延时" tabindex="-1"><a class="header-anchor" href="#_85-移动端的点击事件的有延迟-时间是多久-为什么会有-怎么解决这个延时" aria-hidden="true">#</a> 85. 移动端的点击事件的有延迟，时间是多久，为什么会有？ 怎么解决这个延时？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>移动端点击有 300ms 的延迟是因为移动端会有双击缩放的这个操作，因此浏览器在 click 之后要等待 300ms，看用户有没有下一次点击，来判断这次操作是不是双击。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>有三种办法来解决这个问题：</p>\n<ul>\n<li>1.通过 meta 标签禁用网页的缩放。</li>\n<li>2.通过 meta 标签将网页的 viewport 设置为 ideal viewport。</li>\n<li>3.调用一些 js 库，比如 FastClick</li>\n</ul>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>click 延时问题还可能引起点击穿透的问题，就是如果我们在一个元素上注册了 touchStart 的监听事件，这个事件会将这个元素隐藏掉，我们发现当这个元素隐藏后，触发了这个元素下的一个元素的点击事件，这就是点击穿透。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>详细资料可以参考：\n<a href="https://juejin.im/post/5b3cc9836fb9a04f9a5cb0e0" target="_blank" rel="noopener noreferrer">《移动端 300ms 点击延迟和点击穿透》<ExternalLinkIcon/></a></p>\n<h2 id="_86-什么是-前端路由-什么时候适合使用-前端路由-前端路由-有哪些优点和缺点" tabindex="-1"><a class="header-anchor" href="#_86-什么是-前端路由-什么时候适合使用-前端路由-前端路由-有哪些优点和缺点" aria-hidden="true">#</a> 86. 什么是“前端路由”？什么时候适合使用“前端路由”？“前端路由”有哪些优点和缺点？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>（1）什么是前端路由？\n \n前端路由就是把不同路由对应不同的内容或页面的任务交给前端来做，之前是通过服务端根据 url 的不同返回不同的页面实现的。\n \n（2）什么时候使用前端路由？\n \n在单页面应用，大部分页面结构不变，只改变部分内容的使用\n \n（3）前端路由有什么优点和缺点？\n \n优点：用户体验好，不需要每次都从服务器全部获取，快速展现给用户\n \n缺点：单页面无法记住之前滚动的位置，无法在前进，后退的时候记住滚动的位置\n \n前端路由一共有两种实现方式，一种是通过 hash 的方式，一种是通过使用 pushState 的方式。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>详细资料可以参考：\n<a href="https://segmentfault.com/q/1010000005336260" target="_blank" rel="noopener noreferrer">《什么是“前端路由”》<ExternalLinkIcon/></a>\n<a href="https://github.com/kaola-fed/blog/issues/137" target="_blank" rel="noopener noreferrer">《浅谈前端路由》<ExternalLinkIcon/></a>\n<a href="https://www.zhihu.com/question/53064386" target="_blank" rel="noopener noreferrer">《前端路由是什么东西？》<ExternalLinkIcon/></a></p>\n<h2 id="_87-如何测试前端代码么-知道-bdd-tdd-unit-test-么-知道怎么测试你的前端工程么-mocha-sinon-jasmin-qunit" tabindex="-1"><a class="header-anchor" href="#_87-如何测试前端代码么-知道-bdd-tdd-unit-test-么-知道怎么测试你的前端工程么-mocha-sinon-jasmin-qunit" aria-hidden="true">#</a> 87. 如何测试前端代码么？ 知道 BDD, TDD, Unit Test 么？ 知道怎么测试你的前端工程么(mocha, sinon, jasmin, qUnit..)？</h2>\n<p>详细资料可以参考：\n<a href="https://juejin.im/post/5b2da89cf265da597f1c7cab" target="_blank" rel="noopener noreferrer">《浅谈前端单元测试》<ExternalLinkIcon/></a></p>\n<h2 id="_88-检测浏览器版本版本有哪些方式" tabindex="-1"><a class="header-anchor" href="#_88-检测浏览器版本版本有哪些方式" aria-hidden="true">#</a> 88. 检测浏览器版本版本有哪些方式？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>检测浏览器版本一共有两种方式：\n \n一种是检测 window.navigator.userAgent 的值，但这种方式很不可靠，因为 userAgent 可以被改写，并且早期的浏览器如 ie，会通过伪装自己的 userAgent 的值为 Mozilla 来躲过服务器的检测。\n \n第二种方式是功能检测，根据每个浏览器独有的特性来进行判断，如 ie 下独有的 ActiveXObject。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>详细资料可以参考：\n<a href="https://www.jianshu.com/p/d99f4ca385ac" target="_blank" rel="noopener noreferrer">《JavaScript 判断浏览器类型》<ExternalLinkIcon/></a></p>\n<h2 id="_89-什么是-polyfill" tabindex="-1"><a class="header-anchor" href="#_89-什么是-polyfill" aria-hidden="true">#</a> 89. 什么是 Polyfill ？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>Polyfill 指的是用于实现浏览器并不支持的原生 API 的代码。\n \n比如说 querySelectorAll 是很多现代浏览器都支持的原生 Web API，但是有些古老的浏览器并不支持，那么假设有人写了一段代码来实现这个功能使这些浏览器也支持了这个功能，那么这就可以成为一个 Polyfill。\n \n一个 shim 是一个库，有自己的 API，而不是单纯实现原生不支持的 API。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>详细资料可以参考：\n<a href="https://segmentfault.com/a/1190000002593432" target="_blank" rel="noopener noreferrer">《Web 开发中的“黑话”》<ExternalLinkIcon/></a>\n<a href="https://juejin.im/post/5a579bc7f265da3e38496ba1" target="_blank" rel="noopener noreferrer">《Polyfill 为何物》<ExternalLinkIcon/></a></p>\n<h2 id="_90-使用-js-实现获取文件扩展名" tabindex="-1"><a class="header-anchor" href="#_90-使用-js-实现获取文件扩展名" aria-hidden="true">#</a> 90. 使用 JS 实现获取文件扩展名？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>// String.lastIndexOf() 方法返回指定值（本例中的\'.\'）在调用该方法的字符串中最后出现的位置，如果没找到则返回 -1。\n \n// 对于 \'filename\' 和 \'.hiddenfile\' ，lastIndexOf 的返回值分别为 0 和 -1 无符号右移操作符(>>>) 将 -1 转换为 4294967295 ，将 -2 转换为 4294967294 ，这个方法可以保证边缘情况时文件名不变。\n \n// String.prototype.slice() 从上面计算的索引处提取文件的扩展名。如果索引比文件名的长度大，结果为""。\nfunction getFileExtension(filename) {\n  return filename.slice(((filename.lastIndexOf(".") - 1) >>> 0) + 2);\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>详细资料可以参考：\n<a href="https://segmentfault.com/a/1190000004993946" target="_blank" rel="noopener noreferrer">《如何更有效的获取文件扩展名》<ExternalLinkIcon/></a></p>\n<h2 id="_91-介绍一下-js-的节流与防抖" tabindex="-1"><a class="header-anchor" href="#_91-介绍一下-js-的节流与防抖" aria-hidden="true">#</a> 91. 介绍一下 js 的节流与防抖？</h2>\n<p>相关知识点：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>// 函数防抖： 在事件被触发 n 秒后再执行回调，如果在这 n 秒内事件又被触发，则重新计时。\n \n// 函数节流： 规定一个单位时间，在这个单位时间内，只能有一次触发事件的回调函数执行，如果在同一个单位时间内某事件被触发多次，只有一次能生效。\n \n// 函数防抖的实现\nfunction debounce(fn, wait) {\n  var timer = null;\n \n  return function() {\n    var context = this,\n      args = arguments;\n \n    // 如果此时存在定时器的话，则取消之前的定时器重新记时\n    if (timer) {\n      clearTimeout(timer);\n      timer = null;\n    }\n \n    // 设置定时器，使事件间隔指定事件后执行\n    timer = setTimeout(() => {\n      fn.apply(context, args);\n    }, wait);\n  };\n}\n \n// 函数节流的实现;\nfunction throttle(fn, delay) {\n  var preTime = Date.now();\n \n  return function() {\n    var context = this,\n      args = arguments,\n      nowTime = Date.now();\n \n    // 如果两次时间间隔超过了指定时间，则执行函数。\n    if (nowTime - preTime >= delay) {\n      preTime = Date.now();\n      return fn.apply(context, args);\n    }\n  };\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><p>回答：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>函数防抖是指在事件被触发 n 秒后再执行回调，如果在这 n 秒内事件又被触发，则重新计时。这可以使用在一些点击请求的事件上，避免因为用户的多次点击向后端发送多次请求。\n \n函数节流是指规定一个单位时间，在这个单位时间内，只能有一次触发事件的回调函数执行，如果在同一个单位时间内某事件被触发多次，只有一次能生效。节流可以使用在 scroll 函数的事件监听上，通过事件节流来降低事件调用的频率。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>详细资料可以参考：\n<a href="https://juejin.im/post/5a35ed25f265da431d3cc1b1" target="_blank" rel="noopener noreferrer">《轻松理解 JS 函数节流和函数防抖》<ExternalLinkIcon/></a>\n<a href="https://juejin.im/post/5aa60b0e518825556b6c6d1a" target="_blank" rel="noopener noreferrer">《JavaScript 事件节流和事件防抖》<ExternalLinkIcon/></a>\n<a href="https://juejin.im/entry/5b1d2d54f265da6e2545bfa4" target="_blank" rel="noopener noreferrer">《JS 的防抖与节流》<ExternalLinkIcon/></a></p>\n<h2 id="_92-object-is-与原来的比较操作符-、-的区别" tabindex="-1"><a class="header-anchor" href="#_92-object-is-与原来的比较操作符-、-的区别" aria-hidden="true">#</a> 92. Object.is() 与原来的比较操作符 “=”、“” 的区别？</h2>\n<p>相关知识点：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>两等号判等，会在比较时进行类型转换。\n三等号判等（判断严格），比较时不进行隐式类型转换，（类型不同则会返回false）。\n \nObject.is 在三等号判等的基础上特别处理了 NaN 、-0 和 +0 ，保证 -0 和 +0 不再相同，但 Object.is(NaN, NaN) 会返回 true.\n \nObject.is 应被认为有其特殊的用途，而不能用它认为它比其它的相等对比更宽松或严格。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>回答：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>使用双等号进行相等判断时，如果两边的类型不一致，则会进行强制类型转化后再进行比较。\n \n使用三等号进行相等判断时，如果两边的类型不一致时，不会做强制类型准换，直接返回 false。\n \n使用 Object.is 来进行相等判断时，一般情况下和三等号的判断相同，它处理了一些特殊的情况，比如 -0 和 +0 不再相等，两个 NaN 认定为是相等的。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="_93-escape-encodeuri-encodeuricomponent-有什么区别" tabindex="-1"><a class="header-anchor" href="#_93-escape-encodeuri-encodeuricomponent-有什么区别" aria-hidden="true">#</a> 93. escape,encodeURI,encodeURIComponent 有什么区别？</h2>\n<p>相关知识点：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>escape 和 encodeURI 都属于 Percent-encoding，基本功能都是把 URI 非法字符转化成合法字符，转化后形式类似「%*」。\n它们的根本区别在于，escape 在处理 0xff 之外字符的时候，是直接使用字符的 unicode 在前面加上一个「%u」，而 encode URI 则是先进行 UTF-8，再在 UTF-8 的每个字节码前加上一个「%」；在处理 0xff 以内字符时，编码方式是一样的（都是「%XX」，XX 为字符的 16 进制 unicode，同时也是字符的 UTF-8），只是范围（即哪些字符编码哪些字符不编码）不一样。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>回答：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>encodeURI 是对整个 URI 进行转义，将 URI 中的非法字符转换为合法字符，所以对于一些在 URI 中有特殊意义的字符不会进行转义。\n \nencodeURIComponent 是对 URI 的组成部分进行转义，所以一些特殊字符也会得到转义。\n \nescape 和 encodeURI 的作用相同，不过它们对于 unicode 编码为 0xff 之外字符的时候会有区别，escape 是直接在字符的 unicode 编码前加上 %u，而 encodeURI 首先会将字符转换为 UTF-8 的格式，再在每个字节前加上 %。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>详细资料可以参考：\n<a href="https://www.zhihu.com/question/21861899" target="_blank" rel="noopener noreferrer">《escape,encodeURI,encodeURIComponent 有什么区别?》<ExternalLinkIcon/></a></p>\n<h2 id="_94-unicode-和-utf-8-之间的关系" tabindex="-1"><a class="header-anchor" href="#_94-unicode-和-utf-8-之间的关系" aria-hidden="true">#</a> 94. Unicode 和 UTF-8 之间的关系？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>Unicode 是一种字符集合，现在可容纳 100 多万个字符。每个字符对应一个不同的 Unicode 编码，它只规定了符号的二进制代码，却没有规定这个二进制代码在计算机中如何编码传输。\n \nUTF-8 是一种对 Unicode 的编码方式，它是一种变长的编码方式，可以用 1~4 个字节来表示一个字符。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>详细资料可以参考：\n<a href="https://blog.51cto.com/polaris/377468" target="_blank" rel="noopener noreferrer">《字符编码详解》<ExternalLinkIcon/></a>\n<a href="http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html" target="_blank" rel="noopener noreferrer">《字符编码笔记：ASCII，Unicode 和 UTF-8》<ExternalLinkIcon/></a></p>\n<h2 id="_95-js-的事件循环是什么" tabindex="-1"><a class="header-anchor" href="#_95-js-的事件循环是什么" aria-hidden="true">#</a> 95. js 的事件循环是什么？</h2>\n<p>相关知识点：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>事件队列是一个存储着待执行任务的队列，其中的任务严格按照时间先后顺序执行，排在队头的任务将会率先执行，而排在队尾的任务会最后执行。事件队列每次仅执行一个任务，在该任务执行完毕之后，再执行下一个任务。执行栈则是一个类似于函数调用栈的运行容器，当执行栈为空时，JS 引擎便检查事件队列，如果不为空的话，事件队列便将第一个任务压入执行栈中运行。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>回答：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>因为 js 是单线程运行的，在代码执行的时候，通过将不同函数的执行上下文压入执行栈中来保证代码的有序执行。在执行同步代码的时候，如果遇到了异步事件，js 引擎并不会一直等待其返回结果，而是会将这个事件挂起，继续执行执行栈中的其他任务。当异步事件执行完毕后，再将异步事件对应的回调加入到与当前执行栈中不同的另一个任务队列中等待执行。任务队列可以分为宏任务对列和微任务对列，当当前执行栈中的事件执行完毕后，js 引擎首先会判断微任务对列中是否有任务可以执行，如果有就将微任务队首的事件压入栈中执行。当微任务对列中的任务都执行完成后再去判断宏任务对列中的任务。\n \n微任务包括了 promise 的回调、node 中的 process.nextTick 、对 Dom 变化监听的 MutationObserver。\n \n宏任务包括了 script 脚本的执行、setTimeout ，setInterval ，setImmediate 一类的定时事件，还有如 I/O 操作、UI 渲\n染等。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>详细资料可以参考：\n<a href="https://juejin.im/post/5afbc62151882542af04112d" target="_blank" rel="noopener noreferrer">《浏览器事件循环机制（event loop）》<ExternalLinkIcon/></a>\n<a href="https://zhuanlan.zhihu.com/p/33058983" target="_blank" rel="noopener noreferrer">《详解 JavaScript 中的 Event Loop（事件循环）机制》<ExternalLinkIcon/></a>\n<a href="http://www.ruanyifeng.com/blog/2013/10/event_loop.html" target="_blank" rel="noopener noreferrer">《什么是 Event Loop？》<ExternalLinkIcon/></a>\n<a href="https://juejin.im/post/59e85eebf265da430d571f89" target="_blank" rel="noopener noreferrer">《这一次，彻底弄懂 JavaScript 执行机制》<ExternalLinkIcon/></a></p>\n<h2 id="_96-js-中的深浅拷贝实现" tabindex="-1"><a class="header-anchor" href="#_96-js-中的深浅拷贝实现" aria-hidden="true">#</a> 96. js 中的深浅拷贝实现？</h2>\n<p>相关资料：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>// 浅拷贝的实现;\n \nfunction shallowCopy(object) {\n  // 只拷贝对象\n  if (!object || typeof object !== "object") return;\n \n  // 根据 object 的类型判断是新建一个数组还是对象\n  let newObject = Array.isArray(object) ? [] : {};\n \n  // 遍历 object，并且判断是 object 的属性才拷贝\n  for (let key in object) {\n    if (object.hasOwnProperty(key)) {\n      newObject[key] = object[key];\n    }\n  }\n \n  return newObject;\n}\n \n// 深拷贝的实现;\n \nfunction deepCopy(object) {\n  if (!object || typeof object !== "object") return;\n \n  let newObject = Array.isArray(object) ? [] : {};\n \n  for (let key in object) {\n    if (object.hasOwnProperty(key)) {\n      newObject[key] =\n        typeof object[key] === "object" ? deepCopy(object[key]) : object[key];\n    }\n  }\n \n  return newObject;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><p>回答：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>浅拷贝指的是将一个对象的属性值复制到另一个对象，如果有的属性的值为引用类型的话，那么会将这个引用的地址复制给对象，因此两个对象会有同一个引用类型的引用。浅拷贝可以使用  Object.assign 和展开运算符来实现。\n \n深拷贝相对浅拷贝而言，如果遇到属性值为引用类型的时候，它新建一个引用类型并将对应的值复制给它，因此对象获得的一个新的引用类型而不是一个原有类型的引用。深拷贝对于一些对象可以使用 JSON 的两个函数来实现，但是由于 JSON 的对象格式比 js 的对象格式更加严格，所以如果属性值里边出现函数或者 Symbol 类型的值时，会转换失败。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>详细资料可以参考：\n<a href="https://github.com/mqyqingfeng/Blog/issues/32" target="_blank" rel="noopener noreferrer">《JavaScript 专题之深浅拷贝》<ExternalLinkIcon/></a>\n<a href="https://juejin.im/book/5bdc715fe51d454e755f75ef/section/5bed40d951882545f73004f6" target="_blank" rel="noopener noreferrer">《前端面试之道》<ExternalLinkIcon/></a></p>\n<h2 id="_97-手写-call、apply-及-bind-函数" tabindex="-1"><a class="header-anchor" href="#_97-手写-call、apply-及-bind-函数" aria-hidden="true">#</a> 97. 手写 call、apply 及 bind 函数</h2>\n<p>相关资料：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>// call函数实现\nFunction.prototype.myCall = function(context) {\n  // 判断调用对象\n  if (typeof this !== "function") {\n    console.error("type error");\n  }\n \n  // 获取参数\n  let args = [...arguments].slice(1),\n    result = null;\n \n  // 判断 context 是否传入，如果未传入则设置为 window\n  context = context || window;\n \n  // 将调用函数设为对象的方法\n  context.fn = this;\n \n  // 调用函数\n  result = context.fn(...args);\n \n  // 将属性删除\n  delete context.fn;\n \n  return result;\n};\n \n// apply 函数实现\n \nFunction.prototype.myApply = function(context) {\n  // 判断调用对象是否为函数\n  if (typeof this !== "function") {\n    throw new TypeError("Error");\n  }\n \n  let result = null;\n \n  // 判断 context 是否存在，如果未传入则为 window\n  context = context || window;\n \n  // 将函数设为对象的方法\n  context.fn = this;\n \n  // 调用方法\n  if (arguments[1]) {\n    result = context.fn(...arguments[1]);\n  } else {\n    result = context.fn();\n  }\n \n  // 将属性删除\n  delete context.fn;\n \n  return result;\n};\n \n// bind 函数实现\nFunction.prototype.myBind = function(context) {\n  // 判断调用对象是否为函数\n  if (typeof this !== "function") {\n    throw new TypeError("Error");\n  }\n \n  // 获取参数\n  var args = [...arguments].slice(1),\n    fn = this;\n \n  return function Fn() {\n    // 根据调用方式，传入不同绑定值\n    return fn.apply(\n      this instanceof Fn ? this : context,\n      args.concat(...arguments)\n    );\n  };\n};\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br></div></div><p>回答：</p>\n<p>call 函数的实现步骤：</p>\n<ul>\n<li>1.判断调用对象是否为函数，即使我们是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。</li>\n<li>2.判断传入上下文对象是否存在，如果不存在，则设置为 window 。</li>\n<li>3.处理传入的参数，截取第一个参数后的所有参数。</li>\n<li>4.将函数作为上下文对象的一个属性。</li>\n<li>5.使用上下文对象来调用这个方法，并保存返回结果。</li>\n<li>6.删除刚才新增的属性。</li>\n<li>7.返回结果。</li>\n</ul>\n<p>apply 函数的实现步骤：</p>\n<ul>\n<li>1.判断调用对象是否为函数，即使我们是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。</li>\n<li>2.判断传入上下文对象是否存在，如果不存在，则设置为 window 。</li>\n<li>3.将函数作为上下文对象的一个属性。</li>\n<li>4.判断参数值是否传入</li>\n<li>4.使用上下文对象来调用这个方法，并保存返回结果。</li>\n<li>5.删除刚才新增的属性</li>\n<li>6.返回结果</li>\n</ul>\n<p>bind 函数的实现步骤：</p>\n<ul>\n<li>1.判断调用对象是否为函数，即使我们是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。</li>\n<li>2.保存当前函数的引用，获取其余传入参数值。</li>\n<li>3.创建一个函数返回</li>\n<li>4.函数内部使用 apply 来绑定函数调用，需要判断函数作为构造函数的情况，这个时候需要传入当前函数的 this 给 apply 调用，其余情况都传入指定的上下文对象。</li>\n</ul>\n<p>详细资料可以参考：\n<a href="https://juejin.im/book/5bdc715fe51d454e755f75ef/section/5bdd0d8e6fb9a04a044073fe" target="_blank" rel="noopener noreferrer">《手写 call、apply 及 bind 函数》<ExternalLinkIcon/></a>\n<a href="https://github.com/mqyqingfeng/Blog/issues/11" target="_blank" rel="noopener noreferrer">《JavaScript 深入之 call 和 apply 的模拟实现》<ExternalLinkIcon/></a></p>\n<h2 id="_98-函数柯里化的实现" tabindex="-1"><a class="header-anchor" href="#_98-函数柯里化的实现" aria-hidden="true">#</a> 98. 函数柯里化的实现</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>// 函数柯里化指的是一种将使用多个参数的一个函数转换成一系列使用一个参数的函数的技术。\n \nfunction curry(fn, args) {\n  // 获取函数需要的参数长度\n  let length = fn.length;\n \n  args = args || [];\n \n  return function() {\n    let subArgs = args.slice(0);\n \n    // 拼接得到现有的所有参数\n    for (let i = 0; i &lt; arguments.length; i++) {\n      subArgs.push(arguments[i]);\n    }\n \n    // 判断参数的长度是否已经满足函数所需参数的长度\n    if (subArgs.length >= length) {\n      // 如果满足，执行函数\n      return fn.apply(this, subArgs);\n    } else {\n      // 如果不满足，递归返回科里化的函数，等待参数的传入\n      return curry.call(this, fn, subArgs);\n    }\n  };\n}\n \n// es6 实现\nfunction curry(fn, ...args) {\n  return fn.length &lt;= args.length ? fn(...args) : curry.bind(null, fn, ...args);\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><p>详细资料可以参考：\n<a href="https://github.com/mqyqingfeng/Blog/issues/42" target="_blank" rel="noopener noreferrer">《JavaScript 专题之函数柯里化》<ExternalLinkIcon/></a></p>\n<h2 id="_99-为什么-0-1-0-2-0-3-如何解决这个问题" tabindex="-1"><a class="header-anchor" href="#_99-为什么-0-1-0-2-0-3-如何解决这个问题" aria-hidden="true">#</a> 99. 为什么 0.1 + 0.2 != 0.3？如何解决这个问题？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>当计算机计算 0.1+0.2 的时候，实际上计算的是这两个数字在计算机里所存储的二进制，0.1 和 0.2 在转换为二进制表示的时候会出现位数无限循环的情况。js 中是以 64 位双精度格式来存储数字的，只有 53 位的有效数字，超过这个长度的位数会被截取掉这样就造成了精度丢失的问题。这是第一个会造成精度丢失的地方。在对两个以 64 位双精度格式的数据进行计算的时候，首先会进行对阶的处理，对阶指的是将阶码对齐，也就是将小数点的位置对齐后，再进行计算，一般是小阶向大阶对齐，因此小阶的数在对齐的过程中，有效数字会向右移动，移动后超过有效位数的位会被截取掉，这是第二个可能会出现精度丢失的地方。当两个数据阶码对齐后，进行相加运算后，得到的结果可能会超过 53 位有效数字，因此超过的位数也会被截取掉，这是可能发生精度丢失的第三个地方。\n \n对于这样的情况，我们可以将其转换为整数后再进行运算，运算后再转换为对应的小数，以这种方式来解决这个问题。\n \n我们还可以将两个数相加的结果和右边相减，如果相减的结果小于一个极小数，那么我们就可以认定结果是相等的，这个极小数可以\n使用 es6 的 Number.EPSILON\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>详细资料可以参考：\n<a href="https://blog.csdn.net/Lixuanshengchao/article/details/82049191" target="_blank" rel="noopener noreferrer">《十进制的 0.1 为什么不能用二进制很好的表示？》<ExternalLinkIcon/></a>\n<a href="https://blog.csdn.net/zhengyanan815/article/details/78550073" target="_blank" rel="noopener noreferrer">《十进制浮点数转成二进制》<ExternalLinkIcon/></a>\n<a href="http://www.ruanyifeng.com/blog/2010/06/ieee_floating-point_representation.html" target="_blank" rel="noopener noreferrer">《浮点数的二进制表示》<ExternalLinkIcon/></a>\n<a href="https://juejin.im/post/5b372f106fb9a00e6714aa21" target="_blank" rel="noopener noreferrer">《js 浮点数存储精度丢失原理》<ExternalLinkIcon/></a>\n<a href="https://juejin.im/post/594a31d0a0bb9f006b0b2624" target="_blank" rel="noopener noreferrer">《浮点数精度之谜》<ExternalLinkIcon/></a>\n<a href="https://github.com/camsong/blog/issues/9" target="_blank" rel="noopener noreferrer">《JavaScript 浮点数陷阱及解法》<ExternalLinkIcon/></a>\n<a href="https://juejin.im/post/5bd2f10a51882555e072d0c4" target="_blank" rel="noopener noreferrer">《0.1+0.2 ! 0.3？》<ExternalLinkIcon/></a>\n<a href="https://juejin.im/entry/59cdd7fb6fb9a00a600f8eef" target="_blank" rel="noopener noreferrer">《JavaScript 中奇特的~运算符》<ExternalLinkIcon/></a></p>\n<h2 id="_100-原码、反码和补码的介绍" tabindex="-1"><a class="header-anchor" href="#_100-原码、反码和补码的介绍" aria-hidden="true">#</a> 100. 原码、反码和补码的介绍</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>原码是计算机中对数字的二进制的定点表示方法，最高位表示符号位，其余位表示数值位。优点是易于分辨，缺点是不能够直接参与运算。\n \n正数的反码和其原码一样；负数的反码，符号位为1，数值部分按原码取反。\n如 [+7]原 = 00000111，[+7]反 = 00000111； [-7]原 = 10000111，[-7]反 = 11111000。\n \n正数的补码和其原码一样；负数的补码为其反码加1。\n \n例如 [+7]原 = 00000111，[+7]反 = 00000111，[+7]补 = 00000111；\n[-7]原 = 10000111，[-7]反 = 11111000，[-7]补 = 11111001\n \n之所以在计算机中使用补码来表示负数的原因是，这样可以将加法运算扩展到所有的数值计算上，因此在数字电路中我们只需要考虑加法器的设计就行了，而不用再为减法设置新的数字电路。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>详细资料可以参考：\n<a href="http://www.ruanyifeng.com/blog/2009/08/twos_complement.html" target="_blank" rel="noopener noreferrer">《关于 2 的补码》<ExternalLinkIcon/></a></p>\n<h2 id="_101-toprecision-和-tofixed-和-math-round-的区别" tabindex="-1"><a class="header-anchor" href="#_101-toprecision-和-tofixed-和-math-round-的区别" aria-hidden="true">#</a> 101. toPrecision 和 toFixed 和 Math.round 的区别？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>toPrecision 用于处理精度，精度是从左至右第一个不为 0 的数开始数起。\ntoFixed 是对小数点后指定位数取整，从小数点开始数起。\nMath.round 是将一个数字四舍五入到一个整数。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="_102-什么是-xss-攻击-如何防范-xss-攻击" tabindex="-1"><a class="header-anchor" href="#_102-什么是-xss-攻击-如何防范-xss-攻击" aria-hidden="true">#</a> 102. 什么是 XSS 攻击？如何防范 XSS 攻击？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>XSS 攻击指的是跨站脚本攻击，是一种代码注入攻击。攻击者通过在网站注入恶意脚本，使之在用户的浏览器上运行，从而盗取用户的信息如 cookie 等。\n \nXSS 的本质是因为网站没有对恶意代码进行过滤，与正常的代码混合在一起了，浏览器没有办法分辨哪些脚本是可信的，从而导致了恶意代码的执行。\n \nXSS 一般分为存储型、反射型和 DOM 型。\n \n存储型指的是恶意代码提交到了网站的数据库中，当用户请求数据的时候，服务器将其拼接为 HTML 后返回给了用户，从而导致了恶意代码的执行。\n \n反射型指的是攻击者构建了特殊的 URL，当服务器接收到请求后，从 URL 中获取数据，拼接到 HTML 后返回，从而导致了恶意代码的执行。\n \nDOM 型指的是攻击者构建了特殊的 URL，用户打开网站后，js 脚本从 URL 中获取数据，从而导致了恶意代码的执行。\n \nXSS 攻击的预防可以从两个方面入手，一个是恶意代码提交的时候，一个是浏览器执行恶意代码的时候。\n \n对于第一个方面，如果我们对存入数据库的数据都进行的转义处理，但是一个数据可能在多个地方使用，有的地方可能不需要转义，由于我们没有办法判断数据最后的使用场景，所以直接在输入端进行恶意代码的处理，其实是不太可靠的。\n \n因此我们可以从浏览器的执行来进行预防，一种是使用纯前端的方式，不用服务器端拼接后返回。另一种是对需要插入到 HTML 中的代码做好充分的转义。对于 DOM 型的攻击，主要是前端脚本的不可靠而造成的，我们对于数据获取渲染和字符串拼接的时候应该对可能出现的恶意代码情况进行判断。\n \n还有一些方式，比如使用 CSP ，CSP 的本质是建立一个白名单，告诉浏览器哪些外部资源可以加载和执行，从而防止恶意代码的注入攻击。\n \n还可以对一些敏感信息进行保护，比如 cookie 使用 http-only ，使得脚本无法获取。也可以使用验证码，避免脚本伪装成用户执行一些操作。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>详细资料可以参考：\n<a href="https://juejin.im/post/5bad9140e51d450e935c6d64" target="_blank" rel="noopener noreferrer">《前端安全系列（一）：如何防止 XSS 攻击？》<ExternalLinkIcon/></a></p>\n<h2 id="_103-什么是-csp" tabindex="-1"><a class="header-anchor" href="#_103-什么是-csp" aria-hidden="true">#</a> 103. 什么是 CSP？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>CSP 指的是内容安全策略，它的本质是建立一个白名单，告诉浏览器哪些外部资源可以加载和执行。我们只需要配置规则，如何拦截由浏览器自己来实现。\n \n通常有两种方式来开启 CSP，一种是设置 HTTP 首部中的 Content-Security-Policy，一种是设置 meta 标签的方式 &lt;meta\nhttp-equiv="Content-Security-Policy">\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>详细资料可以参考：\n<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CSP" target="_blank" rel="noopener noreferrer">《内容安全策略（CSP）》<ExternalLinkIcon/></a>\n<a href="https://juejin.im/book/5bdc715fe51d454e755f75ef/section/5bdc721851882516c33430a2" target="_blank" rel="noopener noreferrer">《前端面试之道》<ExternalLinkIcon/></a></p>\n<h2 id="_104-什么是-csrf-攻击-如何防范-csrf-攻击" tabindex="-1"><a class="header-anchor" href="#_104-什么是-csrf-攻击-如何防范-csrf-攻击" aria-hidden="true">#</a> 104. 什么是 CSRF 攻击？如何防范 CSRF 攻击？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>CSRF 攻击指的是跨站请求伪造攻击，攻击者诱导用户进入一个第三方网站，然后该网站向被攻击网站发送跨站请求。如果用户在被\n攻击网站中保存了登录状态，那么攻击者就可以利用这个登录状态，绕过后台的用户验证，冒充用户向服务器执行一些操作。\n \nCSRF 攻击的本质是利用了 cookie 会在同源请求中携带发送给服务器的特点，以此来实现用户的冒充。\n \n一般的 CSRF 攻击类型有三种：\n \n第一种是 GET 类型的 CSRF 攻击，比如在网站中的一个 img 标签里构建一个请求，当用户打开这个网站的时候就会自动发起提\n交。\n \n第二种是 POST 类型的 CSRF 攻击，比如说构建一个表单，然后隐藏它，当用户进入页面时，自动提交这个表单。\n \n第三种是链接类型的 CSRF 攻击，比如说在 a 标签的 href 属性里构建一个请求，然后诱导用户去点击。\n \nCSRF 可以用下面几种方法来防护：\n \n第一种是同源检测的方法，服务器根据 http 请求头中 origin 或者 referer 信息来判断请求是否为允许访问的站点，从而对请求进行过滤。当 origin 或者 referer 信息都不存在的时候，直接阻止。这种方式的缺点是有些情况下 referer 可以被伪造。还有就是我们这种方法同时把搜索引擎的链接也给屏蔽了，所以一般网站会允许搜索引擎的页面请求，但是相应的页面请求这种请求方式也可能被攻击者给利用。\n \n第二种方法是使用 CSRF Token 来进行验证，服务器向用户返回一个随机数 Token ，当网站再次发起请求时，在请求参数中加入服务器端返回的 token ，然后服务器对这个 token 进行验证。这种方法解决了使用 cookie 单一验证方式时，可能会被冒用的问题，但是这种方法存在一个缺点就是，我们需要给网站中的所有请求都添加上这个 token，操作比较繁琐。还有一个问题是一般不会只有一台网站服务器，如果我们的请求经过负载平衡转移到了其他的服务器，但是这个服务器的 session 中没有保留这个 token 的话，就没有办法验证了。这种情况我们可以通过改变 token 的构建方式来解决。\n \n第三种方式使用双重 Cookie 验证的办法，服务器在用户访问网站页面时，向请求域名注入一个Cookie，内容为随机字符串，然后当用户再次向服务器发送请求的时候，从 cookie 中取出这个字符串，添加到 URL 参数中，然后服务器通过对 cookie 中的数据和参数中的数据进行比较，来进行验证。使用这种方式是利用了攻击者只能利用 cookie，但是不能访问获取 cookie 的特点。并且这种方法比 CSRF Token 的方法更加方便，并且不涉及到分布式访问的问题。这种方法的缺点是如果网站存在 XSS 漏洞的，那么这种方式会失效。同时这种方式不能做到子域名的隔离。\n \n第四种方式是使用在设置 cookie 属性的时候设置 Samesite ，限制 cookie 不能作为被第三方使用，从而可以避免被攻击者利用。Samesite 一共有两种模式，一种是严格模式，在严格模式下 cookie 在任何情况下都不可能作为第三方 Cookie 使用，在宽松模式下，cookie 可以被请求是 GET 请求，且会发生页面跳转的请求所使用。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>详细资料可以参考：\n<a href="https://juejin.im/post/5bc009996fb9a05d0a055192" target="_blank" rel="noopener noreferrer">《前端安全系列之二：如何防止 CSRF 攻击？》<ExternalLinkIcon/></a>\n[《<a href="https://www.jianshu.com/p/1f9c71850299" target="_blank" rel="noopener noreferrer"> HTTP 趣谈] origin, referer 和 host 区别》<ExternalLinkIcon/></a></p>\n<h2 id="_105-什么是-samesite-cookie-属性" tabindex="-1"><a class="header-anchor" href="#_105-什么是-samesite-cookie-属性" aria-hidden="true">#</a> 105. 什么是 Samesite Cookie 属性？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>Samesite Cookie 表示同站 cookie，避免 cookie 被第三方所利用。\n \n将 Samesite 设为 strict ，这种称为严格模式，表示这个 cookie 在任何情况下都不可能作为第三方 cookie。\n \n将 Samesite 设为 Lax ，这种模式称为宽松模式，如果这个请求是个 GET 请求，并且这个请求改变了当前页面或者打开了新的页面，那么这个 cookie 可以作为第三方 cookie，其余情况下都不能作为第三方 cookie。\n \n使用这种方法的缺点是，因为它不支持子域，所以子域没有办法与主域共享登录信息，每次转入子域的网站，都回重新登录。还有一个问题就是它的兼容性不够好。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="_106-什么是点击劫持-如何防范点击劫持" tabindex="-1"><a class="header-anchor" href="#_106-什么是点击劫持-如何防范点击劫持" aria-hidden="true">#</a> 106. 什么是点击劫持？如何防范点击劫持？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>点击劫持是一种视觉欺骗的攻击手段，攻击者将需要攻击的网站通过 iframe 嵌套的方式嵌入自己的网页中，并将 iframe 设置为透明，在页面中透出一个按钮诱导用户点击。\n \n我们可以在 http 相应头中设置 X-FRAME-OPTIONS 来防御用 iframe 嵌套的点击劫持攻击。通过不同的值，可以规定页面在特\n定的一些情况才能作为 iframe 来使用。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>详细资料可以参考：\n<a href="https://www.jianshu.com/p/251704d8ff18" target="_blank" rel="noopener noreferrer">《web 安全之--点击劫持攻击与防御技术简介》<ExternalLinkIcon/></a></p>\n<h2 id="_107-sql-注入攻击" tabindex="-1"><a class="header-anchor" href="#_107-sql-注入攻击" aria-hidden="true">#</a> 107. SQL 注入攻击？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>SQL 注入攻击指的是攻击者在 HTTP 请求中注入恶意的 SQL 代码，服务器使用参数构建数据库 SQL 命令时，恶意 SQL 被一起构\n造，破坏原有 SQL 结构，并在数据库中执行，达到编写程序时意料之外结果的攻击行为。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>详细资料可以参考：\n<a href="https://juejin.im/post/5bd5b820e51d456f72531fa8" target="_blank" rel="noopener noreferrer">《Web 安全漏洞之 SQL 注入》<ExternalLinkIcon/></a>\n<a href="http://blog.720ui.com/2016/security_web/#SQL%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB" target="_blank" rel="noopener noreferrer">《如何防范常见的 Web 攻击》<ExternalLinkIcon/></a></p>\n<h2 id="_108-什么是-mvvm-比之-mvc-有什么区别-什么又是-mvp" tabindex="-1"><a class="header-anchor" href="#_108-什么是-mvvm-比之-mvc-有什么区别-什么又是-mvp" aria-hidden="true">#</a> 108. 什么是 MVVM？比之 MVC 有什么区别？什么又是 MVP ？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>MVC、MVP 和 MVVM 是三种常见的软件架构设计模式，主要通过分离关注点的方式来组织代码结构，优化我们的开发效率。\n \n比如说我们实验室在以前项目开发的时候，使用单页应用时，往往一个路由页面对应了一个脚本文件，所有的页面逻辑都在一个脚本文件里。页面的渲染、数据的获取，对用户事件的响应所有的应用逻辑都混合在一起，这样在开发简单项目时，可能看不出什么问题，当时一旦项目变得复杂，那么整个文件就会变得冗长，混乱，这样对我们的项目开发和后期的项目维护是非常不利的。\n \nMVC 通过分离 Model、View 和 Controller 的方式来组织代码结构。其中 View 负责页面的显示逻辑，Model 负责存储页面的业务数据，以及对相应数据的操作。并且 View 和 Model 应用了观察者模式，当 Model 层发生改变的时候它会通知有关 View 层更新页面。Controller 层是 View 层和 Model 层的纽带，它主要负责用户与应用的响应操作，当用户与页面产生交互的时候，Co\nntroller 中的事件触发器就开始工作了，通过调用 Model 层，来完成对 Model 的修改，然后 Model 层再去通知 View 层更新。\n \nMVP 模式与 MVC 唯一不同的在于 Presenter 和 Controller。在 MVC 模式中我们使用观察者模式，来实现当 Model 层数据发生变化的时候，通知 View 层的更新。这样 View 层和 Model 层耦合在一起，当项目逻辑变得复杂的时候，可能会造成代码的混乱，并且可能会对代码的复用性造成一些问题。MVP 的模式通过使用 Presenter 来实现对 View 层和 Model 层的解耦。MVC 中的\nController 只知道 Model 的接口，因此它没有办法控制 View 层的更新，MVP 模式中，View 层的接口暴露给了 Presenter 因此我们可以在 Presenter 中将 Model 的变化和 View 的变化绑定在一起，以此来实现 View 和 Model 的同步更新。这样就实现了对 View 和 Model 的解耦，Presenter 还包含了其他的响应逻辑。\n \nMVVM 模式中的 VM，指的是 ViewModel，它和 MVP 的思想其实是相同的，不过它通过双向的数据绑定，将 View 和 Model 的同步更新给自动化了。当 Model 发生变化的时候，ViewModel 就会自动更新；ViewModel 变化了，View 也会更新。这样就将 Presenter 中的工作给自动化了。我了解过一点双向数据绑定的原理，比如 vue 是通过使用数据劫持和发布订阅者模式来实现的这一功\n能。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>详细资料可以参考：\n<a href="https://juejin.im/post/593021272f301e0058273468" target="_blank" rel="noopener noreferrer">《浅析前端开发中的 MVC/MVP/MVVM 模式》<ExternalLinkIcon/></a>\n<a href="http://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html" target="_blank" rel="noopener noreferrer">《MVC，MVP 和 MVVM 的图示》<ExternalLinkIcon/></a>\n<a href="https://juejin.im/book/5bdc715fe51d454e755f75ef/section/5bdc72e6e51d45054f664dbf" target="_blank" rel="noopener noreferrer">《MVVM》<ExternalLinkIcon/></a>\n<a href="https://segmentfault.com/a/1190000015310674" target="_blank" rel="noopener noreferrer">《一篇文章了解架构模式：MVC/MVP/MVVM》<ExternalLinkIcon/></a></p>\n<h2 id="_109-vue-双向数据绑定原理" tabindex="-1"><a class="header-anchor" href="#_109-vue-双向数据绑定原理" aria-hidden="true">#</a> 109. vue 双向数据绑定原理？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>vue 通过使用双向数据绑定，来实现了 View 和 Model 的同步更新。vue 的双向数据绑定主要是通过使用数据劫持和发布订阅者模式来实现的。\n \n首先我们通过 Object.defineProperty() 方法来对 Model 数据各个属性添加访问器属性，以此来实现数据的劫持，因此当 Model 中的数据发生变化的时候，我们可以通过配置的 setter 和 getter 方法来实现对 View 层数据更新的通知。\n \n数据在 html 模板中一共有两种绑定情况，一种是使用 v-model 来对 value 值进行绑定，一种是作为文本绑定，在对模板引擎进行解析的过程中。\n \n如果遇到元素节点，并且属性值包含 v-model 的话，我们就从 Model 中去获取 v-model 所对应的属性的值，并赋值给元素的 value 值。然后给这个元素设置一个监听事件，当 View 中元素的数据发生变化的时候触发该事件，通知 Model 中的对应的属性的值进行更新。\n \n如果遇到了绑定的文本节点，我们使用 Model 中对应的属性的值来替换这个文本。对于文本节点的更新，我们使用了发布订阅者模式，属性作为一个主题，我们为这个节点设置一个订阅者对象，将这个订阅者对象加入这个属性主题的订阅者列表中。当 Model 层数据发生改变的时候，Model 作为发布者向主题发出通知，主题收到通知再向它的所有订阅者推送，订阅者收到通知后更改自己的数\n据。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>详细资料可以参考：\n<a href="http://www.cnblogs.com/kidney/p/6052935.html?utm_source=gold_browser_extension" target="_blank" rel="noopener noreferrer">《Vue.js 双向绑定的实现原理》<ExternalLinkIcon/></a></p>\n<h2 id="_110-object-defineproperty-介绍" tabindex="-1"><a class="header-anchor" href="#_110-object-defineproperty-介绍" aria-hidden="true">#</a> 110. Object.defineProperty 介绍？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>Object.defineProperty 函数一共有三个参数，第一个参数是需要定义属性的对象，第二个参数是需要定义的属性，第三个是该属性描述符。\n \n一个属性的描述符有四个属性，分别是 value 属性的值，writable 属性是否可写，enumerable 属性是否可枚举，configurable 属性是否可配置修改。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>详细资料可以参考：\n<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="noopener noreferrer">《Object.defineProperty()》<ExternalLinkIcon/></a></p>\n<h2 id="_111-使用-object-defineproperty-来进行数据劫持有什么缺点" tabindex="-1"><a class="header-anchor" href="#_111-使用-object-defineproperty-来进行数据劫持有什么缺点" aria-hidden="true">#</a> 111. 使用 Object.defineProperty() 来进行数据劫持有什么缺点？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>有一些对属性的操作，使用这种方法无法拦截，比如说通过下标方式修改数组数据或者给对象新增属性，vue 内部通过重写函数解决了这个问题。在 Vue3.0 中已经不使用这种方式了，而是通过使用 Proxy 对对象进行代理，从而实现数据劫持。使用 Proxy 的好处是它可以完美的监听到任何方式的数据改变，唯一的缺点是兼容性的问题，因为这是 ES6 的语法。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="_112-什么是-virtual-dom-为什么-virtual-dom-比原生-dom-快" tabindex="-1"><a class="header-anchor" href="#_112-什么是-virtual-dom-为什么-virtual-dom-比原生-dom-快" aria-hidden="true">#</a> 112. 什么是 Virtual DOM？为什么 Virtual DOM 比原生 DOM 快？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>我对 Virtual DOM 的理解是，\n \n首先对我们将要插入到文档中的 DOM 树结构进行分析，使用 js 对象将其表示出来，比如一个元素对象，包含 TagName、props 和 Children 这些属性。然后我们将这个 js 对象树给保存下来，最后再将 DOM 片段插入到文档中。\n \n当页面的状态发生改变，我们需要对页面的 DOM 的结构进行调整的时候，我们首先根据变更的状态，重新构建起一棵对象树，然后将这棵新的对象树和旧的对象树进行比较，记录下两棵树的的差异。\n \n最后将记录的有差异的地方应用到真正的 DOM 树中去，这样视图就更新了。\n \n我认为 Virtual DOM 这种方法对于我们需要有大量的 DOM 操作的时候，能够很好的提高我们的操作效率，通过在操作前确定需要做的最小修改，尽可能的减少 DOM 操作带来的重流和重绘的影响。其实 Virtual DOM 并不一定比我们真实的操作 DOM 要快，这种方法的目的是为了提高我们开发时的可维护性，在任意的情况下，都能保证一个尽量小的性能消耗去进行操作。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>详细资料可以参考：\n<a href="https://juejin.im/book/5bdc715fe51d454e755f75ef/section/5bdc72e6e51d45054f664dbf" target="_blank" rel="noopener noreferrer">《Virtual DOM》<ExternalLinkIcon/></a>\n<a href="https://github.com/y8n/blog/issues/5" target="_blank" rel="noopener noreferrer">《理解 Virtual DOM》<ExternalLinkIcon/></a>\n<a href="https://github.com/livoras/blog/issues/13" target="_blank" rel="noopener noreferrer">《深度剖析：如何实现一个 Virtual DOM 算法》<ExternalLinkIcon/></a>\n<a href="https://www.zhihu.com/question/31809713/answer/53544875" target="_blank" rel="noopener noreferrer">《网上都说操作真实 DOM 慢，但测试结果却比 React 更快，为什么？》<ExternalLinkIcon/></a></p>\n<h2 id="_113-如何比较两个-dom-树的差异" tabindex="-1"><a class="header-anchor" href="#_113-如何比较两个-dom-树的差异" aria-hidden="true">#</a> 113. 如何比较两个 DOM 树的差异？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>两个树的完全 diff 算法的时间复杂度为 O(n^3) ，但是在前端中，我们很少会跨层级的移动元素，所以我们只需要比较同一层级的元素进行比较，这样就可以将算法的时间复杂度降低为 O(n)。\n \n算法首先会对新旧两棵树进行一个深度优先的遍历，这样每个节点都会有一个序号。在深度遍历的时候，每遍历到一个节点，我们就将这个节点和新的树中的节点进行比较，如果有差异，则将这个差异记录到一个对象中。\n \n在对列表元素进行对比的时候，由于 TagName 是重复的，所以我们不能使用这个来对比。我们需要给每一个子节点加上一个 key，列表对比的时候使用 key 来进行比较，这样我们才能够复用老的 DOM 树上的节点。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="_114-什么是-requestanimationframe" tabindex="-1"><a class="header-anchor" href="#_114-什么是-requestanimationframe" aria-hidden="true">#</a> 114. 什么是 requestAnimationFrame ？</h2>\n<p>详细资料可以参考：\n<a href="https://juejin.im/post/5a82f0626fb9a06358657c9c" target="_blank" rel="noopener noreferrer">《你需要知道的 requestAnimationFrame》<ExternalLinkIcon/></a>\n<a href="https://www.zhangxinxu.com/wordpress/2013/09/css3-animation-requestanimationframe-tween-%E5%8A%A8%E7%94%BB%E7%AE%97%E6%B3%95/" target="_blank" rel="noopener noreferrer">《CSS3 动画那么强，requestAnimationFrame 还有毛线用？》<ExternalLinkIcon/></a></p>\n<h2 id="_115-谈谈你对-webpack-的看法" tabindex="-1"><a class="header-anchor" href="#_115-谈谈你对-webpack-的看法" aria-hidden="true">#</a> 115. 谈谈你对 webpack 的看法</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>我当时使用 webpack 的一个最主要原因是为了简化页面依赖的管理，并且通过将其打包为一个文件来降低页面加载时请求的资源\n数。\n \n我认为 webpack 的主要原理是，它将所有的资源都看成是一个模块，并且把页面逻辑当作一个整体，通过一个给定的入口文件，webpack 从这个文件开始，找到所有的依赖文件，将各个依赖文件模块通过 loader 和 plugins 处理后，然后打包在一起，最后输出一个浏览器可识别的 JS 文件。\n \nWebpack 具有四个核心的概念，分别是 Entry（入口）、Output（输出）、loader 和 Plugins（插件）。\n \nEntry 是 webpack 的入口起点，它指示 webpack 应该从哪个模块开始着手，来作为其构建内部依赖图的开始。\n \nOutput 属性告诉 webpack 在哪里输出它所创建的打包文件，也可指定打包文件的名称，默认位置为 ./dist。\n \nloader 可以理解为 webpack 的编译器，它使得 webpack 可以处理一些非 JavaScript 文件。在对 loader 进行配置的时候，test 属性，标志有哪些后缀的文件应该被处理，是一个正则表达式。use 属性，指定 test 类型的文件应该使用哪个 loader 进行预处理。常用的 loader 有 css-loader、style-loader 等。\n \n插件可以用于执行范围更广的任务，包括打包、优化、压缩、搭建服务器等等，要使用一个插件，一般是先使用 npm 包管理器进行安装，然后在配置文件中引入，最后将其实例化后传递给 plugins 数组属性。\n \n使用 webpack 的确能够提供我们对于项目的管理，但是它的缺点就是调试和配置起来太麻烦了。但现在 webpack4.0 的免配置一定程度上解决了这个问题。但是我感觉就是对我来说，就是一个黑盒，很多时候出现了问题，没有办法很好的定位。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>详细资料可以参考：\n<a href="https://juejin.im/post/5b38d27451882574d87aa5d5#heading-0" target="_blank" rel="noopener noreferrer">《不聊 webpack 配置，来说说它的原理》<ExternalLinkIcon/></a>\n<a href="https://juejin.im/entry/5b5724d05188251aa01647fd" target="_blank" rel="noopener noreferrer">《前端工程化——构建工具选型：grunt、gulp、webpack》<ExternalLinkIcon/></a>\n<a href="https://juejin.im/post/5afa9cd0f265da0b981b9af9#heading-0" target="_blank" rel="noopener noreferrer">《浅入浅出 webpack》<ExternalLinkIcon/></a>\n<a href="https://juejin.im/entry/5ae5c8c9f265da0b9f400d8e" target="_blank" rel="noopener noreferrer">《前端构建工具发展及其比较》<ExternalLinkIcon/></a></p>\n<h2 id="_116-offsetwidth-offsetheight-clientwidth-clientheight-与-scrollwidth-scrollheight-的区别" tabindex="-1"><a class="header-anchor" href="#_116-offsetwidth-offsetheight-clientwidth-clientheight-与-scrollwidth-scrollheight-的区别" aria-hidden="true">#</a> 116. offsetWidth/offsetHeight,clientWidth/clientHeight 与 scrollWidth/scrollHeight 的区别？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>clientWidth/clientHeight 返回的是元素的内部宽度，它的值只包含 content + padding，如果有滚动条，不包含滚动条。\nclientTop 返回的是上边框的宽度。\nclientLeft 返回的左边框的宽度。\n \noffsetWidth/offsetHeight 返回的是元素的布局宽度，它的值包含 content + padding + border 包含了滚动条。\noffsetTop 返回的是当前元素相对于其 offsetParent 元素的顶部的距离。\noffsetLeft 返回的是当前元素相对于其 offsetParent 元素的左部的距离。\n \nscrollWidth/scrollHeight 返回值包含 content + padding + 溢出内容的尺寸。\nscrollTop 属性返回的是一个元素的内容垂直滚动的像素数。\nscrollLeft 属性返回的是元素滚动条到元素左边的距离。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>详细资料可以参考：\n<a href="https://juejin.im/post/5bc9366d5188255c4834e75a" target="_blank" rel="noopener noreferrer">《最全的获取元素宽高及位置的方法》<ExternalLinkIcon/></a>\n<a href="http://www.ruanyifeng.com/blog/2009/09/find_element_s_position_using_javascript.html" target="_blank" rel="noopener noreferrer">《用 Javascript 获取页面元素的位置》<ExternalLinkIcon/></a></p>\n<h2 id="_117-谈一谈你理解的函数式编程" tabindex="-1"><a class="header-anchor" href="#_117-谈一谈你理解的函数式编程" aria-hidden="true">#</a> 117. 谈一谈你理解的函数式编程？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>简单说，"函数式编程"是一种"编程范式"（programming paradigm），也就是如何编写程序的方法论。\n \n它具有以下特性：闭包和高阶函数、惰性计算、递归、函数是"第一等公民"、只用"表达式"。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>详细资料可以参考：\n<a href="http://www.ruanyifeng.com/blog/2012/04/functional_programming.html" target="_blank" rel="noopener noreferrer">《函数式编程初探》<ExternalLinkIcon/></a></p>\n<h2 id="_118-异步编程的实现方式" tabindex="-1"><a class="header-anchor" href="#_118-异步编程的实现方式" aria-hidden="true">#</a> 118. 异步编程的实现方式？</h2>\n<p>相关资料：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>回调函数\n优点：简单、容易理解\n缺点：不利于维护，代码耦合高\n \n事件监听（采用时间驱动模式，取决于某个事件是否发生）：\n优点：容易理解，可以绑定多个事件，每个事件可以指定多个回调函数\n缺点：事件驱动型，流程不够清晰\n \n发布/订阅（观察者模式）\n类似于事件监听，但是可以通过‘消息中心’，了解现在有多少发布者，多少订阅者\n \nPromise 对象\n优点：可以利用 then 方法，进行链式写法；可以书写错误时的回调函数；\n缺点：编写和理解，相对比较难\n \nGenerator 函数\n优点：函数体内外的数据交换、错误处理机制\n缺点：流程管理不方便\n \nasync 函数\n优点：内置执行器、更好的语义、更广的适用性、返回的是 Promise、结构清晰。\n缺点：错误处理机制\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>回答：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>js 中的异步机制可以分为以下几种：\n \n第一种最常见的是使用回调函数的方式，使用回调函数的方式有一个缺点是，多个回调函数嵌套的时候会造成回调函数地狱，上下两层的回调函数间的代码耦合度太高，不利于代码的可维护。\n \n第二种是 Promise 的方式，使用 Promise 的方式可以将嵌套的回调函数作为链式调用。但是使用这种方法，有时会造成多个 then 的链式调用，可能会造成代码的语义不够明确。\n \n第三种是使用 generator 的方式，它可以在函数的执行过程中，将函数的执行权转移出去，在函数外部我们还可以将执行权转移回来。当我们遇到异步函数执行的时候，将函数执行权转移出去，当异步函数执行完毕的时候我们再将执行权给转移回来。因此我们在 generator 内部对于异步操作的方式，可以以同步的顺序来书写。使用这种方式我们需要考虑的问题是何时将函数的控制权转移回来，因此我们需要有一个自动执行 generator 的机制，比如说 co 模块等方式来实现 generator 的自动执行。\n \n第四种是使用 async 函数的形式，async 函数是 generator 和 promise 实现的一个自动执行的语法糖，它内部自带执行器，当函数内部执行到一个 await 语句的时候，如果语句返回一个 promise 对象，那么函数将会等待 promise 对象的状态变为 resolve 后再继续向下执行。因此我们可以将异步逻辑，转化为同步的顺序来书写，并且这个函数可以自动执行。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="_119-js-动画与-css-动画区别及相应实现" tabindex="-1"><a class="header-anchor" href="#_119-js-动画与-css-动画区别及相应实现" aria-hidden="true">#</a> 119. Js 动画与 CSS 动画区别及相应实现</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>CSS3 的动画的优点\n \n在性能上会稍微好一些，浏览器会对 CSS3 的动画做一些优化\n代码相对简单\n \n缺点\n \n在动画控制上不够灵活\n兼容性不好\n \nJavaScript 的动画正好弥补了这两个缺点，控制能力很强，可以单帧的控制、变换，同时写得好完全可以兼容 IE6，并且功能强大。对于一些复杂控制的动画，使用 javascript 会比较靠谱。而在实现一些小的交互动效的时候，就多考虑考虑 CSS 吧\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="_120-get-请求传参长度的误区" tabindex="-1"><a class="header-anchor" href="#_120-get-请求传参长度的误区" aria-hidden="true">#</a> 120. get 请求传参长度的误区</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>误区：我们经常说 get 请求参数的大小存在限制，而 post 请求的参数大小是无限制的。\n \n实际上 HTTP 协议从未规定 GET/POST 的请求长度限制是多少。对 get 请求参数的限制是来源与浏览器或web 服务器，浏览器或 web 服务器限制了 url 的长度。为了明确这个概念，我们必须再次强调下面几点:\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul>\n<li>1.HTTP 协议未规定 GET 和 POST 的长度限制</li>\n<li>2.GET 的最大长度显示是因为浏览器和 web 服务器限制了 URI 的长度</li>\n<li>3.不同的浏览器和 WEB 服务器，限制的最大长度不一样</li>\n<li>4.要支持 IE，则最大长度为 2083byte，若只支持 Chrome，则最大长度 8182byte</li>\n</ul>\n<h2 id="_121-url-和-uri-的区别" tabindex="-1"><a class="header-anchor" href="#_121-url-和-uri-的区别" aria-hidden="true">#</a> 121. URL 和 URI 的区别？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>URI: Uniform Resource Identifier      指的是统一资源标识符\nURL: Uniform Resource Location        指的是统一资源定位符\nURN: Universal Resource Name          指的是统一资源名称\n \nURI 指的是统一资源标识符，用唯一的标识来确定一个资源，它是一种抽象的定义，也就是说，不管使用什么方法来定义，只要能唯一的标识一个资源，就可以称为 URI。\n \nURL 指的是统一资源定位符，URN 指的是统一资源名称。URL 和 URN 是 URI 的子集，URL 可以理解为使用地址来标识资源，URN 可以理解为使用名称来标识资源。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>详细资料可以参考：\n<a href="https://www.zhihu.com/question/21950864" target="_blank" rel="noopener noreferrer">《HTTP 协议中 URI 和 URL 有什么区别？》<ExternalLinkIcon/></a>\n<a href="http://web.jobbole.com/83452/" target="_blank" rel="noopener noreferrer">《你知道 URL、URI 和 URN 三者之间的区别吗？》<ExternalLinkIcon/></a>\n<a href="https://segmentfault.com/a/1190000006081973" target="_blank" rel="noopener noreferrer">《URI、URL 和 URN 的区别》<ExternalLinkIcon/></a></p>\n<h2 id="_122-get-和-post-请求在缓存方面的区别" tabindex="-1"><a class="header-anchor" href="#_122-get-和-post-请求在缓存方面的区别" aria-hidden="true">#</a> 122. get 和 post 请求在缓存方面的区别</h2>\n<p>相关知识点：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>get 请求类似于查找的过程，用户获取数据，可以不用每次都与数据库连接，所以可以使用缓存。\n \npost 不同，post 做的一般是修改和删除的工作，所以必须与数据库交互，所以不能使用缓存。因此 get 请求适合于请求缓存。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>回答：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>缓存一般只适用于那些不会更新服务端数据的请求。一般 get 请求都是查找请求，不会对服务器资源数据造成修改，而 post 请求一般都会对服务器数据造成修改，所以，一般会对 get 请求进行缓存，很少会对 post 请求进行缓存。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>详细资料可以参考：\n<a href="https://blog.csdn.net/qq_27093465/article/details/50479289" target="_blank" rel="noopener noreferrer">《HTML 关于 post 和 get 的区别以及缓存问题的理解》<ExternalLinkIcon/></a></p>\n<h2 id="_123-图片的懒加载和预加载" tabindex="-1"><a class="header-anchor" href="#_123-图片的懒加载和预加载" aria-hidden="true">#</a> 123. 图片的懒加载和预加载</h2>\n<p>相关知识点：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>预加载：提前加载图片，当用户需要查看时可直接从本地缓存中渲染。\n \n懒加载：懒加载的主要目的是作为服务器前端的优化，减少请求数或延迟请求数。\n \n两种技术的本质：两者的行为是相反的，一个是提前加载，一个是迟缓甚至不加载。 懒加载对服务器前端有一定的缓解压力作用，预加载则会增加服务器前端压力。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>回答：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>懒加载也叫延迟加载，指的是在长网页中延迟加载图片的时机，当用户需要访问时，再去加载，这样可以提高网站的首屏加载速度，提升用户的体验，并且可以减少服务器的压力。它适用于图片很多，页面很长的电商网站的场景。懒加载的实现原理是，将页面上的图片的 src 属性设置为空字符串，将图片的真实路径保存在一个自定义属性中，当页面滚动的时候，进行判断，如果图片进入页面可视区域内，则从自定义属性中取出真实路径赋值给图片的 src 属性，以此来实现图片的延迟加载。\n \n预加载指的是将所需的资源提前请求加载到本地，这样后面在需要用到时就直接从缓存取资源。通过预加载能够减少用户的等待时间，提高用户的体验。我了解的预加载的最常用的方式是使用 js 中的 image 对象，通过为 image 对象来设置 scr 属性，来实现图片的预加载。\n \n这两种方式都是提高网页性能的方式，两者主要区别是一个是提前加载，一个是迟缓甚至不加载。懒加载对服务器前端有一定的缓解压力作用，预加载则会增加服务器前端压力。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>详细资料可以参考：\n<a href="https://juejin.im/post/5b0c3b53f265da09253cbed0" target="_blank" rel="noopener noreferrer">《懒加载和预加载》<ExternalLinkIcon/></a>\n<a href="https://juejin.im/entry/5a73f38cf265da4e99575be3" target="_blank" rel="noopener noreferrer">《网页图片加载优化方案》<ExternalLinkIcon/></a>\n<a href="https://www.zhangxinxu.com/wordpress/2016/06/image-preload-based-on-user-behavior/" target="_blank" rel="noopener noreferrer">《基于用户行为的图片等资源预加载》<ExternalLinkIcon/></a></p>\n<h2 id="_124-mouseover-和-mouseenter-的区别" tabindex="-1"><a class="header-anchor" href="#_124-mouseover-和-mouseenter-的区别" aria-hidden="true">#</a> 124. mouseover 和 mouseenter 的区别？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>当鼠标移动到元素上时就会触发 mouseenter 事件，类似 mouseover，它们两者之间的差别是 mouseenter 不会冒泡。\n \n由于 mouseenter 不支持事件冒泡，导致在一个元素的子元素上进入或离开的时候会触发其 mouseover 和 mouseout 事件，但是却不会触发 mouseenter 和 mouseleave 事件。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>详细资料可以参考：\n<a href="https://github.com/qianlongo/zepto-analysis/issues/1" target="_blank" rel="noopener noreferrer">《mouseenter 与 mouseover 为何这般纠缠不清？》<ExternalLinkIcon/></a></p>\n<h2 id="_125-js-拖拽功能的实现" tabindex="-1"><a class="header-anchor" href="#_125-js-拖拽功能的实现" aria-hidden="true">#</a> 125. js 拖拽功能的实现</h2>\n<p>相关知识点：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>首先是三个事件，分别是 mousedown，mousemove，mouseup\n当鼠标点击按下的时候，需要一个 tag 标识此时已经按下，可以执行 mousemove 里面的具体方法。\nclientX，clientY 标识的是鼠标的坐标，分别标识横坐标和纵坐标，并且我们用 offsetX 和 offsetY 来表示\n元素的元素的初始坐标，移动的举例应该是：\n鼠标移动时候的坐标-鼠标按下去时候的坐标。\n也就是说定位信息为：\n鼠标移动时候的坐标-鼠标按下去时候的坐标+元素初始情况下的 offetLeft.\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>回答：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>一个元素的拖拽过程，我们可以分为三个步骤，第一步是鼠标按下目标元素，第二步是鼠标保持按下的状态移动鼠标，第三步是鼠\n标抬起，拖拽过程结束。\n \n这三步分别对应了三个事件，mousedown 事件，mousemove 事件和 mouseup 事件。只有在鼠标按下的状态移动鼠标我们才会\n执行拖拽事件，因此我们需要在 mousedown 事件中设置一个状态来标识鼠标已经按下，然后在 mouseup 事件中再取消这个状\n态。在 mousedown 事件中我们首先应该判断，目标元素是否为拖拽元素，如果是拖拽元素，我们就设置状态并且保存这个时候鼠\n标的位置。然后在 mousemove 事件中，我们通过判断鼠标现在的位置和以前位置的相对移动，来确定拖拽元素在移动中的坐标。\n最后 mouseup 事件触发后，清除状态，结束拖拽事件。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>详细资料可以参考：\n<a href="https://blog.csdn.net/LZGS_4/article/details/43523465" target="_blank" rel="noopener noreferrer">《原生 js 实现拖拽功能基本思路》<ExternalLinkIcon/></a></p>\n<h2 id="_126-为什么使用-settimeout-实现-setinterval-怎么模拟" tabindex="-1"><a class="header-anchor" href="#_126-为什么使用-settimeout-实现-setinterval-怎么模拟" aria-hidden="true">#</a> 126. 为什么使用 setTimeout 实现 setInterval？怎么模拟？</h2>\n<p>相关知识点：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>// 思路是使用递归函数，不断地去执行 setTimeout 从而达到 setInterval 的效果\n \nfunction mySetInterval(fn, timeout) {\n  // 控制器，控制定时器是否继续执行\n  var timer = {\n    flag: true\n  };\n \n  // 设置递归函数，模拟定时器执行。\n  function interval() {\n    if (timer.flag) {\n      fn();\n      setTimeout(interval, timeout);\n    }\n  }\n \n  // 启动定时器\n  setTimeout(interval, timeout);\n \n  // 返回控制器\n  return timer;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>回答：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>setInterval 的作用是每隔一段指定时间执行一个函数，但是这个执行不是真的到了时间立即执行，它真正的作用是每隔一段时间将事件加入事件队列中去，只有当当前的执行栈为空的时候，才能去从事件队列中取出事件执行。所以可能会出现这样的情况，就是当前执行栈执行的时间很长，导致事件队列里边积累多个定时器加入的事件，当执行栈结束的时候，这些事件会依次执行，因此就不能到间隔一段时间执行的效果。\n \n针对 setInterval 的这个缺点，我们可以使用 setTimeout 递归调用来模拟 setInterval，这样我们就确保了只有一个事件结束了，我们才会触发下一个定时器事件，这样解决了 setInterval 的问题。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>详细资料可以参考：\n<a href="https://www.jianshu.com/p/32479bdfd851" target="_blank" rel="noopener noreferrer">《用 setTimeout 实现 setInterval》<ExternalLinkIcon/></a>\n<a href="https://zhuanlan.zhihu.com/p/51995737" target="_blank" rel="noopener noreferrer">《setInterval 有什么缺点？》<ExternalLinkIcon/></a></p>\n<h2 id="_127-let-和-const-的注意点" tabindex="-1"><a class="header-anchor" href="#_127-let-和-const-的注意点" aria-hidden="true">#</a> 127. let 和 const 的注意点？</h2>\n<ul>\n<li>1.声明的变量只在声明时的代码块内有效</li>\n<li>2.不存在声明提升</li>\n<li>3.存在暂时性死区，如果在变量声明前使用，会报错</li>\n<li>4.不允许重复声明，重复声明会报错</li>\n</ul>\n<h2 id="_128-什么是-rest-参数" tabindex="-1"><a class="header-anchor" href="#_128-什么是-rest-参数" aria-hidden="true">#</a> 128. 什么是 rest 参数？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>rest 参数（形式为...变量名），用于获取函数的多余参数。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="_129-什么是尾调用-使用尾调用有什么好处" tabindex="-1"><a class="header-anchor" href="#_129-什么是尾调用-使用尾调用有什么好处" aria-hidden="true">#</a> 129. 什么是尾调用，使用尾调用有什么好处？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>尾调用指的是函数的最后一步调用另一个函数。我们代码执行是基于执行栈的，所以当我们在一个函数里调用另一个函数时，我们会保留当前的执行上下文，然后再新建另外一个执行上下文加入栈中。使用尾调用的话，因为已经是函数的最后一步，所以这个时候我们可以不必再保留当前的执行上下文，从而节省了内存，这就是尾调用优化。但是 ES6 的尾调用优化只在严格模式下开启，正常模式是无效的。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="_130-symbol-类型的注意点" tabindex="-1"><a class="header-anchor" href="#_130-symbol-类型的注意点" aria-hidden="true">#</a> 130. Symbol 类型的注意点？</h2>\n<ul>\n<li>1.Symbol 函数前不能使用 new 命令，否则会报错。</li>\n<li>2.Symbol 函数可以接受一个字符串作为参数，表示对 Symbol 实例的描述，主要是为了在控制台显示，或者转为字符串时，比较容易区分。</li>\n<li>3.Symbol 作为属性名，该属性不会出现在 for...in、for...of 循环中，也不会被 Object.keys()、Object.getOwnPropertyNames()、JSON.stringify() 返回。</li>\n<li>4.Object.getOwnPropertySymbols 方法返回一个数组，成员是当前对象的所有用作属性名的 Symbol 值。</li>\n<li>5.Symbol.for 接受一个字符串作为参数，然后搜索有没有以该参数作为名称的 Symbol 值。如果有，就返回这个 Symbol 值，否则就新建并返回一个以该字符串为名称的 Symbol 值。</li>\n<li>6.Symbol.keyFor 方法返回一个已登记的 Symbol 类型值的 key。</li>\n</ul>\n<h2 id="_131-set-和-weakset-结构" tabindex="-1"><a class="header-anchor" href="#_131-set-和-weakset-结构" aria-hidden="true">#</a> 131. Set 和 WeakSet 结构？</h2>\n<ul>\n<li>1.ES6 提供了新的数据结构 Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。</li>\n<li>2.WeakSet 结构与 Set 类似，也是不重复的值的集合。但是 WeakSet 的成员只能是对象，而不能是其他类型的值。WeakSet 中的对象都是弱引用，即垃圾回收机制不考虑 WeakSet 对该对象的引用，</li>\n</ul>\n<h2 id="_132-map-和-weakmap-结构" tabindex="-1"><a class="header-anchor" href="#_132-map-和-weakmap-结构" aria-hidden="true">#</a> 132. Map 和 WeakMap 结构？</h2>\n<ul>\n<li>1.Map 数据结构。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。</li>\n<li>2.WeakMap 结构与 Map 结构类似，也是用于生成键值对的集合。但是 WeakMap 只接受对象作为键名（ null 除外），不接受其他类型的值作为键名。而且 WeakMap 的键名所指向的对象，不计入垃圾回收机制。</li>\n</ul>\n<h2 id="_133-什么是-proxy" tabindex="-1"><a class="header-anchor" href="#_133-什么是-proxy" aria-hidden="true">#</a> 133. 什么是 Proxy ？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>Proxy 用于修改某些操作的默认行为，等同于在语言层面做出修改，所以属于一种“元编程”，即对编程语言进行编程。\n \nProxy 可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。Proxy 这个词的原意是代理，用在这里表示由它来“代理”某些操作，可以译为“代理器”。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="_134-reflect-对象创建目的" tabindex="-1"><a class="header-anchor" href="#_134-reflect-对象创建目的" aria-hidden="true">#</a> 134. Reflect 对象创建目的？</h2>\n<ul>\n<li>1.将 Object 对象的一些明显属于语言内部的方法（比如 Object.defineProperty，放到 Reflect 对象上。</li>\n<li>2.修改某些 Object 方法的返回结果，让其变得更合理。</li>\n<li>3.让 Object 操作都变成函数行为。</li>\n<li>4.Reflect 对象的方法与 Proxy 对象的方法一一对应，只要是 Proxy 对象的方法，就能在 Reflect 对象上找到对应的方法。这就让 Proxy 对象可以方便地调用对应的 Reflect 方法，完成默认行为，作为修改行为的基础。也就是说，不管 Proxy 怎么修改默认行为，你总可以在 Reflect 上获取默认行为。</li>\n</ul>\n<h2 id="_135-require-模块引入的查找方式" tabindex="-1"><a class="header-anchor" href="#_135-require-模块引入的查找方式" aria-hidden="true">#</a> 135. require 模块引入的查找方式？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>当 Node 遇到 require(X) 时，按下面的顺序处理。\n \n（1）如果 X 是内置模块（比如 require(\'http\')）\n　　a. 返回该模块。\n　　b. 不再继续执行。\n \n（2）如果 X 以 "./" 或者 "/" 或者 "../" 开头\n　　a. 根据 X 所在的父模块，确定 X 的绝对路径。\n　　b. 将 X 当成文件，依次查找下面文件，只要其中有一个存在，就返回该文件，不再继续执行。\n    X\n    X.js\n    X.json\n    X.node\n \n　　c. 将 X 当成目录，依次查找下面文件，只要其中有一个存在，就返回该文件，不再继续执行。\n    X/package.json（main字段）\n    X/index.js\n    X/index.json\n    X/index.node\n \n（3）如果 X 不带路径\n　　a. 根据 X 所在的父模块，确定 X 可能的安装目录。\n　　b. 依次在每个目录中，将 X 当成文件名或目录名加载。\n \n（4）抛出 "not found"\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>详细资料可以参考：\n<a href="http://www.ruanyifeng.com/blog/2015/05/require.html" target="_blank" rel="noopener noreferrer">《require() 源码解读》<ExternalLinkIcon/></a></p>\n<h2 id="_136-什么是-promise-对象-什么是-promises-a-规范" tabindex="-1"><a class="header-anchor" href="#_136-什么是-promise-对象-什么是-promises-a-规范" aria-hidden="true">#</a> 136. 什么是 Promise 对象，什么是 Promises/A+ 规范？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>Promise 对象是异步编程的一种解决方案，最早由社区提出。Promises/A+ 规范是 JavaScript Promise 的标准，规定了一个 Promise 所必须具有的特性。\n \nPromise 是一个构造函数，接收一个函数作为参数，返回一个 Promise 实例。一个 Promise 实例有三种状态，分别是 pending、resolved 和 rejected，分别代表了进行中、已成功和已失败。实例的状态只能由 pending 转变 resolved 或者 rejected 状态，并且状态一经改变，就凝固了，无法再被改变了。状态的改变是通过 resolve() 和 reject() 函数来实现的，我们\n可以在异步操作结束后调用这两个函数改变 Promise 实例的状态，它的原型上定义了一个 then 方法，使用这个 then 方法可以为两个状态的改变注册回调函数。这个回调函数属于微任务，会在本轮事件循环的末尾执行。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>详细资料可以参考：\n<a href="http://www.ituring.com.cn/article/66566" target="_blank" rel="noopener noreferrer">《Promises/A+ 规范》<ExternalLinkIcon/></a>\n<a href="http://es6.ruanyifeng.com/#docs/promise#Promise-resolve" target="_blank" rel="noopener noreferrer">《Promise》<ExternalLinkIcon/></a></p>\n<h2 id="_137-手写一个-promise" tabindex="-1"><a class="header-anchor" href="#_137-手写一个-promise" aria-hidden="true">#</a> 137. 手写一个 Promise</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>const PENDING = "pending";\nconst RESOLVED = "resolved";\nconst REJECTED = "rejected";\n \nfunction MyPromise(fn) {\n  // 保存初始化状态\n  var self = this;\n \n  // 初始化状态\n  this.state = PENDING;\n \n  // 用于保存 resolve 或者 rejected 传入的值\n  this.value = null;\n \n  // 用于保存 resolve 的回调函数\n  this.resolvedCallbacks = [];\n \n  // 用于保存 reject 的回调函数\n  this.rejectedCallbacks = [];\n \n  // 状态转变为 resolved 方法\n  function resolve(value) {\n    // 判断传入元素是否为 Promise 值，如果是，则状态改变必须等待前一个状态改变后再进行改变\n    if (value instanceof MyPromise) {\n      return value.then(resolve, reject);\n    }\n \n    // 保证代码的执行顺序为本轮事件循环的末尾\n    setTimeout(() => {\n      // 只有状态为 pending 时才能转变，\n      if (self.state === PENDING) {\n        // 修改状态\n        self.state = RESOLVED;\n \n        // 设置传入的值\n        self.value = value;\n \n        // 执行回调函数\n        self.resolvedCallbacks.forEach(callback => {\n          callback(value);\n        });\n      }\n    }, 0);\n  }\n \n  // 状态转变为 rejected 方法\n  function reject(value) {\n    // 保证代码的执行顺序为本轮事件循环的末尾\n    setTimeout(() => {\n      // 只有状态为 pending 时才能转变\n      if (self.state === PENDING) {\n        // 修改状态\n        self.state = REJECTED;\n \n        // 设置传入的值\n        self.value = value;\n \n        // 执行回调函数\n        self.rejectedCallbacks.forEach(callback => {\n          callback(value);\n        });\n      }\n    }, 0);\n  }\n \n  // 将两个方法传入函数执行\n  try {\n    fn(resolve, reject);\n  } catch (e) {\n    // 遇到错误时，捕获错误，执行 reject 函数\n    reject(e);\n  }\n}\n \nMyPromise.prototype.then = function(onResolved, onRejected) {\n  // 首先判断两个参数是否为函数类型，因为这两个参数是可选参数\n  onResolved =\n    typeof onResolved === "function"\n      ? onResolved\n      : function(value) {\n          return value;\n        };\n \n  onRejected =\n    typeof onRejected === "function"\n      ? onRejected\n      : function(error) {\n          throw error;\n        };\n \n  // 如果是等待状态，则将函数加入对应列表中\n  if (this.state === PENDING) {\n    this.resolvedCallbacks.push(onResolved);\n    this.rejectedCallbacks.push(onRejected);\n  }\n \n  // 如果状态已经凝固，则直接执行对应状态的函数\n \n  if (this.state === RESOLVED) {\n    onResolved(this.value);\n  }\n \n  if (this.state === REJECTED) {\n    onRejected(this.value);\n  }\n};\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br></div></div><h2 id="_138-如何检测浏览器所支持的最小字体大小" tabindex="-1"><a class="header-anchor" href="#_138-如何检测浏览器所支持的最小字体大小" aria-hidden="true">#</a> 138. 如何检测浏览器所支持的最小字体大小？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>用 JS 设置 DOM 的字体为某一个值，然后再取出来，如果值设置成功，就说明支持。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="_139-怎么做-js-代码-error-统计" tabindex="-1"><a class="header-anchor" href="#_139-怎么做-js-代码-error-统计" aria-hidden="true">#</a> 139. 怎么做 JS 代码 Error 统计？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>error 统计使用浏览器的 window.error 事件。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="_140-单例模式模式是什么" tabindex="-1"><a class="header-anchor" href="#_140-单例模式模式是什么" aria-hidden="true">#</a> 140. 单例模式模式是什么？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>单例模式保证了全局只有一个实例来被访问。比如说常用的如弹框组件的实现和全局状态的实现。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="_141-策略模式是什么" tabindex="-1"><a class="header-anchor" href="#_141-策略模式是什么" aria-hidden="true">#</a> 141. 策略模式是什么？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>策略模式主要是用来将方法的实现和方法的调用分离开，外部通过不同的参数可以调用不同的策略。我主要在 MVP 模式解耦的时候\n用来将视图层的方法定义和方法调用分离。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="_142-代理模式是什么" tabindex="-1"><a class="header-anchor" href="#_142-代理模式是什么" aria-hidden="true">#</a> 142. 代理模式是什么？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code> 代理模式是为一个对象提供一个代用品或占位符，以便控制对它的访问。比如说常见的事件代理。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="_143-中介者模式是什么" tabindex="-1"><a class="header-anchor" href="#_143-中介者模式是什么" aria-hidden="true">#</a> 143. 中介者模式是什么？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>中介者模式指的是，多个对象通过一个中介者进行交流，而不是直接进行交流，这样能够将通信的各个对象解耦。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="_144-适配器模式是什么" tabindex="-1"><a class="header-anchor" href="#_144-适配器模式是什么" aria-hidden="true">#</a> 144. 适配器模式是什么？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>适配器用来解决两个接口不兼容的情况，不需要改变已有的接口，通过包装一层的方式实现两个接口的正常协作。假如我们需要一种\n新的接口返回方式，但是老的接口由于在太多地方已经使用了，不能随意更改，这个时候就可以使用适配器模式。比如我们需要一种\n自定义的时间返回格式，但是我们又不能对 js 时间格式化的接口进行修改，这个时候就可以使用适配器模式。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>更多关于设计模式的资料可以参考：\n<a href="https://juejin.im/book/5bdc715fe51d454e755f75ef/section/5bdc74186fb9a049ab0d0b6b" target="_blank" rel="noopener noreferrer">《前端面试之道》<ExternalLinkIcon/></a>\n<a href="https://juejin.im/post/59df4f74f265da430f311909#heading-3" target="_blank" rel="noopener noreferrer">《JavaScript 设计模式》<ExternalLinkIcon/></a>\n<a href="https://juejin.im/post/5afe6430518825428630bc4d" target="_blank" rel="noopener noreferrer">《JavaScript 中常见设计模式整理》<ExternalLinkIcon/></a></p>\n<h2 id="_145-观察者模式和发布订阅模式有什么不同" tabindex="-1"><a class="header-anchor" href="#_145-观察者模式和发布订阅模式有什么不同" aria-hidden="true">#</a> 145. 观察者模式和发布订阅模式有什么不同？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>发布订阅模式其实属于广义上的观察者模式\n \n在观察者模式中，观察者需要直接订阅目标事件。在目标发出内容改变的事件后，直接接收事件并作出响应。\n \n而在发布订阅模式中，发布者和订阅者之间多了一个调度中心。调度中心一方面从发布者接收事件，另一方面向订阅者发布事件，订阅者需要在调度中心中订阅事件。通过调度中心实现了发布者和订阅者关系的解耦。使用发布订阅者模式更利于我们代码的可维护性。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>详细资料可以参考：\n<a href="https://www.zhihu.com/question/23486749" target="_blank" rel="noopener noreferrer">《观察者模式和发布订阅模式有什么不同？》<ExternalLinkIcon/></a></p>\n<h2 id="_146-vue-的生命周期是什么" tabindex="-1"><a class="header-anchor" href="#_146-vue-的生命周期是什么" aria-hidden="true">#</a> 146. Vue 的生命周期是什么？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>Vue 的生命周期指的是组件从创建到销毁的一系列的过程，被称为 Vue 的生命周期。通过提供的 Vue 在生命周期各个阶段的钩子函数，我们可以很好的在 Vue 的各个生命阶段实现一些操作。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="_147-vue-的各个生命阶段是什么" tabindex="-1"><a class="header-anchor" href="#_147-vue-的各个生命阶段是什么" aria-hidden="true">#</a> 147. Vue 的各个生命阶段是什么？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>Vue 一共有8个生命阶段，分别是创建前、创建后、加载前、加载后、更新前、更新后、销毁前和销毁后，每个阶段对应了一个生命周期的钩子函数。\n \n（1）beforeCreate 钩子函数，在实例初始化之后，在数据监听和事件配置之前触发。因此在这个事件中我们是获取不到 data 数据的。\n \n（2）created 钩子函数，在实例创建完成后触发，此时可以访问 data、methods 等属性。但这个时候组件还没有被挂载到页面中去，所以这个时候访问不到 $el 属性。一般我们可以在这个函数中进行一些页面初始化的工作，比如通过 ajax 请求数据来对页面进行初始化。\n \n（3）beforeMount 钩子函数，在组件被挂载到页面之前触发。在 beforeMount 之前，会找到对应的 template，并编译成 render 函数。\n \n（4）mounted 钩子函数，在组件挂载到页面之后触发。此时可以通过 DOM API 获取到页面中的 DOM 元素。\n \n（5）beforeUpdate 钩子函数，在响应式数据更新时触发，发生在虚拟 DOM 重新渲染和打补丁之前，这个时候我们可以对可能会被移除的元素做一些操作，比如移除事件监听器。\n \n（6）updated 钩子函数，虚拟 DOM 重新渲染和打补丁之后调用。\n \n（7）beforeDestroy 钩子函数，在实例销毁之前调用。一般在这一步我们可以销毁定时器、解绑全局事件等。\n \n（8）destroyed 钩子函数，在实例销毁之后调用，调用后，Vue 实例中的所有东西都会解除绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。\n \n当我们使用 keep-alive 的时候，还有两个钩子函数，分别是 activated 和 deactivated 。用 keep-alive 包裹的组件在切换时不会进行销毁，而是缓存到内存中并执行 deactivated 钩子函数，命中缓存渲染后会执行 actived 钩子函数。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>详细资料可以参考：\n<a href="https://juejin.im/entry/5aee8fbb518825671952308c" target="_blank" rel="noopener noreferrer">《vue 生命周期深入》<ExternalLinkIcon/></a>\n<a href="https://cn.vuejs.org/v2/guide/instance.html" target="_blank" rel="noopener noreferrer">《Vue 实例》<ExternalLinkIcon/></a></p>\n<h2 id="_148-vue-组件间的参数传递方式" tabindex="-1"><a class="header-anchor" href="#_148-vue-组件间的参数传递方式" aria-hidden="true">#</a> 148. Vue 组件间的参数传递方式？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>（1）父子组件间通信\n \n第一种方法是子组件通过 props 属性来接受父组件的数据，然后父组件在子组件上注册监听事件，子组件通过 emit 触发事\n件来向父组件发送数据。\n \n第二种是通过 ref 属性给子组件设置一个名字。父组件通过 $refs 组件名来获得子组件，子组件通过 $parent 获得父组\n件，这样也可以实现通信。\n \n第三种是使用 provider/inject，在父组件中通过 provider 提供变量，在子组件中通过 inject 来将变量注入到组件\n中。不论子组件有多深，只要调用了 inject 那么就可以注入 provider 中的数据。\n \n（2）兄弟组件间通信\n \n第一种是使用 eventBus 的方法，它的本质是通过创建一个空的 Vue 实例来作为消息传递的对象，通信的组件引入这个实\n例，通信的组件通过在这个实例上监听和触发事件，来实现消息的传递。\n \n第二种是通过 $parent.$refs 来获取到兄弟组件，也可以进行通信。\n \n（3）任意组件之间\n \n使用 eventBus ，其实就是创建一个事件中心，相当于中转站，可以用它来传递事件和接收事件。\n \n \n如果业务逻辑复杂，很多组件之间需要同时处理一些公共的数据，这个时候采用上面这一些方法可能不利于项目的维护。这个时候\n可以使用 vuex ，vuex 的思想就是将这一些公共的数据抽离出来，将它作为一个全局的变量来管理，然后其他组件就可以对这个\n公共数据进行读写操作，这样达到了解耦的目的。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>详细资料可以参考：\n<a href="https://juejin.im/entry/5ba215ac5188255c6d0d8345" target="_blank" rel="noopener noreferrer">《VUE 组件之间数据传递全集》<ExternalLinkIcon/></a></p>\n<h2 id="_149-computed-和-watch-的差异" tabindex="-1"><a class="header-anchor" href="#_149-computed-和-watch-的差异" aria-hidden="true">#</a> 149. computed 和 watch 的差异？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>（1）computed 是计算一个新的属性，并将该属性挂载到 Vue 实例上，而 watch 是监听已经存在且已挂载到 Vue 实例上的数据，所以用 watch 同样可以监听 computed 计算属性的变化。\n \n（2）computed 本质是一个惰性求值的观察者，具有缓存性，只有当依赖变化后，第一次访问 computed 属性，才会计算新的值。而 watch 则是当数据发生变化便会调用执行函数。\n \n（3）从使用场景上说，computed 适用一个数据被多个数据影响，而 watch 适用一个数据影响多个数据。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>详细资料可以参考：\n<a href="https://juejin.im/post/5b98c4da6fb9a05d353c5fd7" target="_blank" rel="noopener noreferrer">《做面试的不倒翁：浅谈 Vue 中 computed 实现原理》<ExternalLinkIcon/></a>\n<a href="https://juejin.im/post/5af908ea5188254265399009" target="_blank" rel="noopener noreferrer">《深入理解 Vue 的 watch 实现原理及其实现方式》<ExternalLinkIcon/></a></p>\n<h2 id="_150-vue-router-中的导航钩子函数" tabindex="-1"><a class="header-anchor" href="#_150-vue-router-中的导航钩子函数" aria-hidden="true">#</a> 150. vue-router 中的导航钩子函数</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>（1）全局的钩子函数 beforeEach 和 afterEach\n \nbeforeEach 有三个参数，to 代表要进入的路由对象，from 代表离开的路由对象。next 是一个必须要执行的函数，如果不传参数，那就执行下一个钩子函数，如果传入 false，则终止跳转，如果传入一个路径，则导航到对应的路由，如果传入 error ，则导航终止，error 传入错误的监听函数。\n \n（2）单个路由独享的钩子函数 beforeEnter，它是在路由配置上直接进行定义的。\n \n（3）组件内的导航钩子主要有这三种：beforeRouteEnter、beforeRouteUpdate、beforeRouteLeave。它们是直接在路由组\n件内部直接进行定义的。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>详细资料可以参考：\n<a href="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E5%85%A8%E5%B1%80%E5%89%8D%E7%BD%AE%E5%AE%88%E5%8D%AB" target="_blank" rel="noopener noreferrer">《导航守卫》<ExternalLinkIcon/></a></p>\n<h2 id="_151-route-和-router-的区别" tabindex="-1"><a class="header-anchor" href="#_151-route-和-router-的区别" aria-hidden="true">#</a> 151. $route 和 $router 的区别？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>$route 是“路由信息对象”，包括 path，params，hash，query，fullPath，matched，name 等路由信息参数。而 $router 是“路由实例”对象包括了路由的跳转方法，钩子函数等。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="_152-vue-常用的修饰符" tabindex="-1"><a class="header-anchor" href="#_152-vue-常用的修饰符" aria-hidden="true">#</a> 152. vue 常用的修饰符？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>.prevent: 提交事件不再重载页面；.stop: 阻止单击事件冒泡；.self: 当事件发生在该元素本身而不是子元素的时候会触发；\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="_153-vue-中-key-值的作用" tabindex="-1"><a class="header-anchor" href="#_153-vue-中-key-值的作用" aria-hidden="true">#</a> 153. vue 中 key 值的作用？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>vue 中 key 值的作用可以分为两种情况来考虑。\n \n第一种情况是 v-if 中使用 key。由于 Vue 会尽可能高效地渲染元素，通常会复用已有元素而不是从头开始渲染。因此当我们使用 v-if 来实现元素切换的时候，如果切换前后含有相同类型的元素，那么这个元素就会被复用。如果是相同的 input 元素，那么切换前后用户的输入不会被清除掉，这样是不符合需求的。因此我们可以通过使用 key 来唯一的标识一个元素，这个情况下，使用 key 的元素不会被复用。这个时候 key 的作用是用来标识一个独立的元素。\n \n第二种情况是 v-for 中使用 key。用 v-for 更新已渲染过的元素列表时，它默认使用“就地复用”的策略。如果数据项的顺序发生了改变，Vue 不会移动 DOM 元素来匹配数据项的顺序，而是简单复用此处的每个元素。因此通过为每个列表项提供一个 key 值，来以便 Vue 跟踪元素的身份，从而高效的实现复用。这个时候 key 的作用是为了高效的更新渲染虚拟 DOM。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>详细资料可以参考：\n<a href="https://segmentfault.com/a/1190000016344599" target="_blank" rel="noopener noreferrer">《Vue 面试中，经常会被问到的面试题 Vue 知识点整理》<ExternalLinkIcon/></a>\n<a href="https://www.zhihu.com/question/61064119" target="_blank" rel="noopener noreferrer">《Vue2.0 v-for 中 :key 到底有什么用？》<ExternalLinkIcon/></a>\n<a href="https://www.cnblogs.com/RainyBear/p/8563101.html" target="_blank" rel="noopener noreferrer">《vue 中 key 的作用》<ExternalLinkIcon/></a></p>\n<h2 id="_154-computed-和-watch-区别" tabindex="-1"><a class="header-anchor" href="#_154-computed-和-watch-区别" aria-hidden="true">#</a> 154. computed 和 watch 区别？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>computed 是计算属性，依赖其他属性计算值，并且 computed 的值有缓存，只有当计算值变化才会返回内容。\n \nwatch 监听到值的变化就会执行回调，在回调中可以进行一些逻辑操作。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="_155-keep-alive-组件有什么作用" tabindex="-1"><a class="header-anchor" href="#_155-keep-alive-组件有什么作用" aria-hidden="true">#</a> 155. keep-alive 组件有什么作用？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>如果你需要在组件切换的时候，保存一些组件的状态防止多次渲染，就可以使用 keep-alive 组件包裹需要保存的组件。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="_156-vue-中-mixin-和-mixins-区别" tabindex="-1"><a class="header-anchor" href="#_156-vue-中-mixin-和-mixins-区别" aria-hidden="true">#</a> 156. vue 中 mixin 和 mixins 区别？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>mixin 用于全局混入，会影响到每个组件实例。\n \nmixins 应该是我们最常使用的扩展组件的方式了。如果多个组件中有相同的业务逻辑，就可以将这些逻辑剥离出来，通过 mixins 混入代码，比如上拉下拉加载数据这种逻辑等等。另外需要注意的是 mixins 混入的钩子函数会先于组件内的钩子函数执行，并且在遇到同名选项的时候也会有选择性的进行合并\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>详细资料可以参考：\n<a href="https://juejin.im/book/5bdc715fe51d454e755f75ef/section/5bdc731b51882516c56ced6f" target="_blank" rel="noopener noreferrer">《前端面试之道》<ExternalLinkIcon/></a>\n<a href="https://cn.vuejs.org/v2/guide/mixins.html" target="_blank" rel="noopener noreferrer">《混入》<ExternalLinkIcon/></a></p>\n<h2 id="_157-开发中常用的几种-content-type" tabindex="-1"><a class="header-anchor" href="#_157-开发中常用的几种-content-type" aria-hidden="true">#</a> 157. 开发中常用的几种 Content-Type ？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>（1）application/x-www-form-urlencoded\n \n浏览器的原生 form 表单，如果不设置 enctype 属性，那么最终就会以 application/x-www-form-urlencoded 方式提交数据。该种方式提交的数据放在 body 里面，数据按照 key1=val1&amp;key2=val2 的方式进行编码，key 和 val 都进行了 URL\n转码。\n \n（2）multipart/form-data\n \n该种方式也是一个常见的 POST 提交方式，通常表单上传文件时使用该种方式。\n \n（3）application/json\n \n告诉服务器消息主体是序列化后的 JSON 字符串。\n \n（4）text/xml\n \n该种方式主要用来提交 XML 格式的数据。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>详细资料可以参考：\n<a href="https://honglu.me/2015/07/13/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%87%A0%E7%A7%8DContent-Type/" target="_blank" rel="noopener noreferrer">《常用的几种 Content-Type》<ExternalLinkIcon/></a></p>\n<h2 id="_158-如何封装一个-javascript-的类型判断函数" tabindex="-1"><a class="header-anchor" href="#_158-如何封装一个-javascript-的类型判断函数" aria-hidden="true">#</a> 158. 如何封装一个 javascript 的类型判断函数？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>function getType(value) {\n  // 判断数据是 null 的情况\n  if (value === null) {\n    return value + "";\n  }\n \n  // 判断数据是引用类型的情况\n  if (typeof value === "object") {\n    let valueClass = Object.prototype.toString.call(value),\n      type = valueClass.split(" ")[1].split("");\n \n    type.pop();\n \n    return type.join("").toLowerCase();\n  } else {\n    // 判断数据是基本数据类型的情况和函数的情况\n    return typeof value;\n  }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>详细资料可以参考：\n<a href="https://github.com/mqyqingfeng/Blog/issues/28" target="_blank" rel="noopener noreferrer">《JavaScript 专题之类型判断(上)》<ExternalLinkIcon/></a></p>\n<h2 id="_159-如何判断一个对象是否为空对象" tabindex="-1"><a class="header-anchor" href="#_159-如何判断一个对象是否为空对象" aria-hidden="true">#</a> 159. 如何判断一个对象是否为空对象？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>function checkNullObj(obj) {\n  return Object.keys(obj).length === 0;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>详细资料可以参考：\n<a href="https://blog.csdn.net/FungLeo/article/details/78113661" target="_blank" rel="noopener noreferrer">《js 判断一个 object 对象是否为空》<ExternalLinkIcon/></a></p>\n<h2 id="_160-使用闭包实现每隔一秒打印-1-2-3-4" tabindex="-1"><a class="header-anchor" href="#_160-使用闭包实现每隔一秒打印-1-2-3-4" aria-hidden="true">#</a> 160. 使用闭包实现每隔一秒打印 1,2,3,4</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>// 使用闭包实现\nfor (var i = 0; i &lt; 5; i++) {\n  (function(i) {\n    setTimeout(function() {\n      console.log(i);\n    }, i * 1000);\n  })(i);\n}\n \n// 使用 let 块级作用域\n \nfor (let i = 0; i &lt; 5; i++) {\n  setTimeout(function() {\n    console.log(i);\n  }, i * 1000);\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="_161-手写一个-jsonp" tabindex="-1"><a class="header-anchor" href="#_161-手写一个-jsonp" aria-hidden="true">#</a> 161. 手写一个 jsonp</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>function jsonp(url, params, callback) {\n  // 判断是否含有参数\n  let queryString = url.indexOf("?") === "-1" ? "?" : "&amp;";\n \n  // 添加参数\n  for (var k in params) {\n    if (params.hasOwnProperty(k)) {\n      queryString += k + "=" + params[k] + "&amp;";\n    }\n  }\n \n  // 处理回调函数名\n  let random = Math.random()\n      .toString()\n      .replace(".", ""),\n    callbackName = "myJsonp" + random;\n \n  // 添加回调函数\n  queryString += "callback=" + callbackName;\n \n  // 构建请求\n  let scriptNode = document.createElement("script");\n  scriptNode.src = url + queryString;\n \n  window[callbackName] = function() {\n    // 调用回调函数\n    callback(...arguments);\n \n    // 删除这个引入的脚本\n    document.getElementsByTagName("head")[0].removeChild(scriptNode);\n  };\n \n  // 发起请求\n  document.getElementsByTagName("head")[0].appendChild(scriptNode);\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><p>详细资料可以参考：\n<a href="https://www.cnblogs.com/zzc5464/p/jsonp.html" target="_blank" rel="noopener noreferrer">《原生 jsonp 具体实现》<ExternalLinkIcon/></a>\n<a href="https://segmentfault.com/a/1190000007665361#articleHeader1" target="_blank" rel="noopener noreferrer">《jsonp 的原理与实现》<ExternalLinkIcon/></a></p>\n<h2 id="_162-手写一个观察者模式" tabindex="-1"><a class="header-anchor" href="#_162-手写一个观察者模式" aria-hidden="true">#</a> 162. 手写一个观察者模式？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>var events = (function() {\n  var topics = {};\n \n  return {\n    // 注册监听函数\n    subscribe: function(topic, handler) {\n      if (!topics.hasOwnProperty(topic)) {\n        topics[topic] = [];\n      }\n      topics[topic].push(handler);\n    },\n \n    // 发布事件，触发观察者回调事件\n    publish: function(topic, info) {\n      if (topics.hasOwnProperty(topic)) {\n        topics[topic].forEach(function(handler) {\n          handler(info);\n        });\n      }\n    },\n \n    // 移除主题的一个观察者的回调事件\n    remove: function(topic, handler) {\n      if (!topics.hasOwnProperty(topic)) return;\n \n      var handlerIndex = -1;\n      topics[topic].forEach(function(item, index) {\n        if (item === handler) {\n          handlerIndex = index;\n        }\n      });\n \n      if (handlerIndex >= 0) {\n        topics[topic].splice(handlerIndex, 1);\n      }\n    },\n \n    // 移除主题的所有观察者的回调事件\n    removeAll: function(topic) {\n      if (topics.hasOwnProperty(topic)) {\n        topics[topic] = [];\n      }\n    }\n  };\n})();\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br></div></div><p>详细资料可以参考：\n<a href="https://segmentfault.com/a/1190000006934031#articleHeader1" target="_blank" rel="noopener noreferrer">《JS 事件模型》<ExternalLinkIcon/></a></p>\n<h2 id="_163-eventemitter-实现" tabindex="-1"><a class="header-anchor" href="#_163-eventemitter-实现" aria-hidden="true">#</a> 163. EventEmitter 实现</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>class EventEmitter {\n  constructor() {\n    this.events = {};\n  }\n \n  on(event, callback) {\n    let callbacks = this.events[event] || [];\n    callbacks.push(callback);\n    this.events[event] = callbacks;\n \n    return this;\n  }\n \n  off(event, callback) {\n    let callbacks = this.events[event];\n    this.events[event] = callbacks &amp;&amp; callbacks.filter(fn => fn !== callback);\n \n    return this;\n  }\n \n  emit(event, ...args) {\n    let callbacks = this.events[event];\n    callbacks.forEach(fn => {\n      fn(...args);\n    });\n \n    return this;\n  }\n \n  once(event, callback) {\n    let wrapFun = function(...args) {\n      callback(...args);\n \n      this.off(event, wrapFun);\n    };\n    this.on(event, wrapFun);\n \n    return this;\n  }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div><h2 id="_164-一道常被人轻视的前端-js-面试题" tabindex="-1"><a class="header-anchor" href="#_164-一道常被人轻视的前端-js-面试题" aria-hidden="true">#</a> 164. 一道常被人轻视的前端 JS 面试题</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>function Foo() {\n  getName = function() {\n    alert(1);\n  };\n  return this;\n}\nFoo.getName = function() {\n  alert(2);\n};\nFoo.prototype.getName = function() {\n  alert(3);\n};\nvar getName = function() {\n  alert(4);\n};\nfunction getName() {\n  alert(5);\n}\n \n//请写出以下输出结果：\nFoo.getName(); // 2\ngetName(); // 4\nFoo().getName(); // 1\ngetName(); // 1\nnew Foo.getName(); // 2\nnew Foo().getName(); // 3\nnew new Foo().getName(); // 3\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><p>详细资料可以参考：\n<a href="https://github.com/Wscats/Good-text-Share/issues/85" target="_blank" rel="noopener noreferrer">《前端程序员经常忽视的一个 JavaScript 面试题》<ExternalLinkIcon/></a>\n<a href="https://segmentfault.com/q/1010000008430170" target="_blank" rel="noopener noreferrer">《一道考察运算符优先级的 JavaScript 面试题》<ExternalLinkIcon/></a>\n<a href="https://www.cnblogs.com/xxcanghai/p/5189353.html" target="_blank" rel="noopener noreferrer">《一道常被人轻视的前端 JS 面试题》<ExternalLinkIcon/></a></p>\n<h2 id="_165-如何确定页面的可用性时间-什么是-performance-api" tabindex="-1"><a class="header-anchor" href="#_165-如何确定页面的可用性时间-什么是-performance-api" aria-hidden="true">#</a> 165. 如何确定页面的可用性时间，什么是 Performance API？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>Performance API 用于精确度量、控制、增强浏览器的性能表现。这个 API 为测量网站性能，提供以前没有办法做到的精度。\n \n使用 getTime 来计算脚本耗时的缺点，首先，getTime方法（以及 Date 对象的其他方法）都只能精确到毫秒级别（一秒的千分之一），想要得到更小的时间差别就无能为力了。其次，这种写法只能获取代码运行过程中的时间进度，无法知道一些后台事件的时间进度，比如浏览器用了多少时间从服务器加载网页。\n \n为了解决这两个不足之处，ECMAScript 5引入“高精度时间戳”这个 API，部署在 performance 对象上。它的精度可以达到1毫秒\n的千分之一（1秒的百万分之一）。\n \nnavigationStart：当前浏览器窗口的前一个网页关闭，发生 unload 事件时的 Unix 毫秒时间戳。如果没有前一个网页，则等于 fetchStart 属性。\n \nloadEventEnd：返回当前网页 load 事件的回调函数运行结束时的 Unix 毫秒时间戳。如果该事件还没有发生，返回 0。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>根据上面这些属性，可以计算出网页加载各个阶段的耗时。比如，网页加载整个过程的耗时的计算方法如下：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>var t = performance.timing;\nvar pageLoadTime = t.loadEventEnd - t.navigationStart;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>详细资料可以参考：\n<a href="http://javascript.ruanyifeng.com/bom/performance.html" target="_blank" rel="noopener noreferrer">《Performance API》<ExternalLinkIcon/></a></p>\n<h2 id="_166-js-中的命名规则" tabindex="-1"><a class="header-anchor" href="#_166-js-中的命名规则" aria-hidden="true">#</a> 166. js 中的命名规则</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>（1）第一个字符必须是字母、下划线（_）或美元符号（$）\n（2）余下的字符可以是下划线、美元符号或任何字母或数字字符\n \n一般我们推荐使用驼峰法来对变量名进行命名，因为这样可以与 ECMAScript 内置的函数和对象命名格式保持一致。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>详细资料可以参考：\n<a href="http://www.w3school.com.cn/js/pro_js_variables.asp" target="_blank" rel="noopener noreferrer">《ECMAScript 变量》<ExternalLinkIcon/></a></p>\n<h2 id="_167-js-语句末尾分号是否可以省略" tabindex="-1"><a class="header-anchor" href="#_167-js-语句末尾分号是否可以省略" aria-hidden="true">#</a> 167. js 语句末尾分号是否可以省略？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>在 ECMAScript 规范中，语句结尾的分号并不是必需的。但是我们一般最好不要省略分号，因为加上分号一方面有\n利于我们代码的可维护性，另一方面也可以避免我们在对代码进行压缩时出现错误。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="_168-object-assign" tabindex="-1"><a class="header-anchor" href="#_168-object-assign" aria-hidden="true">#</a> 168. Object.assign()</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>Object.assign() 方法用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="_169-math-ceil-和-math-floor" tabindex="-1"><a class="header-anchor" href="#_169-math-ceil-和-math-floor" aria-hidden="true">#</a> 169. Math.ceil 和 Math.floor</h2>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> 向上取整，函数返回一个大于或等于给定数字的最小整数。\n \nMath<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> 向下取整，函数返回一个小于或等于给定数字的最大整数。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="_170-js-for-循环注意点" tabindex="-1"><a class="header-anchor" href="#_170-js-for-循环注意点" aria-hidden="true">#</a> 170. js for 循环注意点</h2>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">,</span> j <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n \n<span class="token comment">// 当判断语句含有多个语句时，以最后一个判断语句的值为准，因此上面的代码会执行 10 次。</span>\n<span class="token comment">// 当判断语句为空时，循环会一直进行。</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>',date:"2022-10-16",deps:[],hoistedTags:[],links:[],pathInferred:"/面试/2022/20221016.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"20221016",filePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/面试/2022/20221016.md",filePathRelative:"面试/2022/20221016.md",componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/面试/2022/20221016.html.vue",componentFilePathRelative:"pages/面试/2022/20221016.html.vue",componentFileChunkName:"v-7ade95ec",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/面试/2022/20221016.html.js",dataFilePathRelative:"pages/面试/2022/20221016.html.js",dataFileChunkName:"v-7ade95ec",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/面试/2022/20221016.html",htmlFilePathRelative:"面试/2022/20221016.html"},{data:{key:"v-11de4d87",path:"/%E5%B7%A5%E5%85%B7/2022/20221001.html",title:"Webpack 5基础入门手册",lang:"zh-CN",frontmatter:{title:"Webpack 5基础入门手册",date:"2022-10-01T00:00:00.000Z",tags:["webpack"],categories:["工具"]},excerpt:"",headers:[{level:2,title:"基础使用",slug:"基础使用",children:[]},{level:2,title:"自定义 webpack 配置",slug:"自定义-webpack-配置",children:[]},{level:2,title:"配置文件",slug:"配置文件",children:[]},{level:2,title:"自动引入资源",slug:"自动引入资源",children:[]},{level:2,title:"使用 source map",slug:"使用-source-map",children:[]},{level:2,title:"使用 watch mode(观察模式)",slug:"使用-watch-mode-观察模式",children:[]},{level:2,title:"使用 webpack-dev-server",slug:"使用-webpack-dev-server",children:[]},{level:2,title:"资源模块",slug:"资源模块",children:[]},{level:2,title:"Loader(预处理加载器)",slug:"loader-预处理加载器",children:[]},{level:2,title:"抽离和压缩css",slug:"抽离和压缩css",children:[]},{level:2,title:"babel-loader",slug:"babel-loader",children:[]},{level:2,title:"代码分离",slug:"代码分离",children:[]},{level:2,title:"拆分生产环境和开发环境",slug:"拆分生产环境和开发环境",children:[{level:3,title:"公共路径",slug:"公共路径",children:[]},{level:3,title:"环境变量",slug:"环境变量",children:[]},{level:3,title:"拆分配置文件",slug:"拆分配置文件",children:[]},{level:3,title:"合并配置文件",slug:"合并配置文件",children:[]}]},{level:2,title:"模块热替换与热加载",slug:"模块热替换与热加载",children:[]},{level:2,title:"eslint",slug:"eslint",children:[{level:3,title:"结合webpack使用",slug:"结合webpack使用",children:[]}]},{level:2,title:"git-hooks 与 husky",slug:"git-hooks-与-husky",children:[{level:3,title:"提交代码前进行 eslist 检测",slug:"提交代码前进行-eslist-检测",children:[]},{level:3,title:"使用 husky 进行代码提交前 eslist 检测",slug:"使用-husky-进行代码提交前-eslist-检测",children:[]}]},{level:2,title:"Webpack 模块与解析原理",slug:"webpack-模块与解析原理",children:[]},{level:2,title:"外部扩展",slug:"外部扩展",children:[]},{level:2,title:"依赖图",slug:"依赖图",children:[]},{level:2,title:"Web Works",slug:"web-works",children:[]},{level:2,title:"TypeScript",slug:"typescript",children:[{level:3,title:"使用第三方类库",slug:"使用第三方类库",children:[]}]},{level:2,title:"多页面应用",slug:"多页面应用",children:[{level:3,title:"entry 配置",slug:"entry-配置",children:[]}]},{level:2,title:"Tree shaking",slug:"tree-shaking",children:[]},{level:2,title:"渐进式网络应用程序 PWA",slug:"渐进式网络应用程序-pwa",children:[]},{level:2,title:"Shimming 预置全局变量",slug:"shimming-预置全局变量",children:[{level:3,title:"this 指向",slug:"this-指向",children:[]}]},{level:2,title:"创建一个小轮子",slug:"创建一个小轮子",children:[{level:3,title:"如何构建一个 library",slug:"如何构建一个-library",children:[]},{level:3,title:"创建一个 webpack-numbers",slug:"创建一个-webpack-numbers",children:[]},{level:3,title:"发布到 npm package上",slug:"发布到-npm-package上",children:[]}]},{level:2,title:"dll (动态链接库)",slug:"dll-动态链接库",children:[]}],git:{updatedTime:null,contributors:[]}},key:"v-11de4d87",path:"/%E5%B7%A5%E5%85%B7/2022/20221001.html",title:"Webpack 5基础入门手册",lang:"zh-CN",frontmatter:{title:"Webpack 5基础入门手册",date:"2022-10-01T00:00:00.000Z",tags:["webpack"],categories:["工具"]},excerpt:"",headers:[{level:2,title:"基础使用",slug:"基础使用",children:[]},{level:2,title:"自定义 webpack 配置",slug:"自定义-webpack-配置",children:[]},{level:2,title:"配置文件",slug:"配置文件",children:[]},{level:2,title:"自动引入资源",slug:"自动引入资源",children:[]},{level:2,title:"使用 source map",slug:"使用-source-map",children:[]},{level:2,title:"使用 watch mode(观察模式)",slug:"使用-watch-mode-观察模式",children:[]},{level:2,title:"使用 webpack-dev-server",slug:"使用-webpack-dev-server",children:[]},{level:2,title:"资源模块",slug:"资源模块",children:[]},{level:2,title:"Loader(预处理加载器)",slug:"loader-预处理加载器",children:[]},{level:2,title:"抽离和压缩css",slug:"抽离和压缩css",children:[]},{level:2,title:"babel-loader",slug:"babel-loader",children:[]},{level:2,title:"代码分离",slug:"代码分离",children:[]},{level:2,title:"拆分生产环境和开发环境",slug:"拆分生产环境和开发环境",children:[{level:3,title:"公共路径",slug:"公共路径",children:[]},{level:3,title:"环境变量",slug:"环境变量",children:[]},{level:3,title:"拆分配置文件",slug:"拆分配置文件",children:[]},{level:3,title:"合并配置文件",slug:"合并配置文件",children:[]}]},{level:2,title:"模块热替换与热加载",slug:"模块热替换与热加载",children:[]},{level:2,title:"eslint",slug:"eslint",children:[{level:3,title:"结合webpack使用",slug:"结合webpack使用",children:[]}]},{level:2,title:"git-hooks 与 husky",slug:"git-hooks-与-husky",children:[{level:3,title:"提交代码前进行 eslist 检测",slug:"提交代码前进行-eslist-检测",children:[]},{level:3,title:"使用 husky 进行代码提交前 eslist 检测",slug:"使用-husky-进行代码提交前-eslist-检测",children:[]}]},{level:2,title:"Webpack 模块与解析原理",slug:"webpack-模块与解析原理",children:[]},{level:2,title:"外部扩展",slug:"外部扩展",children:[]},{level:2,title:"依赖图",slug:"依赖图",children:[]},{level:2,title:"Web Works",slug:"web-works",children:[]},{level:2,title:"TypeScript",slug:"typescript",children:[{level:3,title:"使用第三方类库",slug:"使用第三方类库",children:[]}]},{level:2,title:"多页面应用",slug:"多页面应用",children:[{level:3,title:"entry 配置",slug:"entry-配置",children:[]}]},{level:2,title:"Tree shaking",slug:"tree-shaking",children:[]},{level:2,title:"渐进式网络应用程序 PWA",slug:"渐进式网络应用程序-pwa",children:[]},{level:2,title:"Shimming 预置全局变量",slug:"shimming-预置全局变量",children:[{level:3,title:"this 指向",slug:"this-指向",children:[]}]},{level:2,title:"创建一个小轮子",slug:"创建一个小轮子",children:[{level:3,title:"如何构建一个 library",slug:"如何构建一个-library",children:[]},{level:3,title:"创建一个 webpack-numbers",slug:"创建一个-webpack-numbers",children:[]},{level:3,title:"发布到 npm package上",slug:"发布到-npm-package上",children:[]}]},{level:2,title:"dll (动态链接库)",slug:"dll-动态链接库",children:[]}],content:"\r\n::: tip\r\n\r\nWebpack 是一种前端资源构建工具，静态模块打包器 ( module bundler )。在 Webpack 看来，前端的所有资源文件 ( js / json / css / img / less / … ) 都会作为模块处理。它将根据模块的依赖关系进行静态分析，打包生成对应的静态资源 ( module )。\r\n\r\n:::\r\n\r\n## 基础使用\r\n\r\n- 安装\r\n\r\n  首先使用 npm init -y 初始化项目，然后安装 webpack 以及 webpack-cli \r\n\r\n  ```js\r\n  // 本地安装(推荐)\r\n  npm i webpack webpack-cli -D\r\n  // 运行 webpack\r\n  npx webpack\r\n  // 查看打包详细信息\r\n  npx webpack --stats detailed\r\n  ```\r\n\r\n## 自定义 webpack 配置\r\n\r\n实际上，`webpack-cli`给我们提供了丰富的终端命令行指令，可以通过 `webpack --help`来查看\r\n\r\n- 指定入口文件和mode\r\n\r\n  ```js\r\n  // entry 命令后面就是指定的入口文件，mode 后面就是指定的 mode 通过选择 development(开发环境), production(生产环境) 或 none 之中的一个，来设置 mode 参数，你可以启用 webpack 内置在相应环境下的优化。其默认值为 production。\r\n  npx webpack --entry ./src/index.js --mode production\r\n  ```\r\n\r\n## 配置文件\r\n\r\n在文件根目录下新建 `webpack.config.js` 配置文件\r\n\r\n```js\r\n// webpack.config.js\r\nconst path = require('path')\r\nmodule.exports = {\r\n  entry: './src/index.js', // 设置入口文件\r\n\r\n  output: {  // 设置出口\r\n    filename: 'bundle.js', // 设置打包后的文件名\r\n    path: path.resolve(__dirname, './dist')  // 文件输出路径。例：会生成一个dist文件夹\r\n  },\r\n\r\n  mode: 'none' // 设置 mode 模式\r\n}\r\n\r\n// index.html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n  <meta charset=\"UTF-8\">\r\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n  <title>Hello</title>\r\n</head>\r\n<body>\r\n  // 在 script 标签里手动引入打包后的文件，打开html，就可以运行打包后文件里的方法了\r\n  <script src=\"./dist/bundle.js\"><\/script>\r\n</body>\r\n</html>\r\n```\r\n\r\n## 自动引入资源\r\n\r\n首先安装插件：\r\n\r\n```js\r\nnpm i html-webpack-plugin -D\r\n```\r\n\r\n调整 `webpack.config.js`配置文件：\r\n\r\n```js\r\nconst path = require('path')\r\nconst HtmlWebpackPlugin = require('html-webpack-plugin') // 引入插件\r\nmodule.exports = {\r\n  entry: './src/index.js',\r\n\r\n  output: {\r\n    filename: 'bundle.js',\r\n    path: path.resolve(__dirname, './dist'),\r\n    clean: true  // 清理在打包过程中清理上一次打包中没有用的内容\r\n  },\r\n\r\n  mode: 'none',\r\n\r\n  plugins: [ // 在 plugins 配置项里配置webpack插件\r\n    new HtmlWebpackPlugin({    \r\n      template: './index.html', // 指定模板\r\n      filename: 'app.html',   // 指定打包后的文件夹里的 html 文件名\r\n      inject: 'body'    //  指定在生成的 html 文件里的 body 标签里生成 script 标签\r\n    })\r\n  ]\r\n}\r\n```\r\n\r\n## 使用 source map\r\n\r\n当`webpack`打包源代码时，可能会很难追踪到error(错误)和warning(警告)在源代码中的原始位置。例如，如果将三个源文件（ `a.js` , `b.js`和`c.js`）打包到一个bundle ( `bundle.js` ）中，而其中一个源文件包含一个错误，那么堆栈跟踪就会直接指向到 bundle.js。你可能需要准确地知道错误来自于哪个源文件，所以这种提示这通常不会提供太多帮助。\r\n为了更容易地追踪error和 warning，JavaScript提供了`source maps` 功能，可以将编译后的代码映射回原始源代码。如果一个错误来自于b.js , source map就会明确的告诉你。\r\n\r\n```js\r\nmodule.exports = {\r\n  // ...\r\n  mode: 'development', // 设置 mode 为开发环境\r\n\r\n  devtool: 'cheap-module-source-map', // 在开发模式下追踪代码\r\n}\r\n// 配置好后，如果有错误或者警告，打开浏览器控制台就能准确知道报错位置\r\n```\r\n\r\n## 使用 watch mode(观察模式)\r\n\r\n在每次编译代码时，手动运行`npx webpack`会显得很麻烦。\r\n我们可以在webpack启动时添加\"watch”参数。如果其中一个文件被更新，代码将被重新编译，所以你不必再去手动运行整个构建。\r\n\r\n```js\r\nnpx webpack --watch\r\n```\r\n\r\n## 使用 webpack-dev-server\r\n\r\n`webpack-dev-server` 为你提供了一个基本的web server，并且具有live reloading(实时重新加载)功能\r\n\r\n```js\r\n// 先下载\r\nnpm i webpack-dev-server -D\r\n\r\n// webpack.config.js\r\nconst path = require('path')\r\nmodule.exports = {\r\n  // ...\r\n  devServer: {  // 配置 webpack-dev-server\r\n    static: path.resolve(__dirname, './dist'), // 告诉 dev server ，从什么位置查找文件\r\n    compress: false, // 设置是否在服务器中进行代码压缩，减少传输的大小\r\n    port: 3000, // 设置端口号\r\n    headers: {  // 可以设置一些头部给浏览器\r\n      'X-Access-Token': 'abc123'\r\n    },\r\n    proxy: { // 设置代理\r\n      '/api': 'http://localhost:9000'\r\n    },\r\n    // https: true,  如果想将本地http服务变成https服务，但是访问时浏览器会报是不安全的，因为我们默认使用的是自签名证书\r\n    http2: true,  // 如果想开启http2, http2 自带 https 证书\r\n    historyApiFallback: true  // 如果我们的应用是个SPA(单页面应用)，例 当路由到/some时(可以直接在地址栏里输入)，会发现此时刷新页面后，控制台会报错。开启 historyApiFallback 配置就不会报错了\r\n  }\r\n}\r\n\r\n// 运行 webpack-dev-server\r\nnpx webpack-dev-server serve\r\n```\r\n\r\n## 资源模块\r\n\r\n资源模块(asset module)是一种模块类型，它允许使用资源文件（字体，图标等）而无需配置额外 loader。\r\n\r\n资源模块类型(asset module type)，通过添加 4 种新的模块类型，来替换所有这些 loader：\r\n\r\n- `asset/resource` 发送一个单独的文件并导出 URL。之前通过使用 `file-loader` 实现。\r\n- `asset/inline` 导出一个资源的 data URL。之前通过使用 `url-loader` 实现。\r\n- `asset/source` 导出资源的源代码。之前通过使用 `raw-loader` 实现。\r\n- `asset` 在导出一个 data URI 和发送一个单独的文件之间自动选择。之前通过使用 `url-loader`，并且配置资源体积限制实现。\r\n\r\n当在 webpack 5 中使用旧的 assets loader（如 `file-loader`/`url-loader`/`raw-loader` 等）和 asset 模块时，你可能想停止当前 asset 模块的处理，并再次启动处理，这可能会导致 asset 重复，你可以通过将 asset 模块的类型设置为 `'javascript/auto'` 来解决。\r\n\r\n```js\r\nmodule.exports = {\r\n  entry: './src/index.js',\r\n  output: {\r\n    filename: 'bundle.js',\r\n    path: path.resolve(__dirname, './dist'),\r\n    clean: true,\r\n    // 第一种设置输出资源时，资源的名字，会随机生成哈希值\r\n    assetModuleFilename: 'images/[contenthash][ext]' \r\n  },\r\n  // ... \r\n  module: {  // 在 module 对象里配置模块， rules 配置项里配置规则\r\n    rules: [\r\n      {\r\n        test: /\\.png$/, // 以 png 为扩展名的文件\r\n        type: 'asset/resource',  // 使用 asset/resource 类型，打包后的文件夹里，会输出一张图片，在控制台上看，img标签的src是一个本地链接\r\n        generator: {  // 第二种设置输出资源时，资源的名字，会随机生成哈希值，generator 优先级高于 output \r\n          filename: 'images/[contenthash][ext]'\r\n        }\r\n      },\r\n\r\n      {\r\n        test: /\\.svg$/,\r\n        type: 'asset/inline'  // 使用 asset/resource 类型，不会在打包后的文件夹里生成图片，在控制台上看，img标签的src是一个data URL\r\n      },\r\n\r\n      {\r\n        test: /\\.txt$/,\r\n        type: 'asset/source' // 例： 会将 txt 文件的内容提取出来，我们可以在 js 文件中导入，并放入 div 中\r\n      },\r\n\r\n      {\r\n        test: /\\.jpg$/,\r\n        type: 'asset',\r\n        parser: {\r\n          dataUrlCondition: {\r\n            maxSize: 4 * 1024 * 1024 // 自动地在resource和 inline 之间进行选择: webpack默认条件，小于8kb的文件，将会视为inline模块类型,否则会被视为resource模块类型。可以在 dataUrlCondition 修改\r\n          }\r\n        }\r\n      }\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\n## Loader(预处理加载器)\r\n\r\nWebpack 支持使用 [loader](https://webpack.docschina.org/concepts/loaders) 对文件进行预处理。你可以构建包括 JavaScript 在内的任何静态资源。并且可以使用 Node.js 轻松编写自己的 loader。\r\n\r\n[`module.rules`](https://webpack.docschina.org/configuration/module/#modulerules) 允许你在 webpack 配置中指定多个 loader。 这种方式是展示 loader 的一种简明方式，并且有助于使代码变得简洁和易于维护。同时让你对各个 loader 有个全局概览：\r\n\r\nloader 从右到左（或从下到上）地取值(evaluate)/执行(execute)。在下面的示例中，从 sass-loader 开始执行，然后继续执行 css-loader，最后以 style-loader 为结束。查看 [loader 功能](https://webpack.docschina.org/concepts/loaders/#loader-features) 章节，了解有关 loader 顺序的更多信息。\r\n\r\n```js\r\nmodule.exports = {\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /\\.css$/,\r\n        use: [\r\n          { loader: 'style-loader' },\r\n          {\r\n            loader: 'css-loader',\r\n            options: {\r\n              modules: true,\r\n            },\r\n          },\r\n          { loader: 'sass-loader' },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n};\r\n```\r\n\r\n## 抽离和压缩css\r\n\r\n在多数情况下，我们也可以进行压缩CSS，以便在生产环境中节省加载时间，同时还可以将CSS文件抽离成一个单独的文件。实现这个功能，需要`mini-css-extract-plugin`这个插件来帮忙，本插件会将CSS提取到单独的文件中，为每个包含CSS的JS文件创建一个cSS文件，并且支持CSS和Source Maps 的按需加载。\r\n本插件基于webpack v5的新特性构建，并且需要webpack 5才能正常工作。之后将loader 与 plugin添加到你的 webpack配置文件中\r\n\r\n```js\r\n// 下载\r\nnpm i mini-css-extract-plugin -D\r\nnpm i css-minimizer-webpack-plugin -D\r\n// webpack.config.js\r\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin')  // 第一步引入抽离css插件\r\nconst CssMinimizerPlugin = require('css-minimizer-webpack-plugin')   // 第一步引入引入压缩css插件\r\nconst toml = require('toml')  // 处理toml 文件的插件\r\nconst yaml = require('yaml')  // 处理yaml 文件的插件\r\nconst json5 = require('json5')  // 处理 json5 文件的插件\r\n\r\nmodule.exports = {\r\n  // ... \r\n  mode: 'production', // 使用压缩css插件，修改 mode 为生产环境\r\n    \r\n  plugins: [\r\n    new HtmlWebpackPlugin({\r\n      template: './index.html',\r\n      filename: 'app.html',\r\n      inject: 'body'\r\n    }),\r\n    \r\n    new MiniCssExtractPlugin({ // 第二步，在 plugins 引入配置\r\n      filename: 'styles/[contenthash].css' //配置打包后的文件名\r\n    })\r\n  ],\r\n\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /\\.(css|less)$/, // 以css或less后缀的文件\r\n//第三步，style-loader 替换成 MiniCssExtractPlugin.loader\r\n        use: [MiniCssExtractPlugin.loader, 'css-loader', 'less-loader']\r\n      },\r\n\r\n      {\r\n        test: /\\.(woff|woff2|eot|ttf|otf)$/, // 字体资源\r\n        type: 'asset/resource'\r\n      },\r\n\r\n      {\r\n        test: /\\.(csv|tsv)$/,  // 其他资源文件，例如csv，tsv\r\n        use: 'csv-loader'\r\n      },\r\n\r\n      {\r\n        test: /\\.xml$/,  // 处理 xml 资源文件\r\n        use: 'xml-loader'\r\n      },\r\n\r\n      {\r\n        test: /\\.toml$/,\r\n        type: 'json',\r\n        parser: {\r\n          parse: toml.parse\r\n        }\r\n      },\r\n\r\n      {\r\n        test: /\\.yaml$/,\r\n        type: 'json',\r\n        parser: {\r\n          parse: yaml.parse\r\n        }\r\n      },\r\n\r\n      {\r\n        test: /\\.json5$/,\r\n        type: 'json',\r\n        parser: {\r\n          parse: json5.parse\r\n        }\r\n      }\r\n    ]\r\n  },\r\n\r\n  optimization: { // 在 optimization 优化配置里配置css压缩插件\r\n    minimizer: [\r\n      new CssMinimizerPlugin()\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\n## babel-loader\r\n\r\n作用：将 ES6 的代码转译成低版本浏览器支持的 ES5\r\n\r\n```js\r\n// 下载\r\nnpm i babel-loader @babel/core @babel/preset-env -D\r\n```\r\n\r\n在 webpack 配置对象中，需要将 babel-loader 添加到 module 列表中，就像下面这样：\r\n\r\n```javascript\r\nmodule: {\r\n  rules: [\r\n    {\r\n      test: /\\.js$/,\r\n      use: { \r\n        loader: 'babel-loader',\r\n        exclude: /node_modules)/, // 排除node_modules 里的js\r\n        options: {  \r\n          presets: ['@babel/preset-env'] // 在 options 里配置预设\r\n        }\r\n      }\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\n此时执行编译，在浏览器里打开项目发现报了一个致命错误:  regeneratorRuntime is not defined这个错误显然是未能正确配置babel。regeneratorRuntime 是webpack打包生成的全局辅助函数，由babel生成，用于兼容async/await的语法。\r\n\r\n```js\r\n// 正确配置,第一步下载插件\r\nnpm install --save @babel/runtime  // 这个包中包含了regeneratorRuntime 运行时需要\r\nnpm install --save-dev @babel/plugin-transform-runtime // 这个插件会在需要 regeneratorRuntime 的地方自动 require 导包\r\n\r\n// 第二步，修改 webpack.config.js 配置\r\nmodule: {\r\n  rules: [\r\n    {\r\n      test: /\\.js$/,\r\n      exclude: /(node_modules|bower_components)/, \r\n      use: { \r\n        loader: 'babel-loader',\r\n        options: {  \r\n          presets: ['@babel/preset-env'],\r\n          plugins: [\r\n              [\r\n                '@babel/plugin-transform-runtime'\r\n              ]\r\n            ]\r\n        }\r\n      }\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\n## 代码分离\r\n\r\n代码分离是 webpack 中最引人注目的特性之一。此特性能够把代码分离到不同的 bundle 中，然后可以按需加载或并行加载这些文件。代码分离可以用于获取更小的 bundle，以及控制资源加载优先级，如果使用合理，会极大影响加载时间。\r\n\r\n常用的代码分离方法有三种：\r\n\r\n- **入口起点**：使用 [`entry`](https://webpack.docschina.org/configuration/entry-context) 配置手动地分离代码。\r\n- **防止重复**：使用 [Entry dependencies](https://webpack.docschina.org/configuration/entry-context/#dependencies) 或者 [`SplitChunksPlugin`](https://webpack.docschina.org/plugins/split-chunks-plugin) 去重和分离 chunk。\r\n- **动态导入**：通过模块的内联函数调用来分离代码。\r\n\r\n更具体的请参考[官方文档](https://webpack.docschina.org/guides/code-splitting#root)\r\n\r\n## 拆分生产环境和开发环境\r\n\r\n### 公共路径\r\n\r\n[`publicPath`](https://webpack.docschina.org/configuration/output/#outputpublicpath) 配置选项在各种场景中都非常有用。你可以通过它来指定应用程序中所有资源的基础路径。\r\n\r\n```js\r\n// webpack.config.js\r\nmodule.exports = (env) => {\r\n  return {\r\n    // ...\r\n    output: {\r\n   // 项目中所有引入的资源前缀都改成了下面的公共路径\r\n      publicPath: 'http://localhost:8080/' // 配置公共路径\r\n    },\r\n  }\r\n}\r\n```\r\n\r\n### 环境变量\r\n\r\n```js\r\n// 设置了一个环境变量, production 为 true\r\nnpx webpack --env production=true\r\n// 改造 webpack.config.js\r\nmodule.exports = (env) => { // 改造成一个函数，拿到 env 参数\r\n  return {\r\n    // ...\r\n    mode: env.production ? 'production' : 'development',\r\n  }\r\n}\r\n```\r\n\r\n### 拆分配置文件\r\n\r\n如果配置文件中，都通过三元运算符的方式来进行配置，显然特别糟糕，我们可以拆分配置文件\r\n\r\n1. 在项目根目录中创建一个 config 文件夹，文件夹下创建 `webpack.config.dev.js` ,  `webpack.config.prod,js` 文件\r\n\r\n2.  如果将`module.exports`配置文件改成了函数形式，还原到原来的 `module.exports = { }`\r\n\r\n   ```js\r\n   // 通过 npx webpack -c 指定配置文件\r\n   npx webpack -c ./config/webpack.config.dev.js\r\n   ```\r\n\r\n### 合并配置文件\r\n\r\n开发配置文件和生产配置文件中，有很多相同的代码，我们可以创建一个 `webpack.config.commin.js`文件提取出来，并合并配置文件\r\n\r\n```js\r\n// 第一步下载webpack-merge\r\nnpm i webpack-merge -D\r\n// 第二步：在根目录 config 文件夹下创建一个 webpack.config.js\r\n\r\n// 第三步 webpack.config.js\r\nconst { merge } = require('webpack-merge') // 导入\r\n// 导入三个配置文件\r\nconst commonConfig = require('./webpack.config.common')\r\nconst productionConfig = require('./webpack.config.prod')\r\nconst developmentConfig = require('./webpack.config.dev')\r\n// 如果用户传入的环境变量里有development，则是开发配置合并公共配置\r\nmodule.exports = (env) => {\r\n  switch(true) {\r\n    case env.development:\r\n      return merge(commonConfig, developmentConfig)\r\n\r\n    case env.production:\r\n      return merge(commonConfig, productionConfig)\r\n\r\n    defult:\r\n      return new Error('No matching configuration was found')\r\n  }\r\n}\r\n```\r\n\r\n## 模块热替换与热加载\r\n\r\n> 模块热替换(HMR - hot module replacement)功能会在应用程序运行过程中，替换、添加或删除 [模块](https://webpack.docschina.org/concepts/modules/)，而无需重新加载整个页面。主要是通过以下几种方式，来显著加快开发速度：\r\n\r\n- 保留在完全重新加载页面期间丢失的应用程序状态。\r\n- 只更新变更内容，以节省宝贵的开发时间。\r\n- 在源代码中 CSS/JS 产生修改时，会立刻在浏览器中进行更新，这几乎相当于在浏览器 devtools 直接更改样式。\r\n\r\n```js\r\n// 开启webpack的热模块替换特性，需要配置devServer.hot参数:\r\nmodule.exports = {\r\n  // ...\r\n  devServer: {\r\n    hot: true,  // 默认开启热替换\r\n    liveReload: true // 默认开启热加载\r\n  }\r\n}\r\n```\r\n\r\n## eslint\r\n\r\n`eslint`是用来扫描我们所写的代码是否符合规范的工具。 往往我们的项目是多人协作 开发的，我们期望统一的代码规范，这时候可以让eslint来对我们进行约束。 严格意义上来说，eslint配置跟webpack无关，但在工程化开发环境中，它往往是不可或缺的。\r\n\r\n```js\r\n// 下载\r\nnpm i eslint -D\r\n```\r\n\r\n配置`eslint`，只需要在根目录下添加一个.eslintrc文件(或者.eslintrc.json, .js等)。当然，我们可以使用`eslint`工具来自动生成它：\r\n\r\n```js\r\nnpx eslint --init\r\n// 第一种只检查语法  第二种检查语法并发现问题  第三种检查语法发现问题并规范格式，我们通常选择第三种\r\n✔ How would you like to use ESLint? · syntax\r\n// 选择模块化语法，这里选择ESM\r\n✔ What type of modules does your project use? · esm\r\n// 选择是使用react还是vue,或者什么都没有\r\n✔ Which framework does your project use? · react\r\n// 项目中使用TS吗\r\n✔ Does your project use TypeScript? · No / Yes\r\n// 代码运行在哪里，browser浏览器，还是node后端\r\n✔ Where does your code run? · browser\r\n// 使用哪种方式配置规范，流行式/一问一答/导入自有的文件，这里选择的是第一种\r\n✔ How would you like to define a style for your project? · guide \r\n// 选择哪一种流行规范\r\n✔ which stvle quide do vou want to follow. airbnb\r\n// 配置文件放在什么地方\r\n✔ What format do you want your config file to be in? · JSON\r\n```\r\n\r\n```json\r\n// .eslintrc.json\r\n{\r\n    \"env\": { // 指定脚本的运行环境。每种环境都有一组特定的预定义全局变量。此处使用的 browser 预定义了浏览器环境中的全局变量，es6 启用除了 modules 以外的所有 ECMAScript 6 特性（该选项会自动设置 ecmaVersion 解析器选项为 6）。    \r\n        \"browser\": true,\r\n        \"es2021\": true // 支持es2021\r\n    },\r\n    \"extends\": [  // 检测中使用的预定义的规则集合。\r\n        \"airbnb-base\"  // 可以使用这个扩展文件来帮我们  检查文件\r\n    ],\r\n    \"parserOptions\": {\r\n        \"ecmaVersion\": 12,  \r\n        \"sourceType\": \"module\"  // 类型为 module\r\n    },\r\n    \"rules\": {\r\n      \"no-console\": 0  // 关闭不允许使用 console 规则\r\n    },\r\n    \"globals\": {\r\n\r\n    }\r\n}\r\n\r\n```\r\n\r\n### 结合webpack使用\r\n\r\n```js\r\nmodule.exports = {\r\n  //...\r\n  {\r\n        test: /\\.(js|jsx)$/,\r\n        exclude: /node-modules/,\r\n        use: ['babel-loader', 'eslint-loader']\r\n   },\r\n};\r\n```\r\n\r\n## git-hooks 与 husky\r\n\r\n为了保证团队里的开发人员提交的代码符合规范，我们可以在开发者上传代码时进行 校验。 我们常用 `husky` 来协助进行代码提交时的 `eslint` 校验。在使用`husky`之前， 我们先来研究一下 `git-hooks` 。\r\n\r\n```js\r\n初始化项目 git init\r\n在项目里运行 ls -la 命令 我们可以看到，存在一个\".git\"名称的文件夹。事实上，在我们项目中根目录下运行git命令时，git 会根据它来工作。\r\ncd .git  \r\ncd hooks\r\nls -la  // 进入到 hooks 文件夹里，可以看到有很多 sample 文件\r\n```\r\n\r\n### 提交代码前进行 eslist 检测\r\n\r\n我们需要使用`git hooks`里的 `pre-commit.sample` 文件里的方法\r\n\r\n```js\r\n// cat命令可以查看一个文件的内容\r\ncat pre-commit.sample\r\n// 我们可以看到这样一句话，大概意思是要启用这个钩子的话，我们就把这个文件的后缀名去掉。\r\nTo enable this hook, rename this file to \"pre-commit\"\r\n```\r\n\r\n虽然这样对我们本地来讲是可行的，但要注意，`.git`文件夹的改动无法同步到远端仓库。所以我们期望将`git-hook`的执行权移交到外面来。我们回到项目的根目录下，然后我们新建一个文件夹，暂时命名 为`.mygithooks`然后在此文件夹下，新增一个`git-hook`文件,命名为`pre-commit`，并写入以下内容：\r\n\r\n```js\r\nnpx eslint ./src  \r\n```\r\n\r\n我们新建了自己的`git-hook`，但此时 git 并不能识别。下面我们执行这行命令\r\n\r\n```js\r\n// 项目根目录下\r\ngit config core.hooksPath .mygithooks\r\n```\r\n\r\n上述命令给我们自己的文件，配置了`git-hook`的执行权限。 但这个时候我们`git commit`的话，可能会报这样的警告，并且没有执行我们的 shell\r\n\r\n```js\r\nhint: The 'pre-commit' hook was ignored because it's not set as \r\nexecutable.\r\n\r\nhint: You can disable this warning with `git config \r\nadvice.ignoredHook false`\r\n```\r\n\r\n这是因为我们的操作系统没有给出这个文件的可执行权限。 因此我们得再执行这样一句命令\r\n\r\n```\r\nchmod +x .mygithooks/pre-commit\r\n```\r\n\r\n现在我们执行 `git commit` 会先执行 `npx eslint ./src` 命令，进行 `eslist` 检测\r\n\r\n### 使用 husky 进行代码提交前 eslist 检测\r\n\r\nhusky在升级到7.x后，做了跟我们上述同样的事。 安装它之前，我们需要在package.json中的script里，先添加\r\n\r\n```js\r\n\"sctript\": {\r\n    // ...\r\n    \"prepare\": \"husky install\"  // prepare是一个npm钩子，意思是安装依赖的时候，会先执行husky install命令。这个命令就做了上述的123这三件事！\r\n}\r\n// 下载 husky\r\nnpm i husky -D\r\n```\r\n\r\n我们安装了7.x的`husky`会发现，项目根目录下生成了`.husky`的文件夹。 当然，7.x的`husky`似乎是有bug的，如果不能正常使用，那么我们只需要验证两件事\r\n\r\n```js\r\n// 第一件事：是否移交了git-hook的配置权限，执行命令 \"git config --list\"查看core.hooksPath配置是否存在，是否正确指向了.husky。如果没有，我们只需要手动的给加上就行：\r\ngit config core.hooksPath .husky\r\n// 第二件事：是否是可执行文件，如果没有，手动加上\r\nchmod +x .mygithooks/pre-commit \r\n```\r\n\r\n然后我们在`.husky`文件夹下创建一个文件命名为`pre-commit`，\r\n\r\n```\r\n// pre-commit\r\nnpx eslint ./src  \r\n```\r\n\r\n现在我们进行 `git commit` 提交，`husky`就会进行 `eslist` 检测\r\n\r\n## Webpack 模块与解析原理\r\n\r\n- **Webpack 模块**：所有能被引入的都可以当成一个模块，\r\n  例如：ESM，CommonJS，AMD，css/scss/less 文件中的 @import 语句\r\n\r\n- **解析原理**：\r\n\r\n  1. webpack 通过 Resolvers 实现了模块解析，它是基 enhanced-resolve 这个包实现的\r\n\r\n  2. 通过内置的 **enhanced-resolve** 可以解析**绝对路径**，**相对路径**，**模块路径**\r\n\r\n     ```js\r\n     // webpack.config.js\r\n     const path = require('path');\r\n     module.exports = {\r\n       //...\r\n       resolve: {  // 可以通过 resolve 里的 alias 配置项配置自定义路径\r\n         alias: {\r\n           \"@utils\": path.resolve(__dirname, 'src/utils/')\r\n        },\r\n      },\r\n     };\r\n     \r\n     ```\r\n\r\n  3. 如果遇到一个文件夹下有相同名称不同类型的文件（**main.js**，**main.json**），例如通过 **import** 导入时，没有写明导入文件夹哪个 **main** 文件，**webpack** 会默认导入 **js** 文件\r\n\r\n     ```js\r\n     // webpack会按照数组顺序去解析这些后缀名，对于同名的文件，webpack总是会先解析列在数组首位的后缀名的文件。\r\n     \r\n     module.exports = {\r\n       //...\r\n       resolve: {\r\n         extensions: ['.js', '.json', '.wasm'],\r\n      },\r\n     };\r\n     ```\r\n\r\n## 外部扩展\r\n\r\n有时候我们为了减小打包后的体积，从而把一些不变的第三方库用cdn的形式引入进来，比如jQuery\r\n\r\n```html\r\n<script \r\n  src=\"https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.js\"\r\n><\/script>\r\n\r\n```\r\n\r\n这个时候我们想在我们的代码里使用引入的**jquery**———但似乎三种模块引入方式都 不行，这时候怎么办呢？ webpack给我们提供了**Externals**的配置属性，让我们可以 配置外部扩展模块\r\n\r\n```js\r\nmodule.exports = {\r\n  //...\r\n  externals: {\r\n    jquery: 'jQuery', // key的名必须和你引入的名一样，value 是暴露在window上\r\n },\r\n};\r\n\r\n// index.js\r\nimport $ from 'jquery';\r\nconsole.log($);\r\n```\r\n\r\n## 依赖图\r\n\r\n每当一个文件依赖另一个文件时，webpack 会直接将文件视为存在依赖关系。 这使 得 webpack 可以获取非代码资源，如 images 或 web 字体等。并会把它们作为 依 赖 提供给应用程序。 当 webpack 开始工作时，它会根据我们写好的配置,从入口(entry) 开始，webpack 会递归的构建一个 依赖关系图，这个依赖图包含着应用程序中所需的每个模块，然后将所有模块打包为bundle(也就是output的配置项)。 单纯讲似乎很抽象，我们更期望能够可视化打包产物的依赖图，下边列示了一些bundle分析工具。\r\n\r\n- webpack-chart：webpack stats 可交互饼图；\r\n- webpack-visualizer：可视化并分析你的bundle，检查哪些模块占用空间，哪些可能使重复使用的；\r\n- webpack-bundle-analyzer：一个 plugin 和 CLI 工具，它将 bundle 内容展示为一个便捷的、交互式、可缩放的树状图形式；\r\n- webpack bundle optimize helper：分析你的bundle并提供可操作的改进措施，减少 bundle 的大小；\r\n- bundle-stats：生成一个 bundle 报告 ( bundle大小、资源、模块 )，并比较不同构建之间的结果。\r\n\r\n我们来使用 **webpack-bundle-analyzer** 实现下面这个案例。\r\n\r\n```js\r\n// 首先安装这个插件作为开发依赖\r\nnpm install --save-dev webpack-bundle-analyzer\r\n// 在配置文件中配置\r\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\r\nconst { BundleAnalyzerPlugin } = require('webpack-bundle-analyzer')\r\n\r\nmodule.exports = {\r\n  mode: 'development',\r\n  entry: {\r\n    app: './src/app.js',\r\n    app2: './src/app2.js'\r\n  },\r\n  plugins: [\r\n    new HtmlWebpackPlugin(),\r\n    new BundleAnalyzerPlugin()\r\n  ]\r\n}\r\n\r\n// 执行 webpack \r\nnpx webpack serve\r\n// 执行完后，点击执行后出现的网址，就可以看到可视化的打包产物依赖图\r\n```\r\n\r\n## Web Works\r\n\r\nhtml5之前，打开一个常规的网页，浏览器会启用几个线程？ 一般而言，至少存在三个线程(公用线程不计入在内):\r\n\r\n分别是js引擎线程(处理js)、GUI渲染线程(渲染页面)、浏览器事件触发线程(控制交 互)。 当一段JS脚本长时间占用着处理机,就会挂起浏览器的GUI更新，而后面的事件响应也 被排在队列中得不到处理，从而造成了浏览器被锁定进入假死状态。 现在如果遇到了这种情况，我们可以做的不仅仅是优化代码————webpack5 提供了解决方案，webworker。\r\n\r\nwebWorkers提供了js的后台处理线程的API，它允许将复杂耗时的单纯js逻辑处理放 在浏览器后台线程中进行处理，让js线程不阻塞UI线程的渲染。\r\n\r\n- 在入口文件同级目录下创建一个**work**脚本 `work.js`文件\r\n\r\n```js\r\nself.onmessage = (message) => {\r\n // self.postMessage 函数会返回结果\r\n  self.postMessage({\r\n    answer: 1111       \r\n  })\r\n}\r\n```\r\n\r\n```js\r\n// 入口文件 app.js\r\nconst worker = new Worker(new URL('./work.js', import.meta.url))\r\n\r\nworker.postMessage({\r\n  question: 'hi，那边的workder线程，请告诉我今天的幸运数字是多少？'\r\n})\r\n\r\nworker.onmessage = (message) => {\r\n  console.log(message.data.answer) // 接受 workder 返回的结果\r\n}\r\n```\r\n\r\n## TypeScript\r\n\r\n> 在前端生态里，TS扮演着越来越重要的角色。 我们直入正题，讲下如何在webpack工程化环境中集成TS。 首先，当然是安装我们的ts和对应的loader。\r\n\r\n```js\r\nnpm install --save-dev typescript ts-loader\r\n```\r\n\r\n接下来我们需要在项目根目录下添加一个ts的配置文件————tsconfig.json，我们可以用**ts**自带的工具来自动化生成它。\r\n\r\n```\r\nnpx tsc --init\r\n```\r\n\r\n我们发现生成了一个tsconfig.json，里面注释掉了绝大多数配置。 现在，根据我们想要的效果来打开对应的配置。\r\n\r\n```json\r\n{\r\n  \"compilerOptions\": {\r\n    \"rootDir\": \"./src\",   // 指定入口\r\n    \"outDir\": \"./dist\",   // 指定出口\r\n    \"noImplicitAny\": true,\r\n    \"sourceMap\": true,\r\n    \"module\": \"es6\",\r\n    \"target\": \"es5\",\r\n    \"jsx\": \"react\",\r\n    \"allowJs\": true,\r\n    \"moduleResolution\": \"node\"  \r\n }\r\n}\r\n```\r\n\r\n好了，接下来我们新增一个src/index.ts，内置一些内容。 然后我们别忘了更改我们的entry及配置对应的loder。 当然，还有**resolve.extensions**，将.ts放在.js之前，这样它会先找.ts。 注意，如果我们使用了**sourceMap**，一定记得和上面的ts配置一样，设置**sourcemap**为true。 也别忘记在我们的**webpack.config.js**里\r\n\r\n```js\r\nconst path = require('path')\r\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\r\n\r\nmodule.exports = {\r\n  mode: 'development',\r\n  entry: './src/app.ts',\r\n  devtool: 'inline-source-map',\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /\\.ts$/,\r\n        use: 'ts-loader',\r\n        exclude: /node_modules/\r\n      }\r\n    ]\r\n  },\r\n  resolve: {\r\n    extensions: ['.ts', '.js']\r\n  },\r\n  output: {\r\n    filename: 'bundle.js',\r\n    path: path.resolve(__dirname, './dist')\r\n  },\r\n  plugins: [\r\n    new HtmlWebpackPlugin()\r\n  ]\r\n}\r\n```\r\n\r\n### 使用第三方类库\r\n\r\n在从 npm 上安装第三方库时，一定要记得同时安装这个库的类型声明文件，我们可以从 [TypeSearch](https://www.ty pescriptlang.org/dt/search?search=) 中找到并安装这些第三方库的类型声明文件。举个例子，如果想安装 lodash 类型声明文件，我们可以运行下面的命令\r\n\r\n```js\r\nnpm install --save-dev @types/lodash\r\n```\r\n\r\n## 多页面应用\r\n\r\n### entry 配置\r\n\r\n- **单个入口（简写）语法**：`entry: string | [string]`\r\n\r\n```js\r\nmodule.exports = {\r\n  entry: './path/to/my/entry/file.js',\r\n};\r\n```\r\n\r\n```js\r\n// 多入口\r\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\r\n\r\nmodule.exports = {\r\n  mode: 'development',\r\n  plugins: [\r\n    new HtmlWebpackPlugin({\r\n      title: '多页面应用',  // 设置 title 标签，但模板的title内容需要改成 <title><%= htmlWebpackPlugin.options.title %></title>\r\n      template: './index.html',  // 设置模板\r\n      inject: 'body',  // 设置 script 标签注入哪个标签里\r\n      filename: 'chanel1/index.html',  // 设置输出 html 文件名\r\n      chunks: ['main', 'lodash'], // 默认会将 entry 里的所有入口引入\r\n      publicPath: 'http://www.b.com/'  // 设置公共路径\r\n    }),\r\n\r\n    new HtmlWebpackPlugin({\r\n      template: './index2.html',\r\n      inject: 'body',\r\n      filename: 'chanel2/index2.html',\r\n      chunks: ['main2', 'lodash'],\r\n      publicPath: 'http://www.a.com/'\r\n    })\r\n  ],\r\n\r\n  entry: {\r\n    main: {\r\n      import: ['./src/app2.js', './src/app.js'],\r\n      dependOn: 'lodash',   // 上面2个入口文件可能都用了 lodash，抽离出来\r\n      filename: 'chanel1/[name].js' // 设置打包后的输出文件\r\n    },\r\n    main2: {\r\n      import: './src/app3.js',\r\n      dependOn: 'lodash',\r\n      filename: 'chanel2/[name].js'\r\n    },\r\n    lodash: {\r\n      import: 'lodash',\r\n      filename: 'common/[name].js'\r\n    }\r\n  },\r\n\r\n  output: {\r\n    clean: true\r\n  }\r\n}\r\n```\r\n\r\n## Tree shaking\r\n\r\n`Tree Shaking` 指基于 ES Module 进行静态分析，通过 AST 将用不到的函数进行移除，从而减小打包体积。\r\n\r\n> 注意 Webpack 不能百分百安全地进行 tree-shaking。有些模块导入，只要被引入， 就会对应用程序产生重要的影响。一个很好的例子就是全局样式表，或者设置全局配 置的JavaScript 文件。\r\n>\r\n> Webpack 认为这样的文件有“副作用”。具有副作用的文件不应该做 tree-shaking， 因为这将破坏整个应用程序。\r\n>\r\n> Webpack 的设计者清楚地认识到不知道哪些文件有副作用的情况下打包代码的风 险，因此webpack4默认地将所有代码视为有副作用。这可以保护你免于删除必要的 文件，但这意味着 Webpack 的默认行为实际上是不进行 tree-shaking。值得注意的 是webpack5默认会进行 tree-shaking。 如何告诉 Webpack 你的代码无副作用，可以通过 package.json 有一个特殊的属性  sideEffects，就是为此而存在的。它有三个可能的值\r\n\r\n- **true**：如果不指定其他值的话。这意味着所有的文件都有副作用，也就是没有一个文件 可以 **tree-shaking**。\r\n- **false**：告诉 Webpack 没有文件有副作用，所有文件都可以 **tree-shaking**。\r\n- **数组[…]** ：是文件路径数组。它告诉 webpack，除了数组中包含的文件外，你的任何文件 都没有副作用。因此，除了指定的文件之外，其他文件都可以安全地进行 **treeshaking**。\r\n\r\n## 渐进式网络应用程序 PWA\r\n\r\n> **渐进式网络应用程序(progressive web application - PWA)，是一种可以提供类似于  native app(原生应用程序) 体验的 web app(网络应用程序)。PWA 可以用来做很多事。其中最重要的是，在离线(offline)时应用程序能够继续运行功能。这是通过使用 名为 Service Workers 的 web 技术来实现的。**\r\n\r\n## Shimming 预置全局变量\r\n\r\n可以通过内置的 **ProvidePlugin** 插件实现不用下载第三方包，在 webpack 编译的每个模块中，通过访问一个变量来获取一个 package。如果 webpack 看到模块中用到这个变量，它将在最终  bundle 中引入给定的 package。\r\n\r\n```js\r\nconst webpack = require('webpack')\r\nmodule.exports = {\r\n  mode: 'development',\r\n  entry: './src/index.js',\r\n  plugins: [\r\n    new webpack.ProvidePlugin({ \r\n      _: 'lodash' // 如果你遇到了至少一处用到 _ 变量的模块实例，你将 lodash package 引入进来，并将其提供给需要用到它的模块。\r\n\r\n   })\r\n ]\r\n}\r\n```\r\n\r\n还可以使用 ProvidePlugin 暴露出某个模块中单个导出，通过配置一个“数组路径”，这样就能很好的与 tree shaking 配合，将 lodash 中的其余没有用到的导出去除。\r\n\r\n```js\r\nconst webpack = require('webpack')\r\n\r\nmodule.exports = {\r\n  mode: 'development',\r\n  entry: './src/index.js',\r\n  plugins: [\r\n    new webpack.ProvidePlugin({\r\n      join: ['lodash', 'join'],\r\n   })\r\n ]\r\n}\r\n```\r\n\r\n### this 指向\r\n\r\n当模块运行在 CommonJS 上下文中，这将会变成一个问题，也就是说此时的 this 指向的是 module.exports 。在这种情况下，你可以通过使用 imports-loader 覆盖 this 指向\r\n\r\n```js\r\nnpm i imports-loader -D\r\n\r\n// webpack.config.js\r\nmodule.exports = {\r\n  // ...\r\n  module: {\r\n    rules: [\r\n      {  // 让 ./src/index.js 文件的 this 指向 window\r\n        test: require.resolve('./src/index.js'),\r\n        use: 'imports-loader?wrapper=window'\r\n      }\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\n## 创建一个小轮子\r\n\r\n### 如何构建一个 library\r\n\r\n> 除了打包应用程序，webpack 还可以用于打包 JavaScript library\r\n\r\n```js\r\n// 搭建好 webpapck 环境后，创建一个 src 文件夹 ，下有一个 indnx.js\r\nexport const add = (x, y) => {\r\n  return x + y\r\n}\r\n```\r\n\r\n```js\r\n//  webpack.config.js\r\nconst path = require(\"path\");\r\n\r\nmodule.exports = {\r\n  mode: 'production',\r\n  entry: './src/index.js',\r\n  // experiments: {  // ESM 引入暂时是一个实验性的功能，需要手动开启，还需要将 library 中的 name 属性删除\r\n  //   outputModule: true,\r\n  // },\r\n  output: {\r\n    path: path.resolve(__dirname, 'dist'),\r\n    filename: 'mylib.js',\r\n    library: {\r\n      name: 'mylib',  // 定义一个 library 名字\r\n      type: 'umd'  // 让我们的轮子可以通过 CommonJS，ASD，script src 引入\t\r\n    },\r\n    globalObject: 'globalThis' // 配置全局this\r\n  }\r\n}\r\n```\r\n\r\n### 创建一个 webpack-numbers\r\n\r\n> 假设我们正在编写一个名为 webpack-numbers 的小的 library，可以将数字 1 到 5 转换为文本表示，反之亦然，例如将 2 转换为 'two'。\r\n\r\n```js\r\n// 我们将 lodash 安装为 devDependencies 而不是 dependencies ，因为我们不需要将其打包到我们的库中，否则我们的库体积很容易变大。\r\nnpm i webpack webpack-cli lodash -D\r\n```\r\n\r\n```json\r\n// 在项目根目录下创建一个 src 文件夹，里面创建一个 ref.json\r\n[\r\n  {\r\n    \"num\": 1,\r\n    \"word\": \"One\"\r\n  },\r\n  {\r\n    \"num\": 2,\r\n    \"word\": \"Two\"\r\n  },\r\n  {\r\n    \"num\": 3,\r\n    \"word\": \"Three\"\r\n  },\r\n  {\r\n    \"num\": 4,\r\n    \"word\": \"Four\"\r\n  },\r\n  {\r\n    \"num\": 5,\r\n    \"word\": \"Five\"\r\n  },\r\n  {\r\n    \"num\": 0,\r\n    \"word\": \"Zero\"\r\n  }\r\n]\r\n```\r\n\r\n```js\r\n// src/index.js\r\nimport _ from 'lodash'\r\nimport numRef from './ref.json'\r\n\r\nexport function numToWord(num) {\r\n  return _.reduce(numRef, (accum, ref) => {\r\n    return ref.num === num ? ref.word : accum\r\n  }, '')\r\n}\r\n\r\nexport function wordToNum(word) {\r\n  return _.reduce(numRef, (accum, ref) => {\r\n    return ref.word === word && word.toLowerCase() ? ref.num : accum\r\n  }, -1)\r\n}\r\n```\r\n\r\n```js\r\n// webpack.config.js\r\nconst path = require(\"path\");\r\n\r\nmodule.exports = {\r\n  mode: 'production',\r\n  entry: './src/index.js',\r\n  output: {\r\n    path: path.resolve(__dirname, 'dist'),\r\n    filename: 'webpack-numbers.js',\r\n    library: {\r\n      name: 'webpackNumbers',\r\n      type: 'umd'\r\n    },\r\n    globalObject: 'globalThis'\r\n  },\r\n  externals: {\r\n    lodash: {\r\n      commonjs: 'lodash', //common规范中使用，其实下面一个可以不用写\r\n      commonjs2: 'lodash', \r\n      amd: 'lodash',  // amd 规范中所有\r\n      root: '_'  // 全局使用\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n```json\r\n// package.json\r\n{\r\n  // ...\r\n  \"main\": \"dist/webpack-numbers.js\", // 修改入口，修改成打包后的文件\r\n  // ... \r\n}\r\n\r\n```\r\n\r\n\r\n\r\n### 发布到 npm package上\r\n\r\n- 先在 npm 官网注册账号，点击个人图标，点击 packages 进去\r\n\r\n- 回到项目根目录打开命令行\r\n\r\n  ```js\r\n  npm config get registry  // 输入后返回下面的地址才是正确\r\n  https://registry.npmjs.org/  \r\n  \r\n  // 然后执行下面命令添加一个用户，然后输入npm官网注册的用户名\r\n  npm adduser\r\n  // 然后执行下面命令发布我们的包，成功后就可以在 npm 官网上看到并使用npm 下载\r\n  npm publish\r\n  ```\r\n\r\n## dll (动态链接库)\r\n\r\n可以通过 **webapck** 内置的 `DllPlugin`链接一些第三方库，减少 **webpack** 打包时间，下面以 `jquery` 为例\r\n\r\n```js\r\n// 在根目录下创建一个 webpack.dll.config.js 文件配置 dll\r\n// webpack.dll.config.js\r\nconst path = require(\"path\")\r\nconst webpack = require('webpack')\r\n\r\nmodule.exports = {\r\n  mode: 'production',\r\n  entry: {\r\n    jquery: ['jquery'] // 设置入口文件，这里是 jquery 包\r\n  },\r\n  output: {\r\n    filename: '[name].js',\r\n    path: path.resolve(__dirname, 'dll'),\r\n    library: '[name]_[hash]'\r\n  },\r\n  plugins: [\r\n    new webpack.DllPlugin({  // 通过 DllPlugin 配置 dll\r\n      name: '[name]_[hash]',\r\n      path: path.resolve(__dirname, 'dll/manifest.json')\r\n    })\r\n  ]\r\n}\r\n```\r\n\r\n```js\r\n// webpack.config.js\r\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\r\nconst path = require('path')\r\nconst webpack = require('webpack')\r\nconst AddAssetHtmlPlugin = require('add-asset-html-webpack-plugin') // 下载这个插件并导入，这个插件可以把 dll 文件夹也打包到 dist 文件夹里，这样打包时间又会恢复，但 jquery 第三方库单独拿出来了\r\n\r\nmodule.exports = {\r\n  mode: 'production',\r\n  entry: './src/index.js',\r\n  plugins: [\r\n    new HtmlWebpackPlugin(),\r\n    new webpack.DllReferencePlugin({ // 链接到动态链接库\r\n      manifest: path.resolve(__dirname, './dll/manifest.json')\r\n    }),\r\n    new AddAssetHtmlPlugin({\r\n      filepath: path.resolve(__dirname, './dll/jquery.js'),\r\n      publicPath: './'\r\n    })\r\n  ]\r\n}\r\n```\r\n\r\n[官方文档](https://webpack.docschina.org/concepts/)",contentRendered:'<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>Webpack 是一种前端资源构建工具，静态模块打包器 ( module bundler )。在 Webpack 看来，前端的所有资源文件 ( js / json / css / img / less / … ) 都会作为模块处理。它将根据模块的依赖关系进行静态分析，打包生成对应的静态资源 ( module )。</p>\n</div>\n<h2 id="基础使用" tabindex="-1"><a class="header-anchor" href="#基础使用" aria-hidden="true">#</a> 基础使用</h2>\n<ul>\n<li>\n<p>安装</p>\n<p>首先使用 npm init -y 初始化项目，然后安装 webpack 以及 webpack-cli</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 本地安装(推荐)</span>\nnpm i webpack webpack<span class="token operator">-</span>cli <span class="token operator">-</span><span class="token constant">D</span>\n<span class="token comment">// 运行 webpack</span>\nnpx webpack\n<span class="token comment">// 查看打包详细信息</span>\nnpx webpack <span class="token operator">--</span>stats detailed\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li>\n</ul>\n<h2 id="自定义-webpack-配置" tabindex="-1"><a class="header-anchor" href="#自定义-webpack-配置" aria-hidden="true">#</a> 自定义 webpack 配置</h2>\n<p>实际上，<code>webpack-cli</code>给我们提供了丰富的终端命令行指令，可以通过 <code>webpack --help</code>来查看</p>\n<ul>\n<li>\n<p>指定入口文件和mode</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// entry 命令后面就是指定的入口文件，mode 后面就是指定的 mode 通过选择 development(开发环境), production(生产环境) 或 none 之中的一个，来设置 mode 参数，你可以启用 webpack 内置在相应环境下的优化。其默认值为 production。</span>\nnpx webpack <span class="token operator">--</span>entry <span class="token punctuation">.</span><span class="token operator">/</span>src<span class="token operator">/</span>index<span class="token punctuation">.</span>js <span class="token operator">--</span>mode production\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li>\n</ul>\n<h2 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件" aria-hidden="true">#</a> 配置文件</h2>\n<p>在文件根目录下新建 <code>webpack.config.js</code> 配置文件</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// webpack.config.js</span>\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">\'./src/index.js\'</span><span class="token punctuation">,</span> <span class="token comment">// 设置入口文件</span>\n\n  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token comment">// 设置出口</span>\n    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">\'bundle.js\'</span><span class="token punctuation">,</span> <span class="token comment">// 设置打包后的文件名</span>\n    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'./dist\'</span><span class="token punctuation">)</span>  <span class="token comment">// 文件输出路径。例：会生成一个dist文件夹</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">\'none\'</span> <span class="token comment">// 设置 mode 模式</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// index.html</span>\n<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span>\n<span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span>\n<span class="token operator">&lt;</span>head<span class="token operator">></span>\n  <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span>meta http<span class="token operator">-</span>equiv<span class="token operator">=</span><span class="token string">"X-UA-Compatible"</span> content<span class="token operator">=</span><span class="token string">"IE=edge"</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span>title<span class="token operator">></span>Hello<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>\n<span class="token operator">&lt;</span>body<span class="token operator">></span>\n  <span class="token comment">// 在 script 标签里手动引入打包后的文件，打开html，就可以运行打包后文件里的方法了</span>\n  <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"./dist/bundle.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h2 id="自动引入资源" tabindex="-1"><a class="header-anchor" href="#自动引入资源" aria-hidden="true">#</a> 自动引入资源</h2>\n<p>首先安装插件：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>npm i html<span class="token operator">-</span>webpack<span class="token operator">-</span>plugin <span class="token operator">-</span><span class="token constant">D</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>调整 <code>webpack.config.js</code>配置文件：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'html-webpack-plugin\'</span><span class="token punctuation">)</span> <span class="token comment">// 引入插件</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">\'./src/index.js\'</span><span class="token punctuation">,</span>\n\n  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">\'bundle.js\'</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'./dist\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">clean</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token comment">// 清理在打包过程中清理上一次打包中没有用的内容</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">\'none\'</span><span class="token punctuation">,</span>\n\n  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token comment">// 在 plugins 配置项里配置webpack插件</span>\n    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    \n      <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">\'./index.html\'</span><span class="token punctuation">,</span> <span class="token comment">// 指定模板</span>\n      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">\'app.html\'</span><span class="token punctuation">,</span>   <span class="token comment">// 指定打包后的文件夹里的 html 文件名</span>\n      <span class="token literal-property property">inject</span><span class="token operator">:</span> <span class="token string">\'body\'</span>    <span class="token comment">//  指定在生成的 html 文件里的 body 标签里生成 script 标签</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h2 id="使用-source-map" tabindex="-1"><a class="header-anchor" href="#使用-source-map" aria-hidden="true">#</a> 使用 source map</h2>\n<p>当<code>webpack</code>打包源代码时，可能会很难追踪到error(错误)和warning(警告)在源代码中的原始位置。例如，如果将三个源文件（ <code>a.js</code> , <code>b.js</code>和<code>c.js</code>）打包到一个bundle ( <code>bundle.js</code> ）中，而其中一个源文件包含一个错误，那么堆栈跟踪就会直接指向到 bundle.js。你可能需要准确地知道错误来自于哪个源文件，所以这种提示这通常不会提供太多帮助。\n为了更容易地追踪error和 warning，JavaScript提供了<code>source maps</code> 功能，可以将编译后的代码映射回原始源代码。如果一个错误来自于b.js , source map就会明确的告诉你。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">\'development\'</span><span class="token punctuation">,</span> <span class="token comment">// 设置 mode 为开发环境</span>\n\n  <span class="token literal-property property">devtool</span><span class="token operator">:</span> <span class="token string">\'cheap-module-source-map\'</span><span class="token punctuation">,</span> <span class="token comment">// 在开发模式下追踪代码</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 配置好后，如果有错误或者警告，打开浏览器控制台就能准确知道报错位置</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="使用-watch-mode-观察模式" tabindex="-1"><a class="header-anchor" href="#使用-watch-mode-观察模式" aria-hidden="true">#</a> 使用 watch mode(观察模式)</h2>\n<p>在每次编译代码时，手动运行<code>npx webpack</code>会显得很麻烦。\n我们可以在webpack启动时添加&quot;watch”参数。如果其中一个文件被更新，代码将被重新编译，所以你不必再去手动运行整个构建。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>npx webpack <span class="token operator">--</span>watch\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="使用-webpack-dev-server" tabindex="-1"><a class="header-anchor" href="#使用-webpack-dev-server" aria-hidden="true">#</a> 使用 webpack-dev-server</h2>\n<p><code>webpack-dev-server</code> 为你提供了一个基本的web server，并且具有live reloading(实时重新加载)功能</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 先下载</span>\nnpm i webpack<span class="token operator">-</span>dev<span class="token operator">-</span>server <span class="token operator">-</span><span class="token constant">D</span>\n\n<span class="token comment">// webpack.config.js</span>\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token comment">// 配置 webpack-dev-server</span>\n    <span class="token keyword">static</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'./dist\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 告诉 dev server ，从什么位置查找文件</span>\n    <span class="token literal-property property">compress</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 设置是否在服务器中进行代码压缩，减少传输的大小</span>\n    <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">3000</span><span class="token punctuation">,</span> <span class="token comment">// 设置端口号</span>\n    <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token comment">// 可以设置一些头部给浏览器</span>\n      <span class="token string-property property">\'X-Access-Token\'</span><span class="token operator">:</span> <span class="token string">\'abc123\'</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 设置代理</span>\n      <span class="token string-property property">\'/api\'</span><span class="token operator">:</span> <span class="token string">\'http://localhost:9000\'</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">// https: true,  如果想将本地http服务变成https服务，但是访问时浏览器会报是不安全的，因为我们默认使用的是自签名证书</span>\n    <span class="token literal-property property">http2</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment">// 如果想开启http2, http2 自带 https 证书</span>\n    <span class="token literal-property property">historyApiFallback</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token comment">// 如果我们的应用是个SPA(单页面应用)，例 当路由到/some时(可以直接在地址栏里输入)，会发现此时刷新页面后，控制台会报错。开启 historyApiFallback 配置就不会报错了</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 运行 webpack-dev-server</span>\nnpx webpack<span class="token operator">-</span>dev<span class="token operator">-</span>server serve\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h2 id="资源模块" tabindex="-1"><a class="header-anchor" href="#资源模块" aria-hidden="true">#</a> 资源模块</h2>\n<p>资源模块(asset module)是一种模块类型，它允许使用资源文件（字体，图标等）而无需配置额外 loader。</p>\n<p>资源模块类型(asset module type)，通过添加 4 种新的模块类型，来替换所有这些 loader：</p>\n<ul>\n<li><code>asset/resource</code> 发送一个单独的文件并导出 URL。之前通过使用 <code>file-loader</code> 实现。</li>\n<li><code>asset/inline</code> 导出一个资源的 data URL。之前通过使用 <code>url-loader</code> 实现。</li>\n<li><code>asset/source</code> 导出资源的源代码。之前通过使用 <code>raw-loader</code> 实现。</li>\n<li><code>asset</code> 在导出一个 data URI 和发送一个单独的文件之间自动选择。之前通过使用 <code>url-loader</code>，并且配置资源体积限制实现。</li>\n</ul>\n<p>当在 webpack 5 中使用旧的 assets loader（如 <code>file-loader</code>/<code>url-loader</code>/<code>raw-loader</code> 等）和 asset 模块时，你可能想停止当前 asset 模块的处理，并再次启动处理，这可能会导致 asset 重复，你可以通过将 asset 模块的类型设置为 <code>\'javascript/auto\'</code> 来解决。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">\'./src/index.js\'</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">\'bundle.js\'</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'./dist\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">clean</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token comment">// 第一种设置输出资源时，资源的名字，会随机生成哈希值</span>\n    <span class="token literal-property property">assetModuleFilename</span><span class="token operator">:</span> <span class="token string">\'images/[contenthash][ext]\'</span> \n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">// ... </span>\n  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token comment">// 在 module 对象里配置模块， rules 配置项里配置规则</span>\n    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.png$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">// 以 png 为扩展名的文件</span>\n        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">\'asset/resource\'</span><span class="token punctuation">,</span>  <span class="token comment">// 使用 asset/resource 类型，打包后的文件夹里，会输出一张图片，在控制台上看，img标签的src是一个本地链接</span>\n        <span class="token literal-property property">generator</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token comment">// 第二种设置输出资源时，资源的名字，会随机生成哈希值，generator 优先级高于 output </span>\n          <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">\'images/[contenthash][ext]\'</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n      <span class="token punctuation">{</span>\n        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.svg$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">\'asset/inline\'</span>  <span class="token comment">// 使用 asset/resource 类型，不会在打包后的文件夹里生成图片，在控制台上看，img标签的src是一个data URL</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n      <span class="token punctuation">{</span>\n        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.txt$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">\'asset/source\'</span> <span class="token comment">// 例： 会将 txt 文件的内容提取出来，我们可以在 js 文件中导入，并放入 div 中</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n      <span class="token punctuation">{</span>\n        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.jpg$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">\'asset\'</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">parser</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token literal-property property">dataUrlCondition</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token literal-property property">maxSize</span><span class="token operator">:</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token comment">// 自动地在resource和 inline 之间进行选择: webpack默认条件，小于8kb的文件，将会视为inline模块类型,否则会被视为resource模块类型。可以在 dataUrlCondition 修改</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br></div></div><h2 id="loader-预处理加载器" tabindex="-1"><a class="header-anchor" href="#loader-预处理加载器" aria-hidden="true">#</a> Loader(预处理加载器)</h2>\n<p>Webpack 支持使用 <a href="https://webpack.docschina.org/concepts/loaders" target="_blank" rel="noopener noreferrer">loader<ExternalLinkIcon/></a> 对文件进行预处理。你可以构建包括 JavaScript 在内的任何静态资源。并且可以使用 Node.js 轻松编写自己的 loader。</p>\n<p><a href="https://webpack.docschina.org/configuration/module/#modulerules" target="_blank" rel="noopener noreferrer"><code>module.rules</code><ExternalLinkIcon/></a> 允许你在 webpack 配置中指定多个 loader。 这种方式是展示 loader 的一种简明方式，并且有助于使代码变得简洁和易于维护。同时让你对各个 loader 有个全局概览：</p>\n<p>loader 从右到左（或从下到上）地取值(evaluate)/执行(execute)。在下面的示例中，从 sass-loader 开始执行，然后继续执行 css-loader，最后以 style-loader 为结束。查看 <a href="https://webpack.docschina.org/concepts/loaders/#loader-features" target="_blank" rel="noopener noreferrer">loader 功能<ExternalLinkIcon/></a> 章节，了解有关 loader 顺序的更多信息。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span> <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">\'style-loader\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">{</span>\n            <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n            <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n              <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">{</span> <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">\'sass-loader\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h2 id="抽离和压缩css" tabindex="-1"><a class="header-anchor" href="#抽离和压缩css" aria-hidden="true">#</a> 抽离和压缩css</h2>\n<p>在多数情况下，我们也可以进行压缩CSS，以便在生产环境中节省加载时间，同时还可以将CSS文件抽离成一个单独的文件。实现这个功能，需要<code>mini-css-extract-plugin</code>这个插件来帮忙，本插件会将CSS提取到单独的文件中，为每个包含CSS的JS文件创建一个cSS文件，并且支持CSS和Source Maps 的按需加载。\n本插件基于webpack v5的新特性构建，并且需要webpack 5才能正常工作。之后将loader 与 plugin添加到你的 webpack配置文件中</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 下载</span>\nnpm i mini<span class="token operator">-</span>css<span class="token operator">-</span>extract<span class="token operator">-</span>plugin <span class="token operator">-</span><span class="token constant">D</span>\nnpm i css<span class="token operator">-</span>minimizer<span class="token operator">-</span>webpack<span class="token operator">-</span>plugin <span class="token operator">-</span><span class="token constant">D</span>\n<span class="token comment">// webpack.config.js</span>\n<span class="token keyword">const</span> MiniCssExtractPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'mini-css-extract-plugin\'</span><span class="token punctuation">)</span>  <span class="token comment">// 第一步引入抽离css插件</span>\n<span class="token keyword">const</span> CssMinimizerPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'css-minimizer-webpack-plugin\'</span><span class="token punctuation">)</span>   <span class="token comment">// 第一步引入引入压缩css插件</span>\n<span class="token keyword">const</span> toml <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'toml\'</span><span class="token punctuation">)</span>  <span class="token comment">// 处理toml 文件的插件</span>\n<span class="token keyword">const</span> yaml <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'yaml\'</span><span class="token punctuation">)</span>  <span class="token comment">// 处理yaml 文件的插件</span>\n<span class="token keyword">const</span> json5 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'json5\'</span><span class="token punctuation">)</span>  <span class="token comment">// 处理 json5 文件的插件</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ... </span>\n  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">\'production\'</span><span class="token punctuation">,</span> <span class="token comment">// 使用压缩css插件，修改 mode 为生产环境</span>\n    \n  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">\'./index.html\'</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">\'app.html\'</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">inject</span><span class="token operator">:</span> <span class="token string">\'body\'</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    \n    <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token comment">// 第二步，在 plugins 引入配置</span>\n      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">\'styles/[contenthash].css\'</span> <span class="token comment">//配置打包后的文件名</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n\n  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(css|less)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">// 以css或less后缀的文件</span>\n<span class="token comment">//第三步，style-loader 替换成 MiniCssExtractPlugin.loader</span>\n        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span> <span class="token string">\'less-loader\'</span><span class="token punctuation">]</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n      <span class="token punctuation">{</span>\n        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(woff|woff2|eot|ttf|otf)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">// 字体资源</span>\n        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">\'asset/resource\'</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n      <span class="token punctuation">{</span>\n        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(csv|tsv)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>  <span class="token comment">// 其他资源文件，例如csv，tsv</span>\n        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token string">\'csv-loader\'</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n      <span class="token punctuation">{</span>\n        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.xml$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>  <span class="token comment">// 处理 xml 资源文件</span>\n        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token string">\'xml-loader\'</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n      <span class="token punctuation">{</span>\n        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.toml$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">\'json\'</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">parser</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token literal-property property">parse</span><span class="token operator">:</span> toml<span class="token punctuation">.</span>parse\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n      <span class="token punctuation">{</span>\n        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.yaml$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">\'json\'</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">parser</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token literal-property property">parse</span><span class="token operator">:</span> yaml<span class="token punctuation">.</span>parse\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n      <span class="token punctuation">{</span>\n        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.json5$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">\'json\'</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">parser</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token literal-property property">parse</span><span class="token operator">:</span> json5<span class="token punctuation">.</span>parse\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n  <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 在 optimization 优化配置里配置css压缩插件</span>\n    <span class="token literal-property property">minimizer</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token keyword">new</span> <span class="token class-name">CssMinimizerPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br></div></div><h2 id="babel-loader" tabindex="-1"><a class="header-anchor" href="#babel-loader" aria-hidden="true">#</a> babel-loader</h2>\n<p>作用：将 ES6 的代码转译成低版本浏览器支持的 ES5</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 下载</span>\nnpm i babel<span class="token operator">-</span>loader @babel<span class="token operator">/</span>core @babel<span class="token operator">/</span>preset<span class="token operator">-</span>env <span class="token operator">-</span><span class="token constant">D</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>在 webpack 配置对象中，需要将 babel-loader 添加到 module 列表中，就像下面这样：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n      <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">{</span> \n        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">\'babel-loader\'</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">// 排除node_modules 里的js</span>\n        <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>  \n          <span class="token literal-property property">presets</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'@babel/preset-env\'</span><span class="token punctuation">]</span> <span class="token comment">// 在 options 里配置预设</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>此时执行编译，在浏览器里打开项目发现报了一个致命错误:  regeneratorRuntime is not defined这个错误显然是未能正确配置babel。regeneratorRuntime 是webpack打包生成的全局辅助函数，由babel生成，用于兼容async/await的语法。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 正确配置,第一步下载插件</span>\nnpm install <span class="token operator">--</span>save @babel<span class="token operator">/</span>runtime  <span class="token comment">// 这个包中包含了regeneratorRuntime 运行时需要</span>\nnpm install <span class="token operator">--</span>save<span class="token operator">-</span>dev @babel<span class="token operator">/</span>plugin<span class="token operator">-</span>transform<span class="token operator">-</span>runtime <span class="token comment">// 这个插件会在需要 regeneratorRuntime 的地方自动 require 导包</span>\n\n<span class="token comment">// 第二步，修改 webpack.config.js 配置</span>\n<span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n      <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(node_modules|bower_components)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> \n      <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">{</span> \n        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">\'babel-loader\'</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>  \n          <span class="token literal-property property">presets</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'@babel/preset-env\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n          <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n              <span class="token punctuation">[</span>\n                <span class="token string">\'@babel/plugin-transform-runtime\'</span>\n              <span class="token punctuation">]</span>\n            <span class="token punctuation">]</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h2 id="代码分离" tabindex="-1"><a class="header-anchor" href="#代码分离" aria-hidden="true">#</a> 代码分离</h2>\n<p>代码分离是 webpack 中最引人注目的特性之一。此特性能够把代码分离到不同的 bundle 中，然后可以按需加载或并行加载这些文件。代码分离可以用于获取更小的 bundle，以及控制资源加载优先级，如果使用合理，会极大影响加载时间。</p>\n<p>常用的代码分离方法有三种：</p>\n<ul>\n<li><strong>入口起点</strong>：使用 <a href="https://webpack.docschina.org/configuration/entry-context" target="_blank" rel="noopener noreferrer"><code>entry</code><ExternalLinkIcon/></a> 配置手动地分离代码。</li>\n<li><strong>防止重复</strong>：使用 <a href="https://webpack.docschina.org/configuration/entry-context/#dependencies" target="_blank" rel="noopener noreferrer">Entry dependencies<ExternalLinkIcon/></a> 或者 <a href="https://webpack.docschina.org/plugins/split-chunks-plugin" target="_blank" rel="noopener noreferrer"><code>SplitChunksPlugin</code><ExternalLinkIcon/></a> 去重和分离 chunk。</li>\n<li><strong>动态导入</strong>：通过模块的内联函数调用来分离代码。</li>\n</ul>\n<p>更具体的请参考<a href="https://webpack.docschina.org/guides/code-splitting#root" target="_blank" rel="noopener noreferrer">官方文档<ExternalLinkIcon/></a></p>\n<h2 id="拆分生产环境和开发环境" tabindex="-1"><a class="header-anchor" href="#拆分生产环境和开发环境" aria-hidden="true">#</a> 拆分生产环境和开发环境</h2>\n<h3 id="公共路径" tabindex="-1"><a class="header-anchor" href="#公共路径" aria-hidden="true">#</a> 公共路径</h3>\n<p><a href="https://webpack.docschina.org/configuration/output/#outputpublicpath" target="_blank" rel="noopener noreferrer"><code>publicPath</code><ExternalLinkIcon/></a> 配置选项在各种场景中都非常有用。你可以通过它来指定应用程序中所有资源的基础路径。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// webpack.config.js</span>\nmodule<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">env</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n   <span class="token comment">// 项目中所有引入的资源前缀都改成了下面的公共路径</span>\n      <span class="token literal-property property">publicPath</span><span class="token operator">:</span> <span class="token string">\'http://localhost:8080/\'</span> <span class="token comment">// 配置公共路径</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="环境变量" tabindex="-1"><a class="header-anchor" href="#环境变量" aria-hidden="true">#</a> 环境变量</h3>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 设置了一个环境变量, production 为 true</span>\nnpx webpack <span class="token operator">--</span>env production<span class="token operator">=</span><span class="token boolean">true</span>\n<span class="token comment">// 改造 webpack.config.js</span>\nmodule<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">env</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span> <span class="token comment">// 改造成一个函数，拿到 env 参数</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n    <span class="token literal-property property">mode</span><span class="token operator">:</span> env<span class="token punctuation">.</span>production <span class="token operator">?</span> <span class="token string">\'production\'</span> <span class="token operator">:</span> <span class="token string">\'development\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="拆分配置文件" tabindex="-1"><a class="header-anchor" href="#拆分配置文件" aria-hidden="true">#</a> 拆分配置文件</h3>\n<p>如果配置文件中，都通过三元运算符的方式来进行配置，显然特别糟糕，我们可以拆分配置文件</p>\n<ol>\n<li>\n<p>在项目根目录中创建一个 config 文件夹，文件夹下创建 <code>webpack.config.dev.js</code> ,  <code>webpack.config.prod,js</code> 文件</p>\n</li>\n<li>\n<p>如果将<code>module.exports</code>配置文件改成了函数形式，还原到原来的 <code>module.exports = { }</code></p>\n</li>\n</ol>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 通过 npx webpack -c 指定配置文件</span>\nnpx webpack <span class="token operator">-</span>c <span class="token punctuation">.</span><span class="token operator">/</span>config<span class="token operator">/</span>webpack<span class="token punctuation">.</span>config<span class="token punctuation">.</span>dev<span class="token punctuation">.</span>js\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="合并配置文件" tabindex="-1"><a class="header-anchor" href="#合并配置文件" aria-hidden="true">#</a> 合并配置文件</h3>\n<p>开发配置文件和生产配置文件中，有很多相同的代码，我们可以创建一个 <code>webpack.config.commin.js</code>文件提取出来，并合并配置文件</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 第一步下载webpack-merge</span>\nnpm i webpack<span class="token operator">-</span>merge <span class="token operator">-</span><span class="token constant">D</span>\n<span class="token comment">// 第二步：在根目录 config 文件夹下创建一个 webpack.config.js</span>\n\n<span class="token comment">// 第三步 webpack.config.js</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> merge <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack-merge\'</span><span class="token punctuation">)</span> <span class="token comment">// 导入</span>\n<span class="token comment">// 导入三个配置文件</span>\n<span class="token keyword">const</span> commonConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./webpack.config.common\'</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> productionConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./webpack.config.prod\'</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> developmentConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./webpack.config.dev\'</span><span class="token punctuation">)</span>\n<span class="token comment">// 如果用户传入的环境变量里有development，则是开发配置合并公共配置</span>\nmodule<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">env</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">switch</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">case</span> env<span class="token punctuation">.</span>development<span class="token operator">:</span>\n      <span class="token keyword">return</span> <span class="token function">merge</span><span class="token punctuation">(</span>commonConfig<span class="token punctuation">,</span> developmentConfig<span class="token punctuation">)</span>\n\n    <span class="token keyword">case</span> env<span class="token punctuation">.</span>production<span class="token operator">:</span>\n      <span class="token keyword">return</span> <span class="token function">merge</span><span class="token punctuation">(</span>commonConfig<span class="token punctuation">,</span> productionConfig<span class="token punctuation">)</span>\n\n    <span class="token literal-property property">defult</span><span class="token operator">:</span>\n      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">\'No matching configuration was found\'</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h2 id="模块热替换与热加载" tabindex="-1"><a class="header-anchor" href="#模块热替换与热加载" aria-hidden="true">#</a> 模块热替换与热加载</h2>\n<blockquote>\n<p>模块热替换(HMR - hot module replacement)功能会在应用程序运行过程中，替换、添加或删除 <a href="https://webpack.docschina.org/concepts/modules/" target="_blank" rel="noopener noreferrer">模块<ExternalLinkIcon/></a>，而无需重新加载整个页面。主要是通过以下几种方式，来显著加快开发速度：</p>\n</blockquote>\n<ul>\n<li>保留在完全重新加载页面期间丢失的应用程序状态。</li>\n<li>只更新变更内容，以节省宝贵的开发时间。</li>\n<li>在源代码中 CSS/JS 产生修改时，会立刻在浏览器中进行更新，这几乎相当于在浏览器 devtools 直接更改样式。</li>\n</ul>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 开启webpack的热模块替换特性，需要配置devServer.hot参数:</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">hot</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment">// 默认开启热替换</span>\n    <span class="token literal-property property">liveReload</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">// 默认开启热加载</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="eslint" tabindex="-1"><a class="header-anchor" href="#eslint" aria-hidden="true">#</a> eslint</h2>\n<p><code>eslint</code>是用来扫描我们所写的代码是否符合规范的工具。 往往我们的项目是多人协作 开发的，我们期望统一的代码规范，这时候可以让eslint来对我们进行约束。 严格意义上来说，eslint配置跟webpack无关，但在工程化开发环境中，它往往是不可或缺的。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 下载</span>\nnpm i eslint <span class="token operator">-</span><span class="token constant">D</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>配置<code>eslint</code>，只需要在根目录下添加一个.eslintrc文件(或者.eslintrc.json, .js等)。当然，我们可以使用<code>eslint</code>工具来自动生成它：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>npx eslint <span class="token operator">--</span>init\n<span class="token comment">// 第一种只检查语法  第二种检查语法并发现问题  第三种检查语法发现问题并规范格式，我们通常选择第三种</span>\n✔ How would you like to use ESLint<span class="token operator">?</span> · syntax\n<span class="token comment">// 选择模块化语法，这里选择ESM</span>\n✔ What type <span class="token keyword">of</span> modules does your project use<span class="token operator">?</span> · esm\n<span class="token comment">// 选择是使用react还是vue,或者什么都没有</span>\n✔ Which framework does your project use<span class="token operator">?</span> · react\n<span class="token comment">// 项目中使用TS吗</span>\n✔ Does your project use TypeScript<span class="token operator">?</span> · No <span class="token operator">/</span> Yes\n<span class="token comment">// 代码运行在哪里，browser浏览器，还是node后端</span>\n✔ Where does your code run<span class="token operator">?</span> · browser\n<span class="token comment">// 使用哪种方式配置规范，流行式/一问一答/导入自有的文件，这里选择的是第一种</span>\n✔ How would you like to define a style <span class="token keyword">for</span> your project<span class="token operator">?</span> · guide \n<span class="token comment">// 选择哪一种流行规范</span>\n✔ which stvle quide <span class="token keyword">do</span> vou want to follow<span class="token punctuation">.</span> airbnb\n<span class="token comment">// 配置文件放在什么地方</span>\n✔ What format <span class="token keyword">do</span> you want your config file to be <span class="token keyword">in</span><span class="token operator">?</span> · <span class="token constant">JSON</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><div class="language-json ext-json line-numbers-mode"><pre v-pre class="language-json"><code><span class="token comment">// .eslintrc.json</span>\n<span class="token punctuation">{</span>\n    <span class="token property">"env"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 指定脚本的运行环境。每种环境都有一组特定的预定义全局变量。此处使用的 browser 预定义了浏览器环境中的全局变量，es6 启用除了 modules 以外的所有 ECMAScript 6 特性（该选项会自动设置 ecmaVersion 解析器选项为 6）。    </span>\n        <span class="token property">"browser"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        <span class="token property">"es2021"</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">// 支持es2021</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token property">"extends"</span><span class="token operator">:</span> <span class="token punctuation">[</span>  <span class="token comment">// 检测中使用的预定义的规则集合。</span>\n        <span class="token string">"airbnb-base"</span>  <span class="token comment">// 可以使用这个扩展文件来帮我们  检查文件</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token property">"parserOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">"ecmaVersion"</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>  \n        <span class="token property">"sourceType"</span><span class="token operator">:</span> <span class="token string">"module"</span>  <span class="token comment">// 类型为 module</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token property">"rules"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">"no-console"</span><span class="token operator">:</span> <span class="token number">0</span>  <span class="token comment">// 关闭不允许使用 console 规则</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token property">"globals"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h3 id="结合webpack使用" tabindex="-1"><a class="header-anchor" href="#结合webpack使用" aria-hidden="true">#</a> 结合webpack使用</h3>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(js|jsx)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        exclude<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node-modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'babel-loader\'</span><span class="token punctuation">,</span> <span class="token string">\'eslint-loader\'</span><span class="token punctuation">]</span>\n   <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="git-hooks-与-husky" tabindex="-1"><a class="header-anchor" href="#git-hooks-与-husky" aria-hidden="true">#</a> git-hooks 与 husky</h2>\n<p>为了保证团队里的开发人员提交的代码符合规范，我们可以在开发者上传代码时进行 校验。 我们常用 <code>husky</code> 来协助进行代码提交时的 <code>eslint</code> 校验。在使用<code>husky</code>之前， 我们先来研究一下 <code>git-hooks</code> 。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>初始化项目 git init\n在项目里运行 ls <span class="token operator">-</span>la 命令 我们可以看到，存在一个<span class="token string">".git"</span>名称的文件夹。事实上，在我们项目中根目录下运行git命令时，git 会根据它来工作。\ncd <span class="token punctuation">.</span>git  \ncd hooks\nls <span class="token operator">-</span>la  <span class="token comment">// 进入到 hooks 文件夹里，可以看到有很多 sample 文件</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="提交代码前进行-eslist-检测" tabindex="-1"><a class="header-anchor" href="#提交代码前进行-eslist-检测" aria-hidden="true">#</a> 提交代码前进行 eslist 检测</h3>\n<p>我们需要使用<code>git hooks</code>里的 <code>pre-commit.sample</code> 文件里的方法</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// cat命令可以查看一个文件的内容</span>\ncat pre<span class="token operator">-</span>commit<span class="token punctuation">.</span>sample\n<span class="token comment">// 我们可以看到这样一句话，大概意思是要启用这个钩子的话，我们就把这个文件的后缀名去掉。</span>\nTo enable <span class="token keyword">this</span> hook<span class="token punctuation">,</span> rename <span class="token keyword">this</span> file to <span class="token string">"pre-commit"</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>虽然这样对我们本地来讲是可行的，但要注意，<code>.git</code>文件夹的改动无法同步到远端仓库。所以我们期望将<code>git-hook</code>的执行权移交到外面来。我们回到项目的根目录下，然后我们新建一个文件夹，暂时命名 为<code>.mygithooks</code>然后在此文件夹下，新增一个<code>git-hook</code>文件,命名为<code>pre-commit</code>，并写入以下内容：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>npx eslint <span class="token punctuation">.</span><span class="token operator">/</span>src  \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>我们新建了自己的<code>git-hook</code>，但此时 git 并不能识别。下面我们执行这行命令</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 项目根目录下</span>\ngit config core<span class="token punctuation">.</span>hooksPath <span class="token punctuation">.</span>mygithooks\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>上述命令给我们自己的文件，配置了<code>git-hook</code>的执行权限。 但这个时候我们<code>git commit</code>的话，可能会报这样的警告，并且没有执行我们的 shell</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token literal-property property">hint</span><span class="token operator">:</span> The <span class="token string">\'pre-commit\'</span> hook was ignored because it\'s not <span class="token keyword">set</span> <span class="token keyword">as</span> \nexecutable<span class="token punctuation">.</span>\n\n<span class="token literal-property property">hint</span><span class="token operator">:</span> You can disable <span class="token keyword">this</span> warning <span class="token keyword">with</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">git config \nadvice.ignoredHook false</span><span class="token template-punctuation string">`</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>这是因为我们的操作系统没有给出这个文件的可执行权限。 因此我们得再执行这样一句命令</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>chmod +x .mygithooks/pre-commit\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>现在我们执行 <code>git commit</code> 会先执行 <code>npx eslint ./src</code> 命令，进行 <code>eslist</code> 检测</p>\n<h3 id="使用-husky-进行代码提交前-eslist-检测" tabindex="-1"><a class="header-anchor" href="#使用-husky-进行代码提交前-eslist-检测" aria-hidden="true">#</a> 使用 husky 进行代码提交前 eslist 检测</h3>\n<p>husky在升级到7.x后，做了跟我们上述同样的事。 安装它之前，我们需要在package.json中的script里，先添加</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token string-property property">"sctript"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n    <span class="token string">"prepare"</span><span class="token operator">:</span> <span class="token string">"husky install"</span>  <span class="token comment">// prepare是一个npm钩子，意思是安装依赖的时候，会先执行husky install命令。这个命令就做了上述的123这三件事！</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 下载 husky</span>\nnpm i husky <span class="token operator">-</span><span class="token constant">D</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>我们安装了7.x的<code>husky</code>会发现，项目根目录下生成了<code>.husky</code>的文件夹。 当然，7.x的<code>husky</code>似乎是有bug的，如果不能正常使用，那么我们只需要验证两件事</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 第一件事：是否移交了git-hook的配置权限，执行命令 "git config --list"查看core.hooksPath配置是否存在，是否正确指向了.husky。如果没有，我们只需要手动的给加上就行：</span>\ngit config core<span class="token punctuation">.</span>hooksPath <span class="token punctuation">.</span>husky\n<span class="token comment">// 第二件事：是否是可执行文件，如果没有，手动加上</span>\nchmod <span class="token operator">+</span>x <span class="token punctuation">.</span>mygithooks<span class="token operator">/</span>pre<span class="token operator">-</span>commit \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>然后我们在<code>.husky</code>文件夹下创建一个文件命名为<code>pre-commit</code>，</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>// pre-commit\nnpx eslint ./src  \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>现在我们进行 <code>git commit</code> 提交，<code>husky</code>就会进行 <code>eslist</code> 检测</p>\n<h2 id="webpack-模块与解析原理" tabindex="-1"><a class="header-anchor" href="#webpack-模块与解析原理" aria-hidden="true">#</a> Webpack 模块与解析原理</h2>\n<ul>\n<li>\n<p><strong>Webpack 模块</strong>：所有能被引入的都可以当成一个模块，\n例如：ESM，CommonJS，AMD，css/scss/less 文件中的 @import 语句</p>\n</li>\n<li>\n<p><strong>解析原理</strong>：</p>\n<ol>\n<li>\n<p>webpack 通过 Resolvers 实现了模块解析，它是基 enhanced-resolve 这个包实现的</p>\n</li>\n<li>\n<p>通过内置的 <strong>enhanced-resolve</strong> 可以解析<strong>绝对路径</strong>，<strong>相对路径</strong>，<strong>模块路径</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// webpack.config.js</span>\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  resolve<span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token comment">// 可以通过 resolve 里的 alias 配置项配置自定义路径</span>\n    alias<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token string">"@utils"</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'src/utils/\'</span><span class="token punctuation">)</span>\n   <span class="token punctuation">}</span><span class="token punctuation">,</span>\n <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></li>\n<li>\n<p>如果遇到一个文件夹下有相同名称不同类型的文件（<strong>main.js</strong>，<strong>main.json</strong>），例如通过 <strong>import</strong> 导入时，没有写明导入文件夹哪个 <strong>main</strong> 文件，<strong>webpack</strong> 会默认导入 <strong>js</strong> 文件</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// webpack会按照数组顺序去解析这些后缀名，对于同名的文件，webpack总是会先解析列在数组首位的后缀名的文件。</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  resolve<span class="token operator">:</span> <span class="token punctuation">{</span>\n    extensions<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'.js\'</span><span class="token punctuation">,</span> <span class="token string">\'.json\'</span><span class="token punctuation">,</span> <span class="token string">\'.wasm\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li>\n</ol>\n</li>\n</ul>\n<h2 id="外部扩展" tabindex="-1"><a class="header-anchor" href="#外部扩展" aria-hidden="true">#</a> 外部扩展</h2>\n<p>有时候我们为了减小打包后的体积，从而把一些不变的第三方库用cdn的形式引入进来，比如jQuery</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> \n  <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.js<span class="token punctuation">"</span></span>\n<span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>这个时候我们想在我们的代码里使用引入的<strong>jquery</strong>———但似乎三种模块引入方式都 不行，这时候怎么办呢？ webpack给我们提供了<strong>Externals</strong>的配置属性，让我们可以 配置外部扩展模块</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  externals<span class="token operator">:</span> <span class="token punctuation">{</span>\n    jquery<span class="token operator">:</span> <span class="token string">\'jQuery\'</span><span class="token punctuation">,</span> <span class="token comment">// key的名必须和你引入的名一样，value 是暴露在window上</span>\n <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// index.js</span>\n<span class="token keyword">import</span> $ <span class="token keyword">from</span> <span class="token string">\'jquery\'</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>$<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="依赖图" tabindex="-1"><a class="header-anchor" href="#依赖图" aria-hidden="true">#</a> 依赖图</h2>\n<p>每当一个文件依赖另一个文件时，webpack 会直接将文件视为存在依赖关系。 这使 得 webpack 可以获取非代码资源，如 images 或 web 字体等。并会把它们作为 依 赖 提供给应用程序。 当 webpack 开始工作时，它会根据我们写好的配置,从入口(entry) 开始，webpack 会递归的构建一个 依赖关系图，这个依赖图包含着应用程序中所需的每个模块，然后将所有模块打包为bundle(也就是output的配置项)。 单纯讲似乎很抽象，我们更期望能够可视化打包产物的依赖图，下边列示了一些bundle分析工具。</p>\n<ul>\n<li>webpack-chart：webpack stats 可交互饼图；</li>\n<li>webpack-visualizer：可视化并分析你的bundle，检查哪些模块占用空间，哪些可能使重复使用的；</li>\n<li>webpack-bundle-analyzer：一个 plugin 和 CLI 工具，它将 bundle 内容展示为一个便捷的、交互式、可缩放的树状图形式；</li>\n<li>webpack bundle optimize helper：分析你的bundle并提供可操作的改进措施，减少 bundle 的大小；</li>\n<li>bundle-stats：生成一个 bundle 报告 ( bundle大小、资源、模块 )，并比较不同构建之间的结果。</li>\n</ul>\n<p>我们来使用 <strong>webpack-bundle-analyzer</strong> 实现下面这个案例。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 首先安装这个插件作为开发依赖</span>\nnpm install <span class="token operator">--</span>save<span class="token operator">-</span>dev webpack<span class="token operator">-</span>bundle<span class="token operator">-</span>analyzer\n<span class="token comment">// 在配置文件中配置</span>\n<span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'html-webpack-plugin\'</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> BundleAnalyzerPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack-bundle-analyzer\'</span><span class="token punctuation">)</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">\'development\'</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">app</span><span class="token operator">:</span> <span class="token string">\'./src/app.js\'</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">app2</span><span class="token operator">:</span> <span class="token string">\'./src/app2.js\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token keyword">new</span> <span class="token class-name">BundleAnalyzerPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 执行 webpack </span>\nnpx webpack serve\n<span class="token comment">// 执行完后，点击执行后出现的网址，就可以看到可视化的打包产物依赖图</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h2 id="web-works" tabindex="-1"><a class="header-anchor" href="#web-works" aria-hidden="true">#</a> Web Works</h2>\n<p>html5之前，打开一个常规的网页，浏览器会启用几个线程？ 一般而言，至少存在三个线程(公用线程不计入在内):</p>\n<p>分别是js引擎线程(处理js)、GUI渲染线程(渲染页面)、浏览器事件触发线程(控制交 互)。 当一段JS脚本长时间占用着处理机,就会挂起浏览器的GUI更新，而后面的事件响应也 被排在队列中得不到处理，从而造成了浏览器被锁定进入假死状态。 现在如果遇到了这种情况，我们可以做的不仅仅是优化代码————webpack5 提供了解决方案，webworker。</p>\n<p>webWorkers提供了js的后台处理线程的API，它允许将复杂耗时的单纯js逻辑处理放 在浏览器后台线程中进行处理，让js线程不阻塞UI线程的渲染。</p>\n<ul>\n<li>在入口文件同级目录下创建一个<strong>work</strong>脚本 <code>work.js</code>文件</li>\n</ul>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>self<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n <span class="token comment">// self.postMessage 函数会返回结果</span>\n  self<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">answer</span><span class="token operator">:</span> <span class="token number">1111</span>       \n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 入口文件 app.js</span>\n<span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">\'./work.js\'</span><span class="token punctuation">,</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\nworker<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">question</span><span class="token operator">:</span> <span class="token string">\'hi，那边的workder线程，请告诉我今天的幸运数字是多少？\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\nworker<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>data<span class="token punctuation">.</span>answer<span class="token punctuation">)</span> <span class="token comment">// 接受 workder 返回的结果</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="typescript" tabindex="-1"><a class="header-anchor" href="#typescript" aria-hidden="true">#</a> TypeScript</h2>\n<blockquote>\n<p>在前端生态里，TS扮演着越来越重要的角色。 我们直入正题，讲下如何在webpack工程化环境中集成TS。 首先，当然是安装我们的ts和对应的loader。</p>\n</blockquote>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>npm install <span class="token operator">--</span>save<span class="token operator">-</span>dev typescript ts<span class="token operator">-</span>loader\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>接下来我们需要在项目根目录下添加一个ts的配置文件————tsconfig.json，我们可以用<strong>ts</strong>自带的工具来自动化生成它。</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>npx tsc --init\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>我们发现生成了一个tsconfig.json，里面注释掉了绝大多数配置。 现在，根据我们想要的效果来打开对应的配置。</p>\n<div class="language-json ext-json line-numbers-mode"><pre v-pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"rootDir"</span><span class="token operator">:</span> <span class="token string">"./src"</span><span class="token punctuation">,</span>   <span class="token comment">// 指定入口</span>\n    <span class="token property">"outDir"</span><span class="token operator">:</span> <span class="token string">"./dist"</span><span class="token punctuation">,</span>   <span class="token comment">// 指定出口</span>\n    <span class="token property">"noImplicitAny"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token property">"sourceMap"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"es6"</span><span class="token punctuation">,</span>\n    <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"es5"</span><span class="token punctuation">,</span>\n    <span class="token property">"jsx"</span><span class="token operator">:</span> <span class="token string">"react"</span><span class="token punctuation">,</span>\n    <span class="token property">"allowJs"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token property">"moduleResolution"</span><span class="token operator">:</span> <span class="token string">"node"</span>  \n <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>好了，接下来我们新增一个src/index.ts，内置一些内容。 然后我们别忘了更改我们的entry及配置对应的loder。 当然，还有<strong>resolve.extensions</strong>，将.ts放在.js之前，这样它会先找.ts。 注意，如果我们使用了<strong>sourceMap</strong>，一定记得和上面的ts配置一样，设置<strong>sourcemap</strong>为true。 也别忘记在我们的<strong>webpack.config.js</strong>里</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'html-webpack-plugin\'</span><span class="token punctuation">)</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">\'development\'</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">\'./src/app.ts\'</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">devtool</span><span class="token operator">:</span> <span class="token string">\'inline-source-map\'</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.ts$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token string">\'ts-loader\'</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'.ts\'</span><span class="token punctuation">,</span> <span class="token string">\'.js\'</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">\'bundle.js\'</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'./dist\'</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h3 id="使用第三方类库" tabindex="-1"><a class="header-anchor" href="#使用第三方类库" aria-hidden="true">#</a> 使用第三方类库</h3>\n<p>在从 npm 上安装第三方库时，一定要记得同时安装这个库的类型声明文件，我们可以从 [TypeSearch](https://www.ty pescriptlang.org/dt/search?search=) 中找到并安装这些第三方库的类型声明文件。举个例子，如果想安装 lodash 类型声明文件，我们可以运行下面的命令</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>npm install <span class="token operator">--</span>save<span class="token operator">-</span>dev @types<span class="token operator">/</span>lodash\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="多页面应用" tabindex="-1"><a class="header-anchor" href="#多页面应用" aria-hidden="true">#</a> 多页面应用</h2>\n<h3 id="entry-配置" tabindex="-1"><a class="header-anchor" href="#entry-配置" aria-hidden="true">#</a> entry 配置</h3>\n<ul>\n<li><strong>单个入口（简写）语法</strong>：<code>entry: string | [string]</code></li>\n</ul>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token operator">:</span> <span class="token string">\'./path/to/my/entry/file.js\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 多入口</span>\n<span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'html-webpack-plugin\'</span><span class="token punctuation">)</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">\'development\'</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">\'多页面应用\'</span><span class="token punctuation">,</span>  <span class="token comment">// 设置 title 标签，但模板的title内容需要改成 &lt;title>&lt;%= htmlWebpackPlugin.options.title %>&lt;/title></span>\n      <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">\'./index.html\'</span><span class="token punctuation">,</span>  <span class="token comment">// 设置模板</span>\n      <span class="token literal-property property">inject</span><span class="token operator">:</span> <span class="token string">\'body\'</span><span class="token punctuation">,</span>  <span class="token comment">// 设置 script 标签注入哪个标签里</span>\n      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">\'chanel1/index.html\'</span><span class="token punctuation">,</span>  <span class="token comment">// 设置输出 html 文件名</span>\n      <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'main\'</span><span class="token punctuation">,</span> <span class="token string">\'lodash\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 默认会将 entry 里的所有入口引入</span>\n      <span class="token literal-property property">publicPath</span><span class="token operator">:</span> <span class="token string">\'http://www.b.com/\'</span>  <span class="token comment">// 设置公共路径</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\n    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">\'./index2.html\'</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">inject</span><span class="token operator">:</span> <span class="token string">\'body\'</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">\'chanel2/index2.html\'</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'main2\'</span><span class="token punctuation">,</span> <span class="token string">\'lodash\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">publicPath</span><span class="token operator">:</span> <span class="token string">\'http://www.a.com/\'</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n\n  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">main</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token keyword">import</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'./src/app2.js\'</span><span class="token punctuation">,</span> <span class="token string">\'./src/app.js\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">dependOn</span><span class="token operator">:</span> <span class="token string">\'lodash\'</span><span class="token punctuation">,</span>   <span class="token comment">// 上面2个入口文件可能都用了 lodash，抽离出来</span>\n      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">\'chanel1/[name].js\'</span> <span class="token comment">// 设置打包后的输出文件</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">main2</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token keyword">import</span><span class="token operator">:</span> <span class="token string">\'./src/app3.js\'</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">dependOn</span><span class="token operator">:</span> <span class="token string">\'lodash\'</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">\'chanel2/[name].js\'</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">lodash</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token keyword">import</span><span class="token operator">:</span> <span class="token string">\'lodash\'</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">\'common/[name].js\'</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">clean</span><span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br></div></div><h2 id="tree-shaking" tabindex="-1"><a class="header-anchor" href="#tree-shaking" aria-hidden="true">#</a> Tree shaking</h2>\n<p><code>Tree Shaking</code> 指基于 ES Module 进行静态分析，通过 AST 将用不到的函数进行移除，从而减小打包体积。</p>\n<blockquote>\n<p>注意 Webpack 不能百分百安全地进行 tree-shaking。有些模块导入，只要被引入， 就会对应用程序产生重要的影响。一个很好的例子就是全局样式表，或者设置全局配 置的JavaScript 文件。</p>\n<p>Webpack 认为这样的文件有“副作用”。具有副作用的文件不应该做 tree-shaking， 因为这将破坏整个应用程序。</p>\n<p>Webpack 的设计者清楚地认识到不知道哪些文件有副作用的情况下打包代码的风 险，因此webpack4默认地将所有代码视为有副作用。这可以保护你免于删除必要的 文件，但这意味着 Webpack 的默认行为实际上是不进行 tree-shaking。值得注意的 是webpack5默认会进行 tree-shaking。 如何告诉 Webpack 你的代码无副作用，可以通过 package.json 有一个特殊的属性  sideEffects，就是为此而存在的。它有三个可能的值</p>\n</blockquote>\n<ul>\n<li><strong>true</strong>：如果不指定其他值的话。这意味着所有的文件都有副作用，也就是没有一个文件 可以 <strong>tree-shaking</strong>。</li>\n<li><strong>false</strong>：告诉 Webpack 没有文件有副作用，所有文件都可以 <strong>tree-shaking</strong>。</li>\n<li><strong>数组[…]</strong> ：是文件路径数组。它告诉 webpack，除了数组中包含的文件外，你的任何文件 都没有副作用。因此，除了指定的文件之外，其他文件都可以安全地进行 <strong>treeshaking</strong>。</li>\n</ul>\n<h2 id="渐进式网络应用程序-pwa" tabindex="-1"><a class="header-anchor" href="#渐进式网络应用程序-pwa" aria-hidden="true">#</a> 渐进式网络应用程序 PWA</h2>\n<blockquote>\n<p><strong>渐进式网络应用程序(progressive web application - PWA)，是一种可以提供类似于  native app(原生应用程序) 体验的 web app(网络应用程序)。PWA 可以用来做很多事。其中最重要的是，在离线(offline)时应用程序能够继续运行功能。这是通过使用 名为 Service Workers 的 web 技术来实现的。</strong></p>\n</blockquote>\n<h2 id="shimming-预置全局变量" tabindex="-1"><a class="header-anchor" href="#shimming-预置全局变量" aria-hidden="true">#</a> Shimming 预置全局变量</h2>\n<p>可以通过内置的 <strong>ProvidePlugin</strong> 插件实现不用下载第三方包，在 webpack 编译的每个模块中，通过访问一个变量来获取一个 package。如果 webpack 看到模块中用到这个变量，它将在最终  bundle 中引入给定的 package。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack\'</span><span class="token punctuation">)</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  mode<span class="token operator">:</span> <span class="token string">\'development\'</span><span class="token punctuation">,</span>\n  entry<span class="token operator">:</span> <span class="token string">\'./src/index.js\'</span><span class="token punctuation">,</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>ProvidePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> \n      _<span class="token operator">:</span> <span class="token string">\'lodash\'</span> <span class="token comment">// 如果你遇到了至少一处用到 _ 变量的模块实例，你将 lodash package 引入进来，并将其提供给需要用到它的模块。</span>\n\n   <span class="token punctuation">}</span><span class="token punctuation">)</span>\n <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>还可以使用 ProvidePlugin 暴露出某个模块中单个导出，通过配置一个“数组路径”，这样就能很好的与 tree shaking 配合，将 lodash 中的其余没有用到的导出去除。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack\'</span><span class="token punctuation">)</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  mode<span class="token operator">:</span> <span class="token string">\'development\'</span><span class="token punctuation">,</span>\n  entry<span class="token operator">:</span> <span class="token string">\'./src/index.js\'</span><span class="token punctuation">,</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>ProvidePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      join<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'lodash\'</span><span class="token punctuation">,</span> <span class="token string">\'join\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n   <span class="token punctuation">}</span><span class="token punctuation">)</span>\n <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="this-指向" tabindex="-1"><a class="header-anchor" href="#this-指向" aria-hidden="true">#</a> this 指向</h3>\n<p>当模块运行在 CommonJS 上下文中，这将会变成一个问题，也就是说此时的 this 指向的是 module.exports 。在这种情况下，你可以通过使用 imports-loader 覆盖 this 指向</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>npm i imports<span class="token operator">-</span>loader <span class="token operator">-</span><span class="token constant">D</span>\n\n<span class="token comment">// webpack.config.js</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>  <span class="token comment">// 让 ./src/index.js 文件的 this 指向 window</span>\n        <span class="token literal-property property">test</span><span class="token operator">:</span> require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">\'./src/index.js\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token string">\'imports-loader?wrapper=window\'</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="创建一个小轮子" tabindex="-1"><a class="header-anchor" href="#创建一个小轮子" aria-hidden="true">#</a> 创建一个小轮子</h2>\n<h3 id="如何构建一个-library" tabindex="-1"><a class="header-anchor" href="#如何构建一个-library" aria-hidden="true">#</a> 如何构建一个 library</h3>\n<blockquote>\n<p>除了打包应用程序，webpack 还可以用于打包 JavaScript library</p>\n</blockquote>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 搭建好 webpapck 环境后，创建一个 src 文件夹 ，下有一个 indnx.js</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> x <span class="token operator">+</span> y\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">//  webpack.config.js</span>\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">\'production\'</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">\'./src/index.js\'</span><span class="token punctuation">,</span>\n  <span class="token comment">// experiments: {  // ESM 引入暂时是一个实验性的功能，需要手动开启，还需要将 library 中的 name 属性删除</span>\n  <span class="token comment">//   outputModule: true,</span>\n  <span class="token comment">// },</span>\n  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'dist\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">\'mylib.js\'</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">library</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">\'mylib\'</span><span class="token punctuation">,</span>  <span class="token comment">// 定义一个 library 名字</span>\n      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">\'umd\'</span>  <span class="token comment">// 让我们的轮子可以通过 CommonJS，ASD，script src 引入\t</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">globalObject</span><span class="token operator">:</span> <span class="token string">\'globalThis\'</span> <span class="token comment">// 配置全局this</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h3 id="创建一个-webpack-numbers" tabindex="-1"><a class="header-anchor" href="#创建一个-webpack-numbers" aria-hidden="true">#</a> 创建一个 webpack-numbers</h3>\n<blockquote>\n<p>假设我们正在编写一个名为 webpack-numbers 的小的 library，可以将数字 1 到 5 转换为文本表示，反之亦然，例如将 2 转换为 \'two\'。</p>\n</blockquote>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 我们将 lodash 安装为 devDependencies 而不是 dependencies ，因为我们不需要将其打包到我们的库中，否则我们的库体积很容易变大。</span>\nnpm i webpack webpack<span class="token operator">-</span>cli lodash <span class="token operator">-</span><span class="token constant">D</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-json ext-json line-numbers-mode"><pre v-pre class="language-json"><code><span class="token comment">// 在项目根目录下创建一个 src 文件夹，里面创建一个 ref.json</span>\n<span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    <span class="token property">"num"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    <span class="token property">"word"</span><span class="token operator">:</span> <span class="token string">"One"</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    <span class="token property">"num"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n    <span class="token property">"word"</span><span class="token operator">:</span> <span class="token string">"Two"</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    <span class="token property">"num"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>\n    <span class="token property">"word"</span><span class="token operator">:</span> <span class="token string">"Three"</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    <span class="token property">"num"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>\n    <span class="token property">"word"</span><span class="token operator">:</span> <span class="token string">"Four"</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    <span class="token property">"num"</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>\n    <span class="token property">"word"</span><span class="token operator">:</span> <span class="token string">"Five"</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    <span class="token property">"num"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    <span class="token property">"word"</span><span class="token operator">:</span> <span class="token string">"Zero"</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// src/index.js</span>\n<span class="token keyword">import</span> _ <span class="token keyword">from</span> <span class="token string">\'lodash\'</span>\n<span class="token keyword">import</span> numRef <span class="token keyword">from</span> <span class="token string">\'./ref.json\'</span>\n\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">numToWord</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> _<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>numRef<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">accum<span class="token punctuation">,</span> ref</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> ref<span class="token punctuation">.</span>num <span class="token operator">===</span> num <span class="token operator">?</span> ref<span class="token punctuation">.</span>word <span class="token operator">:</span> accum\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">\'\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">wordToNum</span><span class="token punctuation">(</span><span class="token parameter">word</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> _<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>numRef<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">accum<span class="token punctuation">,</span> ref</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> ref<span class="token punctuation">.</span>word <span class="token operator">===</span> word <span class="token operator">&amp;&amp;</span> word<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> ref<span class="token punctuation">.</span>num <span class="token operator">:</span> accum\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// webpack.config.js</span>\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">\'production\'</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">\'./src/index.js\'</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'dist\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">\'webpack-numbers.js\'</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">library</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">\'webpackNumbers\'</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">\'umd\'</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">globalObject</span><span class="token operator">:</span> <span class="token string">\'globalThis\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">externals</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">lodash</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">commonjs</span><span class="token operator">:</span> <span class="token string">\'lodash\'</span><span class="token punctuation">,</span> <span class="token comment">//common规范中使用，其实下面一个可以不用写</span>\n      <span class="token literal-property property">commonjs2</span><span class="token operator">:</span> <span class="token string">\'lodash\'</span><span class="token punctuation">,</span> \n      <span class="token literal-property property">amd</span><span class="token operator">:</span> <span class="token string">\'lodash\'</span><span class="token punctuation">,</span>  <span class="token comment">// amd 规范中所有</span>\n      <span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token string">\'_\'</span>  <span class="token comment">// 全局使用</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><div class="language-json ext-json line-numbers-mode"><pre v-pre class="language-json"><code><span class="token comment">// package.json</span>\n<span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"dist/webpack-numbers.js"</span><span class="token punctuation">,</span> <span class="token comment">// 修改入口，修改成打包后的文件</span>\n  <span class="token comment">// ... </span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="发布到-npm-package上" tabindex="-1"><a class="header-anchor" href="#发布到-npm-package上" aria-hidden="true">#</a> 发布到 npm package上</h3>\n<ul>\n<li>\n<p>先在 npm 官网注册账号，点击个人图标，点击 packages 进去</p>\n</li>\n<li>\n<p>回到项目根目录打开命令行</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>npm config <span class="token keyword">get</span> registry  <span class="token comment">// 输入后返回下面的地址才是正确</span>\n<span class="token literal-property property">https</span><span class="token operator">:</span><span class="token operator">/</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">registry.npmjs.org</span><span class="token regex-delimiter">/</span></span>  \n\n<span class="token comment">// 然后执行下面命令添加一个用户，然后输入npm官网注册的用户名</span>\nnpm adduser\n<span class="token comment">// 然后执行下面命令发布我们的包，成功后就可以在 npm 官网上看到并使用npm 下载</span>\nnpm publish\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li>\n</ul>\n<h2 id="dll-动态链接库" tabindex="-1"><a class="header-anchor" href="#dll-动态链接库" aria-hidden="true">#</a> dll (动态链接库)</h2>\n<p>可以通过 <strong>webapck</strong> 内置的 <code>DllPlugin</code>链接一些第三方库，减少 <strong>webpack</strong> 打包时间，下面以 <code>jquery</code> 为例</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 在根目录下创建一个 webpack.dll.config.js 文件配置 dll</span>\n<span class="token comment">// webpack.dll.config.js</span>\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack\'</span><span class="token punctuation">)</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">\'production\'</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">jquery</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'jquery\'</span><span class="token punctuation">]</span> <span class="token comment">// 设置入口文件，这里是 jquery 包</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">\'[name].js\'</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'dll\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">library</span><span class="token operator">:</span> <span class="token string">\'[name]_[hash]\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DllPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment">// 通过 DllPlugin 配置 dll</span>\n      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">\'[name]_[hash]\'</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'dll/manifest.json\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// webpack.config.js</span>\n<span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'html-webpack-plugin\'</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack\'</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> AddAssetHtmlPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'add-asset-html-webpack-plugin\'</span><span class="token punctuation">)</span> <span class="token comment">// 下载这个插件并导入，这个插件可以把 dll 文件夹也打包到 dist 文件夹里，这样打包时间又会恢复，但 jquery 第三方库单独拿出来了</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">\'production\'</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">\'./src/index.js\'</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DllReferencePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token comment">// 链接到动态链接库</span>\n      <span class="token literal-property property">manifest</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'./dll/manifest.json\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token keyword">new</span> <span class="token class-name">AddAssetHtmlPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token literal-property property">filepath</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'./dll/jquery.js\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">publicPath</span><span class="token operator">:</span> <span class="token string">\'./\'</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p><a href="https://webpack.docschina.org/concepts/" target="_blank" rel="noopener noreferrer">官方文档<ExternalLinkIcon/></a></p>\n',date:"2022-10-01",deps:[],hoistedTags:[],links:[],pathInferred:"/工具/2022/20221001.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"20221001",filePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/工具/2022/20221001.md",filePathRelative:"工具/2022/20221001.md",componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/工具/2022/20221001.html.vue",componentFilePathRelative:"pages/工具/2022/20221001.html.vue",componentFileChunkName:"v-11de4d87",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/工具/2022/20221001.html.js",dataFilePathRelative:"pages/工具/2022/20221001.html.js",dataFileChunkName:"v-11de4d87",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/工具/2022/20221001.html",htmlFilePathRelative:"工具/2022/20221001.html"},{data:{key:"v-546b4dc0",path:"/%E5%B7%A5%E5%85%B7/2022/20221019.html",title:"尤雨溪推荐神器 ni ，能替代 npm/yarn/pnpm ？",lang:"zh-CN",frontmatter:{title:"尤雨溪推荐神器 ni ，能替代 npm/yarn/pnpm ？",date:"2022-10-19T00:00:00.000Z",tags:["工具"],categories:["工具"]},excerpt:"",headers:[{level:2,title:"ni 原理",slug:"ni-原理",children:[]},{level:2,title:"使用",slug:"使用",children:[]},{level:2,title:"阅读源码",slug:"阅读源码",children:[]},{level:2,title:"主流程 runner - runCli 函数",slug:"主流程-runner-runcli-函数",children:[]},{level:2,title:"主流程 runner - run 主函数",slug:"主流程-runner-run-主函数",children:[]},{level:2,title:"根据锁文件猜测用哪个包管理器 - detect 函数",slug:"根据锁文件猜测用哪个包管理器-detect-函数",children:[]},{level:2,title:"抹平不同的包管理器的命令差异 - parseNi 函数",slug:"抹平不同的包管理器的命令差异-parseni-函数",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],git:{updatedTime:null,contributors:[]}},key:"v-546b4dc0",path:"/%E5%B7%A5%E5%85%B7/2022/20221019.html",title:"尤雨溪推荐神器 ni ，能替代 npm/yarn/pnpm ？",lang:"zh-CN",frontmatter:{title:"尤雨溪推荐神器 ni ，能替代 npm/yarn/pnpm ？",date:"2022-10-19T00:00:00.000Z",tags:["工具"],categories:["工具"]},excerpt:"",headers:[{level:2,title:"ni 原理",slug:"ni-原理",children:[]},{level:2,title:"使用",slug:"使用",children:[]},{level:2,title:"阅读源码",slug:"阅读源码",children:[]},{level:2,title:"主流程 runner - runCli 函数",slug:"主流程-runner-runcli-函数",children:[]},{level:2,title:"主流程 runner - run 主函数",slug:"主流程-runner-run-主函数",children:[]},{level:2,title:"根据锁文件猜测用哪个包管理器 - detect 函数",slug:"根据锁文件猜测用哪个包管理器-detect-函数",children:[]},{level:2,title:"抹平不同的包管理器的命令差异 - parseNi 函数",slug:"抹平不同的包管理器的命令差异-parseni-函数",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],content:"\r\n::: tip\r\n\r\n我们日常开发中，可能容易 **npm、yarn、pnpm** 混用。有了 **ni** 后，可以用于日常开发使用。Vue 核心成员 [Anthony Fu](https://link.juejin.cn/?target=https%3A%2F%2Fantfu.me) 发现问题，最终开发了一个工具 [ni](https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fantfu%2Fni) 解决问题。通过这一篇可以学到\r\n\r\n1. 学会 ni 使用和理解其原理\r\n2. 学会调试学习源码\r\n3. 可以在日常工作中也使用 ni\r\n\r\n:::\r\n\r\n## ni 原理\r\n\r\n在它运行之前，它会检测你的 **yarn.lock** / **pnpm-lock.yaml** / **package-lock.json** 以了解当前的包管理器，并运行相应的命令。\r\n\r\n```\r\n单从这句话中可能有些不好理解，还是不知道它是个什么。我解释一下。\r\n\r\n使用 `ni` 在项目中安装依赖时：\r\n   假设你的项目中有锁文件 `yarn.lock`，那么它最终会执行 `yarn install` 命令。\r\n   假设你的项目中有锁文件 `pnpm-lock.yaml`，那么它最终会执行 `pnpm i` 命令。\r\n   假设你的项目中有锁文件 `package-lock.json`，那么它最终会执行 `npm i` 命令。\r\n\r\n使用 `ni -g vue-cli` 安装全局依赖时\r\n    默认使用 `npm i -g vue-cli`\r\n\r\n当然不只有 `ni` 安装依赖。\r\n    还有 `nr` - run\r\n    `nx` - execute\r\n    `nu` - upgrade\r\n    `nci` - clean install\r\n    `nrm` - remove\r\n```\r\n\r\n查看源码发现：**ni** 相关的命令，都可以在末尾追加 **\\? **，表示只打印，不是真正执行。所以全局安装 **ni** 后，可以尽情测试，比如 **ni  \\?**，**nr dev --port=3000 \\?**，因为打印，所以可以在各种目录下执行，有助于理解 ni源码。我测试了如下图所示：\r\n\r\n![命令测试图示](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bebec9efba69488ab2167ef1c6121781~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?)\r\n\r\n假设项目目录下没有锁文件，默认就会让用户从**npm、yarn、pnpm** 选择，然后执行相应的命令。 但如果在 **~/.nirc** 文件中，设置了全局默认的配置，则使用默认配置执行对应命令。\r\n\r\n```\r\n//~/.nirc\r\n\r\n//fallback when no lock found\r\ndefaultAgent=npm # default \"prompt\"\r\n\r\n//for global installs\r\nglobalAgent=npm\r\n```\r\n\r\n## 使用\r\n\r\n- 先全局安装: npm i -g @antfu/ni\r\n\r\n```\r\nni\r\n\r\n# npm install\r\n# yarn install\r\n# pnpm install\r\n\r\nni axios\r\n\r\n# npm i axios\r\n# yarn add axios\r\n# pnpm i axios\r\n\r\nnr dev --port=3000\r\n\r\n# npm run dev -- --port=3000\r\n# yarn run dev --port=3000\r\n# pnpm run dev -- --port=3000\r\n\r\nnr -\r\n\r\n# 重新执行最后一次执行的命令\r\n# rerun the last command\r\n```\r\n\r\n更多的使用请查看官方github地址: https://github.com/antfu/ni#how\r\n\r\n## 阅读源码\r\n\r\n- 众所周知，看一个开源项目，先从 package.json 文件开始看起。\r\n\r\n```js\r\npackage.json 文件\r\n\r\n{\r\n    \"name\": \"@antfu/ni\",\r\n    \"version\": \"0.10.0\",\r\n    \"description\": \"Use the right package manager\",\r\n    // 暴露了六个命令\r\n    \"bin\": {\r\n        \"ni\": \"bin/ni.js\",\r\n        \"nci\": \"bin/nci.js\",\r\n        \"nr\": \"bin/nr.js\",\r\n        \"nu\": \"bin/nu.js\",\r\n        \"nx\": \"bin/nx.js\",\r\n        \"nrm\": \"bin/nrm.js\"\r\n    },\r\n    \"scripts\": {\r\n        // 省略了其他的命令 用 esno 执行 ts 文件\r\n        // 可以加上 ? 便于调试，也可以不加\r\n        // 或者是终端 npm run dev \\?\r\n        \"dev\": \"esno src/ni.ts ?\"\r\n    },\r\n}\r\n```\r\n\r\n- 根据 **dev** 命令，我们找到主入口文件 **src/ni.ts**。\r\n\r\n```js\r\n// ni/src/ni.ts\r\nimport { parseNi } from './commands'\r\nimport { runCli } from './runner'\r\n\r\n// 我们可以在这里打断点\r\nrunCli(parseNi)\r\n```\r\n\r\n找到 **ni/package.json** 的 **scripts** ，把鼠标移动到 **dev** 命令上，会出现**运行脚本**和**调试脚本**命令。如下图所示，选择调试脚本\r\n\r\n![VSCode 调试](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c14f2badd837455194dc6a222480a61f~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?)\r\n\r\n## 主流程 runner - runCli 函数\r\n\r\n- 这个函数就是对终端传入的命令行参数做一次解析。最终还是执行的 **run** 函数，对于 **process** 不了解的读者，可以看[阮一峰老师写的 process 对象](https://link.juejin.cn/?target=http%3A%2F%2Fjavascript.ruanyifeng.com%2Fnodejs%2Fprocess.html)\r\n\r\n```ts\r\n// ni/src/runner.ts\r\nexport async function runCli(fn: Runner, options: DetectOptions = {}) {\r\n  // process.argv：返回一个数组，成员是当前进程的所有命令行参数。\r\n  // 其中 process.argv 的第一和第二个元素是Node可执行文件和被执行JavaScript文件的完全限定的文件系统路径，无论你是否这样输入他们。\r\n  const args = process.argv.slice(2).filter(Boolean)\r\n  try {\r\n    await run(fn, args, options)\r\n  }\r\n  catch (error) {\r\n    // process.exit方法用来退出当前进程。它可以接受一个数值参数，如果参数大于0，表示执行失败；如果等于0表示执行成功。\r\n    process.exit(1)\r\n  }\r\n}\r\n```\r\n\r\n## 主流程 runner - run 主函数\r\n\r\n- 这个函数主要做了三件事\r\n\r\n```\r\n1. 根据锁文件猜测用哪个包管理器 npm/yarn/pnpm - detect 函数\r\n2. 抹平不同的包管理器的命令差异 - parseNi 函数\r\n3. 最终运行相应的脚本 - execa 工具\r\n```\r\n\r\n```ts\r\n// ni/src/runner.ts\r\n// 源码有删减\r\nimport execa from 'execa'\r\nconst DEBUG_SIGN = '?'\r\nexport async function run(fn: Runner, args: string[], options: DetectOptions = {}) {\r\n  // 命令参数包含 问号? 则是调试模式，不执行脚本\r\n  const debug = args.includes(DEBUG_SIGN)\r\n  if (debug)\r\n    // 调试模式下，删除这个问号\r\n    remove(args, DEBUG_SIGN)\r\n\r\n  // cwd 方法返回进程的当前目录（绝对路径）\r\n  let cwd = process.cwd()\r\n  let command\r\n\r\n  // 支持指定 文件目录\r\n  // ni -C packages/foo vite\r\n  // nr -C playground dev\r\n  if (args[0] === '-C') {\r\n    cwd = resolve(cwd, args[1])\r\n    // 删掉这两个参数 -C packages/foo\r\n    args.splice(0, 2)\r\n  }\r\n\r\n  // 如果是全局安装，那么使用全局的包管理器\r\n  const isGlobal = args.includes('-g')\r\n  if (isGlobal) {\r\n    command = await fn(getGlobalAgent(), args)\r\n  }\r\n  else {\r\n    let agent = await detect({ ...options, cwd }) || getDefaultAgent()\r\n    // 猜测使用哪个包管理器，如果没有发现锁文件，会返回 null，则调用 getDefaultAgent 函数，默认返回是让用户选择 prompt\r\n    if (agent === 'prompt') {\r\n      agent = (await prompts({\r\n        name: 'agent',\r\n        type: 'select',\r\n        message: 'Choose the agent',\r\n        choices: agents.map(value => ({ title: value, value })),\r\n      })).agent\r\n      if (!agent)\r\n        return\r\n    }\r\n    // 这里的 fn 是 传入解析代码的函数\r\n    command = await fn(agent as Agent, args, {\r\n      hasLock: Boolean(agent),\r\n      cwd,\r\n    })\r\n  }\r\n\r\n  // 如果没有命令，直接返回，上一个 runCli 函数报错，退出进程\r\n  if (!command)\r\n    return\r\n\r\n  // 如果是调试模式，那么直接打印出命令。调试非常有用。\r\n  if (debug) {\r\n    // eslint-disable-next-line no-console\r\n    console.log(command)\r\n    return\r\n  }\r\n\r\n  // 最终用 execa 执行命令，比如 npm i\r\n  // https://github.com/sindresorhus/execa\r\n  // 介绍：Process execution for humans\r\n\r\n  await execa.command(command, { stdio: 'inherit', encoding: 'utf-8', cwd })\r\n}\r\n```\r\n\r\n我们学习完主流程，接着来看两个重要的函数：**detect** 函数、**parseNi** 函数。根据入口我们可以知道。\r\n\r\n```ts\r\nrunCli(parseNi)\r\n\r\nrun(fn)\r\n\r\n这里 fn 则是 parseNi\r\n```\r\n\r\n##  根据锁文件猜测用哪个包管理器 - detect 函数\r\n\r\n```\r\n主要就做了三件事情\r\n\r\n1. 找到项目根路径下的锁文件。返回对应的包管理 `npm/yarn/pnpm`。\r\n2. 如果没找到，那就返回 `null`。\r\n3. 如果找到了，但是用户电脑没有这个命令，则询问用户是否自动安装。\r\n```\r\n\r\n```js\r\n// ni/src/agents.ts\r\nexport const LOCKS: Record<string, Agent> = {\r\n  'pnpm-lock.yaml': 'pnpm',\r\n  'yarn.lock': 'yarn',\r\n  'package-lock.json': 'npm',\r\n}\r\n```\r\n\r\n```ts\r\n// ni/src/detect.ts\r\nexport async function detect({ autoInstall, cwd }: DetectOptions) {\r\n  const result = await findUp(Object.keys(LOCKS), { cwd })\r\n  const agent = (result ? LOCKS[path.basename(result)] : null)\r\n\r\n  if (agent && !cmdExists(agent)) {\r\n    if (!autoInstall) {\r\n      console.warn(`Detected ${agent} but it doesn't seem to be installed.\\n`)\r\n\r\n      if (process.env.CI)\r\n        process.exit(1)\r\n\r\n      const link = terminalLink(agent, INSTALL_PAGE[agent])\r\n      const { tryInstall } = await prompts({\r\n        name: 'tryInstall',\r\n        type: 'confirm',\r\n        message: `Would you like to globally install ${link}?`,\r\n      })\r\n      if (!tryInstall)\r\n        process.exit(1)\r\n    }\r\n\r\n    await execa.command(`npm i -g ${agent}`, { stdio: 'inherit', cwd })\r\n  }\r\n\r\n  return agent\r\n}\r\n```\r\n\r\n## 抹平不同的包管理器的命令差异 - parseNi 函数\r\n\r\n```ts\r\n// ni/src/commands.ts\r\nexport const parseNi = <Runner>((agent, args, ctx) => {\r\n  // ni -v 输出版本号\r\n  if (args.length === 1 && args[0] === '-v') {\r\n    // eslint-disable-next-line no-console\r\n    console.log(`@antfu/ni v${version}`)\r\n    process.exit(0)\r\n  }\r\n\r\n  if (args.length === 0)\r\n    return getCommand(agent, 'install')\r\n  // 省略一些代码\r\n})\r\n```\r\n\r\n通过 **getCommand**  获取命令。\r\n\r\n```ts\r\n// ni/src/agents.ts\r\n// 有删减\r\n// 一份配置，写个这三种包管理器中的命令。\r\n\r\nexport const AGENTS = {\r\n  npm: {\r\n    'install': 'npm i'\r\n  },\r\n  yarn: {\r\n    'install': 'yarn install'\r\n  },\r\n  pnpm: {\r\n    'install': 'pnpm i'\r\n  },\r\n}\r\n```\r\n\r\n```ts\r\n// ni/src/commands.ts\r\nexport function getCommand(\r\n  agent: Agent,\r\n  command: Command,\r\n  args: string[] = [],\r\n) {\r\n  // 包管理器不在 AGENTS 中则报错\r\n  // 比如 npm 不在\r\n  if (!(agent in AGENTS))\r\n    throw new Error(`Unsupported agent \"${agent}\"`)\r\n\r\n  // 获取命令 安装则对应 npm install\r\n  const c = AGENTS[agent][command]\r\n\r\n  // 如果是函数，则执行函数。\r\n  if (typeof c === 'function')\r\n    return c(args)\r\n\r\n  // 命令 没找到，则报错\r\n  if (!c)\r\n    throw new Error(`Command \"${command}\" is not support by agent \"${agent}\"`)\r\n  // 最终拼接成命令字符串\r\n  return c.replace('{0}', args.join(' ')).trim()\r\n}\r\n```\r\n\r\n得到相应的命令，比如是 **npm i**，最终用这个工具 [execa](https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fsindresorhus%2Fexeca) 执行最终得到的相应的脚本。\r\n\r\n```ts\r\nawait execa.command(command, { stdio: 'inherit', encoding: 'utf-8', cwd })\r\n```\r\n\r\n## 总结\r\n\r\n- 我们看完源码，可以知道这个神器 **ni** 主要做了三件事\r\n\r\n```\r\n1. 根据锁文件猜测用哪个包管理器 npm/yarn/pnpm - detect 函数\r\n2. 抹平不同的包管理器的命令差异 - parseNi 函数\r\n3. 最终运行相应的脚本 - execa 工具\r\n```\r\n\r\n",contentRendered:'<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>我们日常开发中，可能容易 <strong>npm、yarn、pnpm</strong> 混用。有了 <strong>ni</strong> 后，可以用于日常开发使用。Vue 核心成员 <a href="https://link.juejin.cn/?target=https%3A%2F%2Fantfu.me" target="_blank" rel="noopener noreferrer">Anthony Fu<ExternalLinkIcon/></a> 发现问题，最终开发了一个工具 <a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fantfu%2Fni" target="_blank" rel="noopener noreferrer">ni<ExternalLinkIcon/></a> 解决问题。通过这一篇可以学到</p>\n<ol>\n<li>学会 ni 使用和理解其原理</li>\n<li>学会调试学习源码</li>\n<li>可以在日常工作中也使用 ni</li>\n</ol>\n</div>\n<h2 id="ni-原理" tabindex="-1"><a class="header-anchor" href="#ni-原理" aria-hidden="true">#</a> ni 原理</h2>\n<p>在它运行之前，它会检测你的 <strong>yarn.lock</strong> / <strong>pnpm-lock.yaml</strong> / <strong>package-lock.json</strong> 以了解当前的包管理器，并运行相应的命令。</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>单从这句话中可能有些不好理解，还是不知道它是个什么。我解释一下。\n\n使用 `ni` 在项目中安装依赖时：\n   假设你的项目中有锁文件 `yarn.lock`，那么它最终会执行 `yarn install` 命令。\n   假设你的项目中有锁文件 `pnpm-lock.yaml`，那么它最终会执行 `pnpm i` 命令。\n   假设你的项目中有锁文件 `package-lock.json`，那么它最终会执行 `npm i` 命令。\n\n使用 `ni -g vue-cli` 安装全局依赖时\n    默认使用 `npm i -g vue-cli`\n\n当然不只有 `ni` 安装依赖。\n    还有 `nr` - run\n    `nx` - execute\n    `nu` - upgrade\n    `nci` - clean install\n    `nrm` - remove\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>查看源码发现：<strong>ni</strong> 相关的命令，都可以在末尾追加 **? **，表示只打印，不是真正执行。所以全局安装 <strong>ni</strong> 后，可以尽情测试，比如 <strong>ni  ?</strong>，<strong>nr dev --port=3000 ?</strong>，因为打印，所以可以在各种目录下执行，有助于理解 ni源码。我测试了如下图所示：</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="命令测试图示" originSrc="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bebec9efba69488ab2167ef1c6121781~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?" data="aurora"></p>\n<p>假设项目目录下没有锁文件，默认就会让用户从<strong>npm、yarn、pnpm</strong> 选择，然后执行相应的命令。 但如果在 <strong>~/.nirc</strong> 文件中，设置了全局默认的配置，则使用默认配置执行对应命令。</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>//~/.nirc\n\n//fallback when no lock found\ndefaultAgent=npm # default "prompt"\n\n//for global installs\nglobalAgent=npm\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h2>\n<ul>\n<li>先全局安装: npm i -g @antfu/ni</li>\n</ul>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>ni\n\n# npm install\n# yarn install\n# pnpm install\n\nni axios\n\n# npm i axios\n# yarn add axios\n# pnpm i axios\n\nnr dev --port=3000\n\n# npm run dev -- --port=3000\n# yarn run dev --port=3000\n# pnpm run dev -- --port=3000\n\nnr -\n\n# 重新执行最后一次执行的命令\n# rerun the last command\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>更多的使用请查看官方github地址: https://github.com/antfu/ni#how</p>\n<h2 id="阅读源码" tabindex="-1"><a class="header-anchor" href="#阅读源码" aria-hidden="true">#</a> 阅读源码</h2>\n<ul>\n<li>众所周知，看一个开源项目，先从 package.json 文件开始看起。</li>\n</ul>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">package</span><span class="token punctuation">.</span>json 文件\n\n<span class="token punctuation">{</span>\n    <span class="token string-property property">"name"</span><span class="token operator">:</span> <span class="token string">"@antfu/ni"</span><span class="token punctuation">,</span>\n    <span class="token string-property property">"version"</span><span class="token operator">:</span> <span class="token string">"0.10.0"</span><span class="token punctuation">,</span>\n    <span class="token string-property property">"description"</span><span class="token operator">:</span> <span class="token string">"Use the right package manager"</span><span class="token punctuation">,</span>\n    <span class="token comment">// 暴露了六个命令</span>\n    <span class="token string-property property">"bin"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token string-property property">"ni"</span><span class="token operator">:</span> <span class="token string">"bin/ni.js"</span><span class="token punctuation">,</span>\n        <span class="token string-property property">"nci"</span><span class="token operator">:</span> <span class="token string">"bin/nci.js"</span><span class="token punctuation">,</span>\n        <span class="token string-property property">"nr"</span><span class="token operator">:</span> <span class="token string">"bin/nr.js"</span><span class="token punctuation">,</span>\n        <span class="token string-property property">"nu"</span><span class="token operator">:</span> <span class="token string">"bin/nu.js"</span><span class="token punctuation">,</span>\n        <span class="token string-property property">"nx"</span><span class="token operator">:</span> <span class="token string">"bin/nx.js"</span><span class="token punctuation">,</span>\n        <span class="token string-property property">"nrm"</span><span class="token operator">:</span> <span class="token string">"bin/nrm.js"</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token string-property property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 省略了其他的命令 用 esno 执行 ts 文件</span>\n        <span class="token comment">// 可以加上 ? 便于调试，也可以不加</span>\n        <span class="token comment">// 或者是终端 npm run dev \\?</span>\n        <span class="token string-property property">"dev"</span><span class="token operator">:</span> <span class="token string">"esno src/ni.ts ?"</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><ul>\n<li>根据 <strong>dev</strong> 命令，我们找到主入口文件 <strong>src/ni.ts</strong>。</li>\n</ul>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// ni/src/ni.ts</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> parseNi <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./commands\'</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> runCli <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./runner\'</span>\n\n<span class="token comment">// 我们可以在这里打断点</span>\n<span class="token function">runCli</span><span class="token punctuation">(</span>parseNi<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>找到 <strong>ni/package.json</strong> 的 <strong>scripts</strong> ，把鼠标移动到 <strong>dev</strong> 命令上，会出现<strong>运行脚本</strong>和<strong>调试脚本</strong>命令。如下图所示，选择调试脚本</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="VSCode 调试" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c14f2badd837455194dc6a222480a61f~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?" data="aurora"></p>\n<h2 id="主流程-runner-runcli-函数" tabindex="-1"><a class="header-anchor" href="#主流程-runner-runcli-函数" aria-hidden="true">#</a> 主流程 runner - runCli 函数</h2>\n<ul>\n<li>这个函数就是对终端传入的命令行参数做一次解析。最终还是执行的 <strong>run</strong> 函数，对于 <strong>process</strong> 不了解的读者，可以看<a href="https://link.juejin.cn/?target=http%3A%2F%2Fjavascript.ruanyifeng.com%2Fnodejs%2Fprocess.html" target="_blank" rel="noopener noreferrer">阮一峰老师写的 process 对象<ExternalLinkIcon/></a></li>\n</ul>\n<div class="language-typescript ext-ts line-numbers-mode"><pre v-pre class="language-typescript"><code><span class="token comment">// ni/src/runner.ts</span>\n<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">runCli</span><span class="token punctuation">(</span>fn<span class="token operator">:</span> Runner<span class="token punctuation">,</span> options<span class="token operator">:</span> DetectOptions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// process.argv：返回一个数组，成员是当前进程的所有命令行参数。</span>\n  <span class="token comment">// 其中 process.argv 的第一和第二个元素是Node可执行文件和被执行JavaScript文件的完全限定的文件系统路径，无论你是否这样输入他们。</span>\n  <span class="token keyword">const</span> args <span class="token operator">=</span> process<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span>\n  <span class="token keyword">try</span> <span class="token punctuation">{</span>\n    <span class="token keyword">await</span> <span class="token function">run</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> args<span class="token punctuation">,</span> options<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// process.exit方法用来退出当前进程。它可以接受一个数值参数，如果参数大于0，表示执行失败；如果等于0表示执行成功。</span>\n    process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="主流程-runner-run-主函数" tabindex="-1"><a class="header-anchor" href="#主流程-runner-run-主函数" aria-hidden="true">#</a> 主流程 runner - run 主函数</h2>\n<ul>\n<li>这个函数主要做了三件事</li>\n</ul>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>1. 根据锁文件猜测用哪个包管理器 npm/yarn/pnpm - detect 函数\n2. 抹平不同的包管理器的命令差异 - parseNi 函数\n3. 最终运行相应的脚本 - execa 工具\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre v-pre class="language-typescript"><code><span class="token comment">// ni/src/runner.ts</span>\n<span class="token comment">// 源码有删减</span>\n<span class="token keyword">import</span> execa <span class="token keyword">from</span> <span class="token string">\'execa\'</span>\n<span class="token keyword">const</span> <span class="token constant">DEBUG_SIGN</span> <span class="token operator">=</span> <span class="token string">\'?\'</span>\n<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span>fn<span class="token operator">:</span> Runner<span class="token punctuation">,</span> args<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> options<span class="token operator">:</span> DetectOptions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 命令参数包含 问号? 则是调试模式，不执行脚本</span>\n  <span class="token keyword">const</span> debug <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token constant">DEBUG_SIGN</span><span class="token punctuation">)</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>debug<span class="token punctuation">)</span>\n    <span class="token comment">// 调试模式下，删除这个问号</span>\n    <span class="token function">remove</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> <span class="token constant">DEBUG_SIGN</span><span class="token punctuation">)</span>\n\n  <span class="token comment">// cwd 方法返回进程的当前目录（绝对路径）</span>\n  <span class="token keyword">let</span> cwd <span class="token operator">=</span> process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">let</span> command\n\n  <span class="token comment">// 支持指定 文件目录</span>\n  <span class="token comment">// ni -C packages/foo vite</span>\n  <span class="token comment">// nr -C playground dev</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">\'-C\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    cwd <span class="token operator">=</span> <span class="token function">resolve</span><span class="token punctuation">(</span>cwd<span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n    <span class="token comment">// 删掉这两个参数 -C packages/foo</span>\n    args<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 如果是全局安装，那么使用全局的包管理器</span>\n  <span class="token keyword">const</span> isGlobal <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">\'-g\'</span><span class="token punctuation">)</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>isGlobal<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    command <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token function">getGlobalAgent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> agent <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">detect</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>options<span class="token punctuation">,</span> cwd <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">getDefaultAgent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token comment">// 猜测使用哪个包管理器，如果没有发现锁文件，会返回 null，则调用 getDefaultAgent 函数，默认返回是让用户选择 prompt</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>agent <span class="token operator">===</span> <span class="token string">\'prompt\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      agent <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">prompts</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        name<span class="token operator">:</span> <span class="token string">\'agent\'</span><span class="token punctuation">,</span>\n        type<span class="token operator">:</span> <span class="token string">\'select\'</span><span class="token punctuation">,</span>\n        message<span class="token operator">:</span> <span class="token string">\'Choose the agent\'</span><span class="token punctuation">,</span>\n        choices<span class="token operator">:</span> agents<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>value <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> title<span class="token operator">:</span> value<span class="token punctuation">,</span> value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>agent\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>agent<span class="token punctuation">)</span>\n        <span class="token keyword">return</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 这里的 fn 是 传入解析代码的函数</span>\n    command <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fn</span><span class="token punctuation">(</span>agent <span class="token keyword">as</span> Agent<span class="token punctuation">,</span> args<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n      hasLock<span class="token operator">:</span> <span class="token function">Boolean</span><span class="token punctuation">(</span>agent<span class="token punctuation">)</span><span class="token punctuation">,</span>\n      cwd<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 如果没有命令，直接返回，上一个 runCli 函数报错，退出进程</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>command<span class="token punctuation">)</span>\n    <span class="token keyword">return</span>\n\n  <span class="token comment">// 如果是调试模式，那么直接打印出命令。调试非常有用。</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>debug<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// eslint-disable-next-line no-console</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span>\n    <span class="token keyword">return</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 最终用 execa 执行命令，比如 npm i</span>\n  <span class="token comment">// https://github.com/sindresorhus/execa</span>\n  <span class="token comment">// 介绍：Process execution for humans</span>\n\n  <span class="token keyword">await</span> execa<span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> <span class="token punctuation">{</span> stdio<span class="token operator">:</span> <span class="token string">\'inherit\'</span><span class="token punctuation">,</span> encoding<span class="token operator">:</span> <span class="token string">\'utf-8\'</span><span class="token punctuation">,</span> cwd <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br></div></div><p>我们学习完主流程，接着来看两个重要的函数：<strong>detect</strong> 函数、<strong>parseNi</strong> 函数。根据入口我们可以知道。</p>\n<div class="language-typescript ext-ts line-numbers-mode"><pre v-pre class="language-typescript"><code><span class="token function">runCli</span><span class="token punctuation">(</span>parseNi<span class="token punctuation">)</span>\n\n<span class="token function">run</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>\n\n这里 fn 则是 parseNi\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="根据锁文件猜测用哪个包管理器-detect-函数" tabindex="-1"><a class="header-anchor" href="#根据锁文件猜测用哪个包管理器-detect-函数" aria-hidden="true">#</a> 根据锁文件猜测用哪个包管理器 - detect 函数</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>主要就做了三件事情\n\n1. 找到项目根路径下的锁文件。返回对应的包管理 `npm/yarn/pnpm`。\n2. 如果没找到，那就返回 `null`。\n3. 如果找到了，但是用户电脑没有这个命令，则询问用户是否自动安装。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// ni/src/agents.ts</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">LOCKS</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> Agent<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token string-property property">\'pnpm-lock.yaml\'</span><span class="token operator">:</span> <span class="token string">\'pnpm\'</span><span class="token punctuation">,</span>\n  <span class="token string-property property">\'yarn.lock\'</span><span class="token operator">:</span> <span class="token string">\'yarn\'</span><span class="token punctuation">,</span>\n  <span class="token string-property property">\'package-lock.json\'</span><span class="token operator">:</span> <span class="token string">\'npm\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre v-pre class="language-typescript"><code><span class="token comment">// ni/src/detect.ts</span>\n<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">detect</span><span class="token punctuation">(</span><span class="token punctuation">{</span> autoInstall<span class="token punctuation">,</span> cwd <span class="token punctuation">}</span><span class="token operator">:</span> DetectOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">findUp</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token constant">LOCKS</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> cwd <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> agent <span class="token operator">=</span> <span class="token punctuation">(</span>result <span class="token operator">?</span> <span class="token constant">LOCKS</span><span class="token punctuation">[</span>path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>agent <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">cmdExists</span><span class="token punctuation">(</span>agent<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>autoInstall<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Detected </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>agent<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> but it doesn\'t seem to be installed.\\n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">CI</span><span class="token punctuation">)</span>\n        process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n\n      <span class="token keyword">const</span> link <span class="token operator">=</span> <span class="token function">terminalLink</span><span class="token punctuation">(</span>agent<span class="token punctuation">,</span> <span class="token constant">INSTALL_PAGE</span><span class="token punctuation">[</span>agent<span class="token punctuation">]</span><span class="token punctuation">)</span>\n      <span class="token keyword">const</span> <span class="token punctuation">{</span> tryInstall <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">prompts</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        name<span class="token operator">:</span> <span class="token string">\'tryInstall\'</span><span class="token punctuation">,</span>\n        type<span class="token operator">:</span> <span class="token string">\'confirm\'</span><span class="token punctuation">,</span>\n        message<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Would you like to globally install </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>link<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">?</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tryInstall<span class="token punctuation">)</span>\n        process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">await</span> execa<span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">npm i -g </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>agent<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span> stdio<span class="token operator">:</span> <span class="token string">\'inherit\'</span><span class="token punctuation">,</span> cwd <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> agent\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h2 id="抹平不同的包管理器的命令差异-parseni-函数" tabindex="-1"><a class="header-anchor" href="#抹平不同的包管理器的命令差异-parseni-函数" aria-hidden="true">#</a> 抹平不同的包管理器的命令差异 - parseNi 函数</h2>\n<div class="language-typescript ext-ts line-numbers-mode"><pre v-pre class="language-typescript"><code><span class="token comment">// ni/src/commands.ts</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> parseNi <span class="token operator">=</span> <span class="token operator">&lt;</span>Runner<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">(</span>agent<span class="token punctuation">,</span> args<span class="token punctuation">,</span> ctx<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// ni -v 输出版本号</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">\'-v\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// eslint-disable-next-line no-console</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">@antfu/ni v</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>version<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n    process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> <span class="token function">getCommand</span><span class="token punctuation">(</span>agent<span class="token punctuation">,</span> <span class="token string">\'install\'</span><span class="token punctuation">)</span>\n  <span class="token comment">// 省略一些代码</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>通过 <strong>getCommand</strong>  获取命令。</p>\n<div class="language-typescript ext-ts line-numbers-mode"><pre v-pre class="language-typescript"><code><span class="token comment">// ni/src/agents.ts</span>\n<span class="token comment">// 有删减</span>\n<span class="token comment">// 一份配置，写个这三种包管理器中的命令。</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">AGENTS</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  npm<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token string-property property">\'install\'</span><span class="token operator">:</span> <span class="token string">\'npm i\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  yarn<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token string-property property">\'install\'</span><span class="token operator">:</span> <span class="token string">\'yarn install\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  pnpm<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token string-property property">\'install\'</span><span class="token operator">:</span> <span class="token string">\'pnpm i\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre v-pre class="language-typescript"><code><span class="token comment">// ni/src/commands.ts</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getCommand</span><span class="token punctuation">(</span>\n  agent<span class="token operator">:</span> Agent<span class="token punctuation">,</span>\n  command<span class="token operator">:</span> Command<span class="token punctuation">,</span>\n  args<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 包管理器不在 AGENTS 中则报错</span>\n  <span class="token comment">// 比如 npm 不在</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>agent <span class="token keyword">in</span> <span class="token constant">AGENTS</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Unsupported agent "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>agent<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n\n  <span class="token comment">// 获取命令 安装则对应 npm install</span>\n  <span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token constant">AGENTS</span><span class="token punctuation">[</span>agent<span class="token punctuation">]</span><span class="token punctuation">[</span>command<span class="token punctuation">]</span>\n\n  <span class="token comment">// 如果是函数，则执行函数。</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> c <span class="token operator">===</span> <span class="token string">\'function\'</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> <span class="token function">c</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>\n\n  <span class="token comment">// 命令 没找到，则报错</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>c<span class="token punctuation">)</span>\n    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Command "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>command<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">" is not support by agent "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>agent<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n  <span class="token comment">// 最终拼接成命令字符串</span>\n  <span class="token keyword">return</span> c<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">\'{0}\'</span><span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">\' \'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>得到相应的命令，比如是 <strong>npm i</strong>，最终用这个工具 <a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fsindresorhus%2Fexeca" target="_blank" rel="noopener noreferrer">execa<ExternalLinkIcon/></a> 执行最终得到的相应的脚本。</p>\n<div class="language-typescript ext-ts line-numbers-mode"><pre v-pre class="language-typescript"><code><span class="token keyword">await</span> execa<span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> <span class="token punctuation">{</span> stdio<span class="token operator">:</span> <span class="token string">\'inherit\'</span><span class="token punctuation">,</span> encoding<span class="token operator">:</span> <span class="token string">\'utf-8\'</span><span class="token punctuation">,</span> cwd <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2>\n<ul>\n<li>我们看完源码，可以知道这个神器 <strong>ni</strong> 主要做了三件事</li>\n</ul>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>1. 根据锁文件猜测用哪个包管理器 npm/yarn/pnpm - detect 函数\n2. 抹平不同的包管理器的命令差异 - parseNi 函数\n3. 最终运行相应的脚本 - execa 工具\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',date:"2022-10-19",deps:[],hoistedTags:[],links:[],pathInferred:"/工具/2022/20221019.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"20221019",filePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/工具/2022/20221019.md",filePathRelative:"工具/2022/20221019.md",componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/工具/2022/20221019.html.vue",componentFilePathRelative:"pages/工具/2022/20221019.html.vue",componentFileChunkName:"v-546b4dc0",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/工具/2022/20221019.html.js",dataFilePathRelative:"pages/工具/2022/20221019.html.js",dataFileChunkName:"v-546b4dc0",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/工具/2022/20221019.html",htmlFilePathRelative:"工具/2022/20221019.html"},{data:{key:"v-3706649a",path:"/404.html",title:"",lang:"zh-CN",frontmatter:{layout:"404"},excerpt:"",headers:[],git:{}},key:"v-3706649a",path:"/404.html",title:"",lang:"zh-CN",frontmatter:{layout:"404"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/404.html.vue",componentFilePathRelative:"pages/404.html.vue",componentFileChunkName:"v-3706649a",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/404.html.js",dataFilePathRelative:"pages/404.html.js",dataFileChunkName:"v-3706649a",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/404.html",htmlFilePathRelative:"404.html"},{data:{key:"v-8daa1a0e",path:"/",title:"",lang:"zh-CN",frontmatter:{layout:"Layout",home:!0},excerpt:"",headers:[],git:{}},key:"v-8daa1a0e",path:"/",title:"",lang:"zh-CN",frontmatter:{layout:"Layout",home:!0},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/index.html.vue",componentFilePathRelative:"pages/index.html.vue",componentFileChunkName:"v-8daa1a0e",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/index.html.js",dataFilePathRelative:"pages/index.html.js",dataFileChunkName:"v-8daa1a0e",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/index.html",htmlFilePathRelative:"index.html"},{data:{key:"v-74bc627b",path:"/about/",title:"",lang:"zh-CN",frontmatter:{layout:"About",slug:"aurora-about"},excerpt:"",headers:[],git:{}},key:"v-74bc627b",path:"/about/",title:"",lang:"zh-CN",frontmatter:{layout:"About",slug:"aurora-about"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/about/index.html.vue",componentFilePathRelative:"pages/about/index.html.vue",componentFileChunkName:"v-74bc627b",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/about/index.html.js",dataFilePathRelative:"pages/about/index.html.js",dataFileChunkName:"v-74bc627b",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/about/index.html",htmlFilePathRelative:"about/index.html"},{data:{key:"v-14f724bf",path:"/mood/",title:"",lang:"zh-CN",frontmatter:{layout:"Mood",slug:"aurora-mood"},excerpt:"",headers:[],git:{}},key:"v-14f724bf",path:"/mood/",title:"",lang:"zh-CN",frontmatter:{layout:"Mood",slug:"aurora-mood"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/mood/index.html.vue",componentFilePathRelative:"pages/mood/index.html.vue",componentFileChunkName:"v-14f724bf",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/mood/index.html.js",dataFilePathRelative:"pages/mood/index.html.js",dataFileChunkName:"v-14f724bf",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/mood/index.html",htmlFilePathRelative:"mood/index.html"},{data:{key:"v-14e6501c",path:"/link/",title:"",lang:"zh-CN",frontmatter:{layout:"Link",slug:"aurora-link"},excerpt:"",headers:[],git:{}},key:"v-14e6501c",path:"/link/",title:"",lang:"zh-CN",frontmatter:{layout:"Link",slug:"aurora-link"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/link/index.html.vue",componentFilePathRelative:"pages/link/index.html.vue",componentFileChunkName:"v-14e6501c",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/link/index.html.js",dataFilePathRelative:"pages/link/index.html.js",dataFileChunkName:"v-14e6501c",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/link/index.html",htmlFilePathRelative:"link/index.html"},{data:{key:"v-744d024e",path:"/tag/",title:"",lang:"zh-CN",frontmatter:{layout:"Tag",slug:"aurora-tag"},excerpt:"",headers:[],git:{}},key:"v-744d024e",path:"/tag/",title:"",lang:"zh-CN",frontmatter:{layout:"Tag",slug:"aurora-tag"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/tag/index.html.vue",componentFilePathRelative:"pages/tag/index.html.vue",componentFileChunkName:"v-744d024e",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/tag/index.html.js",dataFilePathRelative:"pages/tag/index.html.js",dataFileChunkName:"v-744d024e",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/tag/index.html",htmlFilePathRelative:"tag/index.html"},{data:{key:"v-705c21a6",path:"/archive/",title:"",lang:"zh-CN",frontmatter:{layout:"Archive",slug:"aurora-archive"},excerpt:"",headers:[],git:{}},key:"v-705c21a6",path:"/archive/",title:"",lang:"zh-CN",frontmatter:{layout:"Archive",slug:"aurora-archive"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/archive/index.html.vue",componentFilePathRelative:"pages/archive/index.html.vue",componentFileChunkName:"v-705c21a6",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/archive/index.html.js",dataFilePathRelative:"pages/archive/index.html.js",dataFileChunkName:"v-705c21a6",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/archive/index.html",htmlFilePathRelative:"archive/index.html"},{data:{key:"v-6629f178",path:"/aurora-coze/",title:"",lang:"zh-CN",frontmatter:{layout:"CozeMood",slug:"aurora-coze-mood"},excerpt:"",headers:[],git:{}},key:"v-6629f178",path:"/aurora-coze/",title:"",lang:"zh-CN",frontmatter:{layout:"CozeMood",slug:"aurora-coze-mood"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/aurora-coze/index.html.vue",componentFilePathRelative:"pages/aurora-coze/index.html.vue",componentFileChunkName:"v-6629f178",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/aurora-coze/index.html.js",dataFilePathRelative:"pages/aurora-coze/index.html.js",dataFileChunkName:"v-6629f178",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/aurora-coze/index.html",htmlFilePathRelative:"aurora-coze/index.html"},{data:{key:"v-031dfb13",path:"/register/",title:"",lang:"zh-CN",frontmatter:{layout:"RegisterUser",slug:"aurora-coze-register"},excerpt:"",headers:[],git:{}},key:"v-031dfb13",path:"/register/",title:"",lang:"zh-CN",frontmatter:{layout:"RegisterUser",slug:"aurora-coze-register"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/register/index.html.vue",componentFilePathRelative:"pages/register/index.html.vue",componentFileChunkName:"v-031dfb13",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/register/index.html.js",dataFilePathRelative:"pages/register/index.html.js",dataFileChunkName:"v-031dfb13",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/register/index.html",htmlFilePathRelative:"register/index.html"},{data:{key:"v-e2acc714",path:"/photo/",title:"",lang:"zh-CN",frontmatter:{layout:"CozePhoto",slug:"aurora-photo"},excerpt:"",headers:[],git:{}},key:"v-e2acc714",path:"/photo/",title:"",lang:"zh-CN",frontmatter:{layout:"CozePhoto",slug:"aurora-photo"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/photo/index.html.vue",componentFilePathRelative:"pages/photo/index.html.vue",componentFileChunkName:"v-e2acc714",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/photo/index.html.js",dataFilePathRelative:"pages/photo/index.html.js",dataFileChunkName:"v-e2acc714",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/photo/index.html",htmlFilePathRelative:"photo/index.html"},{data:{key:"v-4382d077",path:"/next-mood/",title:"",lang:"zh-CN",frontmatter:{layout:"AuroraCozeMood",slug:"aurora-AuroraCozeMood"},excerpt:"",headers:[],git:{}},key:"v-4382d077",path:"/next-mood/",title:"",lang:"zh-CN",frontmatter:{layout:"AuroraCozeMood",slug:"aurora-AuroraCozeMood"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/next-mood/index.html.vue",componentFilePathRelative:"pages/next-mood/index.html.vue",componentFileChunkName:"v-4382d077",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/next-mood/index.html.js",dataFilePathRelative:"pages/next-mood/index.html.js",dataFileChunkName:"v-4382d077",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/next-mood/index.html",htmlFilePathRelative:"next-mood/index.html"},{data:{key:"v-3279cf61",path:"/aurora-archive/",title:"",lang:"zh-CN",frontmatter:{layout:"AuroraArchive",slug:"aurora-plugin-archive"},excerpt:"",headers:[],git:{}},key:"v-3279cf61",path:"/aurora-archive/",title:"",lang:"zh-CN",frontmatter:{layout:"AuroraArchive",slug:"aurora-plugin-archive"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/aurora-archive/index.html.vue",componentFilePathRelative:"pages/aurora-archive/index.html.vue",componentFileChunkName:"v-3279cf61",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/aurora-archive/index.html.js",dataFilePathRelative:"pages/aurora-archive/index.html.js",dataFileChunkName:"v-3279cf61",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/aurora-archive/index.html",htmlFilePathRelative:"aurora-archive/index.html"},{data:{key:"v-3c506944",path:"/aurora-music/",title:"",lang:"zh-CN",frontmatter:{layout:"AuroraMusic",slug:"aurora-plugin-music"},excerpt:"",headers:[],git:{}},key:"v-3c506944",path:"/aurora-music/",title:"",lang:"zh-CN",frontmatter:{layout:"AuroraMusic",slug:"aurora-plugin-music"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/aurora-music/index.html.vue",componentFilePathRelative:"pages/aurora-music/index.html.vue",componentFileChunkName:"v-3c506944",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/aurora-music/index.html.js",dataFilePathRelative:"pages/aurora-music/index.html.js",dataFileChunkName:"v-3c506944",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/aurora-music/index.html",htmlFilePathRelative:"aurora-music/index.html"}]},7039:(n,s,a)=>{a.d(s,{Z:()=>e});const e=[{data:{key:"v-2b97a6cc",path:"/axios/2019/20191102.html",title:"axios拦截器",lang:"zh-CN",frontmatter:{title:"axios拦截器",date:"2019-11-02T00:00:00.000Z",tags:["axios"],categories:["axios"]},excerpt:"",headers:[{level:2,title:"请求拦截器：interceptors.request",slug:"请求拦截器-interceptors-request",children:[]},{level:2,title:"响应拦截器：interceptors.response",slug:"响应拦截器-interceptors-response",children:[]},{level:2,title:"使用注意事项",slug:"使用注意事项",children:[]}],git:{updatedTime:null,contributors:[]}},key:"v-2b97a6cc",path:"/axios/2019/20191102.html",title:"axios拦截器",lang:"zh-CN",frontmatter:{title:"axios拦截器",date:"2019-11-02T00:00:00.000Z",tags:["axios"],categories:["axios"]},excerpt:"",headers:[{level:2,title:"请求拦截器：interceptors.request",slug:"请求拦截器-interceptors-request",children:[]},{level:2,title:"响应拦截器：interceptors.response",slug:"响应拦截器-interceptors-response",children:[]},{level:2,title:"使用注意事项",slug:"使用注意事项",children:[]}],content:"\r\naxios本身有两种拦截器:请求拦截器、响应拦截器  \r\n\r\n## 请求拦截器：interceptors.request\r\n\taxios每次开始请求时先执行此逻辑，进行axios出发前的配置，也可以做检查工作\r\n\r\n\t检查ok的情况下就开始向服务器端发请求\r\n\r\n```js\r\n// 请求拦截器\r\naxios.interceptors.request.use(function (config) {\r\n  // 放置业务逻辑代码\r\n  return config;\r\n}, function (error) {\r\n  // axios发生错误的处理\r\n  return Promise.reject(error);\r\n});\r\n\r\n```\r\n\t\r\n\t\t\r\n## 响应拦截器：interceptors.response\r\n\taxios完成与服务器端交互回到客户端后就执行此处逻辑，在这个地方可以做一些后续收尾事宜，例如判断axios请求是否成功\r\n```js\r\n// 响应拦截器\r\naxios.interceptors.response.use(function (response) {\r\n  // 放置业务逻辑代码\r\n  // response是服务器端返回来的数据信息，与Promise获得数据一致\r\n  return response;\r\n}, function (error) {\r\n  // axios请求服务器端发生错误的处理\r\n  return Promise.reject(error);\r\n});\r\n\r\n```\r\n\t\t\r\n\t\t\r\n## 使用注意事项\r\n\t1.各个拦截器的第一个函数参数需要设置为 “箭头函数” ，使得内部this与外部保持一致，都是Vue实例\r\n\t2.拦截器需要写请求之前\r\n",contentRendered:'<p>axios本身有两种拦截器:请求拦截器、响应拦截器</p>\n<h2 id="请求拦截器-interceptors-request" tabindex="-1"><a class="header-anchor" href="#请求拦截器-interceptors-request" aria-hidden="true">#</a> 请求拦截器：interceptors.request</h2>\n<pre><code>axios每次开始请求时先执行此逻辑，进行axios出发前的配置，也可以做检查工作\n\n检查ok的情况下就开始向服务器端发请求\n</code></pre>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 请求拦截器</span>\naxios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 放置业务逻辑代码</span>\n  <span class="token keyword">return</span> config<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// axios发生错误的处理</span>\n  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="响应拦截器-interceptors-response" tabindex="-1"><a class="header-anchor" href="#响应拦截器-interceptors-response" aria-hidden="true">#</a> 响应拦截器：interceptors.response</h2>\n<pre><code>axios完成与服务器端交互回到客户端后就执行此处逻辑，在这个地方可以做一些后续收尾事宜，例如判断axios请求是否成功\n</code></pre>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 响应拦截器</span>\naxios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 放置业务逻辑代码</span>\n  <span class="token comment">// response是服务器端返回来的数据信息，与Promise获得数据一致</span>\n  <span class="token keyword">return</span> response<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// axios请求服务器端发生错误的处理</span>\n  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="使用注意事项" tabindex="-1"><a class="header-anchor" href="#使用注意事项" aria-hidden="true">#</a> 使用注意事项</h2>\n<pre><code>1.各个拦截器的第一个函数参数需要设置为 “箭头函数” ，使得内部this与外部保持一致，都是Vue实例\n2.拦截器需要写请求之前\n</code></pre>\n',date:"2019-11-02",deps:[],hoistedTags:[],links:[],pathInferred:"/axios/2019/20191102.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"20191102",filePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/axios/2019/20191102.md",filePathRelative:"axios/2019/20191102.md",componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/axios/2019/20191102.html.vue",componentFilePathRelative:"pages/axios/2019/20191102.html.vue",componentFileChunkName:"v-2b97a6cc",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/axios/2019/20191102.html.js",dataFilePathRelative:"pages/axios/2019/20191102.html.js",dataFileChunkName:"v-2b97a6cc",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/axios/2019/20191102.html",htmlFilePathRelative:"axios/2019/20191102.html"},{data:{key:"v-60490958",path:"/axios/2021/20210624.html",title:"axios的简单封装",lang:"zh-CN",frontmatter:{title:"axios的简单封装",date:"2021-06-24T00:00:00.000Z",tags:["axios"],categories:["axios"]},excerpt:"",headers:[{level:2,title:"request.js",slug:"request-js",children:[]},{level:2,title:"service.project.js",slug:"service-project-js",children:[]},{level:2,title:"原生小程序封装wx.request",slug:"原生小程序封装wx-request",children:[]}],git:{updatedTime:null,contributors:[]}},key:"v-60490958",path:"/axios/2021/20210624.html",title:"axios的简单封装",lang:"zh-CN",frontmatter:{title:"axios的简单封装",date:"2021-06-24T00:00:00.000Z",tags:["axios"],categories:["axios"]},excerpt:"",headers:[{level:2,title:"request.js",slug:"request-js",children:[]},{level:2,title:"service.project.js",slug:"service-project-js",children:[]},{level:2,title:"原生小程序封装wx.request",slug:"原生小程序封装wx-request",children:[]}],content:"\r\n\r\n项目开发时，我们通常会封装一下axios请求文件，以便后期维护时方便\r\n\r\n## request.js\r\n```js\r\nimport request from 'axios'\r\nimport qs from 'qs'\r\nimport helper from './helper'\r\nimport { Loading } from 'element-ui'\r\nlet loadingInstance\r\nlet loadingnum = 0\r\nconst showLoading = () => {\r\n  loadingInstance = Loading.service({ fullscreen: true })\r\n}\r\nconst hideLoading = () => {\r\n  loadingInstance.close()\r\n}\r\nrequest.defaults.withCredentials = false\r\nclass Request {\r\n  constructor () {\r\n    // 公共参数\r\n    request.defaults.params\r\n    // 最大请求时间\r\n    request.defaults.timeout = 120 * 1000\r\n    // http code\r\n    request.defaults.validateStatus = status => {\r\n      return status >= 200 && status < 300\r\n    }\r\n    // 赋予内部\r\n    this.instance = request\r\n  }\r\n\r\n  // 设置token\r\n  setToken () {\r\n    this.instance.defaults.headers.common['cmtoken'] = sessionStorage.getItem('login') ? JSON.parse(sessionStorage.getItem('login')).cmtoken : ''\r\n  }\r\n\r\n  /*\r\n     * @apiGet 公共get请求\r\n     * @apiPost 公共post请求\r\n     * @apiJson post参数json格式\r\n     * @apiFile 公共上传\r\n     * @url 必填\r\n     * @params 必填\r\n     * */\r\n\r\n  apiGet (url, params, config) {\r\n    showLoading()\r\n    loadingnum++\r\n    return new Promise((resolve, reject) => {\r\n      this.instance.get(`${url}`, {\r\n        params,\r\n        headers: {\r\n          token: 'e7d07cc4378d1fe196bb7ceb02558e16bbbcdfd1ccc20a85731e5eabf1b09b26'\r\n        },\r\n        ...config\r\n      }).then((res) => {\r\n        loadingnum--\r\n        if (!loadingnum) {\r\n          hideLoading()\r\n        }\r\n        resolve(res.data)\r\n      }).catch((error) => {\r\n        loadingnum--\r\n        if (!loadingnum) {\r\n          hideLoading()\r\n        }\r\n        reject(error)\r\n        helper.E('网络异常')\r\n      })\r\n    })\r\n  }\r\n\r\n  apiPost (url, params) {\r\n    showLoading()\r\n    return new Promise((resolve, reject) => {\r\n      this.instance.post(`${url}`, qs.stringify(params)).then((res) => {\r\n        hideLoading()\r\n        resolve(res.data)\r\n      }).catch((error) => {\r\n        reject(error)\r\n        hideLoading()\r\n        helper.E('网络异常')\r\n      })\r\n    })\r\n  }\r\n\r\n  apiJson (url, params, config) {\r\n    showLoading()\r\n    loadingnum++\r\n    this.setToken()\r\n    return new Promise((resolve, reject) => {\r\n      this.instance.post(`${url}`, params, { headers: { 'Content-Type': 'application/json' }, ...config }).then((res) => {\r\n        loadingnum--\r\n        if (!loadingnum) {\r\n          hideLoading()\r\n        }\r\n        resolve(res.data)\r\n      }).catch((error) => {\r\n        loadingnum--\r\n        if (!loadingnum) {\r\n          hideLoading()\r\n        }\r\n        reject(error)\r\n        helper.E('网络异常')\r\n      })\r\n    })\r\n  }\r\n  apiPut (params) {\r\n    showLoading()\r\n    // this.setToken()\r\n    // let reader = new FileReader();\r\n    // reader.readAsArrayBuffer(params.file); //转化二进制流，异步方法\r\n    // reader.onload = (e) => { };\r\n    return new Promise((resolve, reject) => {\r\n      this.instance.put(params.url, params.file, { headers: { 'Content-Type': 'application/octet-stream;charset=utf-8' } }).then((res) => {\r\n        hideLoading()\r\n        resolve(res.data)\r\n      }).catch((error) => {\r\n        reject(error)\r\n        hideLoading()\r\n        helper.E('网络异常')\r\n      })\r\n    })\r\n  }\r\n  apiFile (url, fileKey, file) {\r\n    showLoading()\r\n    this.setToken()\r\n    const formData = new FormData()\r\n    formData.append(fileKey, file)\r\n\r\n    return new Promise((resolve, reject) => {\r\n      this.instance.post(url, formData, { headers: { 'Content-Type': 'multipart/form-data' } }).then((res) => {\r\n        hideLoading()\r\n        resolve(res.data)\r\n\r\n        // this.checkResCode(res)\r\n      }).catch(error => {\r\n        hideLoading()\r\n        reject(error)\r\n        helper.E('网络异常')\r\n      })\r\n    })\r\n  }\r\n}\r\n\r\nexport default new Request()\r\n\r\n```\r\n\r\n## service.project.js\r\n\r\n```js\r\n// 使用案例\r\n\r\nimport request from './request'\r\nimport { Message } from 'element-ui'\r\n\r\nasync function req ({\r\n  url,\r\n  method = 'post',\r\n  params = {},\r\n  config = {}\r\n}) {\r\n  const map = {\r\n    post: request.apiJson,\r\n    get: request.apiGet\r\n  }\r\n\r\n  if (url.startsWith('/customer') || url.startsWith('/file')) {\r\n    url = process.env.VUE_APP_CM_URL + url // 0803分支上的原来设置 测试\r\n    // url = 'https://cm.gewings.cn' + url // 客服生产\r\n  } else if (url.startsWith('/ecard')) {\r\n    url = process.env.VUE_APP_MP_URL + url\r\n    // url = '' + url // 本地\r\n  } else if (url.startsWith('/jchd')) {\r\n    let newurl = url.split('/jchd')[1]\r\n    url = process.env.VUE_APP_JC_URL + newurl\r\n    // url = 'https://cloud-marketing-test-temp.oss-cn-shanghai.aliyuncs.com' + newurl // 本地\r\n  } else {\r\n    url = '/api-pla' + url\r\n  }\r\n  const res = await map[method].call(request,\r\n    url,\r\n    params,\r\n    config\r\n  )\r\n\r\n  if (url.includes('/file/download')) {\r\n    return res\r\n  }\r\n\r\n  if (url.includes('/ecard/file/')) {\r\n    return res\r\n  }\r\n  if (url.includes('oss-cn')) {\r\n    return res\r\n  }\r\n\r\n  const { errcode } = res\r\n  // eslint-disable-next-line eqeqeq\r\n  if (errcode == 0) {\r\n    return res\r\n  }\r\n    \r\n  Message.error(res.errmsg || '请求失败')\r\n  throw new Error('request failed')\r\n}\r\n\r\nfunction reqPost (url, params, config) {\r\n  return req({\r\n    url,\r\n    params,\r\n    method: 'post',\r\n    config\r\n  })\r\n}\r\n\r\nfunction reqGet (url, params, config) {\r\n  return req({\r\n    url,\r\n    params,\r\n    method: 'get',\r\n    config\r\n  })\r\n}\r\n\r\nconst sysMgmt = {\r\n  addDeptList (data) {\r\n    return reqPost('/infra/add_dept_list', data)\r\n  },\r\n}\r\n\r\nexport default {\r\n  sysMgmt,\r\n  ......\r\n}\r\n```\r\n\r\n## 原生小程序封装wx.request\r\n\r\n```js\r\nconst handleFail = (config, errmsg) => {\r\n    if (config.isShowToast) {\r\n        wx.showToast({\r\n            icon: 'none',\r\n            title: errmsg || '请求失败',\r\n        })\r\n    }\r\n    config && config.fail && config.fail(errmsg)\r\n}\r\n\r\nconst BASE_URLS = {\r\n    INFRA: 'https://bcard.erp.dahuahome.com' // 生产\r\n    // INFRA: 'https://mingpian-test.gewings.cn' // 测试\r\n}\r\n\r\nexport const request = (url, baseUrl = 'INFRA', method = 'get', data, config) => {\r\n    wx.request({\r\n        url: `${ BASE_URLS[baseUrl] + url}`,\r\n        data,\r\n        enableCache: true,\r\n        enableHttp2: true,\r\n        enableQuic: true,\r\n        header: {\r\n            token: '001449eae7d0b6df6afd6951b218bdf47c9523bb2ddebac053159a5216888e3b'\r\n        },\r\n        method,\r\n        timeout: 300000,\r\n        success: ({\r\n            data\r\n        }) => {\r\n            if (data && data.errcode === 0) {\r\n                config && config.success && config.success(data)\r\n                return\r\n            }\r\n            config.isShowToast = true\r\n            handleFail(config, data)\r\n        },\r\n        fail: ({\r\n            errmsg\r\n        }) => {\r\n            config.isShowToast = true\r\n            handleFail(config, errmsg)\r\n        },\r\n        complete: (res) => {},\r\n    })\r\n}\r\n```\r\n\r\n```js\r\nimport { request } from '../api/request.js'\r\n\r\nexport const getUserPhone = (data, config) => {\r\n    request('/applet/ecard/login_by_user_applet_code', 'INFRA', 'post', data, config)\r\n}\r\n\r\n......\r\n```\r\n\r\n",contentRendered:'<p>项目开发时，我们通常会封装一下axios请求文件，以便后期维护时方便</p>\n<h2 id="request-js" tabindex="-1"><a class="header-anchor" href="#request-js" aria-hidden="true">#</a> request.js</h2>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">import</span> request <span class="token keyword">from</span> <span class="token string">\'axios\'</span>\n<span class="token keyword">import</span> qs <span class="token keyword">from</span> <span class="token string">\'qs\'</span>\n<span class="token keyword">import</span> helper <span class="token keyword">from</span> <span class="token string">\'./helper\'</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Loading <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'element-ui\'</span>\n<span class="token keyword">let</span> loadingInstance\n<span class="token keyword">let</span> loadingnum <span class="token operator">=</span> <span class="token number">0</span>\n<span class="token keyword">const</span> <span class="token function-variable function">showLoading</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  loadingInstance <span class="token operator">=</span> Loading<span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">fullscreen</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> <span class="token function-variable function">hideLoading</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  loadingInstance<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\nrequest<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>withCredentials <span class="token operator">=</span> <span class="token boolean">false</span>\n<span class="token keyword">class</span> <span class="token class-name">Request</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 公共参数</span>\n    request<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>params\n    <span class="token comment">// 最大请求时间</span>\n    request<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>timeout <span class="token operator">=</span> <span class="token number">120</span> <span class="token operator">*</span> <span class="token number">1000</span>\n    <span class="token comment">// http code</span>\n    request<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span><span class="token function-variable function">validateStatus</span> <span class="token operator">=</span> <span class="token parameter">status</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> status <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> status <span class="token operator">&lt;</span> <span class="token number">300</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 赋予内部</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>instance <span class="token operator">=</span> request\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 设置token</span>\n  <span class="token function">setToken</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>instance<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>common<span class="token punctuation">[</span><span class="token string">\'cmtoken\'</span><span class="token punctuation">]</span> <span class="token operator">=</span> sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">\'login\'</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">\'login\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cmtoken <span class="token operator">:</span> <span class="token string">\'\'</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">/*\n     * @apiGet 公共get请求\n     * @apiPost 公共post请求\n     * @apiJson post参数json格式\n     * @apiFile 公共上传\n     * @url 必填\n     * @params 必填\n     * */</span>\n\n  <span class="token function">apiGet</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> params<span class="token punctuation">,</span> config</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">showLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    loadingnum<span class="token operator">++</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        params<span class="token punctuation">,</span>\n        <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token literal-property property">token</span><span class="token operator">:</span> <span class="token string">\'e7d07cc4378d1fe196bb7ceb02558e16bbbcdfd1ccc20a85731e5eabf1b09b26\'</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token operator">...</span>config\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        loadingnum<span class="token operator">--</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>loadingnum<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token function">hideLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n        <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        loadingnum<span class="token operator">--</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>loadingnum<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token function">hideLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n        <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>\n        helper<span class="token punctuation">.</span><span class="token constant">E</span><span class="token punctuation">(</span><span class="token string">\'网络异常\'</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">apiPost</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">showLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> qs<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token function">hideLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>\n        <span class="token function">hideLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        helper<span class="token punctuation">.</span><span class="token constant">E</span><span class="token punctuation">(</span><span class="token string">\'网络异常\'</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">apiJson</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> params<span class="token punctuation">,</span> config</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">showLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    loadingnum<span class="token operator">++</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> params<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">\'Content-Type\'</span><span class="token operator">:</span> <span class="token string">\'application/json\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token operator">...</span>config <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        loadingnum<span class="token operator">--</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>loadingnum<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token function">hideLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n        <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        loadingnum<span class="token operator">--</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>loadingnum<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token function">hideLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n        <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>\n        helper<span class="token punctuation">.</span><span class="token constant">E</span><span class="token punctuation">(</span><span class="token string">\'网络异常\'</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">apiPut</span> <span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">showLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token comment">// this.setToken()</span>\n    <span class="token comment">// let reader = new FileReader();</span>\n    <span class="token comment">// reader.readAsArrayBuffer(params.file); //转化二进制流，异步方法</span>\n    <span class="token comment">// reader.onload = (e) => { };</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span>url<span class="token punctuation">,</span> params<span class="token punctuation">.</span>file<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">\'Content-Type\'</span><span class="token operator">:</span> <span class="token string">\'application/octet-stream;charset=utf-8\'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token function">hideLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>\n        <span class="token function">hideLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        helper<span class="token punctuation">.</span><span class="token constant">E</span><span class="token punctuation">(</span><span class="token string">\'网络异常\'</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">apiFile</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> fileKey<span class="token punctuation">,</span> file</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">showLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">const</span> formData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>fileKey<span class="token punctuation">,</span> file<span class="token punctuation">)</span>\n\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> formData<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">\'Content-Type\'</span><span class="token operator">:</span> <span class="token string">\'multipart/form-data\'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token function">hideLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span>\n\n        <span class="token comment">// this.checkResCode(res)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token function">hideLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>\n        helper<span class="token punctuation">.</span><span class="token constant">E</span><span class="token punctuation">(</span><span class="token string">\'网络异常\'</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Request</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br><span class="line-number">135</span><br><span class="line-number">136</span><br><span class="line-number">137</span><br><span class="line-number">138</span><br><span class="line-number">139</span><br><span class="line-number">140</span><br><span class="line-number">141</span><br><span class="line-number">142</span><br><span class="line-number">143</span><br></div></div><h2 id="service-project-js" tabindex="-1"><a class="header-anchor" href="#service-project-js" aria-hidden="true">#</a> service.project.js</h2>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 使用案例</span>\n\n<span class="token keyword">import</span> request <span class="token keyword">from</span> <span class="token string">\'./request\'</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Message <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'element-ui\'</span>\n\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">req</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  url<span class="token punctuation">,</span>\n  method <span class="token operator">=</span> <span class="token string">\'post\'</span><span class="token punctuation">,</span>\n  params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  config <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">post</span><span class="token operator">:</span> request<span class="token punctuation">.</span>apiJson<span class="token punctuation">,</span>\n    <span class="token literal-property property">get</span><span class="token operator">:</span> request<span class="token punctuation">.</span>apiGet\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">\'/customer\'</span><span class="token punctuation">)</span> <span class="token operator">||</span> url<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">\'/file\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    url <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">VUE_APP_CM_URL</span> <span class="token operator">+</span> url <span class="token comment">// 0803分支上的原来设置 测试</span>\n    <span class="token comment">// url = \'https://cm.gewings.cn\' + url // 客服生产</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">\'/ecard\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    url <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">VUE_APP_MP_URL</span> <span class="token operator">+</span> url\n    <span class="token comment">// url = \'\' + url // 本地</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">\'/jchd\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> newurl <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">\'/jchd\'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>\n    url <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">VUE_APP_JC_URL</span> <span class="token operator">+</span> newurl\n    <span class="token comment">// url = \'https://cloud-marketing-test-temp.oss-cn-shanghai.aliyuncs.com\' + newurl // 本地</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    url <span class="token operator">=</span> <span class="token string">\'/api-pla\'</span> <span class="token operator">+</span> url\n  <span class="token punctuation">}</span>\n  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> map<span class="token punctuation">[</span>method<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>\n    url<span class="token punctuation">,</span>\n    params<span class="token punctuation">,</span>\n    config\n  <span class="token punctuation">)</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">\'/file/download\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> res\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">\'/ecard/file/\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> res\n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">\'oss-cn\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> res\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> errcode <span class="token punctuation">}</span> <span class="token operator">=</span> res\n  <span class="token comment">// eslint-disable-next-line eqeqeq</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>errcode <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> res\n  <span class="token punctuation">}</span>\n    \n  Message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>errmsg <span class="token operator">||</span> <span class="token string">\'请求失败\'</span><span class="token punctuation">)</span>\n  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">\'request failed\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">reqPost</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> params<span class="token punctuation">,</span> config</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">req</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    url<span class="token punctuation">,</span>\n    params<span class="token punctuation">,</span>\n    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">\'post\'</span><span class="token punctuation">,</span>\n    config\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">reqGet</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> params<span class="token punctuation">,</span> config</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">req</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    url<span class="token punctuation">,</span>\n    params<span class="token punctuation">,</span>\n    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">\'get\'</span><span class="token punctuation">,</span>\n    config\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> sysMgmt <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function">addDeptList</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">reqPost</span><span class="token punctuation">(</span><span class="token string">\'/infra/add_dept_list\'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  sysMgmt<span class="token punctuation">,</span>\n  <span class="token operator">...</span><span class="token operator">...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br></div></div><h2 id="原生小程序封装wx-request" tabindex="-1"><a class="header-anchor" href="#原生小程序封装wx-request" aria-hidden="true">#</a> 原生小程序封装wx.request</h2>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">handleFail</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">config<span class="token punctuation">,</span> errmsg</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>isShowToast<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        wx<span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n            <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">\'none\'</span><span class="token punctuation">,</span>\n            <span class="token literal-property property">title</span><span class="token operator">:</span> errmsg <span class="token operator">||</span> <span class="token string">\'请求失败\'</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    config <span class="token operator">&amp;&amp;</span> config<span class="token punctuation">.</span>fail <span class="token operator">&amp;&amp;</span> config<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span>errmsg<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> <span class="token constant">BASE_URLS</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token constant">INFRA</span><span class="token operator">:</span> <span class="token string">\'https://bcard.erp.dahuahome.com\'</span> <span class="token comment">// 生产</span>\n    <span class="token comment">// INFRA: \'https://mingpian-test.gewings.cn\' // 测试</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> request <span class="token operator">=</span> <span class="token punctuation">(</span>url<span class="token punctuation">,</span> baseUrl <span class="token operator">=</span> <span class="token string">\'INFRA\'</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token string">\'get\'</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> config<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    wx<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span> <span class="token constant">BASE_URLS</span><span class="token punctuation">[</span>baseUrl<span class="token punctuation">]</span> <span class="token operator">+</span> url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n        data<span class="token punctuation">,</span>\n        <span class="token literal-property property">enableCache</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">enableHttp2</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">enableQuic</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">header</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token literal-property property">token</span><span class="token operator">:</span> <span class="token string">\'001449eae7d0b6df6afd6951b218bdf47c9523bb2ddebac053159a5216888e3b\'</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        method<span class="token punctuation">,</span>\n        <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">300000</span><span class="token punctuation">,</span>\n        <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>\n            data\n        <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">.</span>errcode <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                config <span class="token operator">&amp;&amp;</span> config<span class="token punctuation">.</span>success <span class="token operator">&amp;&amp;</span> config<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>\n                <span class="token keyword">return</span>\n            <span class="token punctuation">}</span>\n            config<span class="token punctuation">.</span>isShowToast <span class="token operator">=</span> <span class="token boolean">true</span>\n            <span class="token function">handleFail</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> data<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token function-variable function">fail</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>\n            errmsg\n        <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n            config<span class="token punctuation">.</span>isShowToast <span class="token operator">=</span> <span class="token boolean">true</span>\n            <span class="token function">handleFail</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> errmsg<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token function-variable function">complete</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> request <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'../api/request.js\'</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">getUserPhone</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> config</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token function">request</span><span class="token punctuation">(</span><span class="token string">\'/applet/ecard/login_by_user_applet_code\'</span><span class="token punctuation">,</span> <span class="token string">\'INFRA\'</span><span class="token punctuation">,</span> <span class="token string">\'post\'</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> config<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token operator">...</span><span class="token operator">...</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>',date:"2021-06-24",deps:[],hoistedTags:[],links:[],pathInferred:"/axios/2021/20210624.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"20210624",filePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/axios/2021/20210624.md",filePathRelative:"axios/2021/20210624.md",componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/axios/2021/20210624.html.vue",componentFilePathRelative:"pages/axios/2021/20210624.html.vue",componentFileChunkName:"v-60490958",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/axios/2021/20210624.html.js",dataFilePathRelative:"pages/axios/2021/20210624.html.js",dataFileChunkName:"v-60490958",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/axios/2021/20210624.html",htmlFilePathRelative:"axios/2021/20210624.html"},{data:{key:"v-54b0cc6b",path:"/js/2021/20210419.html",title:"数组api",lang:"zh-CN",frontmatter:{title:"数组api",date:"2021-04-19T00:00:00.000Z",tags:["数组"],categories:["js"]},excerpt:"",headers:[{level:2,title:"数组的检测",slug:"数组的检测",children:[]},{level:2,title:"数组的转换方法",slug:"数组的转换方法",children:[]},{level:2,title:"数组的增删",slug:"数组的增删",children:[]},{level:2,title:"数组重排序",slug:"数组重排序",children:[]},{level:2,title:"操作方法",slug:"操作方法",children:[]},{level:2,title:"位置方法",slug:"位置方法",children:[]},{level:2,title:"迭代方法",slug:"迭代方法",children:[]}],git:{updatedTime:null,contributors:[]}},key:"v-54b0cc6b",path:"/js/2021/20210419.html",title:"数组api",lang:"zh-CN",frontmatter:{title:"数组api",date:"2021-04-19T00:00:00.000Z",tags:["数组"],categories:["js"]},excerpt:"",headers:[{level:2,title:"数组的检测",slug:"数组的检测",children:[]},{level:2,title:"数组的转换方法",slug:"数组的转换方法",children:[]},{level:2,title:"数组的增删",slug:"数组的增删",children:[]},{level:2,title:"数组重排序",slug:"数组重排序",children:[]},{level:2,title:"操作方法",slug:"操作方法",children:[]},{level:2,title:"位置方法",slug:"位置方法",children:[]},{level:2,title:"迭代方法",slug:"迭代方法",children:[]}],content:"\r\n数组是js中最常用的类型之一,它的每一项可以保存任何类型的数据,大小也是可以动态调整的,可以随着数据的添加自动增长.\r\n以下是一些常用的数组方法以及应用场景\r\n\r\n## 数组的检测\r\n\r\n对于检测某个对象是否是数组的问题,可以使用 **instcnceof, isArray**\r\n\r\ninstanceof: \r\n```js\r\nif (value instanceof Array){\r\n\t// 如果是数组,则执行某些操作\r\n}\r\n```\r\nisArray:\r\n```js\r\nif (Array.isArray(value)){\r\n\t// 如果是数组,则执行某些操作\r\n}\r\n```\r\n\r\n当然我们还可以通过原型去判断,例如使用 **Object.prototype.toString.call()**\r\n\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20210302090922368.png)\r\n\r\n## 数组的转换方法\r\n将数组转换成字符串可以使用 **toString()** 和 **join()** 两个方法都是不改变原数组,返回新的结果\r\n\r\ntoString() 会返回由数组中每个值的字符串形式拼接成的以逗号分隔的字符串\r\n```js\r\nlet arr = [1,2,3,4]\r\nconsole.log(arr.toString()) //\"1,2,3,4\"\r\n```\r\n join() 接收一个参数,用作返回字符串的分隔符,当不添加参数时,则默认使用逗号分隔\r\n```js\r\nlet arr = [1,2,3,4]\r\nconsole.log(arr.join())  // \"1,2,3,4\"\r\nconsole.log(arr.join('|'))  // \"1|2|3|4\"\r\nconsole.log(arr.join(':'))  // \"1:2:3:4\"\r\nconsole.log(arr.join(','))  // \"1,2,3,4\"\r\n```\r\n## 数组的增删\r\n数组的增:  **unshift()**, **push()**\r\n\r\n    unshift()是从数组的最前边,也就是下标为0的一边往数组中推入值,并返回数组的长度\r\n    push()是从数组的最尾端往数组中推入值,并返回数组的长度\r\n\r\n数组的删: **shift()**, **pop()**\r\n\r\n    shift()可以移除数组的第一项,并返回被删除的项\r\n    pop()可以移除数组的最后一项,并返回被删除的项\r\n\r\n## 数组重排序\r\n对于数组的重排序 可以使用 **reverse()**, **sort()**\r\n\r\nreverse()可以反转数组项的顺序(改变原数组)\r\n```js\r\nlet arr = [1,2,3,4,5]\r\narr.reverse()\r\nconsole.log(arr)  // [5,4,3,2,1]\r\n```\r\nsort()方法在默认情况下按升序进行排列\r\n```js\r\nlet arr = [5,4,2,3,1]\r\narr.sort()\r\nconsole.log(arr)  // [1,2,3,4,5]\r\n```\r\n当然sort()方法是调用每一项的toString()方法,然后比较得到的字符串,因为可能会产生对数字项排序不准确的情况,对于这种情况,sort()可以通过接收一个比较函数做参数来解决\r\n```js\r\nfunction compare(val1,val2){\r\n    if (val1 < val2){\r\n        return -1\r\n    } else if (val1 > val2){\r\n        return 1\r\n    } else {\r\n        return 0\r\n    }\r\n}\r\n\r\n```\r\n## 操作方法\r\n所谓操作方法是只操作包含在数组中的项的方法,如: **concat()**,**slice()**, **splice()**\r\n\r\n**concat()** 可以基于当前数组的所有项创建一个新数组,参数作为新数组中的项,不会改变原数组\r\n```js\r\nlet arr = [1,3,4,5]\r\nlet arr1 = arr.concat('name','age',[6,7,8])\r\nconsole.log(arr) // [1, 3, 4, 5]\r\nconsole.log(arr1) // [1, 3, 4, 5, \"name\", \"age\", 6, 7, 8]\r\n```\r\n**slice()** 可以基于当前数组的一个或者多个项创建一个新数组,不会影响原数组,接收一或两个参数(start, end).\r\n```js\r\nlet arr = [1,3,4,5]\r\nlet arr1 = arr.slice(1)\r\nlet arr2 = arr.slice(1,2)\r\nconsole.log(arr1)  // [3, 4, 5]\r\nconsole.log(arr2)  // [3] 需要注意的一点,slice不会包含结束位置的项\r\n```\r\n**splice()** 的作用相比较数组的其他方法,算是非常强大了,它可以用于 **删除,插入,替换**\r\n\r\nsplice可以接收三个或多个参数,第一个参数为起始位置,第二个为要删除的项数,第三到第n个参数为需要插入的项\r\n```js\r\nlet arr = [1,3,4,5]\r\nlet arr1 = arr.splice(0,2)  // 从0位开始,删除两位\r\n\r\nlet arr2 = [1,3,4,5]\r\nlet arr3 = arr2.splice(0,0,6,7)  // 从0位开始,删除0位,插入6,7\r\n\r\nlet arr4 = [1,3,4,5] \r\nlet arr5 = arr4.splice(0,2,8,9)  // 从0位开始,删除2位,插入8,9\r\nconsole.log(arr)  // [4, 5]\r\nconsole.log(arr,arr1)  // [4, 5], [1, 3]\r\nconsole.log(arr2,arr3)  // [6, 7, 1, 3, 4, 5],[]\r\nconsole.log(arr4,arr5)  // [8, 9, 4, 5], [1, 3]\r\n```\r\n从上面的例子可以看出,splice()会改变原数组,并返回删除的项组成的新数组\r\n\r\n## 位置方法\r\n查找数组中某一项可以使用数组的位置方法: **indexOf()**, **lastIndexOf()**\r\n两个方法都接收两个参数: 要查找的项和查找的起点位置的索引(可选),indexOf是从开头查找,lastIndexOf是从末尾开始查找,两个方法都会返回查询项在数组中的位置,在没找到的情况下会返回-1\r\n\r\n```js\r\nlet arr = ['name','age','张三','李四','张三']\r\nconsole.log(arr.indexOf('张三'))  // 2  \r\nconsole.log(arr.indexOf('张三',3))  // 4  \r\nconsole.log(arr.lastIndexOf('张三'))  // 4\r\nconsole.log(arr.lastIndexOf('张三',3))  // 2\r\n```\r\n\r\n## 迭代方法\r\n    every() 对每一项的运行给定一个函数,如果对每一项返回为true,则返回true\r\n    filter() 对每一项的运行给定一个函数,最后返回由true的项组成的新数组\r\n    forEach() 对每一项的运行给定一个函数,此方法没有返回值\r\n    map() 对每一项的运行给定一个函数,返回每次函数调用结果组成的数组\r\n    some() 对每一项的运行给定一个函数,如果函数对任一项返回true,则返回true\r\n",contentRendered:'<p>数组是js中最常用的类型之一,它的每一项可以保存任何类型的数据,大小也是可以动态调整的,可以随着数据的添加自动增长.\n以下是一些常用的数组方法以及应用场景</p>\n<h2 id="数组的检测" tabindex="-1"><a class="header-anchor" href="#数组的检测" aria-hidden="true">#</a> 数组的检测</h2>\n<p>对于检测某个对象是否是数组的问题,可以使用 <strong>instcnceof, isArray</strong></p>\n<p>instanceof:</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t<span class="token comment">// 如果是数组,则执行某些操作</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>isArray:</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t<span class="token comment">// 如果是数组,则执行某些操作</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>当然我们还可以通过原型去判断,例如使用 <strong>Object.prototype.toString.call()</strong></p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="在这里插入图片描述" originSrc="https://img-blog.csdnimg.cn/20210302090922368.png" data="aurora"></p>\n<h2 id="数组的转换方法" tabindex="-1"><a class="header-anchor" href="#数组的转换方法" aria-hidden="true">#</a> 数组的转换方法</h2>\n<p>将数组转换成字符串可以使用 <strong>toString()</strong> 和 <strong>join()</strong> 两个方法都是不改变原数组,返回新的结果</p>\n<p>toString() 会返回由数组中每个值的字符串形式拼接成的以逗号分隔的字符串</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//"1,2,3,4"</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>join() 接收一个参数,用作返回字符串的分隔符,当不添加参数时,则默认使用逗号分隔</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// "1,2,3,4"</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">\'|\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// "1|2|3|4"</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">\':\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// "1:2:3:4"</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">\',\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// "1,2,3,4"</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="数组的增删" tabindex="-1"><a class="header-anchor" href="#数组的增删" aria-hidden="true">#</a> 数组的增删</h2>\n<p>数组的增:  <strong>unshift()</strong>, <strong>push()</strong></p>\n<pre><code>unshift()是从数组的最前边,也就是下标为0的一边往数组中推入值,并返回数组的长度\npush()是从数组的最尾端往数组中推入值,并返回数组的长度\n</code></pre>\n<p>数组的删: <strong>shift()</strong>, <strong>pop()</strong></p>\n<pre><code>shift()可以移除数组的第一项,并返回被删除的项\npop()可以移除数组的最后一项,并返回被删除的项\n</code></pre>\n<h2 id="数组重排序" tabindex="-1"><a class="header-anchor" href="#数组重排序" aria-hidden="true">#</a> 数组重排序</h2>\n<p>对于数组的重排序 可以使用 <strong>reverse()</strong>, <strong>sort()</strong></p>\n<p>reverse()可以反转数组项的顺序(改变原数组)</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>\narr<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>  <span class="token comment">// [5,4,3,2,1]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>sort()方法在默认情况下按升序进行排列</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>\narr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>  <span class="token comment">// [1,2,3,4,5]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>当然sort()方法是调用每一项的toString()方法,然后比较得到的字符串,因为可能会产生对数字项排序不准确的情况,对于这种情况,sort()可以通过接收一个比较函数做参数来解决</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token parameter">val1<span class="token punctuation">,</span>val2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>val1 <span class="token operator">&lt;</span> val2<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>val1 <span class="token operator">></span> val2<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token number">1</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token number">0</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="操作方法" tabindex="-1"><a class="header-anchor" href="#操作方法" aria-hidden="true">#</a> 操作方法</h2>\n<p>所谓操作方法是只操作包含在数组中的项的方法,如: <strong>concat()</strong>,<strong>slice()</strong>, <strong>splice()</strong></p>\n<p><strong>concat()</strong> 可以基于当前数组的所有项创建一个新数组,参数作为新数组中的项,不会改变原数组</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>\n<span class="token keyword">let</span> arr1 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">\'name\'</span><span class="token punctuation">,</span><span class="token string">\'age\'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">// [1, 3, 4, 5]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span> <span class="token comment">// [1, 3, 4, 5, "name", "age", 6, 7, 8]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><strong>slice()</strong> 可以基于当前数组的一个或者多个项创建一个新数组,不会影响原数组,接收一或两个参数(start, end).</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>\n<span class="token keyword">let</span> arr1 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token keyword">let</span> arr2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span>  <span class="token comment">// [3, 4, 5]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span>  <span class="token comment">// [3] 需要注意的一点,slice不会包含结束位置的项</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><strong>splice()</strong> 的作用相比较数组的其他方法,算是非常强大了,它可以用于 <strong>删除,插入,替换</strong></p>\n<p>splice可以接收三个或多个参数,第一个参数为起始位置,第二个为要删除的项数,第三到第n个参数为需要插入的项</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>\n<span class="token keyword">let</span> arr1 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment">// 从0位开始,删除两位</span>\n\n<span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>\n<span class="token keyword">let</span> arr3 <span class="token operator">=</span> arr2<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span>  <span class="token comment">// 从0位开始,删除0位,插入6,7</span>\n\n<span class="token keyword">let</span> arr4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span> \n<span class="token keyword">let</span> arr5 <span class="token operator">=</span> arr4<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span>  <span class="token comment">// 从0位开始,删除2位,插入8,9</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>  <span class="token comment">// [4, 5]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>arr1<span class="token punctuation">)</span>  <span class="token comment">// [4, 5], [1, 3]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">,</span>arr3<span class="token punctuation">)</span>  <span class="token comment">// [6, 7, 1, 3, 4, 5],[]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr4<span class="token punctuation">,</span>arr5<span class="token punctuation">)</span>  <span class="token comment">// [8, 9, 4, 5], [1, 3]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>从上面的例子可以看出,splice()会改变原数组,并返回删除的项组成的新数组</p>\n<h2 id="位置方法" tabindex="-1"><a class="header-anchor" href="#位置方法" aria-hidden="true">#</a> 位置方法</h2>\n<p>查找数组中某一项可以使用数组的位置方法: <strong>indexOf()</strong>, <strong>lastIndexOf()</strong>\n两个方法都接收两个参数: 要查找的项和查找的起点位置的索引(可选),indexOf是从开头查找,lastIndexOf是从末尾开始查找,两个方法都会返回查询项在数组中的位置,在没找到的情况下会返回-1</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'name\'</span><span class="token punctuation">,</span><span class="token string">\'age\'</span><span class="token punctuation">,</span><span class="token string">\'张三\'</span><span class="token punctuation">,</span><span class="token string">\'李四\'</span><span class="token punctuation">,</span><span class="token string">\'张三\'</span><span class="token punctuation">]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">\'张三\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 2  </span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">\'张三\'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 4  </span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">\'张三\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 4</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">\'张三\'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 2</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="迭代方法" tabindex="-1"><a class="header-anchor" href="#迭代方法" aria-hidden="true">#</a> 迭代方法</h2>\n<pre><code>every() 对每一项的运行给定一个函数,如果对每一项返回为true,则返回true\nfilter() 对每一项的运行给定一个函数,最后返回由true的项组成的新数组\nforEach() 对每一项的运行给定一个函数,此方法没有返回值\nmap() 对每一项的运行给定一个函数,返回每次函数调用结果组成的数组\nsome() 对每一项的运行给定一个函数,如果函数对任一项返回true,则返回true\n</code></pre>\n',date:"2021-04-19",deps:[],hoistedTags:[],links:[],pathInferred:"/js/2021/20210419.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"20210419",filePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/js/2021/20210419.md",filePathRelative:"js/2021/20210419.md",componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/js/2021/20210419.html.vue",componentFilePathRelative:"pages/js/2021/20210419.html.vue",componentFileChunkName:"v-54b0cc6b",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/js/2021/20210419.html.js",dataFilePathRelative:"pages/js/2021/20210419.html.js",dataFileChunkName:"v-54b0cc6b",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/js/2021/20210419.html",htmlFilePathRelative:"js/2021/20210419.html"},{data:{key:"v-7ee8eb88",path:"/js/2021/20220718.html",title:"将数据处理成树形结构的数据",lang:"zh-CN",frontmatter:{title:"将数据处理成树形结构的数据",date:"2022-07-18T00:00:00.000Z",tags:["算法"],categories:["js"]},excerpt:"",headers:[{level:2,title:"js处理方法",slug:"js处理方法",children:[]}],git:{updatedTime:null,contributors:[]}},key:"v-7ee8eb88",path:"/js/2021/20220718.html",title:"将数据处理成树形结构的数据",lang:"zh-CN",frontmatter:{title:"将数据处理成树形结构的数据",date:"2022-07-18T00:00:00.000Z",tags:["算法"],categories:["js"]},excerpt:"",headers:[{level:2,title:"js处理方法",slug:"js处理方法",children:[]}],content:"\r\n案例环境为vue2，不过主要是 js 方面，所以问题不大\r\n\r\n## js处理方法\r\n\r\n后端返回的数据类型：\r\n\r\n1. 为Array[object]类型，一个数组每一项是个对象\r\n\r\n```js\r\n// 发送请求给后端，后端返回数据\r\n// res.dept_list:我们需要转换的数据\r\nexport function getDeptTree () {\r\n  return getDeptListApi().then((res) => {\r\n    return listToTree(res.dept_list || [], '0', {\r\n      id: 'deptId',\r\n      parentId: 'parentId'\r\n    })\r\n  })\r\n}\r\n\r\n// 转换函数\r\n// 如果不需要排列可以将 sort 这个函数去掉\r\n// parentId：对应父级的id \r\n// parentIp：需要放在根目录的节点对应的id\r\nexport function listToTree (\r\n  list,\r\n  parentIp = null,\r\n  { parentId = 'parentId', id = 'id' } = { parentId: 'parentId', id: 'id' }\r\n) {\r\n  return list.sort((a, b) => a.orderNum - b.orderNum)\r\n    .filter(item => item[parentId] === parentIp)\r\n    .map(item => ({\r\n      ...item,\r\n      children: listToTree(list, item[id], { parentId, id })\r\n    }))\r\n}\r\n\r\n```\r\n",contentRendered:'<p>案例环境为vue2，不过主要是 js 方面，所以问题不大</p>\n<h2 id="js处理方法" tabindex="-1"><a class="header-anchor" href="#js处理方法" aria-hidden="true">#</a> js处理方法</h2>\n<p>后端返回的数据类型：</p>\n<ol>\n<li>为Array[object]类型，一个数组每一项是个对象</li>\n</ol>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 发送请求给后端，后端返回数据</span>\n<span class="token comment">// res.dept_list:我们需要转换的数据</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getDeptTree</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">getDeptListApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">listToTree</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>dept_list <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">\'0\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">\'deptId\'</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">parentId</span><span class="token operator">:</span> <span class="token string">\'parentId\'</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 转换函数</span>\n<span class="token comment">// 如果不需要排列可以将 sort 这个函数去掉</span>\n<span class="token comment">// parentId：对应父级的id </span>\n<span class="token comment">// parentIp：需要放在根目录的节点对应的id</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">listToTree</span> <span class="token punctuation">(</span>\n  list<span class="token punctuation">,</span>\n  parentIp <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> parentId <span class="token operator">=</span> <span class="token string">\'parentId\'</span><span class="token punctuation">,</span> id <span class="token operator">=</span> <span class="token string">\'id\'</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">parentId</span><span class="token operator">:</span> <span class="token string">\'parentId\'</span><span class="token punctuation">,</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">\'id\'</span> <span class="token punctuation">}</span>\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a<span class="token punctuation">.</span>orderNum <span class="token operator">-</span> b<span class="token punctuation">.</span>orderNum<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> item<span class="token punctuation">[</span>parentId<span class="token punctuation">]</span> <span class="token operator">===</span> parentIp<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token operator">...</span>item<span class="token punctuation">,</span>\n      <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token function">listToTree</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> item<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> parentId<span class="token punctuation">,</span> id <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div>',date:"2022-07-18",deps:[],hoistedTags:[],links:[],pathInferred:"/js/2021/20220718.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"20220718",filePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/js/2021/20220718.md",filePathRelative:"js/2021/20220718.md",componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/js/2021/20220718.html.vue",componentFilePathRelative:"pages/js/2021/20220718.html.vue",componentFileChunkName:"v-7ee8eb88",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/js/2021/20220718.html.js",dataFilePathRelative:"pages/js/2021/20220718.html.js",dataFileChunkName:"v-7ee8eb88",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/js/2021/20220718.html",htmlFilePathRelative:"js/2021/20220718.html"},{data:{key:"v-5d086546",path:"/css/2023/20230108.html",title:"那些炫酷的CSS文字效果之诗词",lang:"zh-CN",frontmatter:{title:"那些炫酷的CSS文字效果之诗词",date:"2023-01-08T00:00:00.000Z",tags:["css"],categories:["css"]},excerpt:"",headers:[{level:2,title:"效果一",slug:"效果一",children:[]},{level:2,title:"效果二",slug:"效果二",children:[]},{level:2,title:"效果三",slug:"效果三",children:[]},{level:2,title:"效果四",slug:"效果四",children:[]},{level:2,title:"效果五",slug:"效果五",children:[]},{level:2,title:"效果六",slug:"效果六",children:[]},{level:2,title:"效果七",slug:"效果七",children:[]},{level:2,title:"效果八",slug:"效果八",children:[]},{level:2,title:"效果九",slug:"效果九",children:[]},{level:2,title:"效果十",slug:"效果十",children:[]}],git:{updatedTime:null,contributors:[]}},key:"v-5d086546",path:"/css/2023/20230108.html",title:"那些炫酷的CSS文字效果之诗词",lang:"zh-CN",frontmatter:{title:"那些炫酷的CSS文字效果之诗词",date:"2023-01-08T00:00:00.000Z",tags:["css"],categories:["css"]},excerpt:"",headers:[{level:2,title:"效果一",slug:"效果一",children:[]},{level:2,title:"效果二",slug:"效果二",children:[]},{level:2,title:"效果三",slug:"效果三",children:[]},{level:2,title:"效果四",slug:"效果四",children:[]},{level:2,title:"效果五",slug:"效果五",children:[]},{level:2,title:"效果六",slug:"效果六",children:[]},{level:2,title:"效果七",slug:"效果七",children:[]},{level:2,title:"效果八",slug:"效果八",children:[]},{level:2,title:"效果九",slug:"效果九",children:[]},{level:2,title:"效果十",slug:"效果十",children:[]}],content:"\r\n::: tip\r\n\r\n不知不觉已经迈入2023年，今年是兔年，想到兔子就会联想到玉兔，中秋，胡萝卜，兔子不吃窝边草，这就越扯越远了，今天的主题是用纯CSS来实现各种不错的文字效果，文字则摘录古诗词中有关《兔》相关的诗词，让我们一边欣赏古诗词的同时一边走进CSS的世界。\r\n\r\n:::\r\n\r\n## 效果一\r\n\r\n> 兔苑词才去不还，兰亭水石空明月。 —— 陈陶 《 将进酒 》\r\n\r\n![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9b76d6bb444f4eabadf971d22ddc79f8~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp)\r\n\r\n文字从清晰到模糊到彻底看不见，给人一种若隐若现的朦胧美，其核心代码就是在`animation`动画中设置`filter`的`blur`，即高斯模糊，当设置的数值过大时，文字会模糊到消失不见。\r\n\r\n```css\r\nfilter: blur(1.5rem);\r\n\r\n```\r\n\r\n## 效果二\r\n\r\n> 三五明月满，四五蟾兔缺。 —— 佚名 《 孟冬寒气至 》\r\n\r\n![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/575616bed93f4934bb2b2650bd167fe7~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp)\r\n\r\n这里主要用到了svg的到文本标签text，并结合`stroke`和`fill`属性制作空心文字，最后结合`animation`动画调整`stroke`和`fill`的数值就实现了上图的效果。\r\n\r\n```css\r\n@keyframes textAnimate {\r\n  0% {\r\n    stroke-dasharray: 0 50%;\r\n    stroke-dashoffset:  20%;\r\n    fill:hsl(66, 71%, 61%)\r\n  }\r\n  \r\n  100% {\r\n    stroke-dasharray: 50% 0;\r\n    stroke-dashoffstet: -20%;\r\n    fill: hsla(189, 68%, 75%,0%)\r\n  }\r\n}\r\n\r\n```\r\n\r\n## 效果三\r\n\r\n> 不睹行人迹，但见狐兔兴。 —— 范云 《 渡黄河 》\r\n\r\n![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0496196dccca42b9adff964939b8cfcc~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp)\r\n\r\n此效果主要是设置`background-clip: text`将背景色应用到文字区域，再通过`animation`动画不断调整`background-position`使其背景动起来。\r\n\r\n```css\r\nbackground: linear-gradient(150deg, rgba(155,93,229,1) 0%, rgba(241,91,181,1) 20%, rgba(254,228,64,1) 40%, rgba(0,187,249,1) 60%, rgba(0,245,212,1) 80%);\r\nbackground-size: 20% 20%;\r\nbackground-color: #840b2a;\r\n-webkit-background-clip: text;\r\n-webkit-text-fill-color: transparent;\r\nanimation: gradient 5s linear infinite;\r\n\r\n```\r\n\r\n## 效果四\r\n\r\n> 兔走乌飞不住，人生几度三台。 —— 晏殊 《 清平乐 》\r\n\r\n![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7f08608a72814873a050e8a6ec187666~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp)\r\n\r\n这个效果主要是通过设置`text-shadow`，再通过`animation`动画不断调整每个阴影部分的位置和颜色。\r\n\r\n```css\r\ntext-shadow:\r\n      4px -4px 0 hsla(0, 100%, 50%, 1), \r\n      3px -3px 0 hsla(0, 100%, 50%, 1), \r\n      2px -2px 0 hsla(0, 100%, 50%, 1), \r\n      1px -1px 0 hsla(0, 100%, 50%, 1),\r\n      -4px 4px 0 hsla(180, 100%, 50%, 1), \r\n      -3px 3px 0 hsla(180, 100%, 50%, 1), \r\n      -2px 2px 0 hsla(180, 100%, 50%, 1), \r\n      -1px 1px 0 hsla(180, 100%, 50%, 1)\r\n    ;\r\n\r\n```\r\n\r\n## 效果五\r\n\r\n> 明月三五前，看看玉兔圆。\r\n\r\n![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/744f7d5927ee4cb5b7ff6aaeb7c68556~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp)\r\n\r\n此效果和效果三类似，设置`background-clip: text`将背景色应用到文字区域，比较有特色的是将文字设置了不同的颜色并有倾斜切割的感觉，主要是通过设置`linear-gradient`中的`transparent`透明色实现，核心代码如下：\r\n\r\n```css\r\nbackground: linear-gradient(219deg, \r\n        var(--color-1) 19%, \r\n        transparent 19%,transparent 20%, \r\n        var(--color-2) 20%, var(--color-2)  39%,\r\n        transparent 39%,transparent 40%, \r\n        var(--color-3) 40%,var(--color-3) 59% ,\r\n        transparent 59%,transparent 60%, \r\n        var(--color-4) 60%, var(--color-4) 79%,\r\n        transparent 79%, transparent 80%, \r\n        var(--color-5) 80%);\r\nbackground-clip: text;\r\n\r\n```\r\n\r\n## 效果六\r\n\r\n> 白兔捣药成，问言与谁餐。 —— 李白 《 古朗月行》\r\n\r\n![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3a05462f83544583a6de81a6786e6251~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp)\r\n\r\n这里的效果不是很明显，当文字过大的时候比较明显，其实就是和抖音logo的效果比较类似，会有红色和蓝色两个颜色的抖动效果，两个颜色是由两个伪元素的`text-shadow`实现，抖动的效果是通过设置`clip:rect`并设置随机的位置，所以我们看到的画面中出现的位置都不是重复的。\r\n\r\n```css\r\n&::after{\r\n  content:attr(data-text);\r\n  position:absolute;\r\n  width: 100%;\r\n  left:50%;\r\n  transform: translateX(-50%);\r\n  text-shadow:-2px 0 red;\r\n  top:20px;\r\n  color:white;\r\n  background:black;\r\n  overflow:hidden;\r\n  clip:rect(0,900px,0,0); \r\n  animation:noise-anim 2s infinite linear alternate-reverse;\r\n}\r\n\r\n@keyframes noise-anim{\r\n  $steps:20;\r\n  @for $i from 0 through $steps{\r\n    #{percentage($i*(1/$steps))}{\r\n      clip:rect(random(100)+px,9999px,random(100)+px,0);\r\n    }\r\n  }\r\n}\r\n\r\n```\r\n\r\n## 效果七\r\n\r\n> 兔月半轮明。 —— 隋 江总《关山月》\r\n\r\n![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c792155353e94229a7eff1631e354ace~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp)\r\n\r\n这个没有特殊的效果，就是一个纯静态的文字阴影，但是比一般的文字阴影更具有冲击感，所以也列举出来了，核心就是设置不同位置的不同参数文字阴影，以下只贴出了一部分代码。\r\n\r\n```css\r\ntext-shadow: \r\n      1px -1px 0 #767676, \r\n      -1px 2px 1px #737272, \r\n      -2px 4px 1px #767474, \r\n      -3px 6px 1px #787777, \r\n      -4px 8px 1px #7b7a7a, \r\n      -5px 10px 1px #7f7d7d, \r\n      -6px 12px 1px #828181, \r\n      -7px 14px 1px #868585, \r\n      ...\r\n\r\n```\r\n\r\n为方便大家理解，我修改了不同位置的颜色，看这个图大家就容易理解为什么可以实现了，随着越到后面设置的颜色就越淡，阴影效果就出来了。 ![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/60d2c989575a4762a9173718a5aa559c~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp)\r\n\r\n## 效果八\r\n\r\n> 兔饥食山林，兔渴饮川泽。 —— 宋 秦观《和裴仲谟放兔行》\r\n\r\n![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/508fc58d20ce49ce83f9fed782106824~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp)\r\n\r\n这里是将文字变成一缕白烟飞走了，看着还是很有意境的感觉。核心实现逻辑是给每个文字设置平移，旋转，倾斜，放大，透明度，文字阴影，然后从左往右给每个文字设置延迟执行动画的时间。这里仔细看可以发现每个文字运动的效果并不是完全一样，这里是通过奇偶选择器设置了不同的`transform`属性值。\r\n\r\n```css\r\n@keyframes smoky {\r\n  60% {\r\n    text-shadow: 0 0 40px whitesmoke;\r\n  }\r\n  to {\r\n    transform:\r\n      translate3d(15rem,-8rem,0)\r\n      rotate(-40deg)\r\n      skewX(70deg)\r\n      scale(1.5);\r\n    text-shadow: 0 0 20px whitesmoke;\r\n    opacity: 0;\r\n  }\r\n}\r\n\r\n```\r\n\r\n## 效果九\r\n\r\n> 茕茕白兔，东走西顾。  —— 汉 佚名 《古艳歌》\r\n\r\n![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/90618846c10e4486b2ee09ced7995d34~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp)\r\n\r\n这个效果看着和效果三是不是有点类似，核心也是设置`background-clip: text`将背景色应用到文字区域，但是这里的背景动画看着比较复杂，但其实代码比较简单，就是设置了一张gif的背景图，这个在实际项目中大家可以看其复杂度灵活运用。\r\n\r\n## 效果十\r\n\r\n> 有兔斯首，炮之燔之。 —— 先秦 佚名《瓠叶》\r\n\r\n![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dd34294101d74550a9fd380a1d352365~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp)\r\n\r\n这个效果的gif图不是很逼真，大家可以看在线的效果，这里并没有用到`background-clip: text`，而是用到了`mix-blend-mode`混合模式，这里用到了`multiply`和`color-dodge`两个混合模式，图中的白色区域的移动是通过设置`translate`平移使画面动起来了。\r\n\r\n```css\r\n.gradient {\r\n    background: linear-gradient(45deg, red, gold, lightgreen, gold, red);\r\n    mix-blend-mode: multiply;\r\n}\r\n\r\n.spotlight {\r\n    background: \r\n        radial-gradient(\r\n            circle,\r\n            white,\r\n            transparent 25%\r\n        ) center / 25% 25%,\r\n        radial-gradient(\r\n            circle,\r\n            white,\r\n            black 25%\r\n        ) center / 12.5% 12.5%;\r\n    animation: light 5s linear infinite;\r\n    mix-blend-mode: color-dodge;\r\n}\r\n```",contentRendered:'<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>不知不觉已经迈入2023年，今年是兔年，想到兔子就会联想到玉兔，中秋，胡萝卜，兔子不吃窝边草，这就越扯越远了，今天的主题是用纯CSS来实现各种不错的文字效果，文字则摘录古诗词中有关《兔》相关的诗词，让我们一边欣赏古诗词的同时一边走进CSS的世界。</p>\n</div>\n<h2 id="效果一" tabindex="-1"><a class="header-anchor" href="#效果一" aria-hidden="true">#</a> 效果一</h2>\n<blockquote>\n<p>兔苑词才去不还，兰亭水石空明月。 —— 陈陶 《 将进酒 》</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9b76d6bb444f4eabadf971d22ddc79f8~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" data="aurora"></p>\n<p>文字从清晰到模糊到彻底看不见，给人一种若隐若现的朦胧美，其核心代码就是在<code>animation</code>动画中设置<code>filter</code>的<code>blur</code>，即高斯模糊，当设置的数值过大时，文字会模糊到消失不见。</p>\n<div class="language-css ext-css line-numbers-mode"><pre v-pre class="language-css"><code><span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">blur</span><span class="token punctuation">(</span>1.5rem<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="效果二" tabindex="-1"><a class="header-anchor" href="#效果二" aria-hidden="true">#</a> 效果二</h2>\n<blockquote>\n<p>三五明月满，四五蟾兔缺。 —— 佚名 《 孟冬寒气至 》</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/575616bed93f4934bb2b2650bd167fe7~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" data="aurora"></p>\n<p>这里主要用到了svg的到文本标签text，并结合<code>stroke</code>和<code>fill</code>属性制作空心文字，最后结合<code>animation</code>动画调整<code>stroke</code>和<code>fill</code>的数值就实现了上图的效果。</p>\n<div class="language-css ext-css line-numbers-mode"><pre v-pre class="language-css"><code><span class="token atrule"><span class="token rule">@keyframes</span> textAnimate</span> <span class="token punctuation">{</span>\n  <span class="token selector">0%</span> <span class="token punctuation">{</span>\n    <span class="token property">stroke-dasharray</span><span class="token punctuation">:</span> 0 50%<span class="token punctuation">;</span>\n    <span class="token property">stroke-dashoffset</span><span class="token punctuation">:</span>  20%<span class="token punctuation">;</span>\n    <span class="token property">fill</span><span class="token punctuation">:</span><span class="token function">hsl</span><span class="token punctuation">(</span>66<span class="token punctuation">,</span> 71%<span class="token punctuation">,</span> 61%<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  \n  <span class="token selector">100%</span> <span class="token punctuation">{</span>\n    <span class="token property">stroke-dasharray</span><span class="token punctuation">:</span> 50% 0<span class="token punctuation">;</span>\n    <span class="token property">stroke-dashoffstet</span><span class="token punctuation">:</span> -20%<span class="token punctuation">;</span>\n    <span class="token property">fill</span><span class="token punctuation">:</span> <span class="token function">hsla</span><span class="token punctuation">(</span>189<span class="token punctuation">,</span> 68%<span class="token punctuation">,</span> 75%<span class="token punctuation">,</span>0%<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="效果三" tabindex="-1"><a class="header-anchor" href="#效果三" aria-hidden="true">#</a> 效果三</h2>\n<blockquote>\n<p>不睹行人迹，但见狐兔兴。 —— 范云 《 渡黄河 》</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0496196dccca42b9adff964939b8cfcc~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" data="aurora"></p>\n<p>此效果主要是设置<code>background-clip: text</code>将背景色应用到文字区域，再通过<code>animation</code>动画不断调整<code>background-position</code>使其背景动起来。</p>\n<div class="language-css ext-css line-numbers-mode"><pre v-pre class="language-css"><code><span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>150deg<span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>155<span class="token punctuation">,</span>93<span class="token punctuation">,</span>229<span class="token punctuation">,</span>1<span class="token punctuation">)</span> 0%<span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>241<span class="token punctuation">,</span>91<span class="token punctuation">,</span>181<span class="token punctuation">,</span>1<span class="token punctuation">)</span> 20%<span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>254<span class="token punctuation">,</span>228<span class="token punctuation">,</span>64<span class="token punctuation">,</span>1<span class="token punctuation">)</span> 40%<span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span>187<span class="token punctuation">,</span>249<span class="token punctuation">,</span>1<span class="token punctuation">)</span> 60%<span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span>245<span class="token punctuation">,</span>212<span class="token punctuation">,</span>1<span class="token punctuation">)</span> 80%<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token property">background-size</span><span class="token punctuation">:</span> 20% 20%<span class="token punctuation">;</span>\n<span class="token property">background-color</span><span class="token punctuation">:</span> #840b2a<span class="token punctuation">;</span>\n<span class="token property">-webkit-background-clip</span><span class="token punctuation">:</span> text<span class="token punctuation">;</span>\n<span class="token property">-webkit-text-fill-color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span>\n<span class="token property">animation</span><span class="token punctuation">:</span> gradient 5s linear infinite<span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="效果四" tabindex="-1"><a class="header-anchor" href="#效果四" aria-hidden="true">#</a> 效果四</h2>\n<blockquote>\n<p>兔走乌飞不住，人生几度三台。 —— 晏殊 《 清平乐 》</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7f08608a72814873a050e8a6ec187666~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" data="aurora"></p>\n<p>这个效果主要是通过设置<code>text-shadow</code>，再通过<code>animation</code>动画不断调整每个阴影部分的位置和颜色。</p>\n<div class="language-css ext-css line-numbers-mode"><pre v-pre class="language-css"><code><span class="token property">text-shadow</span><span class="token punctuation">:</span>\n      4px -4px 0 <span class="token function">hsla</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 100%<span class="token punctuation">,</span> 50%<span class="token punctuation">,</span> 1<span class="token punctuation">)</span><span class="token punctuation">,</span> \n      3px -3px 0 <span class="token function">hsla</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 100%<span class="token punctuation">,</span> 50%<span class="token punctuation">,</span> 1<span class="token punctuation">)</span><span class="token punctuation">,</span> \n      2px -2px 0 <span class="token function">hsla</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 100%<span class="token punctuation">,</span> 50%<span class="token punctuation">,</span> 1<span class="token punctuation">)</span><span class="token punctuation">,</span> \n      1px -1px 0 <span class="token function">hsla</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 100%<span class="token punctuation">,</span> 50%<span class="token punctuation">,</span> 1<span class="token punctuation">)</span><span class="token punctuation">,</span>\n      -4px 4px 0 <span class="token function">hsla</span><span class="token punctuation">(</span>180<span class="token punctuation">,</span> 100%<span class="token punctuation">,</span> 50%<span class="token punctuation">,</span> 1<span class="token punctuation">)</span><span class="token punctuation">,</span> \n      -3px 3px 0 <span class="token function">hsla</span><span class="token punctuation">(</span>180<span class="token punctuation">,</span> 100%<span class="token punctuation">,</span> 50%<span class="token punctuation">,</span> 1<span class="token punctuation">)</span><span class="token punctuation">,</span> \n      -2px 2px 0 <span class="token function">hsla</span><span class="token punctuation">(</span>180<span class="token punctuation">,</span> 100%<span class="token punctuation">,</span> 50%<span class="token punctuation">,</span> 1<span class="token punctuation">)</span><span class="token punctuation">,</span> \n      -1px 1px 0 <span class="token function">hsla</span><span class="token punctuation">(</span>180<span class="token punctuation">,</span> 100%<span class="token punctuation">,</span> 50%<span class="token punctuation">,</span> 1<span class="token punctuation">)</span>\n    <span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="效果五" tabindex="-1"><a class="header-anchor" href="#效果五" aria-hidden="true">#</a> 效果五</h2>\n<blockquote>\n<p>明月三五前，看看玉兔圆。</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/744f7d5927ee4cb5b7ff6aaeb7c68556~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" data="aurora"></p>\n<p>此效果和效果三类似，设置<code>background-clip: text</code>将背景色应用到文字区域，比较有特色的是将文字设置了不同的颜色并有倾斜切割的感觉，主要是通过设置<code>linear-gradient</code>中的<code>transparent</code>透明色实现，核心代码如下：</p>\n<div class="language-css ext-css line-numbers-mode"><pre v-pre class="language-css"><code><span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>219deg<span class="token punctuation">,</span> \n        <span class="token function">var</span><span class="token punctuation">(</span>--color-1<span class="token punctuation">)</span> 19%<span class="token punctuation">,</span> \n        transparent 19%<span class="token punctuation">,</span>transparent 20%<span class="token punctuation">,</span> \n        <span class="token function">var</span><span class="token punctuation">(</span>--color-2<span class="token punctuation">)</span> 20%<span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--color-2<span class="token punctuation">)</span>  39%<span class="token punctuation">,</span>\n        transparent 39%<span class="token punctuation">,</span>transparent 40%<span class="token punctuation">,</span> \n        <span class="token function">var</span><span class="token punctuation">(</span>--color-3<span class="token punctuation">)</span> 40%<span class="token punctuation">,</span><span class="token function">var</span><span class="token punctuation">(</span>--color-3<span class="token punctuation">)</span> 59% <span class="token punctuation">,</span>\n        transparent 59%<span class="token punctuation">,</span>transparent 60%<span class="token punctuation">,</span> \n        <span class="token function">var</span><span class="token punctuation">(</span>--color-4<span class="token punctuation">)</span> 60%<span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--color-4<span class="token punctuation">)</span> 79%<span class="token punctuation">,</span>\n        transparent 79%<span class="token punctuation">,</span> transparent 80%<span class="token punctuation">,</span> \n        <span class="token function">var</span><span class="token punctuation">(</span>--color-5<span class="token punctuation">)</span> 80%<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token property">background-clip</span><span class="token punctuation">:</span> text<span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="效果六" tabindex="-1"><a class="header-anchor" href="#效果六" aria-hidden="true">#</a> 效果六</h2>\n<blockquote>\n<p>白兔捣药成，问言与谁餐。 —— 李白 《 古朗月行》</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3a05462f83544583a6de81a6786e6251~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" data="aurora"></p>\n<p>这里的效果不是很明显，当文字过大的时候比较明显，其实就是和抖音logo的效果比较类似，会有红色和蓝色两个颜色的抖动效果，两个颜色是由两个伪元素的<code>text-shadow</code>实现，抖动的效果是通过设置<code>clip:rect</code>并设置随机的位置，所以我们看到的画面中出现的位置都不是重复的。</p>\n<div class="language-css ext-css line-numbers-mode"><pre v-pre class="language-css"><code><span class="token selector">&amp;::after</span><span class="token punctuation">{</span>\n  <span class="token property">content</span><span class="token punctuation">:</span><span class="token function">attr</span><span class="token punctuation">(</span>data-text<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span>\n  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>\n  <span class="token property">left</span><span class="token punctuation">:</span>50%<span class="token punctuation">;</span>\n  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>-50%<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token property">text-shadow</span><span class="token punctuation">:</span>-2px 0 red<span class="token punctuation">;</span>\n  <span class="token property">top</span><span class="token punctuation">:</span>20px<span class="token punctuation">;</span>\n  <span class="token property">color</span><span class="token punctuation">:</span>white<span class="token punctuation">;</span>\n  <span class="token property">background</span><span class="token punctuation">:</span>black<span class="token punctuation">;</span>\n  <span class="token property">overflow</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span>\n  <span class="token property">clip</span><span class="token punctuation">:</span><span class="token function">rect</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span>900px<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token property">animation</span><span class="token punctuation">:</span>noise-anim 2s infinite linear alternate-reverse<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token atrule"><span class="token rule">@keyframes</span> noise-anim</span><span class="token punctuation">{</span>\n  $<span class="token property">steps</span><span class="token punctuation">:</span>20<span class="token punctuation">;</span>\n  <span class="token atrule"><span class="token rule">@for</span> $i from 0 through $steps</span><span class="token punctuation">{</span>\n    <span class="token selector">#</span><span class="token punctuation">{</span><span class="token function">percentage</span><span class="token punctuation">(</span>$i*<span class="token punctuation">(</span>1/$steps<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">{</span>\n      <span class="token property">clip</span><span class="token punctuation">:</span><span class="token function">rect</span><span class="token punctuation">(</span><span class="token function">random</span><span class="token punctuation">(</span>100<span class="token punctuation">)</span>+px<span class="token punctuation">,</span>9999px<span class="token punctuation">,</span><span class="token function">random</span><span class="token punctuation">(</span>100<span class="token punctuation">)</span>+px<span class="token punctuation">,</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h2 id="效果七" tabindex="-1"><a class="header-anchor" href="#效果七" aria-hidden="true">#</a> 效果七</h2>\n<blockquote>\n<p>兔月半轮明。 —— 隋 江总《关山月》</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c792155353e94229a7eff1631e354ace~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" data="aurora"></p>\n<p>这个没有特殊的效果，就是一个纯静态的文字阴影，但是比一般的文字阴影更具有冲击感，所以也列举出来了，核心就是设置不同位置的不同参数文字阴影，以下只贴出了一部分代码。</p>\n<div class="language-css ext-css line-numbers-mode"><pre v-pre class="language-css"><code><span class="token property">text-shadow</span><span class="token punctuation">:</span> \n      1px -1px 0 #767676<span class="token punctuation">,</span> \n      -1px 2px 1px #737272<span class="token punctuation">,</span> \n      -2px 4px 1px #767474<span class="token punctuation">,</span> \n      -3px 6px 1px #787777<span class="token punctuation">,</span> \n      -4px 8px 1px #7b7a7a<span class="token punctuation">,</span> \n      -5px 10px 1px #7f7d7d<span class="token punctuation">,</span> \n      -6px 12px 1px #828181<span class="token punctuation">,</span> \n      -7px 14px 1px #868585<span class="token punctuation">,</span> \n      ...\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>为方便大家理解，我修改了不同位置的颜色，看这个图大家就容易理解为什么可以实现了，随着越到后面设置的颜色就越淡，阴影效果就出来了。 <img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/60d2c989575a4762a9173718a5aa559c~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" data="aurora"></p>\n<h2 id="效果八" tabindex="-1"><a class="header-anchor" href="#效果八" aria-hidden="true">#</a> 效果八</h2>\n<blockquote>\n<p>兔饥食山林，兔渴饮川泽。 —— 宋 秦观《和裴仲谟放兔行》</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/508fc58d20ce49ce83f9fed782106824~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" data="aurora"></p>\n<p>这里是将文字变成一缕白烟飞走了，看着还是很有意境的感觉。核心实现逻辑是给每个文字设置平移，旋转，倾斜，放大，透明度，文字阴影，然后从左往右给每个文字设置延迟执行动画的时间。这里仔细看可以发现每个文字运动的效果并不是完全一样，这里是通过奇偶选择器设置了不同的<code>transform</code>属性值。</p>\n<div class="language-css ext-css line-numbers-mode"><pre v-pre class="language-css"><code><span class="token atrule"><span class="token rule">@keyframes</span> smoky</span> <span class="token punctuation">{</span>\n  <span class="token selector">60%</span> <span class="token punctuation">{</span>\n    <span class="token property">text-shadow</span><span class="token punctuation">:</span> 0 0 40px whitesmoke<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token selector">to</span> <span class="token punctuation">{</span>\n    <span class="token property">transform</span><span class="token punctuation">:</span>\n      <span class="token function">translate3d</span><span class="token punctuation">(</span>15rem<span class="token punctuation">,</span>-8rem<span class="token punctuation">,</span>0<span class="token punctuation">)</span>\n      <span class="token function">rotate</span><span class="token punctuation">(</span>-40deg<span class="token punctuation">)</span>\n      <span class="token function">skewX</span><span class="token punctuation">(</span>70deg<span class="token punctuation">)</span>\n      <span class="token function">scale</span><span class="token punctuation">(</span>1.5<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token property">text-shadow</span><span class="token punctuation">:</span> 0 0 20px whitesmoke<span class="token punctuation">;</span>\n    <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="效果九" tabindex="-1"><a class="header-anchor" href="#效果九" aria-hidden="true">#</a> 效果九</h2>\n<blockquote>\n<p>茕茕白兔，东走西顾。  —— 汉 佚名 《古艳歌》</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/90618846c10e4486b2ee09ced7995d34~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" data="aurora"></p>\n<p>这个效果看着和效果三是不是有点类似，核心也是设置<code>background-clip: text</code>将背景色应用到文字区域，但是这里的背景动画看着比较复杂，但其实代码比较简单，就是设置了一张gif的背景图，这个在实际项目中大家可以看其复杂度灵活运用。</p>\n<h2 id="效果十" tabindex="-1"><a class="header-anchor" href="#效果十" aria-hidden="true">#</a> 效果十</h2>\n<blockquote>\n<p>有兔斯首，炮之燔之。 —— 先秦 佚名《瓠叶》</p>\n</blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dd34294101d74550a9fd380a1d352365~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" data="aurora"></p>\n<p>这个效果的gif图不是很逼真，大家可以看在线的效果，这里并没有用到<code>background-clip: text</code>，而是用到了<code>mix-blend-mode</code>混合模式，这里用到了<code>multiply</code>和<code>color-dodge</code>两个混合模式，图中的白色区域的移动是通过设置<code>translate</code>平移使画面动起来了。</p>\n<div class="language-css ext-css line-numbers-mode"><pre v-pre class="language-css"><code><span class="token selector">.gradient</span> <span class="token punctuation">{</span>\n    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>45deg<span class="token punctuation">,</span> red<span class="token punctuation">,</span> gold<span class="token punctuation">,</span> lightgreen<span class="token punctuation">,</span> gold<span class="token punctuation">,</span> red<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token property">mix-blend-mode</span><span class="token punctuation">:</span> multiply<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">.spotlight</span> <span class="token punctuation">{</span>\n    <span class="token property">background</span><span class="token punctuation">:</span> \n        <span class="token function">radial-gradient</span><span class="token punctuation">(</span>\n            circle<span class="token punctuation">,</span>\n            white<span class="token punctuation">,</span>\n            transparent 25%\n        <span class="token punctuation">)</span> center / 25% 25%<span class="token punctuation">,</span>\n        <span class="token function">radial-gradient</span><span class="token punctuation">(</span>\n            circle<span class="token punctuation">,</span>\n            white<span class="token punctuation">,</span>\n            black 25%\n        <span class="token punctuation">)</span> center / 12.5% 12.5%<span class="token punctuation">;</span>\n    <span class="token property">animation</span><span class="token punctuation">:</span> light 5s linear infinite<span class="token punctuation">;</span>\n    <span class="token property">mix-blend-mode</span><span class="token punctuation">:</span> color-dodge<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div>',date:"2023-01-08",deps:[],hoistedTags:[],links:[],pathInferred:"/css/2023/20230108.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"20230108",filePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/css/2023/20230108.md",filePathRelative:"css/2023/20230108.md",componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/css/2023/20230108.html.vue",componentFilePathRelative:"pages/css/2023/20230108.html.vue",componentFileChunkName:"v-5d086546",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/css/2023/20230108.html.js",dataFilePathRelative:"pages/css/2023/20230108.html.js",dataFileChunkName:"v-5d086546",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/css/2023/20230108.html",htmlFilePathRelative:"css/2023/20230108.html"},{data:{key:"v-6eec9732",path:"/css/2023/20230129.html",title:"vh 存在问题？试试动态视口单位",lang:"zh-CN",frontmatter:{title:"vh 存在问题？试试动态视口单位",date:"2023-01-29T00:00:00.000Z",tags:["css"],categories:["css"]},excerpt:"",headers:[{level:2,title:"vh 在移动端存在的问题！",slug:"vh-在移动端存在的问题",children:[]},{level:2,title:"新视口相关单位之 lvh、svh、dvh",slug:"新视口相关单位之-lvh、svh、dvh",children:[]},{level:2,title:"dvh、svh、lvh 它们的兼容性（2023-01-25）",slug:"dvh、svh、lvh-它们的兼容性-2023-01-25",children:[]}],git:{updatedTime:null,contributors:[]}},key:"v-6eec9732",path:"/css/2023/20230129.html",title:"vh 存在问题？试试动态视口单位",lang:"zh-CN",frontmatter:{title:"vh 存在问题？试试动态视口单位",date:"2023-01-29T00:00:00.000Z",tags:["css"],categories:["css"]},excerpt:"",headers:[{level:2,title:"vh 在移动端存在的问题！",slug:"vh-在移动端存在的问题",children:[]},{level:2,title:"新视口相关单位之 lvh、svh、dvh",slug:"新视口相关单位之-lvh、svh、dvh",children:[]},{level:2,title:"dvh、svh、lvh 它们的兼容性（2023-01-25）",slug:"dvh、svh、lvh-它们的兼容性-2023-01-25",children:[]}],content:"\r\n::: tip\r\n\r\n大部分同学都知道，在 CSS 世界中，有 vw、vh、vmax、vmin 这几个与视口 Viewport 相关的单位。\r\n正常而言：\r\n1. 1vw 等于1/100的视口宽度 （Viewport Width）\r\n2. 1vh 等于1/100的视口高度 （Viewport Height）\r\n3. vmin — vmin 的值是当前 vw 和 vh 中较小的值\r\n4. vmax — vw 和 vh 中较大的值\r\n\r\n:::\r\n\r\n## vh 在移动端存在的问题！\r\n\r\n但是，在移动端，情况就不太一样了。**100vh 不总是等于一屏幕的高度**。有的时候，100vh 高度会出现滚动条。\r\n\r\n根因在于：\r\n\r\n1. 很多浏览器，在计算 100vh 的高度的时候，会把地址栏等相关控件的高度计算在内2\r\n2. 同时，很多时候，由于会弹出软键盘等操作，在弹出的过程中，`100vh` 的计算值并不会实时发生变化！\r\n\r\n这也就变相导致了许多基于 `100vh` 想实现的效果无形中会产生很多问题。\r\n\r\n![img](https://web-dev.imgix.net/image/AeNB0cHNDkYPUYzDuv8gInYA9rY2/bWbl71iEuR5Gu9a2eAxD.png?auto=format&w=1600)\r\n\r\n## 新视口相关单位之 lvh、svh、dvh\r\n\r\n为了解决上述的问题，规范新推出了三类单位，分别是：\r\n\r\n1. The large viewport units（大视口单位）：`lvw`,`lvh`, `lvi`, `lvb`, `lvmin`, and `lvmax`\r\n2. The small viewport units（小视口单位）：`svw`, `svh`, `svi`, `svb`, `svmin`, and `svmax`\r\n3. The dynamic viewport units（动态视口单位）：`dvw`, `dvh`, `dvi`, `dvb`, `dvmin`, and `dvmax`\r\n\r\n别看看上去很多，其实很好记忆，vw/vw/vmax/vmin 的前缀是 v，而：\r\n\r\n1. 大视口单位的前缀是 `lv`，意为 large viewport\r\n2. 小视口单位的前缀是 `sv`，意为 small viewport\r\n3. 动态视口单位的前缀是 `dv`，意为 dynamic viewport\r\n\r\n这里我们着重关注 `lvh`、`svh`、`dvh`。它们三者与 `vw` 有什么异同呢？\r\n\r\n先来看大视口与小视口，规范对它们的定义是：\r\n\r\n1. **Large Viewport**: The viewport sized assuming any UA interfaces that are dynamically expanded and retracted to be retracted.\r\n2. **Small Viewport**: The viewport sized assuming any UA interfaces that are dynamically expanded and retracted to be expanded.\r\n\r\n翻译一下：\r\n\r\n1. 大视口（Large Viewport）：视口大小假设任何动态扩展和缩回的 UA 界面都没有展开\r\n2. 小视口（Small Viewport）：视口大小假设任何动态扩展和缩回的 UA 界面都展开了\r\n\r\n![img](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1b23db58e216467ba5f2e542c1fb1967~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?)\r\n\r\n因此，对应到高度之上，其状态大致如下：\r\n\r\n![img](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ea6ab4dee50646b2a887318ade837367~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?)\r\n\r\n理解了大视口与小视口之后，再理解动态视口就轻松了些。\r\n\r\n简单而言，动态视口的意思是：\r\n\r\n1. 动态工具栏展开时，动态视口等于小视口的大小\r\n2. 当动态工具栏被缩回时，动态视口等于大视口的大小\r\n\r\n因此，也就能得到下面这张图：\r\n\r\n![img](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e8195ba51c544d2bb41878417db2ef36~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?)\r\n\r\n其中，`dvh`、`dvw`、`dvmax`、`dvmin` 对标 `vh`、`vw`、`vmax`、`vmin` 比较好理解。\r\n\r\n剩下，`dvi` 和 `dvb` 解释一下。其实，在之前也有 `vi` 和 `vb` 两个单位：\r\n\r\n1. `vi`：vi 代表 Viewport Inline，代表文档的内联方向。在水平书写方向上，这对应于视口的宽度，而在垂直书写方向上，这表示视口的高度。记住 inline 方向的简单方法是记住它与文本的方向相同。\r\n2. `vb`：vb 代表 Viewport block，代表文档的块方向。这与 vi 水平书写方向相反，这将对应于视口高度，而在垂直文档中，这将表示视口的宽度。\r\n\r\n理解了 `vi` 与 `vb`，`dvi` 与 `dvb` 也就很好理解了，它们分别表示动态视口下的 Viewport Inline 与 Viewport block。同理去理解大视口、小视口下的 `lvi`、`lvb`、`dvi`、`dvb`。\r\n\r\n## dvh、svh、lvh 它们的兼容性（2023-01-25）\r\n\r\n截止到书写本文的时间，它们已经被 Chrome 108+ 支持，而 firefox、Safari 在更早的阶段，就已经开始支持这些新单位了。\r\n\r\n看看 CanIUse：\r\n\r\n![img](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6fc48b9a92cd4de987d8c8b0db2f936d~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?)\r\n\r\n**因此，在不久的将来，全面使用 dvh 替代 vh，能有效的减少非常多因为 vh 在移动端的表现而引起的问题**。",contentRendered:'<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>大部分同学都知道，在 CSS 世界中，有 vw、vh、vmax、vmin 这几个与视口 Viewport 相关的单位。\n正常而言：</p>\n<ol>\n<li>1vw 等于1/100的视口宽度 （Viewport Width）</li>\n<li>1vh 等于1/100的视口高度 （Viewport Height）</li>\n<li>vmin — vmin 的值是当前 vw 和 vh 中较小的值</li>\n<li>vmax — vw 和 vh 中较大的值</li>\n</ol>\n</div>\n<h2 id="vh-在移动端存在的问题" tabindex="-1"><a class="header-anchor" href="#vh-在移动端存在的问题" aria-hidden="true">#</a> vh 在移动端存在的问题！</h2>\n<p>但是，在移动端，情况就不太一样了。<strong>100vh 不总是等于一屏幕的高度</strong>。有的时候，100vh 高度会出现滚动条。</p>\n<p>根因在于：</p>\n<ol>\n<li>很多浏览器，在计算 100vh 的高度的时候，会把地址栏等相关控件的高度计算在内2</li>\n<li>同时，很多时候，由于会弹出软键盘等操作，在弹出的过程中，<code>100vh</code> 的计算值并不会实时发生变化！</li>\n</ol>\n<p>这也就变相导致了许多基于 <code>100vh</code> 想实现的效果无形中会产生很多问题。</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://web-dev.imgix.net/image/AeNB0cHNDkYPUYzDuv8gInYA9rY2/bWbl71iEuR5Gu9a2eAxD.png?auto=format&amp;w=1600" data="aurora"></p>\n<h2 id="新视口相关单位之-lvh、svh、dvh" tabindex="-1"><a class="header-anchor" href="#新视口相关单位之-lvh、svh、dvh" aria-hidden="true">#</a> 新视口相关单位之 lvh、svh、dvh</h2>\n<p>为了解决上述的问题，规范新推出了三类单位，分别是：</p>\n<ol>\n<li>The large viewport units（大视口单位）：<code>lvw</code>,<code>lvh</code>, <code>lvi</code>, <code>lvb</code>, <code>lvmin</code>, and <code>lvmax</code></li>\n<li>The small viewport units（小视口单位）：<code>svw</code>, <code>svh</code>, <code>svi</code>, <code>svb</code>, <code>svmin</code>, and <code>svmax</code></li>\n<li>The dynamic viewport units（动态视口单位）：<code>dvw</code>, <code>dvh</code>, <code>dvi</code>, <code>dvb</code>, <code>dvmin</code>, and <code>dvmax</code></li>\n</ol>\n<p>别看看上去很多，其实很好记忆，vw/vw/vmax/vmin 的前缀是 v，而：</p>\n<ol>\n<li>大视口单位的前缀是 <code>lv</code>，意为 large viewport</li>\n<li>小视口单位的前缀是 <code>sv</code>，意为 small viewport</li>\n<li>动态视口单位的前缀是 <code>dv</code>，意为 dynamic viewport</li>\n</ol>\n<p>这里我们着重关注 <code>lvh</code>、<code>svh</code>、<code>dvh</code>。它们三者与 <code>vw</code> 有什么异同呢？</p>\n<p>先来看大视口与小视口，规范对它们的定义是：</p>\n<ol>\n<li><strong>Large Viewport</strong>: The viewport sized assuming any UA interfaces that are dynamically expanded and retracted to be retracted.</li>\n<li><strong>Small Viewport</strong>: The viewport sized assuming any UA interfaces that are dynamically expanded and retracted to be expanded.</li>\n</ol>\n<p>翻译一下：</p>\n<ol>\n<li>大视口（Large Viewport）：视口大小假设任何动态扩展和缩回的 UA 界面都没有展开</li>\n<li>小视口（Small Viewport）：视口大小假设任何动态扩展和缩回的 UA 界面都展开了</li>\n</ol>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1b23db58e216467ba5f2e542c1fb1967~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?" data="aurora"></p>\n<p>因此，对应到高度之上，其状态大致如下：</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ea6ab4dee50646b2a887318ade837367~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?" data="aurora"></p>\n<p>理解了大视口与小视口之后，再理解动态视口就轻松了些。</p>\n<p>简单而言，动态视口的意思是：</p>\n<ol>\n<li>动态工具栏展开时，动态视口等于小视口的大小</li>\n<li>当动态工具栏被缩回时，动态视口等于大视口的大小</li>\n</ol>\n<p>因此，也就能得到下面这张图：</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e8195ba51c544d2bb41878417db2ef36~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?" data="aurora"></p>\n<p>其中，<code>dvh</code>、<code>dvw</code>、<code>dvmax</code>、<code>dvmin</code> 对标 <code>vh</code>、<code>vw</code>、<code>vmax</code>、<code>vmin</code> 比较好理解。</p>\n<p>剩下，<code>dvi</code> 和 <code>dvb</code> 解释一下。其实，在之前也有 <code>vi</code> 和 <code>vb</code> 两个单位：</p>\n<ol>\n<li><code>vi</code>：vi 代表 Viewport Inline，代表文档的内联方向。在水平书写方向上，这对应于视口的宽度，而在垂直书写方向上，这表示视口的高度。记住 inline 方向的简单方法是记住它与文本的方向相同。</li>\n<li><code>vb</code>：vb 代表 Viewport block，代表文档的块方向。这与 vi 水平书写方向相反，这将对应于视口高度，而在垂直文档中，这将表示视口的宽度。</li>\n</ol>\n<p>理解了 <code>vi</code> 与 <code>vb</code>，<code>dvi</code> 与 <code>dvb</code> 也就很好理解了，它们分别表示动态视口下的 Viewport Inline 与 Viewport block。同理去理解大视口、小视口下的 <code>lvi</code>、<code>lvb</code>、<code>dvi</code>、<code>dvb</code>。</p>\n<h2 id="dvh、svh、lvh-它们的兼容性-2023-01-25" tabindex="-1"><a class="header-anchor" href="#dvh、svh、lvh-它们的兼容性-2023-01-25" aria-hidden="true">#</a> dvh、svh、lvh 它们的兼容性（2023-01-25）</h2>\n<p>截止到书写本文的时间，它们已经被 Chrome 108+ 支持，而 firefox、Safari 在更早的阶段，就已经开始支持这些新单位了。</p>\n<p>看看 CanIUse：</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6fc48b9a92cd4de987d8c8b0db2f936d~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?" data="aurora"></p>\n<p><strong>因此，在不久的将来，全面使用 dvh 替代 vh，能有效的减少非常多因为 vh 在移动端的表现而引起的问题</strong>。</p>\n',date:"2023-01-29",deps:[],hoistedTags:[],links:[],pathInferred:"/css/2023/20230129.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"20230129",filePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/css/2023/20230129.md",filePathRelative:"css/2023/20230129.md",componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/css/2023/20230129.html.vue",componentFilePathRelative:"pages/css/2023/20230129.html.vue",componentFileChunkName:"v-6eec9732",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/css/2023/20230129.html.js",dataFilePathRelative:"pages/css/2023/20230129.html.js",dataFileChunkName:"v-6eec9732",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/css/2023/20230129.html",htmlFilePathRelative:"css/2023/20230129.html"},{data:{key:"v-379809b4",path:"/CICD/2023/20230104.html",title:"GitHub Actions 入门教程",lang:"zh-CN",frontmatter:{title:"GitHub Actions 入门教程",date:"2023-01-04T00:00:00.000Z",tags:["CICD"],categories:["CICD"]},excerpt:"",headers:[{level:2,title:"一、GitHub Actions 是什么？",slug:"一、github-actions-是什么",children:[]},{level:2,title:"二、基本概念",slug:"二、基本概念",children:[]},{level:2,title:"三、workflow 文件",slug:"三、workflow-文件",children:[]},{level:2,title:"四、实例：React 项目发布到 GitHub Pages",slug:"四、实例-react-项目发布到-github-pages",children:[]},{level:2,title:"五、参考链接",slug:"五、参考链接",children:[]}],git:{updatedTime:null,contributors:[]}},key:"v-379809b4",path:"/CICD/2023/20230104.html",title:"GitHub Actions 入门教程",lang:"zh-CN",frontmatter:{title:"GitHub Actions 入门教程",date:"2023-01-04T00:00:00.000Z",tags:["CICD"],categories:["CICD"]},excerpt:"",headers:[{level:2,title:"一、GitHub Actions 是什么？",slug:"一、github-actions-是什么",children:[]},{level:2,title:"二、基本概念",slug:"二、基本概念",children:[]},{level:2,title:"三、workflow 文件",slug:"三、workflow-文件",children:[]},{level:2,title:"四、实例：React 项目发布到 GitHub Pages",slug:"四、实例-react-项目发布到-github-pages",children:[]},{level:2,title:"五、参考链接",slug:"五、参考链接",children:[]}],content:'\r\n::: tip\r\n\r\nGitHub Actions 是 GitHub 的持续集成服务，于2018年10月推出。这些天，我一直在试用，觉得它非常强大，有创意，本文是一个简单教程，演示如何使用 GitHub Actions 自动发布一个 React 应用到 GitHub Pages。\r\n\r\n:::\r\n\r\n## 一、GitHub Actions 是什么？\r\n\r\n大家知道，持续集成由很多操作组成，比如抓取代码、运行测试、登录远程服务器，发布到第三方服务等等。GitHub 把这些操作就称为 actions。\r\n\r\n很多操作在不同项目里面是类似的，完全可以共享。GitHub 注意到了这一点，想出了一个很妙的点子，允许开发者把每个操作写成独立的脚本文件，存放到代码仓库，使得其他开发者可以引用。\r\n\r\n如果你需要某个 action，不必自己写复杂的脚本，直接引用他人写好的 action 即可，整个持续集成过程，就变成了一个 actions 的组合。这就是 GitHub Actions 最特别的地方。\r\n\r\nGitHub 做了一个[官方市场](https://github.com/marketplace?type=actions)，可以搜索到他人提交的 actions。另外，还有一个 [awesome actions](https://github.com/sdras/awesome-actions) 的仓库，也可以找到不少 action。\r\n\r\n![img](https://www.wangbase.com/blogimg/asset/201909/bg2019091105.jpg)\r\n\r\n上面说了，每个 action 就是一个独立脚本，因此可以做成代码仓库，使用`userName/repoName`的语法引用 action。比如，`actions/setup-node`就表示`github.com/actions/setup-node`这个[仓库](https://github.com/actions/setup-node)，它代表一个 action，作用是安装 Node.js。事实上，GitHub 官方的 actions 都放在 [github.com/actions](https://github.com/actions) 里面。\r\n\r\n既然 actions 是代码仓库，当然就有版本的概念，用户可以引用某个具体版本的 action。下面都是合法的 action 引用，用的就是 Git 的指针概念，详见[官方文档](https://help.github.com/en/articles/about-actions#versioning-your-action)。\r\n\r\n```bash\r\nactions/setup-node@74bc508 # 指向一个 commit\r\nactions/setup-node@v1.0    # 指向一个标签\r\nactions/setup-node@master  # 指向一个分支\r\n```\r\n\r\n## 二、基本概念\r\n\r\nGitHub Actions 有一些自己的术语。\r\n\r\n（1）**workflow** （工作流程）：持续集成一次运行的过程，就是一个 workflow。\r\n\r\n（2）**job** （任务）：一个 workflow 由一个或多个 jobs 构成，含义是一次持续集成的运行，可以完成多个任务。\r\n\r\n（3）**step**（步骤）：每个 job 由多个 step 构成，一步步完成。\r\n\r\n（4）**action** （动作）：每个 step 可以依次执行一个或多个命令（action）。\r\n\r\n## 三、workflow 文件\r\n\r\nGitHub Actions 的配置文件叫做 workflow 文件，存放在代码仓库的`.github/workflows`目录。\r\n\r\nworkflow 文件采用 [YAML 格式](https://www.ruanyifeng.com/blog/2016/07/yaml.html)，文件名可以任意取，但是后缀名统一为`.yml`，比如`foo.yml`。一个库可以有多个 workflow 文件。GitHub 只要发现`.github/workflows`目录里面有`.yml`文件，就会自动运行该文件。\r\n\r\nworkflow 文件的配置字段非常多，详见[官方文档](https://help.github.com/en/articles/workflow-syntax-for-github-actions)。下面是一些基本字段。\r\n\r\n**（1）`name`**\r\n\r\n`name`字段是 workflow 的名称。如果省略该字段，默认为当前 workflow 的文件名。\r\n\r\n```bash\r\nname: GitHub Actions Demo\r\n```\r\n\r\n**（2）`on`**\r\n\r\n`on`字段指定触发 workflow 的条件，通常是某些事件。\r\n\r\n```bash\r\non: push\r\n```\r\n\r\n上面代码指定，`push`事件触发 workflow。\r\n\r\n`on`字段也可以是事件的数组。\r\n\r\n```bash\r\non: [push, pull_request]\r\n```\r\n\r\n上面代码指定，`push`事件或`pull_request`事件都可以触发 workflow。\r\n\r\n完整的事件列表，请查看[官方文档](https://help.github.com/en/articles/events-that-trigger-workflows)。除了代码库事件，GitHub Actions 也支持外部事件触发，或者定时运行。\r\n\r\n**（3）`on..`**\r\n\r\n指定触发事件时，可以限定分支或标签。\r\n\r\n```bash\r\non:\r\n  push:\r\n    branches:    \r\n      - master\r\n```\r\n\r\n上面代码指定，只有`master`分支发生`push`事件时，才会触发 workflow。\r\n\r\n**（4）`jobs..name`**\r\n\r\nworkflow 文件的主体是`jobs`字段，表示要执行的一项或多项任务。\r\n\r\n`jobs`字段里面，需要写出每一项任务的`job_id`，具体名称自定义。`job_id`里面的`name`字段是任务的说明。\r\n\r\n```javascript\r\njobs:\r\n  my_first_job:\r\n    name: My first job\r\n  my_second_job:\r\n    name: My second job\r\n```\r\n\r\n上面代码的`jobs`字段包含两项任务，`job_id`分别是`my_first_job`和`my_second_job`。\r\n\r\n**（5）`jobs..needs`**\r\n\r\n`needs`字段指定当前任务的依赖关系，即运行顺序。\r\n\r\n```javascript\r\njobs:\r\n  job1:\r\n  job2:\r\n    needs: job1\r\n  job3:\r\n    needs: [job1, job2]\r\n```\r\n\r\n上面代码中，`job1`必须先于`job2`完成，而`job3`等待`job1`和`job2`的完成才能运行。因此，这个 workflow 的运行顺序依次为：`job1`、`job2`、`job3`。\r\n\r\n**（6）`jobs..runs-on`**\r\n\r\n`runs-on`字段指定运行所需要的虚拟机环境。它是必填字段。目前可用的虚拟机如下。\r\n\r\n> - `ubuntu-latest`，`ubuntu-18.04`或`ubuntu-16.04`\r\n> - `windows-latest`，`windows-2019`或`windows-2016`\r\n> - `macOS-latest`或`macOS-10.14`\r\n\r\n下面代码指定虚拟机环境为`ubuntu-18.04`。\r\n\r\n```javascript\r\nruns-on: ubuntu-18.04\r\n```\r\n\r\n**（7）`jobs..steps`**\r\n\r\n`steps`字段指定每个 Job 的运行步骤，可以包含一个或多个步骤。每个步骤都可以指定以下三个字段。\r\n\r\n> - `jobs..steps.name`：步骤名称。\r\n> - `jobs..steps.run`：该步骤运行的命令或者 action。\r\n> - `jobs..steps.env`：该步骤所需的环境变量。\r\n\r\n下面是一个完整的 workflow 文件的范例。\r\n\r\n```javascript\r\nname: Greeting from Mona\r\non: push\r\n\r\njobs:\r\n  my-job:\r\n    name: My Job\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n    - name: Print a greeting\r\n      env:\r\n        MY_VAR: Hi there! My name is\r\n        FIRST_NAME: Mona\r\n        MIDDLE_NAME: The\r\n        LAST_NAME: Octocat\r\n      run: |\r\n        echo $MY_VAR $FIRST_NAME $MIDDLE_NAME $LAST_NAME.\r\n```\r\n\r\n上面代码中，`steps`字段只包括一个步骤。该步骤先注入四个环境变量，然后执行一条 Bash 命令。\r\n\r\n## 四、实例：React 项目发布到 GitHub Pages\r\n\r\n下面是一个实例，通过 GitHub Actions 构建一个 React 项目，并发布到 GitHub Pages。最终代码都在[这个仓库](https://github.com/ruanyf/github-actions-demo)里面，发布后的参考网址为[ruanyf.github.io/github-actions-demo](https://ruanyf.github.io/github-actions-demo)。\r\n\r\n第一步，GitHub Actions 目前还处在测试阶段，需要到[这个网址](https://github.com/features/actions/signup/)申请测试资格。申请以后，可能需要几天才能通过。据说，2019年11月就会放开。\r\n\r\n获得资格后，仓库顶部的菜单会出现`Actions`一项。\r\n\r\n![img](https://www.wangbase.com/blogimg/asset/201909/bg2019091106.jpg)\r\n\r\n第二步，这个示例需要将构建成果发到 GitHub 仓库，因此需要 GitHub 密钥。按照[官方文档](https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line)，生成一个密钥。然后，将这个密钥储存到当前仓库的`Settings/Secrets`里面。\r\n\r\n![img](https://www.wangbase.com/blogimg/asset/201909/bg2019091107.jpg)\r\n\r\n上图是储存秘密的环境变量的地方。环境变量的名字可以随便起，这里用的是`ACCESS_TOKEN`。如果你不用这个名字，后面脚本里的变量名也要跟着改。\r\n\r\n第三步，本地计算机使用[`create-react-app`](https://github.com/facebook/create-react-app)，生成一个标准的 React 应用。\r\n\r\n```bash\r\n$ npx create-react-app github-actions-demo\r\n$ cd github-actions-demo\r\n```\r\n\r\n然后，打开`package.json`文件，加一个`homepage`字段，表示该应用发布后的根目录（参见[官方文档](https://create-react-app.dev/docs/deployment#building-for-relative-paths)）。\r\n\r\n```javascript\r\n"homepage": "https://[username].github.io/github-actions-demo",\r\n```\r\n\r\n上面代码中，将`[username]`替换成你的 GitHub 用户名，参见[范例](https://github.com/ruanyf/github-actions-demo/blob/master/package.json#L10)。\r\n\r\n第四步，在这个仓库的`.github/workflows`目录，生成一个 workflow 文件，名字可以随便取，这个示例是`ci.yml`。\r\n\r\n我们选用一个别人已经写好的 action：[JamesIves/github-pages-deploy-action](https://github.com/marketplace/actions/deploy-to-github-pages)，它提供了 workflow 的范例文件，直接拷贝过来就行了（查看[源码](https://github.com/ruanyf/github-actions-demo/blob/master/.github/workflows/ci.yml)）。\r\n\r\n```javascript\r\nname: GitHub Actions Build and Deploy Demo\r\non:\r\n  push:\r\n    branches:\r\n      - master\r\njobs:\r\n  build-and-deploy:\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n    - name: Checkout\r\n      uses: actions/checkout@master\r\n\r\n    - name: Build and Deploy\r\n      uses: JamesIves/github-pages-deploy-action@master\r\n      env:\r\n        ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}\r\n        BRANCH: gh-pages\r\n        FOLDER: build\r\n        BUILD_SCRIPT: npm install && npm run build\r\n```\r\n\r\n上面这个 workflow 文件的要点如下。\r\n\r\n> 1. 整个流程在`master`分支发生`push`事件时触发。\r\n> 2. 只有一个`job`，运行在虚拟机环境`ubuntu-latest`。\r\n> 3. 第一步是获取源码，使用的 action 是`actions/checkout`。\r\n> 4. 第二步是构建和部署，使用的 action 是`JamesIves/github-pages-deploy-action`。\r\n> 5. 第二步需要四个环境变量，分别为 GitHub 密钥、发布分支、构建成果所在目录、构建脚本。其中，只有 GitHub 密钥是秘密变量，需要写在双括号里面，其他三个都可以直接写在文件里。\r\n\r\n第五步，保存上面的文件后，将整个仓库推送到 GitHub。\r\n\r\nGitHub 发现了 workflow 文件以后，就会自动运行。你可以在网站上实时查看[运行日志](https://github.com/ruanyf/github-actions-demo/commit/24fbf6a875351297f31434fd44bc3146accf9e59/checks)，日志默认保存30天。\r\n\r\n![img](https://www.wangbase.com/blogimg/asset/201909/bg2019091108.jpg)\r\n\r\n等到 workflow 运行结束，访问 [GitHub Page](https://ruanyf.github.io/github-actions-demo/)，会看到构建成果已经发上网了。\r\n\r\n![img](https://www.wangbase.com/blogimg/asset/201909/bg2019091109.jpg)\r\n\r\n以后，每次修改后推送源码，GitHub Actions 都会自动运行，将构建产物发布到网页。\r\n\r\n## 五、参考链接\r\n\r\n- [GitHub Pages 官方文档](https://help.github.com/en/categories/automating-your-workflow-with-github-actions)\r\n- [Github Actions for web apps](https://lukeboyle.com/blog-posts/2019/08/github-actions-for-web-apps/), Luke Boyle\r\n- [My First Week With GitHub Actions](https://medium.com/@adam.zolyak/my-first-week-with-github-actions-5d92de4c4851), Adam Zolyak\r\n- [阮一峰](http://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html)',contentRendered:'<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>GitHub Actions 是 GitHub 的持续集成服务，于2018年10月推出。这些天，我一直在试用，觉得它非常强大，有创意，本文是一个简单教程，演示如何使用 GitHub Actions 自动发布一个 React 应用到 GitHub Pages。</p>\n</div>\n<h2 id="一、github-actions-是什么" tabindex="-1"><a class="header-anchor" href="#一、github-actions-是什么" aria-hidden="true">#</a> 一、GitHub Actions 是什么？</h2>\n<p>大家知道，持续集成由很多操作组成，比如抓取代码、运行测试、登录远程服务器，发布到第三方服务等等。GitHub 把这些操作就称为 actions。</p>\n<p>很多操作在不同项目里面是类似的，完全可以共享。GitHub 注意到了这一点，想出了一个很妙的点子，允许开发者把每个操作写成独立的脚本文件，存放到代码仓库，使得其他开发者可以引用。</p>\n<p>如果你需要某个 action，不必自己写复杂的脚本，直接引用他人写好的 action 即可，整个持续集成过程，就变成了一个 actions 的组合。这就是 GitHub Actions 最特别的地方。</p>\n<p>GitHub 做了一个<a href="https://github.com/marketplace?type=actions" target="_blank" rel="noopener noreferrer">官方市场<ExternalLinkIcon/></a>，可以搜索到他人提交的 actions。另外，还有一个 <a href="https://github.com/sdras/awesome-actions" target="_blank" rel="noopener noreferrer">awesome actions<ExternalLinkIcon/></a> 的仓库，也可以找到不少 action。</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://www.wangbase.com/blogimg/asset/201909/bg2019091105.jpg" data="aurora"></p>\n<p>上面说了，每个 action 就是一个独立脚本，因此可以做成代码仓库，使用<code>userName/repoName</code>的语法引用 action。比如，<code>actions/setup-node</code>就表示<code>github.com/actions/setup-node</code>这个<a href="https://github.com/actions/setup-node" target="_blank" rel="noopener noreferrer">仓库<ExternalLinkIcon/></a>，它代表一个 action，作用是安装 Node.js。事实上，GitHub 官方的 actions 都放在 <a href="https://github.com/actions" target="_blank" rel="noopener noreferrer">github.com/actions<ExternalLinkIcon/></a> 里面。</p>\n<p>既然 actions 是代码仓库，当然就有版本的概念，用户可以引用某个具体版本的 action。下面都是合法的 action 引用，用的就是 Git 的指针概念，详见<a href="https://help.github.com/en/articles/about-actions#versioning-your-action" target="_blank" rel="noopener noreferrer">官方文档<ExternalLinkIcon/></a>。</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code>actions/setup-node@74bc508 <span class="token comment"># 指向一个 commit</span>\nactions/setup-node@v1.0    <span class="token comment"># 指向一个标签</span>\nactions/setup-node@master  <span class="token comment"># 指向一个分支</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="二、基本概念" tabindex="-1"><a class="header-anchor" href="#二、基本概念" aria-hidden="true">#</a> 二、基本概念</h2>\n<p>GitHub Actions 有一些自己的术语。</p>\n<p>（1）<strong>workflow</strong> （工作流程）：持续集成一次运行的过程，就是一个 workflow。</p>\n<p>（2）<strong>job</strong> （任务）：一个 workflow 由一个或多个 jobs 构成，含义是一次持续集成的运行，可以完成多个任务。</p>\n<p>（3）<strong>step</strong>（步骤）：每个 job 由多个 step 构成，一步步完成。</p>\n<p>（4）<strong>action</strong> （动作）：每个 step 可以依次执行一个或多个命令（action）。</p>\n<h2 id="三、workflow-文件" tabindex="-1"><a class="header-anchor" href="#三、workflow-文件" aria-hidden="true">#</a> 三、workflow 文件</h2>\n<p>GitHub Actions 的配置文件叫做 workflow 文件，存放在代码仓库的<code>.github/workflows</code>目录。</p>\n<p>workflow 文件采用 <a href="https://www.ruanyifeng.com/blog/2016/07/yaml.html" target="_blank" rel="noopener noreferrer">YAML 格式<ExternalLinkIcon/></a>，文件名可以任意取，但是后缀名统一为<code>.yml</code>，比如<code>foo.yml</code>。一个库可以有多个 workflow 文件。GitHub 只要发现<code>.github/workflows</code>目录里面有<code>.yml</code>文件，就会自动运行该文件。</p>\n<p>workflow 文件的配置字段非常多，详见<a href="https://help.github.com/en/articles/workflow-syntax-for-github-actions" target="_blank" rel="noopener noreferrer">官方文档<ExternalLinkIcon/></a>。下面是一些基本字段。</p>\n<p><strong>（1）<code>name</code></strong></p>\n<p><code>name</code>字段是 workflow 的名称。如果省略该字段，默认为当前 workflow 的文件名。</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code>name: GitHub Actions Demo\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><strong>（2）<code>on</code></strong></p>\n<p><code>on</code>字段指定触发 workflow 的条件，通常是某些事件。</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code>on: push\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>上面代码指定，<code>push</code>事件触发 workflow。</p>\n<p><code>on</code>字段也可以是事件的数组。</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code>on: <span class="token punctuation">[</span>push, pull_request<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>上面代码指定，<code>push</code>事件或<code>pull_request</code>事件都可以触发 workflow。</p>\n<p>完整的事件列表，请查看<a href="https://help.github.com/en/articles/events-that-trigger-workflows" target="_blank" rel="noopener noreferrer">官方文档<ExternalLinkIcon/></a>。除了代码库事件，GitHub Actions 也支持外部事件触发，或者定时运行。</p>\n<p><strong>（3）<code>on..</code></strong></p>\n<p>指定触发事件时，可以限定分支或标签。</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code>on:\n  push:\n    branches:    \n      - master\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>上面代码指定，只有<code>master</code>分支发生<code>push</code>事件时，才会触发 workflow。</p>\n<p><strong>（4）<code>jobs..name</code></strong></p>\n<p>workflow 文件的主体是<code>jobs</code>字段，表示要执行的一项或多项任务。</p>\n<p><code>jobs</code>字段里面，需要写出每一项任务的<code>job_id</code>，具体名称自定义。<code>job_id</code>里面的<code>name</code>字段是任务的说明。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token literal-property property">jobs</span><span class="token operator">:</span>\n  <span class="token literal-property property">my_first_job</span><span class="token operator">:</span>\n    <span class="token literal-property property">name</span><span class="token operator">:</span> My first job\n  <span class="token literal-property property">my_second_job</span><span class="token operator">:</span>\n    <span class="token literal-property property">name</span><span class="token operator">:</span> My second job\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>上面代码的<code>jobs</code>字段包含两项任务，<code>job_id</code>分别是<code>my_first_job</code>和<code>my_second_job</code>。</p>\n<p><strong>（5）<code>jobs..needs</code></strong></p>\n<p><code>needs</code>字段指定当前任务的依赖关系，即运行顺序。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token literal-property property">jobs</span><span class="token operator">:</span>\n  <span class="token literal-property property">job1</span><span class="token operator">:</span>\n  <span class="token literal-property property">job2</span><span class="token operator">:</span>\n    <span class="token literal-property property">needs</span><span class="token operator">:</span> job1\n  <span class="token literal-property property">job3</span><span class="token operator">:</span>\n    <span class="token literal-property property">needs</span><span class="token operator">:</span> <span class="token punctuation">[</span>job1<span class="token punctuation">,</span> job2<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>上面代码中，<code>job1</code>必须先于<code>job2</code>完成，而<code>job3</code>等待<code>job1</code>和<code>job2</code>的完成才能运行。因此，这个 workflow 的运行顺序依次为：<code>job1</code>、<code>job2</code>、<code>job3</code>。</p>\n<p><strong>（6）<code>jobs..runs-on</code></strong></p>\n<p><code>runs-on</code>字段指定运行所需要的虚拟机环境。它是必填字段。目前可用的虚拟机如下。</p>\n<blockquote>\n<ul>\n<li><code>ubuntu-latest</code>，<code>ubuntu-18.04</code>或<code>ubuntu-16.04</code></li>\n<li><code>windows-latest</code>，<code>windows-2019</code>或<code>windows-2016</code></li>\n<li><code>macOS-latest</code>或<code>macOS-10.14</code></li>\n</ul>\n</blockquote>\n<p>下面代码指定虚拟机环境为<code>ubuntu-18.04</code>。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>runs<span class="token operator">-</span>on<span class="token operator">:</span> ubuntu<span class="token operator">-</span><span class="token number">18.04</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><strong>（7）<code>jobs..steps</code></strong></p>\n<p><code>steps</code>字段指定每个 Job 的运行步骤，可以包含一个或多个步骤。每个步骤都可以指定以下三个字段。</p>\n<blockquote>\n<ul>\n<li><code>jobs..steps.name</code>：步骤名称。</li>\n<li><code>jobs..steps.run</code>：该步骤运行的命令或者 action。</li>\n<li><code>jobs..steps.env</code>：该步骤所需的环境变量。</li>\n</ul>\n</blockquote>\n<p>下面是一个完整的 workflow 文件的范例。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token literal-property property">name</span><span class="token operator">:</span> Greeting from Mona\n<span class="token literal-property property">on</span><span class="token operator">:</span> push\n\n<span class="token literal-property property">jobs</span><span class="token operator">:</span>\n  my<span class="token operator">-</span>job<span class="token operator">:</span>\n    <span class="token literal-property property">name</span><span class="token operator">:</span> My Job\n    runs<span class="token operator">-</span>on<span class="token operator">:</span> ubuntu<span class="token operator">-</span>latest\n    <span class="token literal-property property">steps</span><span class="token operator">:</span>\n    <span class="token operator">-</span> name<span class="token operator">:</span> Print a greeting\n      <span class="token literal-property property">env</span><span class="token operator">:</span>\n        <span class="token constant">MY_VAR</span><span class="token operator">:</span> Hi there<span class="token operator">!</span> My name is\n        <span class="token constant">FIRST_NAME</span><span class="token operator">:</span> Mona\n        <span class="token constant">MIDDLE_NAME</span><span class="token operator">:</span> The\n        <span class="token constant">LAST_NAME</span><span class="token operator">:</span> Octocat\n      <span class="token literal-property property">run</span><span class="token operator">:</span> <span class="token operator">|</span>\n        echo $<span class="token constant">MY_VAR</span> $<span class="token constant">FIRST_NAME</span> $<span class="token constant">MIDDLE_NAME</span> $<span class="token constant">LAST_NAME</span><span class="token punctuation">.</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>上面代码中，<code>steps</code>字段只包括一个步骤。该步骤先注入四个环境变量，然后执行一条 Bash 命令。</p>\n<h2 id="四、实例-react-项目发布到-github-pages" tabindex="-1"><a class="header-anchor" href="#四、实例-react-项目发布到-github-pages" aria-hidden="true">#</a> 四、实例：React 项目发布到 GitHub Pages</h2>\n<p>下面是一个实例，通过 GitHub Actions 构建一个 React 项目，并发布到 GitHub Pages。最终代码都在<a href="https://github.com/ruanyf/github-actions-demo" target="_blank" rel="noopener noreferrer">这个仓库<ExternalLinkIcon/></a>里面，发布后的参考网址为<a href="https://ruanyf.github.io/github-actions-demo" target="_blank" rel="noopener noreferrer">ruanyf.github.io/github-actions-demo<ExternalLinkIcon/></a>。</p>\n<p>第一步，GitHub Actions 目前还处在测试阶段，需要到<a href="https://github.com/features/actions/signup/" target="_blank" rel="noopener noreferrer">这个网址<ExternalLinkIcon/></a>申请测试资格。申请以后，可能需要几天才能通过。据说，2019年11月就会放开。</p>\n<p>获得资格后，仓库顶部的菜单会出现<code>Actions</code>一项。</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://www.wangbase.com/blogimg/asset/201909/bg2019091106.jpg" data="aurora"></p>\n<p>第二步，这个示例需要将构建成果发到 GitHub 仓库，因此需要 GitHub 密钥。按照<a href="https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line" target="_blank" rel="noopener noreferrer">官方文档<ExternalLinkIcon/></a>，生成一个密钥。然后，将这个密钥储存到当前仓库的<code>Settings/Secrets</code>里面。</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://www.wangbase.com/blogimg/asset/201909/bg2019091107.jpg" data="aurora"></p>\n<p>上图是储存秘密的环境变量的地方。环境变量的名字可以随便起，这里用的是<code>ACCESS_TOKEN</code>。如果你不用这个名字，后面脚本里的变量名也要跟着改。</p>\n<p>第三步，本地计算机使用<a href="https://github.com/facebook/create-react-app" target="_blank" rel="noopener noreferrer"><code>create-react-app</code><ExternalLinkIcon/></a>，生成一个标准的 React 应用。</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code>$ npx create-react-app github-actions-demo\n$ <span class="token builtin class-name">cd</span> github-actions-demo\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>然后，打开<code>package.json</code>文件，加一个<code>homepage</code>字段，表示该应用发布后的根目录（参见<a href="https://create-react-app.dev/docs/deployment#building-for-relative-paths" target="_blank" rel="noopener noreferrer">官方文档<ExternalLinkIcon/></a>）。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token string-property property">"homepage"</span><span class="token operator">:</span> <span class="token string">"https://[username].github.io/github-actions-demo"</span><span class="token punctuation">,</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>上面代码中，将<code>[username]</code>替换成你的 GitHub 用户名，参见<a href="https://github.com/ruanyf/github-actions-demo/blob/master/package.json#L10" target="_blank" rel="noopener noreferrer">范例<ExternalLinkIcon/></a>。</p>\n<p>第四步，在这个仓库的<code>.github/workflows</code>目录，生成一个 workflow 文件，名字可以随便取，这个示例是<code>ci.yml</code>。</p>\n<p>我们选用一个别人已经写好的 action：<a href="https://github.com/marketplace/actions/deploy-to-github-pages" target="_blank" rel="noopener noreferrer">JamesIves/github-pages-deploy-action<ExternalLinkIcon/></a>，它提供了 workflow 的范例文件，直接拷贝过来就行了（查看<a href="https://github.com/ruanyf/github-actions-demo/blob/master/.github/workflows/ci.yml" target="_blank" rel="noopener noreferrer">源码<ExternalLinkIcon/></a>）。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token literal-property property">name</span><span class="token operator">:</span> GitHub Actions Build and Deploy Demo\n<span class="token literal-property property">on</span><span class="token operator">:</span>\n  <span class="token literal-property property">push</span><span class="token operator">:</span>\n    <span class="token literal-property property">branches</span><span class="token operator">:</span>\n      <span class="token operator">-</span> master\n<span class="token literal-property property">jobs</span><span class="token operator">:</span>\n  build<span class="token operator">-</span>and<span class="token operator">-</span>deploy<span class="token operator">:</span>\n    runs<span class="token operator">-</span>on<span class="token operator">:</span> ubuntu<span class="token operator">-</span>latest\n    <span class="token literal-property property">steps</span><span class="token operator">:</span>\n    <span class="token operator">-</span> name<span class="token operator">:</span> Checkout\n      <span class="token literal-property property">uses</span><span class="token operator">:</span> actions<span class="token operator">/</span>checkout@master\n\n    <span class="token operator">-</span> name<span class="token operator">:</span> Build and Deploy\n      <span class="token literal-property property">uses</span><span class="token operator">:</span> JamesIves<span class="token operator">/</span>github<span class="token operator">-</span>pages<span class="token operator">-</span>deploy<span class="token operator">-</span>action@master\n      <span class="token literal-property property">env</span><span class="token operator">:</span>\n        <span class="token constant">ACCESS_TOKEN</span><span class="token operator">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets<span class="token punctuation">.</span><span class="token constant">ACCESS_TOKEN</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>\n        <span class="token constant">BRANCH</span><span class="token operator">:</span> gh<span class="token operator">-</span>pages\n        <span class="token constant">FOLDER</span><span class="token operator">:</span> build\n        <span class="token constant">BUILD_SCRIPT</span><span class="token operator">:</span> npm install <span class="token operator">&amp;&amp;</span> npm run build\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>上面这个 workflow 文件的要点如下。</p>\n<blockquote>\n<ol>\n<li>整个流程在<code>master</code>分支发生<code>push</code>事件时触发。</li>\n<li>只有一个<code>job</code>，运行在虚拟机环境<code>ubuntu-latest</code>。</li>\n<li>第一步是获取源码，使用的 action 是<code>actions/checkout</code>。</li>\n<li>第二步是构建和部署，使用的 action 是<code>JamesIves/github-pages-deploy-action</code>。</li>\n<li>第二步需要四个环境变量，分别为 GitHub 密钥、发布分支、构建成果所在目录、构建脚本。其中，只有 GitHub 密钥是秘密变量，需要写在双括号里面，其他三个都可以直接写在文件里。</li>\n</ol>\n</blockquote>\n<p>第五步，保存上面的文件后，将整个仓库推送到 GitHub。</p>\n<p>GitHub 发现了 workflow 文件以后，就会自动运行。你可以在网站上实时查看<a href="https://github.com/ruanyf/github-actions-demo/commit/24fbf6a875351297f31434fd44bc3146accf9e59/checks" target="_blank" rel="noopener noreferrer">运行日志<ExternalLinkIcon/></a>，日志默认保存30天。</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://www.wangbase.com/blogimg/asset/201909/bg2019091108.jpg" data="aurora"></p>\n<p>等到 workflow 运行结束，访问 <a href="https://ruanyf.github.io/github-actions-demo/" target="_blank" rel="noopener noreferrer">GitHub Page<ExternalLinkIcon/></a>，会看到构建成果已经发上网了。</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://www.wangbase.com/blogimg/asset/201909/bg2019091109.jpg" data="aurora"></p>\n<p>以后，每次修改后推送源码，GitHub Actions 都会自动运行，将构建产物发布到网页。</p>\n<h2 id="五、参考链接" tabindex="-1"><a class="header-anchor" href="#五、参考链接" aria-hidden="true">#</a> 五、参考链接</h2>\n<ul>\n<li><a href="https://help.github.com/en/categories/automating-your-workflow-with-github-actions" target="_blank" rel="noopener noreferrer">GitHub Pages 官方文档<ExternalLinkIcon/></a></li>\n<li><a href="https://lukeboyle.com/blog-posts/2019/08/github-actions-for-web-apps/" target="_blank" rel="noopener noreferrer">Github Actions for web apps<ExternalLinkIcon/></a>, Luke Boyle</li>\n<li><a href="https://medium.com/@adam.zolyak/my-first-week-with-github-actions-5d92de4c4851" target="_blank" rel="noopener noreferrer">My First Week With GitHub Actions<ExternalLinkIcon/></a>, Adam Zolyak</li>\n<li><a href="http://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html" target="_blank" rel="noopener noreferrer">阮一峰<ExternalLinkIcon/></a></li>\n</ul>\n',date:"2023-01-04",deps:[],hoistedTags:[],links:[],pathInferred:"/CICD/2023/20230104.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"20230104",filePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/CICD/2023/20230104.md",filePathRelative:"CICD/2023/20230104.md",componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/CICD/2023/20230104.html.vue",componentFilePathRelative:"pages/CICD/2023/20230104.html.vue",componentFileChunkName:"v-379809b4",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/CICD/2023/20230104.html.js",dataFilePathRelative:"pages/CICD/2023/20230104.html.js",dataFileChunkName:"v-379809b4",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/CICD/2023/20230104.html",htmlFilePathRelative:"CICD/2023/20230104.html"},{data:{key:"v-394ce253",path:"/CICD/2023/20230105.html",title:"CICD入门教程，使用Github Action给自己的项目加上CICD",lang:"zh-CN",frontmatter:{title:"CICD入门教程，使用Github Action给自己的项目加上CICD",date:"2023-01-05T00:00:00.000Z",tags:["CICD"],categories:["CICD"]},excerpt:"",headers:[{level:2,title:"为什么选择Github Action",slug:"为什么选择github-action",children:[]},{level:2,title:"Github Action初学入门",slug:"github-action初学入门",children:[]},{level:2,title:"给一个项目添加CICD流程",slug:"给一个项目添加cicd流程",children:[{level:3,title:"添加CI流程",slug:"添加ci流程",children:[]},{level:3,title:"添加CD流程",slug:"添加cd流程",children:[]},{level:3,title:"添加状态徽章",slug:"添加状态徽章",children:[]}]}],git:{updatedTime:null,contributors:[]}},key:"v-394ce253",path:"/CICD/2023/20230105.html",title:"CICD入门教程，使用Github Action给自己的项目加上CICD",lang:"zh-CN",frontmatter:{title:"CICD入门教程，使用Github Action给自己的项目加上CICD",date:"2023-01-05T00:00:00.000Z",tags:["CICD"],categories:["CICD"]},excerpt:"",headers:[{level:2,title:"为什么选择Github Action",slug:"为什么选择github-action",children:[]},{level:2,title:"Github Action初学入门",slug:"github-action初学入门",children:[]},{level:2,title:"给一个项目添加CICD流程",slug:"给一个项目添加cicd流程",children:[{level:3,title:"添加CI流程",slug:"添加ci流程",children:[]},{level:3,title:"添加CD流程",slug:"添加cd流程",children:[]},{level:3,title:"添加状态徽章",slug:"添加状态徽章",children:[]}]}],content:'\r\n::: tip\r\n\r\n这是一篇属于面向前端的关于CICD和Github Action的入门文章，其旨在：\r\n\r\n1. 入门掌握Github Action的用法\r\n2. 学习CI和CD的含义及其实现细节\r\n3. 基于Github Action展示如何给自己手上的项目添加CICD的流程\r\n\r\n:::\r\n\r\n## 为什么选择Github Action\r\n\r\n`Github Action`在**开源项目**是免费使用的，而在**私有项目**方面的计费会根据你购买的服务而不同,`Github Action`对于其他的**CICD 工具**及其没被选为本文实现方式的原因如下所示：\r\n\r\n- **`Gitlab CI`**：与`Gitlab`高度绑定，项目放在`Gitlab`就谈不上开源了\r\n- **`Travic CI`**：限时免费，过后按进程收费\r\n- **`Drone CI`**：执行任务时，国内机器从`Github`拉取仓库代码时会偶尔超时，从而导致任务失败\r\n- **`Jenkins CI`**：除了存在与`Drone CI`一样的缺点外，自身比较重量，占用宿主机较多资源\r\n\r\n## Github Action初学入门\r\n\r\n当我们想往自己的项目里接入**Github Actions**时，要在根项目目录里新建`.github/workflows`目录。然后通过编写`yml`格式文件定义**Workflow(工作流程)去实现`CI`。在阅读`yml`文件之前，我们要先搞懂在Workflow**中一些比较重要的概念：\r\n\r\n- **Event(触发事件)**：指触发 **Workflow(工作流程)** 运行的事件。\r\n- **Job(作业)**：一个**工作流程**中包含一个或多个**Job**，这些**Job**默认情况下并行运行，但我们也可以通过设置让其按顺序执行。每个**Job**都在指定的环境(虚拟机或容器)里开启一个**Runner**(可以理解为一个进程)运行，包含多个**Step(步骤)**。\r\n- **Step(步骤)**：**Job**的组成部分，用于定义每一部的工作内容。每个**Step**在运行器环境中以其单独的进程运行，且可以访问工作区和文件系统。\r\n\r\n以下图的`Workflow`作为例子，我们可以更直观地看懂**Event**、**Job**以及**Step**两者的关系：\r\n\r\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/27deef91333747ab8f7e09bd2649b5bb~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?)\r\n\r\n*在`Github Action`中， **Job** 和 **Step** 以及 **Workflow** 都有资源占用以及时间限制，超出限制就会直接取消运行，关于这些限制可看[Usage limits](https://link.juejin.cn?target=https%3A%2F%2Fdocs.github.com%2Fcn%2Factions%2Flearn-github-actions%2Fusage-limits-billing-and-administration%23usage-limits)。*\r\n\r\n下面我们用`Github`的官方教程中的一个`Workflow`例子来学习：\r\n\r\n```yml\r\n# 指定工作流程的名称\r\nname: learn-github-actions\r\n# 指定此工作流程的触发事件Event。 此示例使用 推送 事件，即执行push后，触发该流水线的执行\r\non: [push]\r\n# 存放 learn-github-actions 工作流程中的所有Job\r\njobs:\r\n  # 指定一个Job的名称为check-bats-version\r\n  check-bats-version:\r\n    # 指定该Job在最新版本的 Ubuntu Linux 的 Runner(运行器)上运行\r\n    runs-on: ubuntu-latest\r\n    # 存放 check-bats-version 作业中的所有Step\r\n    steps:\r\n      # step-no.1: 运行actions/checkout@v3操作，操作一般用uses来调用，\r\n      # 一般用于处理一些复杂又频繁的操作例如拉取分支，安装插件\r\n      # 此处 actions/checkout 操作是从仓库拉取代码到Runner里的操作\r\n      - uses: actions/checkout@v3\r\n      # step-no.2: actions/setup-node@v3 操作来安装指定版本的 Node.js，此处指定安装的版本为v14\r\n      - uses: actions/setup-node@v3\r\n        with:\r\n          node-version: "14"\r\n      # step-no.3: 运行命令行下载bats依赖到全局环境中\r\n      - run: npm install -g bats\r\n      # step-no.4: 运行命令行查看bats依赖的版本\r\n      - run: bats -v\r\n```\r\n\r\n## 给一个项目添加CICD流程\r\n\r\n### 添加CI流程\r\n\r\n#### CI的概念\r\n\r\n**CI**的全称是**Continuous Integration**，直译为**可持续集成**，而普遍对其的解释是**频繁地（一天多次）将代码集成到主干**。对于这个解释我们要搞懂其中的两个概念：\r\n\r\n1. **主干**：是指包含多个已上和即将上线的特性的分支。\r\n2. **集成**：是指把含新特性的分支合并(`merge`)到**主干**上的行为\r\n\r\n我们借`github flow`分支管理策略作为例子来更加深入了解`CI`及上面的两个概念：\r\n\r\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e231ae5101154085bcb13b18443c5e2d~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?)\r\n\r\n`github flow`在开发新特性的运行模式如下所示：\r\n\r\n1. 基于`master`创建新的分支`feature`进行开发。注意这需要保证`master`的代码和特性永远是最稳定的。\r\n2. 开发期间，定期提交更改(`commit and push change`)到远程仓库的`feature`分支\r\n3. 在编码以及自测完成后，通过创建`pull request`去对`master`发起合并`feature`的请求\r\n4. `pull request`在经过审核确认可行后合并到`master`分支\r\n5. 删除已合并的特性分支`feature`\r\n\r\n更多详细细节可看[GitHub flow](https://link.juejin.cn?target=https%3A%2F%2Fdocs.github.com%2Fcn%2Fget-started%2Fquickstart%2Fgithub-flow)。\r\n\r\n在`github Flow`模型中，**主干**指`master`分支，广义上是一个包含多个已上和即将上线的特性的分支；**集成**指的是在`pull request`通过后把特性分支`merge`合并到**主干**，也就是`master`分支上。\r\n\r\n阮一峰老师的[持续集成是什么？](https://link.juejin.cn?target=https%3A%2F%2Fwww.ruanyifeng.com%2Fblog%2F2015%2F09%2Fcontinuous-integration.html)里说到过：\r\n\r\n> 持续集成的目的，就是让产品可以快速迭代，同时还能保持高质量。它的核心措施是，代码集成到主干之前，必须通过自动化测试。只要有一个测试用例失败，就不能集成。\r\n\r\n而`github flow`模型**保证高质量的核心措施**是：在**集成**前通过`pull request`，从而触发审核（审核可以是一系列的自动化校验测试以及代码审核**Code Review**），在审核通过后再合并到**主干**，从而保证**主干**的稳定性。\r\n\r\n下面我们就按照`github flow`模型的机制，在开头创建的项目上添加`CI`流程。\r\n\r\n#### 在项目中实现CI\r\n\r\n根据上面所说的`github flow`模型**保证高质量的核心措施**可知，我们要定义的执行`CI`的**Workflow**（下称**CI Workflow**）的**Event**是`master`分支的`pull request`事件。而`Job`和`Step`的话没具体说明，而我们可以把目前最普遍的 **代码测试（Test）** 和 **代码扫描（Lint）** 加入其中。\r\n\r\n其实现思路是，首先要借助一些第三方插件，在`package.json`中的`scripts`定义可以执行**代码测试（Test）\\**和\\**代码扫描（Lint）\\**的命令，然后在把这些命令行加到\\**CI Workflow**的**Step**里。\r\n\r\n具体流程图如下所示：\r\n\r\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8cd2441838274ff39f63af4fccb134a4~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?)\r\n\r\n#### 代码扫描命令实现\r\n\r\n一般公司里都会通过类似`Sonar`这类代码质量管理插件来保证代码质量。不过我们也可以通过前端样式三剑侠：`eslint`+`prettier`+`stylelint`来简单保证。这里我直接使用本人比较喜好和经常使用的`umi`的代码规范：[**@umijs/fabric**](https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fumijs%2Ffabric)来规定三剑侠的规则了，使用方式如下所示：\r\n\r\n**.eslintrc.js**\r\n\r\n```js\r\nmodule.exports = {\r\n  extends: [require.resolve("@umijs/fabric/dist/eslint")],\r\n};\r\n\r\n```\r\n\r\n**.prettierrc.js**\r\n\r\n```js\r\nconst fabric = require("@umijs/fabric");\r\n\r\nmodule.exports = {\r\n  ...fabric.prettier,\r\n};\r\n\r\n```\r\n\r\n**.stylelintrc.js**\r\n\r\n```js\r\nconst fabric = require("@umijs/fabric");\r\n\r\nmodule.exports = {\r\n  ...fabric.stylelint,\r\n};\r\n\r\n```\r\n\r\n然后在`package.json`的`script`上加上对应的执行命令即可：\r\n\r\n```json\r\n"scripts": {\r\n  "dev": "vite",\r\n  "build": "tsc && vite build",\r\n  "preview": "vite preview",\r\n  "lint": "npm run lint:js && npm run lint:style && npm run lint:prettier",\r\n  "lint:js": "eslint --cache --ext .js,.jsx,.ts,.tsx ./src",\r\n  "lint:prettier": "prettier --check \\"src/**/*\\" --end-of-line auto",\r\n  "lint:style": "stylelint --fix \'src/**/*.{css,scss,less}\' --cache"\r\n}\r\n\r\n```\r\n\r\n这样子就完成了**代码扫描**部分了。通过`yarn run lint`执行后的效果如下所示：\r\n\r\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ed18411c0d2c41108d62ab0fd1716779~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?)\r\n\r\n#### 自动化测试命令实现\r\n\r\n前端测试主要有**单元测试（Unit Test）**、**集成测试（Integration Test）**、**UI 测试（UI Test）**。由于项目里只有一个页面组件，且本章节的重点是实现`CI`而不是**前端自动化测试**，因此这里用**单元测试**来实现一下：\r\n\r\n为了多写点测试用例给测试代码加点内容，我给页面对应组件`App.tsx`加了个`props`，代码如下所示：\r\n\r\n**App.tsx**\r\n\r\n```tsx\r\nimport type { FC } from "react";\r\nimport { useState } from "react";\r\nimport logo from "./logo.svg";\r\nimport "./App.css";\r\n\r\ninterface Props {\r\n  value: string;\r\n}\r\n\r\nconst App: FC<Props> = ({ value }) => {\r\n  const [count, setCount] = useState(0);\r\n\r\n  return (\r\n    <div className="App">\r\n      <header className="App-header">\r\n        <img src={logo} className="App-logo" alt="logo" />\r\n        <p>Hello Vite + React!!!!!!!!</p>\r\n        <p>\r\n          {/*\r\n            测试代码中需要获取的DOM元素用role属性标记，这里的role属性只会在测试代码中用到，\r\n            这样子就可以避免代码因需求改动时，因DOM属性改变导致测试不通过。有利于TDD（测试驱动开发）开发的进行\r\n          */}\r\n          <button\r\n            role="button"\r\n            type="button"\r\n            onClick={() => setCount((v) => v + 1)}\r\n          >\r\n            count is: {count}\r\n          </button>\r\n        </p>\r\n        <p role="props">{value}</p>\r\n      </header>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n\r\n```\r\n\r\n这里采用`ts-jest`+`@testing-library`来编写测试代码（当然对于`React`还有别的选择，例如`ts-jest`+`enzyme`），测试代码如下所示：\r\n\r\n**App.test.tsx**\r\n\r\n```ts\r\nimport React from "react";\r\nimport { render, screen, fireEvent } from "@testing-library/react";\r\nimport App from "./App";\r\n\r\ntest("props is avaliable", () => {\r\n  const value = "123";\r\n  // 为了多写点测试用例，我给App组件加了个prop\r\n  render(<App value={value} />);\r\n  expect(screen.getByRole("props")).toHaveTextContent(value);\r\n});\r\n\r\ntest("click of button is avaliable", () => {\r\n  render(<App value="123" />);\r\n  fireEvent.click(screen.getByRole("button"));\r\n  expect(screen.getByRole("button")).toHaveTextContent(`count is: 1`);\r\n});\r\n\r\n```\r\n\r\n`jest.config.js`的配置比较复杂，可以从[此处](https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2FHitotsubashi%2Fcicd-study%2Fblob%2Fmain%2Fjest.config.js)查看。配置好后运行`yarn test`后控制台输出如下所示：\r\n\r\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/916b1e12446b45f796f1cc376d635af1~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?)\r\n\r\n#### 配置**CI Workflow**\r\n\r\n在项目根目录里的`.github/workflows`文件夹上新建`ci.yml`，代码如下所示：\r\n\r\n**ci.yml**\r\n\r\n```yml\r\nname: CI\r\n# Event设置为main分支的pull request事件，\r\n# 这里的main分支相当于master分支，github项目新建是把main设置为默认分支，我懒得改了所以就保持这样吧\r\non:\r\n  pull_request:\r\n    branches: main\r\njobs:\r\n  # 只需要定义一个job并命名为CI\r\n  CI:\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n      # 拉取项目代码\r\n      - name: Checkout repository\r\n        uses: actions/checkout@v2\r\n      # 给当前环境下载node\r\n      - name: Use Node.js\r\n        uses: actions/setup-node@v3\r\n        with:\r\n          node-version: "16.x"\r\n      # 检查缓存\r\n      # 如果key命中缓存则直接将缓存的文件还原到 path 目录，从而减少流水线运行时间\r\n      # 若 key 没命中缓存时，在当前Job成功完成时将自动创建一个新缓存\r\n      - name: Cache\r\n        # 缓存命中结果会存储在steps.[id].outputs.cache-hit里，该变量在继后的step中可读\r\n        id: cache-dependencies\r\n        uses: actions/cache@v3\r\n        with:\r\n          # 缓存文件目录的路径\r\n          path: |\r\n            **/node_modules\r\n          # key中定义缓存标志位的生成方式。runner.OS指当前环境的系统。外加对yarn.lock内容生成哈希码作为key值，如果yarn.lock改变则代表依赖有变化。\r\n          # 这里用yarn.lock而不是package.json是因为package.json中还有version和description之类的描述项目但和依赖无关的属性\r\n          key: ${{runner.OS}}-${{hashFiles(\'**/yarn.lock\')}}\r\n      # 安装依赖\r\n      - name: Installing Dependencies\r\n        # 如果缓存标志位没命中，则执行该step。否则就跳过该step\r\n        if: steps.cache-dependencies.outputs.cache-hit != \'true\'\r\n        run: yarn install\r\n      # 运行代码扫描\r\n      - name: Running Lint\r\n        # 通过前面章节定义的命令行执行代码扫描\r\n        run: yarn lint\r\n      # 运行自动化测试\r\n      - name: Running Test\r\n        # 通过前面章节定义的命令行执行自动化测试\r\n        run: yarn test\r\n\r\n```\r\n\r\n关于上面的`Cahe`步骤中，7 天内未被访问的任何缓存条目将会被删除。 可以存储的缓存数没有限制，但存储库中所有缓存的总大小限制为 10 GB。更多内容请看[缓存依赖项以加快工作流程](https://link.juejin.cn?target=https%3A%2F%2Fdocs.github.com%2Fcn%2Factions%2Fusing-workflows%2Fcaching-dependencies-to-speed-up-workflows)。\r\n\r\n------\r\n\r\n当创建`pull request`合并到主干时，**CI Workflow**触发运行，此时可以看到下面的情况：\r\n\r\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/da87fc3688394d11a1be7391721250e1~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?)\r\n\r\n当**CI Workflow**运行完成时，其效果如下所示：\r\n\r\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9f59410d312a4dc8aa517701f98a94b7~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?)\r\n\r\n我们可以通过点击`Details`查看执行详细信息，如下所示：\r\n\r\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0a907606f73e4894a13fc72d4f9bb731~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?)\r\n\r\n也可以点开每个`step`查看控制台输出信息：\r\n\r\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/69118f7b049d4ec0ba3746493be1a653~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?)\r\n\r\n确认代码安全可靠后就可以点击`Merge pull request`来把新代码**集成**到**主干**上。从而基于`CI`完成一次**bug 修复**或**新特性迭代**。\r\n\r\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dcecb9fa1df148f291d0ce40fe88a5f6~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?)\r\n\r\n合并成功后，可以点击`Delete branch`以删除已合并的特性分支。\r\n\r\n#### 补充\r\n\r\n部分`DevOps`平台中的`CI`流程比上面我们实现的流程里多一个阶段：**编译并整理产物**，即基于当前版本的代码打包构建产物。在这篇文章中我把这个阶段放在`CD`流程里。\r\n\r\n### 添加CD流程\r\n\r\n#### CD的概念\r\n\r\n`CD`指的是 **持续交付（Continuous delivery）** 或者 **持续部署（continuous deployment）** 或者是两者的并集，我们借用[AWS 中对持续交付说明](https://link.juejin.cn?target=https%3A%2F%2Faws.amazon.com%2Fcn%2Fdevops%2Fcontinuous-delivery%2F)来说明下这两者的解释，如下：\r\n\r\n> ![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/539a9328755340e69a1fa5d50abd3bb5~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?) 采用持续交付时，系统会构建并测试每一个代码变更，然后将其推送到非生产测试环境或临时环境中。生产部署前可能存在多个并行测试阶段。**持续交付与持续部署之间的区别在于，需要手动批准才能更新到生产环境。对于持续部署，生产会在没有明确批准的情况下自动发生。**\r\n\r\n从上面的解释中可知其有三个步骤：\r\n\r\n1. 生成制品\r\n2. 自动部署到测试环境以校验其稳定性\r\n3. 部署到生产环境（自动的是**持续部署**，手动的是**持续交付**）\r\n\r\n基于本文是以入门为主，且很多读者也就只有一个服务器来直接部署自己的小项目，因此本章节的`CD`实现中，我们以**持续部署（continuous deployment）** 且跳过上面第二步来实现，也就是生成制品后直接自动部署到生产环境。\r\n\r\n------\r\n\r\n其实对于**持续交付（Continuous delivery）** 和 **持续部署（continuous deployment）** ，不同`DevOps`平台有不同的解释，而不同的企业和项目也有不同的实现方式。但本质上不会有太大区别，而我们也没必要去花时间咬文嚼字，借用**Red Hat**对[ **CICD**说明 ](https://link.juejin.cn?target=https%3A%2F%2Fwww.redhat.com%2Fzh%2Ftopics%2Fdevops%2Fwhat-is-ci-cd)里的一句话总结，如下：\r\n\r\n> CI/CD 既可能仅指持续集成和持续交付构成的关联环节，也可以指持续集成、持续交付和持续部署这三项构成的关联环节。更为复杂的是，有时"持续交付"也包含了持续部署流程。\r\n>\r\n> 归根结底，我们没必要纠结于这些语义，您只需记得 CI/CD 其实就是一个流程（通常形象地表述为管道），用于实现应用开发中的高度持续自动化和持续监控。因案例而异，该术语的具体含义取决于 CI/CD 管道的自动化程度。许多企业最开始先添加 CI，然后逐步实现交付和部署的自动化（例如作为云原生应用的一部分）。\r\n\r\n#### 在项目中实现CD\r\n\r\n这是我们在本章节要实现的`CD`机制的流程图：\r\n\r\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/34de1e458c6e4f5f9429ca6251272a77~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?)\r\n\r\n#### 先前准备\r\n\r\n在编写**CD Workflow**前，我们要准备以下东西：\r\n\r\n1. 内置`nginx`的服务器一台：用于部署制品\r\n2. 服务器的密钥对：用于提供给流水线通过 ssh 免密登录到服务器进行部署\r\n3. `Github`里的**Personal Access Token**：用于提供给流水线免密登录`github`账号进行发布制品的操作\r\n4. 把步骤 2 和步骤 3 及其他关于机器的信息都放在对应仓库的**Secret**里\r\n\r\n下面对上述需要准备的东西逐一讲解：\r\n\r\n1. **准备一台服务器，在里面启动`nginx`服务。**\r\n\r\n   读者可以直接通过`apt`下载`nginx`到指定目录后启动。我个人习惯以`docker`启动容器以开启`nginx`服务。因此我直接通过下面的`docker-compose.yml`去创建启动`nginx`容器：\r\n\r\n   ```yml\r\n   # 指定docker-compose解析的版本\r\n   version: "3"\r\n   services:\r\n     pure-nginx:\r\n       image: nginx:latest\r\n       # 指定容器名\r\n       container_name: pure-nginx\r\n       restart: always\r\n       # 指定持久卷，格式为 宿主机目录路径:容器目录路径\r\n       # CD Workflow会通过密钥登录该服务器，然后把生成的制品放在/data/www里，在此之后直接访问宿主机的ip即可访问到项目页面\r\n       volumes:\r\n         - /data/www:/usr/share/nginx/html\r\n       ports:\r\n         - 80:80\r\n   \r\n   ```\r\n\r\n2. **创建服务器的密钥对：用于提供给流水线通过 ssh 免密登录到服务器进行部署**\r\n\r\n   每个平台都有创建密钥的教程，例如我的机器是腾讯云的，因此参考[这篇文章](https://link.juejin.cn?target=https%3A%2F%2Fcloud.tencent.com%2Fdocument%2Fproduct%2F1207%2F44573)去创建密钥，密钥分公钥和私钥。公钥存放在服务器上，私钥我们自己下载保存。在配置`CD Workflow`的免密登录机器的**步骤 step**之前，大家也可以参考这篇文章[使用密钥登录](https://link.juejin.cn?target=https%3A%2F%2Fcloud.tencent.com%2Fdocument%2Fproduct%2F1207%2F44643)，使用`VSCode`中的[Remote - SSH](https://link.juejin.cn?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dms-vscode-remote.remote-ssh)通过配置私钥尝试是否可以免密登录机器，如果成功后就可以放心交给流水线去登录。\r\n\r\n3. **创建`Github`里的 Personal Access Token ：用于提供给流水线免密登录`github`账号进行发布制品的操作**\r\n\r\n   参考`Github`官方文档[Creating a personal access token](https://link.juejin.cn?target=https%3A%2F%2Fdocs.github.com%2Fcn%2Fauthentication%2Fkeeping-your-account-and-data-secure%2Fcreating-a-personal-access-token)创建**Personal Access Token**。\r\n\r\n   在上述文档里的第 8 步 **Select scopes** 时直接点击`repo`即可，其余的可不选，如下所示：\r\n\r\n   ![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/64beb416e2ef41beb21ea45994ff9dcc~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?)\r\n\r\n4. **把步骤 2 和步骤 3 及其他关于机器的信息都放在`github`仓库的 Secret 里**\r\n\r\n   **Secret**是一些相对机密重要的信息，这些信息在 **Workflow** 里面需要用到，但又不能以明文的形式直接写在文件里以免泄露。此时我们可以放在**Secret**里，在 **Workflow** 运行时这些**Secret**会以环境变量的形式注入到`Runner`里\r\n\r\n   在如图所示的页面下点击右上角的`New repository secret`去创建`secret`，在接下来要创建的`CD Workflow`中需要用到如图红字标记所示的四个**Secret**。\r\n\r\n   ![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bc7dfad31cd2485490a1170dd9548701~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?)\r\n\r\n#### 配置**CD Workflow**\r\n\r\n这里我们把执行`CD`的**Workflow**（下称**CD Workflow**）的**Event**定义为`master`分支的`push`事件，因为**CD Workflow**的执行是在`Merge pull request`完成后的，而合并行为会触发**主干**的`push`事件。\r\n\r\n接下来在`.github/workflows`里新建`cd.yml`来定义**CD Workflow**，代码如下所示：\r\n\r\n```yml\r\nname: CD\r\non:\r\n  # 以主干的push事件作为触发条件\r\n  push:\r\n    branches: main\r\njobs:\r\n  CD:\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n      # 拉取代码\r\n      - name: Checkout repository\r\n        uses: actions/checkout@v2\r\n      # 下载Node\r\n      - name: Use Node.js\r\n        uses: actions/setup-node@v3\r\n        with:\r\n          node-version: "16.x"\r\n      # 添加缓存，逻辑和CI Workflow里的一样\r\n      - name: Cache\r\n        id: cache-dependencies\r\n        uses: actions/cache@v3\r\n        with:\r\n          path: |\r\n            **/node_modules\r\n          key: ${{runner.OS}}-${{hashFiles(\'**/yarn.lock\')}}\r\n      # 安装依赖。命中缓存则跳过此步\r\n      - name: Installing Dependencies\r\n        if: steps.cache-dependencies.outputs.cache-hit != \'true\'\r\n        run: yarn install\r\n      # 从package.json里获取version属性的值\r\n      # 在CD Workflow中会给每个生成的制品打上标签，而标签取值于version值\r\n      - name: Read Version\r\n        # 读取出来的值会放在steps.[id].outputs.value供其他步骤step读取\r\n        id: version\r\n        uses: ashley-taylor/read-json-property-action@v1.0\r\n        with:\r\n          path: ./package.json\r\n          property: version\r\n      # 打包生成制品，且把制品压缩到assets.zip压缩包里\r\n      - name: Building\r\n        run: |\r\n          yarn build\r\n          zip -r assets ./dist/**\r\n      # 基于当前commit进行版本发布(Create a release)，tag_name是v前缀加上package.json的version值\r\n      - name: Create GitHub Release\r\n        # 此步骤中，版本发布后会返回对应的url，以供下面上传制品的步骤中读取使用\r\n        id: create_release\r\n        uses: actions/create-release@v1\r\n        env:\r\n          # GITHUB_TOKEN是准备工作步骤三申请的Personal Access Token\r\n          GITHUB_TOKEN: ${{ secrets.PROJECT_ACCESS_TOKEN }}\r\n        with:\r\n          tag_name: v${{steps.version.outputs.value}}\r\n          release_name: v${{steps.version.outputs.value}}\r\n          draft: false\r\n          prerelease: false\r\n      # 把assets.zip上传到仓库对应的发布版本Release上\r\n      - name: Update Release Asset\r\n        id: upload-release-asset\r\n        uses: actions/upload-release-asset@v1\r\n        env:\r\n          GITHUB_TOKEN: ${{ secrets.PROJECT_ACCESS_TOKEN }}\r\n        with:\r\n          upload_url: ${{ steps.create_release.outputs.upload_url }}\r\n          asset_path: ./assets.zip\r\n          asset_name: assets.zip\r\n          asset_content_type: application/zip\r\n      # 把制品上传到部署机器\r\n      - name: Upload to Deploy Server\r\n        uses: easingthemes/ssh-deploy@v2.0.7\r\n        env:\r\n          # SSH_PRIVATE_KEY为准备工作步骤三中生成密钥对里的私钥\r\n          SSH_PRIVATE_KEY: ${{ secrets.DEPLOY_TOKEN }}\r\n          # 指定当前目录中要上传的内容\r\n          SOURCE: "dist/"\r\n          # 指定上传到部署机器的哪个目录下\r\n          TARGET: "/data/www"\r\n          # 上传前指令，此处用于清空TARGET下的文件\r\n          ARGS: "-avzr --delete"\r\n          # REMOTE_HOST为机器的公网IP\r\n          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}\r\n          # REMOTE_USER为登录机器时用到账号名\r\n          REMOTE_USER: ${{secrets.REMOTE_USER}}\r\n\r\n```\r\n\r\n这样子就完成了**CD Workflow**的流程了，运行效果如下所示：\r\n\r\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a9aa0c1c9e3b48fba193017b9de0898f~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?)\r\n\r\n在**CD Workflow**运行完成后，可以输入自己机器的公网 IP 查看部署的项目。**注意：每次提 pr 时要确保 package.json 中的 version 值有变化，不然 CD Workflow 会在 Create GitHub Release 的步骤里报已存在 Tag 的错误。**\r\n\r\n**关于 CD Workflow 细节补充：**\r\n\r\n1. *为什么要获取`package.json`中`version`值，有什么作用?*\r\n\r\n   `version`值在**CD Workflow**主要用于版本发布，此过程需要填写指定的`tag_name`。发布的版本如下所示：\r\n\r\n   ![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6b2f57ce89f64881be4635e41ce2a9f1~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?)\r\n\r\n   点进去后可以看到当前项目的所有版本，如下所示：\r\n\r\n   ![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/62b357bd98724867946a81b3a45ab151~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?)\r\n\r\n   我们也可以在通过[VSCode GitGraph 插件](https://link.juejin.cn?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dmhutchie.git-graph)来看到自己发布的版本标签（commit 写的有点随便，不要介意），如下所示：\r\n\r\n   ![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/97aa18a6e64045ed9d1246bf5798db92~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?)\r\n\r\n   在每次**主干**更新后进行版本发布不仅符合开源项目的更新流程，而且利于我们之后部署特定**发布版本**的制品（可看下面**深入章节的回滚流程**）。\r\n\r\n2. 为什么要有 **Update Release Asset** 这个步骤？\r\n\r\n   首先，把制品放在对应的**发布版本**上是很常见的开源行为，读者也可以把制品下载下来放到`nginx`直接查看页面效果。其次也是很重要的，是为了**回滚（下面深入篇会写回滚机制的实现）\\**的实现，回滚需要快速获取前一个\\**发布版本**的制品覆盖到部署机器上。因此需要我们把每个制品都存放在对应的**发布版本**以实现持久化。\r\n\r\n3. *为什么 **Update Release Asset(上传制品)** 阶段不使用[`actions/upload-artifact`](https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Factions%2Fupload-artifact)：*\r\n\r\n   首先在**Release**中上传制品是很多开源项目中常见的操作，其次`actions/upload-artifact`中存在两个缺点：\r\n\r\n   1. 上传的制品只能供同一个`Workflow`的不同`Job`中使用。换言之，不同`Workflow`是不能使用这个制品的，这样子我们就不利于我们在不同的流程去调用这个制品。例如**回滚（下面深入篇会写回滚机制的实现）**，在当前部署机器上的项目存在问题时，我们可以通过回滚迅速把前一个稳定的版本的制品覆盖到部署机器上。\r\n   2. 上传的制品最多只存在 90 天，不能做到持久化。\r\n\r\n   因此这里没选择`actions/upload-artifact`。\r\n\r\n### 添加状态徽章\r\n\r\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1c002a4f5f8946d7a77a2eac0721475f~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?)\r\n\r\n我们可以在项目的`README.md`中加了`CI`和`CD`两个状态徽章来代表这个项目已成功实现了`CI`和`CD`的流程，如上图所示。这两个状态徽章是根据你指定的**Workflow**的名称和最近一次运行的结果动态变化的。如果对应的流水线并没有运行记录，则效果如图上的`E2E-Test`状态徽章所示。\r\n\r\n徽章可以直接以下面的格式来插入到自己的`README.md`上：\r\n\r\n```md\r\n![example workflow](https://github.com/<OWNER>/<REPOSITORY>/actions/workflows/<WORKFLOW_FILE>/badge.svg)\r\n\r\n```\r\n\r\n例如我的`CI`和`CD`徽章分别如下所示：\r\n\r\n```md\r\n![CI](https://github.com/Hitotsubashi/cicd-study/actions/workflows/ci.yml/badge.svg)\r\n\r\n![CD](https://github.com/Hitotsubashi/cicd-study/actions/workflows/cd.yml/badge.svg)\r\n\r\n```\r\n\r\n关于更多有关工作流程状态徽章的可看官方文档[添加工作流程状态徽章](https://link.juejin.cn?target=https%3A%2F%2Fdocs.github.com%2Fcn%2Factions%2Fmonitoring-and-troubleshooting-workflows%2Fadding-a-workflow-status-badge)\r\n\r\n文章转载于[掘金](https://juejin.cn/post/7113562222852309023)',contentRendered:'<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>这是一篇属于面向前端的关于CICD和Github Action的入门文章，其旨在：</p>\n<ol>\n<li>入门掌握Github Action的用法</li>\n<li>学习CI和CD的含义及其实现细节</li>\n<li>基于Github Action展示如何给自己手上的项目添加CICD的流程</li>\n</ol>\n</div>\n<h2 id="为什么选择github-action" tabindex="-1"><a class="header-anchor" href="#为什么选择github-action" aria-hidden="true">#</a> 为什么选择Github Action</h2>\n<p><code>Github Action</code>在<strong>开源项目</strong>是免费使用的，而在<strong>私有项目</strong>方面的计费会根据你购买的服务而不同,<code>Github Action</code>对于其他的<strong>CICD 工具</strong>及其没被选为本文实现方式的原因如下所示：</p>\n<ul>\n<li><strong><code>Gitlab CI</code></strong>：与<code>Gitlab</code>高度绑定，项目放在<code>Gitlab</code>就谈不上开源了</li>\n<li><strong><code>Travic CI</code></strong>：限时免费，过后按进程收费</li>\n<li><strong><code>Drone CI</code></strong>：执行任务时，国内机器从<code>Github</code>拉取仓库代码时会偶尔超时，从而导致任务失败</li>\n<li><strong><code>Jenkins CI</code></strong>：除了存在与<code>Drone CI</code>一样的缺点外，自身比较重量，占用宿主机较多资源</li>\n</ul>\n<h2 id="github-action初学入门" tabindex="-1"><a class="header-anchor" href="#github-action初学入门" aria-hidden="true">#</a> Github Action初学入门</h2>\n<p>当我们想往自己的项目里接入<strong>Github Actions</strong>时，要在根项目目录里新建<code>.github/workflows</code>目录。然后通过编写<code>yml</code>格式文件定义<strong>Workflow(工作流程)去实现<code>CI</code>。在阅读<code>yml</code>文件之前，我们要先搞懂在Workflow</strong>中一些比较重要的概念：</p>\n<ul>\n<li><strong>Event(触发事件)</strong>：指触发 <strong>Workflow(工作流程)</strong> 运行的事件。</li>\n<li><strong>Job(作业)</strong>：一个<strong>工作流程</strong>中包含一个或多个<strong>Job</strong>，这些<strong>Job</strong>默认情况下并行运行，但我们也可以通过设置让其按顺序执行。每个<strong>Job</strong>都在指定的环境(虚拟机或容器)里开启一个<strong>Runner</strong>(可以理解为一个进程)运行，包含多个<strong>Step(步骤)</strong>。</li>\n<li><strong>Step(步骤)</strong>：<strong>Job</strong>的组成部分，用于定义每一部的工作内容。每个<strong>Step</strong>在运行器环境中以其单独的进程运行，且可以访问工作区和文件系统。</li>\n</ul>\n<p>以下图的<code>Workflow</code>作为例子，我们可以更直观地看懂<strong>Event</strong>、<strong>Job</strong>以及<strong>Step</strong>两者的关系：</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image.png" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/27deef91333747ab8f7e09bd2649b5bb~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?" data="aurora"></p>\n<p><em>在<code>Github Action</code>中， <strong>Job</strong> 和 <strong>Step</strong> 以及 <strong>Workflow</strong> 都有资源占用以及时间限制，超出限制就会直接取消运行，关于这些限制可看<a href="https://link.juejin.cn?target=https%3A%2F%2Fdocs.github.com%2Fcn%2Factions%2Flearn-github-actions%2Fusage-limits-billing-and-administration%23usage-limits" target="_blank" rel="noopener noreferrer">Usage limits<ExternalLinkIcon/></a>。</em></p>\n<p>下面我们用<code>Github</code>的官方教程中的一个<code>Workflow</code>例子来学习：</p>\n<div class="language-yaml ext-yml line-numbers-mode"><pre v-pre class="language-yaml"><code><span class="token comment"># 指定工作流程的名称</span>\n<span class="token key atrule">name</span><span class="token punctuation">:</span> learn<span class="token punctuation">-</span>github<span class="token punctuation">-</span>actions\n<span class="token comment"># 指定此工作流程的触发事件Event。 此示例使用 推送 事件，即执行push后，触发该流水线的执行</span>\n<span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>push<span class="token punctuation">]</span>\n<span class="token comment"># 存放 learn-github-actions 工作流程中的所有Job</span>\n<span class="token key atrule">jobs</span><span class="token punctuation">:</span>\n  <span class="token comment"># 指定一个Job的名称为check-bats-version</span>\n  <span class="token key atrule">check-bats-version</span><span class="token punctuation">:</span>\n    <span class="token comment"># 指定该Job在最新版本的 Ubuntu Linux 的 Runner(运行器)上运行</span>\n    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest\n    <span class="token comment"># 存放 check-bats-version 作业中的所有Step</span>\n    <span class="token key atrule">steps</span><span class="token punctuation">:</span>\n      <span class="token comment"># step-no.1: 运行actions/checkout@v3操作，操作一般用uses来调用，</span>\n      <span class="token comment"># 一般用于处理一些复杂又频繁的操作例如拉取分支，安装插件</span>\n      <span class="token comment"># 此处 actions/checkout 操作是从仓库拉取代码到Runner里的操作</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v3\n      <span class="token comment"># step-no.2: actions/setup-node@v3 操作来安装指定版本的 Node.js，此处指定安装的版本为v14</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>node@v3\n        <span class="token key atrule">with</span><span class="token punctuation">:</span>\n          <span class="token key atrule">node-version</span><span class="token punctuation">:</span> <span class="token string">"14"</span>\n      <span class="token comment"># step-no.3: 运行命令行下载bats依赖到全局环境中</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">run</span><span class="token punctuation">:</span> npm install <span class="token punctuation">-</span>g bats\n      <span class="token comment"># step-no.4: 运行命令行查看bats依赖的版本</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">run</span><span class="token punctuation">:</span> bats <span class="token punctuation">-</span>v\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h2 id="给一个项目添加cicd流程" tabindex="-1"><a class="header-anchor" href="#给一个项目添加cicd流程" aria-hidden="true">#</a> 给一个项目添加CICD流程</h2>\n<h3 id="添加ci流程" tabindex="-1"><a class="header-anchor" href="#添加ci流程" aria-hidden="true">#</a> 添加CI流程</h3>\n<h4 id="ci的概念" tabindex="-1"><a class="header-anchor" href="#ci的概念" aria-hidden="true">#</a> CI的概念</h4>\n<p><strong>CI</strong>的全称是<strong>Continuous Integration</strong>，直译为<strong>可持续集成</strong>，而普遍对其的解释是<strong>频繁地（一天多次）将代码集成到主干</strong>。对于这个解释我们要搞懂其中的两个概念：</p>\n<ol>\n<li><strong>主干</strong>：是指包含多个已上和即将上线的特性的分支。</li>\n<li><strong>集成</strong>：是指把含新特性的分支合并(<code>merge</code>)到<strong>主干</strong>上的行为</li>\n</ol>\n<p>我们借<code>github flow</code>分支管理策略作为例子来更加深入了解<code>CI</code>及上面的两个概念：</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image.png" originSrc="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e231ae5101154085bcb13b18443c5e2d~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?" data="aurora"></p>\n<p><code>github flow</code>在开发新特性的运行模式如下所示：</p>\n<ol>\n<li>基于<code>master</code>创建新的分支<code>feature</code>进行开发。注意这需要保证<code>master</code>的代码和特性永远是最稳定的。</li>\n<li>开发期间，定期提交更改(<code>commit and push change</code>)到远程仓库的<code>feature</code>分支</li>\n<li>在编码以及自测完成后，通过创建<code>pull request</code>去对<code>master</code>发起合并<code>feature</code>的请求</li>\n<li><code>pull request</code>在经过审核确认可行后合并到<code>master</code>分支</li>\n<li>删除已合并的特性分支<code>feature</code></li>\n</ol>\n<p>更多详细细节可看<a href="https://link.juejin.cn?target=https%3A%2F%2Fdocs.github.com%2Fcn%2Fget-started%2Fquickstart%2Fgithub-flow" target="_blank" rel="noopener noreferrer">GitHub flow<ExternalLinkIcon/></a>。</p>\n<p>在<code>github Flow</code>模型中，<strong>主干</strong>指<code>master</code>分支，广义上是一个包含多个已上和即将上线的特性的分支；<strong>集成</strong>指的是在<code>pull request</code>通过后把特性分支<code>merge</code>合并到<strong>主干</strong>，也就是<code>master</code>分支上。</p>\n<p>阮一峰老师的<a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.ruanyifeng.com%2Fblog%2F2015%2F09%2Fcontinuous-integration.html" target="_blank" rel="noopener noreferrer">持续集成是什么？<ExternalLinkIcon/></a>里说到过：</p>\n<blockquote>\n<p>持续集成的目的，就是让产品可以快速迭代，同时还能保持高质量。它的核心措施是，代码集成到主干之前，必须通过自动化测试。只要有一个测试用例失败，就不能集成。</p>\n</blockquote>\n<p>而<code>github flow</code>模型<strong>保证高质量的核心措施</strong>是：在<strong>集成</strong>前通过<code>pull request</code>，从而触发审核（审核可以是一系列的自动化校验测试以及代码审核<strong>Code Review</strong>），在审核通过后再合并到<strong>主干</strong>，从而保证<strong>主干</strong>的稳定性。</p>\n<p>下面我们就按照<code>github flow</code>模型的机制，在开头创建的项目上添加<code>CI</code>流程。</p>\n<h4 id="在项目中实现ci" tabindex="-1"><a class="header-anchor" href="#在项目中实现ci" aria-hidden="true">#</a> 在项目中实现CI</h4>\n<p>根据上面所说的<code>github flow</code>模型<strong>保证高质量的核心措施</strong>可知，我们要定义的执行<code>CI</code>的<strong>Workflow</strong>（下称<strong>CI Workflow</strong>）的<strong>Event</strong>是<code>master</code>分支的<code>pull request</code>事件。而<code>Job</code>和<code>Step</code>的话没具体说明，而我们可以把目前最普遍的 <strong>代码测试（Test）</strong> 和 <strong>代码扫描（Lint）</strong> 加入其中。</p>\n<p>其实现思路是，首先要借助一些第三方插件，在<code>package.json</code>中的<code>scripts</code>定义可以执行<strong>代码测试（Test）**和**代码扫描（Lint）**的命令，然后在把这些命令行加到**CI Workflow</strong>的<strong>Step</strong>里。</p>\n<p>具体流程图如下所示：</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image.png" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8cd2441838274ff39f63af4fccb134a4~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?" data="aurora"></p>\n<h4 id="代码扫描命令实现" tabindex="-1"><a class="header-anchor" href="#代码扫描命令实现" aria-hidden="true">#</a> 代码扫描命令实现</h4>\n<p>一般公司里都会通过类似<code>Sonar</code>这类代码质量管理插件来保证代码质量。不过我们也可以通过前端样式三剑侠：<code>eslint</code>+<code>prettier</code>+<code>stylelint</code>来简单保证。这里我直接使用本人比较喜好和经常使用的<code>umi</code>的代码规范：<a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fumijs%2Ffabric" target="_blank" rel="noopener noreferrer"><strong>@umijs/fabric</strong><ExternalLinkIcon/></a>来规定三剑侠的规则了，使用方式如下所示：</p>\n<p><strong>.eslintrc.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span>require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"@umijs/fabric/dist/eslint"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><strong>.prettierrc.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> fabric <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"@umijs/fabric"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token operator">...</span>fabric<span class="token punctuation">.</span>prettier<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><strong>.stylelintrc.js</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> fabric <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"@umijs/fabric"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token operator">...</span>fabric<span class="token punctuation">.</span>stylelint<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>然后在<code>package.json</code>的<code>script</code>上加上对应的执行命令即可：</p>\n<div class="language-json ext-json line-numbers-mode"><pre v-pre class="language-json"><code><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token property">"dev"</span><span class="token operator">:</span> <span class="token string">"vite"</span><span class="token punctuation">,</span>\n  <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"tsc &amp;&amp; vite build"</span><span class="token punctuation">,</span>\n  <span class="token property">"preview"</span><span class="token operator">:</span> <span class="token string">"vite preview"</span><span class="token punctuation">,</span>\n  <span class="token property">"lint"</span><span class="token operator">:</span> <span class="token string">"npm run lint:js &amp;&amp; npm run lint:style &amp;&amp; npm run lint:prettier"</span><span class="token punctuation">,</span>\n  <span class="token property">"lint:js"</span><span class="token operator">:</span> <span class="token string">"eslint --cache --ext .js,.jsx,.ts,.tsx ./src"</span><span class="token punctuation">,</span>\n  <span class="token property">"lint:prettier"</span><span class="token operator">:</span> <span class="token string">"prettier --check \\"src/**/*\\" --end-of-line auto"</span><span class="token punctuation">,</span>\n  <span class="token property">"lint:style"</span><span class="token operator">:</span> <span class="token string">"stylelint --fix \'src/**/*.{css,scss,less}\' --cache"</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>这样子就完成了<strong>代码扫描</strong>部分了。通过<code>yarn run lint</code>执行后的效果如下所示：</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image.png" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ed18411c0d2c41108d62ab0fd1716779~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?" data="aurora"></p>\n<h4 id="自动化测试命令实现" tabindex="-1"><a class="header-anchor" href="#自动化测试命令实现" aria-hidden="true">#</a> 自动化测试命令实现</h4>\n<p>前端测试主要有<strong>单元测试（Unit Test）</strong>、<strong>集成测试（Integration Test）</strong>、<strong>UI 测试（UI Test）</strong>。由于项目里只有一个页面组件，且本章节的重点是实现<code>CI</code>而不是<strong>前端自动化测试</strong>，因此这里用<strong>单元测试</strong>来实现一下：</p>\n<p>为了多写点测试用例给测试代码加点内容，我给页面对应组件<code>App.tsx</code>加了个<code>props</code>，代码如下所示：</p>\n<p><strong>App.tsx</strong></p>\n<div class="language-tsx ext-tsx line-numbers-mode"><pre v-pre class="language-tsx"><code><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> <span class="token constant">FC</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> logo <span class="token keyword">from</span> <span class="token string">"./logo.svg"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token string">"./App.css"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">Props</span> <span class="token punctuation">{</span>\n  value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> App<span class="token operator">:</span> <span class="token constant">FC</span><span class="token operator">&lt;</span>Props<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> value <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>App<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>App-header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>logo<span class="token punctuation">}</span></span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>App-logo<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logo<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">Hello Vite + React!!!!!!!!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">\n          </span><span class="token punctuation">{</span><span class="token comment">/*\n            测试代码中需要获取的DOM元素用role属性标记，这里的role属性只会在测试代码中用到，\n            这样子就可以避免代码因需求改动时，因DOM属性改变导致测试不通过。有利于TDD（测试驱动开发）开发的进行\n          */</span><span class="token punctuation">}</span><span class="token plain-text">\n          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>\n            <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span>\n            <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span>\n            <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setCount</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">=></span> v <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>\n          <span class="token punctuation">></span></span><span class="token plain-text">\n            count is: </span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token plain-text">\n          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>props<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>value<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><p>这里采用<code>ts-jest</code>+<code>@testing-library</code>来编写测试代码（当然对于<code>React</code>还有别的选择，例如<code>ts-jest</code>+<code>enzyme</code>），测试代码如下所示：</p>\n<p><strong>App.test.tsx</strong></p>\n<div class="language-typescript ext-ts line-numbers-mode"><pre v-pre class="language-typescript"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> render<span class="token punctuation">,</span> screen<span class="token punctuation">,</span> fireEvent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@testing-library/react"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">"./App"</span><span class="token punctuation">;</span>\n\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"props is avaliable"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span>\n  <span class="token comment">// 为了多写点测试用例，我给App组件加了个prop</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App value<span class="token operator">=</span><span class="token punctuation">{</span>value<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">expect</span><span class="token punctuation">(</span>screen<span class="token punctuation">.</span><span class="token function">getByRole</span><span class="token punctuation">(</span><span class="token string">"props"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveTextContent</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"click of button is avaliable"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App value<span class="token operator">=</span><span class="token string">"123"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  fireEvent<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span>screen<span class="token punctuation">.</span><span class="token function">getByRole</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">expect</span><span class="token punctuation">(</span>screen<span class="token punctuation">.</span><span class="token function">getByRole</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveTextContent</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">count is: 1</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p><code>jest.config.js</code>的配置比较复杂，可以从<a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2FHitotsubashi%2Fcicd-study%2Fblob%2Fmain%2Fjest.config.js" target="_blank" rel="noopener noreferrer">此处<ExternalLinkIcon/></a>查看。配置好后运行<code>yarn test</code>后控制台输出如下所示：</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image.png" originSrc="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/916b1e12446b45f796f1cc376d635af1~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?" data="aurora"></p>\n<h4 id="配置ci-workflow" tabindex="-1"><a class="header-anchor" href="#配置ci-workflow" aria-hidden="true">#</a> 配置<strong>CI Workflow</strong></h4>\n<p>在项目根目录里的<code>.github/workflows</code>文件夹上新建<code>ci.yml</code>，代码如下所示：</p>\n<p><strong>ci.yml</strong></p>\n<div class="language-yaml ext-yml line-numbers-mode"><pre v-pre class="language-yaml"><code><span class="token key atrule">name</span><span class="token punctuation">:</span> CI\n<span class="token comment"># Event设置为main分支的pull request事件，</span>\n<span class="token comment"># 这里的main分支相当于master分支，github项目新建是把main设置为默认分支，我懒得改了所以就保持这样吧</span>\n<span class="token key atrule">on</span><span class="token punctuation">:</span>\n  <span class="token key atrule">pull_request</span><span class="token punctuation">:</span>\n    <span class="token key atrule">branches</span><span class="token punctuation">:</span> main\n<span class="token key atrule">jobs</span><span class="token punctuation">:</span>\n  <span class="token comment"># 只需要定义一个job并命名为CI</span>\n  <span class="token key atrule">CI</span><span class="token punctuation">:</span>\n    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest\n    <span class="token key atrule">steps</span><span class="token punctuation">:</span>\n      <span class="token comment"># 拉取项目代码</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Checkout repository\n        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v2\n      <span class="token comment"># 给当前环境下载node</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Use Node.js\n        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>node@v3\n        <span class="token key atrule">with</span><span class="token punctuation">:</span>\n          <span class="token key atrule">node-version</span><span class="token punctuation">:</span> <span class="token string">"16.x"</span>\n      <span class="token comment"># 检查缓存</span>\n      <span class="token comment"># 如果key命中缓存则直接将缓存的文件还原到 path 目录，从而减少流水线运行时间</span>\n      <span class="token comment"># 若 key 没命中缓存时，在当前Job成功完成时将自动创建一个新缓存</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Cache\n        <span class="token comment"># 缓存命中结果会存储在steps.[id].outputs.cache-hit里，该变量在继后的step中可读</span>\n        <span class="token key atrule">id</span><span class="token punctuation">:</span> cache<span class="token punctuation">-</span>dependencies\n        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/cache@v3\n        <span class="token key atrule">with</span><span class="token punctuation">:</span>\n          <span class="token comment"># 缓存文件目录的路径</span>\n          <span class="token key atrule">path</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">\n            **/node_modules</span>\n          <span class="token comment"># key中定义缓存标志位的生成方式。runner.OS指当前环境的系统。外加对yarn.lock内容生成哈希码作为key值，如果yarn.lock改变则代表依赖有变化。</span>\n          <span class="token comment"># 这里用yarn.lock而不是package.json是因为package.json中还有version和description之类的描述项目但和依赖无关的属性</span>\n          <span class="token key atrule">key</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span>runner.OS<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">-</span>$<span class="token punctuation">{</span><span class="token punctuation">{</span>hashFiles(\'<span class="token important">**/yarn.lock\')</span><span class="token punctuation">}</span><span class="token punctuation">}</span>\n      <span class="token comment"># 安装依赖</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Installing Dependencies\n        <span class="token comment"># 如果缓存标志位没命中，则执行该step。否则就跳过该step</span>\n        <span class="token key atrule">if</span><span class="token punctuation">:</span> steps.cache<span class="token punctuation">-</span>dependencies.outputs.cache<span class="token punctuation">-</span>hit <span class="token tag">!=</span> \'true\'\n        <span class="token key atrule">run</span><span class="token punctuation">:</span> yarn install\n      <span class="token comment"># 运行代码扫描</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Running Lint\n        <span class="token comment"># 通过前面章节定义的命令行执行代码扫描</span>\n        <span class="token key atrule">run</span><span class="token punctuation">:</span> yarn lint\n      <span class="token comment"># 运行自动化测试</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Running Test\n        <span class="token comment"># 通过前面章节定义的命令行执行自动化测试</span>\n        <span class="token key atrule">run</span><span class="token punctuation">:</span> yarn test\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br></div></div><p>关于上面的<code>Cahe</code>步骤中，7 天内未被访问的任何缓存条目将会被删除。 可以存储的缓存数没有限制，但存储库中所有缓存的总大小限制为 10 GB。更多内容请看<a href="https://link.juejin.cn?target=https%3A%2F%2Fdocs.github.com%2Fcn%2Factions%2Fusing-workflows%2Fcaching-dependencies-to-speed-up-workflows" target="_blank" rel="noopener noreferrer">缓存依赖项以加快工作流程<ExternalLinkIcon/></a>。</p>\n<hr>\n<p>当创建<code>pull request</code>合并到主干时，<strong>CI Workflow</strong>触发运行，此时可以看到下面的情况：</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image.png" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/da87fc3688394d11a1be7391721250e1~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?" data="aurora"></p>\n<p>当<strong>CI Workflow</strong>运行完成时，其效果如下所示：</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image.png" originSrc="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9f59410d312a4dc8aa517701f98a94b7~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?" data="aurora"></p>\n<p>我们可以通过点击<code>Details</code>查看执行详细信息，如下所示：</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image.png" originSrc="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0a907606f73e4894a13fc72d4f9bb731~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?" data="aurora"></p>\n<p>也可以点开每个<code>step</code>查看控制台输出信息：</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image.png" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/69118f7b049d4ec0ba3746493be1a653~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?" data="aurora"></p>\n<p>确认代码安全可靠后就可以点击<code>Merge pull request</code>来把新代码<strong>集成</strong>到<strong>主干</strong>上。从而基于<code>CI</code>完成一次<strong>bug 修复</strong>或<strong>新特性迭代</strong>。</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image.png" originSrc="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dcecb9fa1df148f291d0ce40fe88a5f6~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?" data="aurora"></p>\n<p>合并成功后，可以点击<code>Delete branch</code>以删除已合并的特性分支。</p>\n<h4 id="补充" tabindex="-1"><a class="header-anchor" href="#补充" aria-hidden="true">#</a> 补充</h4>\n<p>部分<code>DevOps</code>平台中的<code>CI</code>流程比上面我们实现的流程里多一个阶段：<strong>编译并整理产物</strong>，即基于当前版本的代码打包构建产物。在这篇文章中我把这个阶段放在<code>CD</code>流程里。</p>\n<h3 id="添加cd流程" tabindex="-1"><a class="header-anchor" href="#添加cd流程" aria-hidden="true">#</a> 添加CD流程</h3>\n<h4 id="cd的概念" tabindex="-1"><a class="header-anchor" href="#cd的概念" aria-hidden="true">#</a> CD的概念</h4>\n<p><code>CD</code>指的是 <strong>持续交付（Continuous delivery）</strong> 或者 <strong>持续部署（continuous deployment）</strong> 或者是两者的并集，我们借用<a href="https://link.juejin.cn?target=https%3A%2F%2Faws.amazon.com%2Fcn%2Fdevops%2Fcontinuous-delivery%2F" target="_blank" rel="noopener noreferrer">AWS 中对持续交付说明<ExternalLinkIcon/></a>来说明下这两者的解释，如下：</p>\n<blockquote>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image.png" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/539a9328755340e69a1fa5d50abd3bb5~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?" data="aurora"> 采用持续交付时，系统会构建并测试每一个代码变更，然后将其推送到非生产测试环境或临时环境中。生产部署前可能存在多个并行测试阶段。<strong>持续交付与持续部署之间的区别在于，需要手动批准才能更新到生产环境。对于持续部署，生产会在没有明确批准的情况下自动发生。</strong></p>\n</blockquote>\n<p>从上面的解释中可知其有三个步骤：</p>\n<ol>\n<li>生成制品</li>\n<li>自动部署到测试环境以校验其稳定性</li>\n<li>部署到生产环境（自动的是<strong>持续部署</strong>，手动的是<strong>持续交付</strong>）</li>\n</ol>\n<p>基于本文是以入门为主，且很多读者也就只有一个服务器来直接部署自己的小项目，因此本章节的<code>CD</code>实现中，我们以<strong>持续部署（continuous deployment）</strong> 且跳过上面第二步来实现，也就是生成制品后直接自动部署到生产环境。</p>\n<hr>\n<p>其实对于<strong>持续交付（Continuous delivery）</strong> 和 <strong>持续部署（continuous deployment）</strong> ，不同<code>DevOps</code>平台有不同的解释，而不同的企业和项目也有不同的实现方式。但本质上不会有太大区别，而我们也没必要去花时间咬文嚼字，借用<strong>Red Hat</strong>对<a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.redhat.com%2Fzh%2Ftopics%2Fdevops%2Fwhat-is-ci-cd" target="_blank" rel="noopener noreferrer"> <strong>CICD</strong>说明 <ExternalLinkIcon/></a>里的一句话总结，如下：</p>\n<blockquote>\n<p>CI/CD 既可能仅指持续集成和持续交付构成的关联环节，也可以指持续集成、持续交付和持续部署这三项构成的关联环节。更为复杂的是，有时&quot;持续交付&quot;也包含了持续部署流程。</p>\n<p>归根结底，我们没必要纠结于这些语义，您只需记得 CI/CD 其实就是一个流程（通常形象地表述为管道），用于实现应用开发中的高度持续自动化和持续监控。因案例而异，该术语的具体含义取决于 CI/CD 管道的自动化程度。许多企业最开始先添加 CI，然后逐步实现交付和部署的自动化（例如作为云原生应用的一部分）。</p>\n</blockquote>\n<h4 id="在项目中实现cd" tabindex="-1"><a class="header-anchor" href="#在项目中实现cd" aria-hidden="true">#</a> 在项目中实现CD</h4>\n<p>这是我们在本章节要实现的<code>CD</code>机制的流程图：</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image.png" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/34de1e458c6e4f5f9429ca6251272a77~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?" data="aurora"></p>\n<h4 id="先前准备" tabindex="-1"><a class="header-anchor" href="#先前准备" aria-hidden="true">#</a> 先前准备</h4>\n<p>在编写<strong>CD Workflow</strong>前，我们要准备以下东西：</p>\n<ol>\n<li>内置<code>nginx</code>的服务器一台：用于部署制品</li>\n<li>服务器的密钥对：用于提供给流水线通过 ssh 免密登录到服务器进行部署</li>\n<li><code>Github</code>里的<strong>Personal Access Token</strong>：用于提供给流水线免密登录<code>github</code>账号进行发布制品的操作</li>\n<li>把步骤 2 和步骤 3 及其他关于机器的信息都放在对应仓库的<strong>Secret</strong>里</li>\n</ol>\n<p>下面对上述需要准备的东西逐一讲解：</p>\n<ol>\n<li>\n<p><strong>准备一台服务器，在里面启动<code>nginx</code>服务。</strong></p>\n<p>读者可以直接通过<code>apt</code>下载<code>nginx</code>到指定目录后启动。我个人习惯以<code>docker</code>启动容器以开启<code>nginx</code>服务。因此我直接通过下面的<code>docker-compose.yml</code>去创建启动<code>nginx</code>容器：</p>\n<div class="language-yaml ext-yml line-numbers-mode"><pre v-pre class="language-yaml"><code><span class="token comment"># 指定docker-compose解析的版本</span>\n<span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"3"</span>\n<span class="token key atrule">services</span><span class="token punctuation">:</span>\n  <span class="token key atrule">pure-nginx</span><span class="token punctuation">:</span>\n    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>latest\n    <span class="token comment"># 指定容器名</span>\n    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> pure<span class="token punctuation">-</span>nginx\n    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always\n    <span class="token comment"># 指定持久卷，格式为 宿主机目录路径:容器目录路径</span>\n    <span class="token comment"># CD Workflow会通过密钥登录该服务器，然后把生成的制品放在/data/www里，在此之后直接访问宿主机的ip即可访问到项目页面</span>\n    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> /data/www<span class="token punctuation">:</span>/usr/share/nginx/html\n    <span class="token key atrule">ports</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> <span class="token datetime number">80:80</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div></li>\n<li>\n<p><strong>创建服务器的密钥对：用于提供给流水线通过 ssh 免密登录到服务器进行部署</strong></p>\n<p>每个平台都有创建密钥的教程，例如我的机器是腾讯云的，因此参考<a href="https://link.juejin.cn?target=https%3A%2F%2Fcloud.tencent.com%2Fdocument%2Fproduct%2F1207%2F44573" target="_blank" rel="noopener noreferrer">这篇文章<ExternalLinkIcon/></a>去创建密钥，密钥分公钥和私钥。公钥存放在服务器上，私钥我们自己下载保存。在配置<code>CD Workflow</code>的免密登录机器的<strong>步骤 step</strong>之前，大家也可以参考这篇文章<a href="https://link.juejin.cn?target=https%3A%2F%2Fcloud.tencent.com%2Fdocument%2Fproduct%2F1207%2F44643" target="_blank" rel="noopener noreferrer">使用密钥登录<ExternalLinkIcon/></a>，使用<code>VSCode</code>中的<a href="https://link.juejin.cn?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dms-vscode-remote.remote-ssh" target="_blank" rel="noopener noreferrer">Remote - SSH<ExternalLinkIcon/></a>通过配置私钥尝试是否可以免密登录机器，如果成功后就可以放心交给流水线去登录。</p>\n</li>\n<li>\n<p><strong>创建<code>Github</code>里的 Personal Access Token ：用于提供给流水线免密登录<code>github</code>账号进行发布制品的操作</strong></p>\n<p>参考<code>Github</code>官方文档<a href="https://link.juejin.cn?target=https%3A%2F%2Fdocs.github.com%2Fcn%2Fauthentication%2Fkeeping-your-account-and-data-secure%2Fcreating-a-personal-access-token" target="_blank" rel="noopener noreferrer">Creating a personal access token<ExternalLinkIcon/></a>创建<strong>Personal Access Token</strong>。</p>\n<p>在上述文档里的第 8 步 <strong>Select scopes</strong> 时直接点击<code>repo</code>即可，其余的可不选，如下所示：</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image.png" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/64beb416e2ef41beb21ea45994ff9dcc~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?" data="aurora"></p>\n</li>\n<li>\n<p><strong>把步骤 2 和步骤 3 及其他关于机器的信息都放在<code>github</code>仓库的 Secret 里</strong></p>\n<p><strong>Secret</strong>是一些相对机密重要的信息，这些信息在 <strong>Workflow</strong> 里面需要用到，但又不能以明文的形式直接写在文件里以免泄露。此时我们可以放在<strong>Secret</strong>里，在 <strong>Workflow</strong> 运行时这些<strong>Secret</strong>会以环境变量的形式注入到<code>Runner</code>里</p>\n<p>在如图所示的页面下点击右上角的<code>New repository secret</code>去创建<code>secret</code>，在接下来要创建的<code>CD Workflow</code>中需要用到如图红字标记所示的四个<strong>Secret</strong>。</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image.png" originSrc="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bc7dfad31cd2485490a1170dd9548701~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?" data="aurora"></p>\n</li>\n</ol>\n<h4 id="配置cd-workflow" tabindex="-1"><a class="header-anchor" href="#配置cd-workflow" aria-hidden="true">#</a> 配置<strong>CD Workflow</strong></h4>\n<p>这里我们把执行<code>CD</code>的<strong>Workflow</strong>（下称<strong>CD Workflow</strong>）的<strong>Event</strong>定义为<code>master</code>分支的<code>push</code>事件，因为<strong>CD Workflow</strong>的执行是在<code>Merge pull request</code>完成后的，而合并行为会触发<strong>主干</strong>的<code>push</code>事件。</p>\n<p>接下来在<code>.github/workflows</code>里新建<code>cd.yml</code>来定义<strong>CD Workflow</strong>，代码如下所示：</p>\n<div class="language-yaml ext-yml line-numbers-mode"><pre v-pre class="language-yaml"><code><span class="token key atrule">name</span><span class="token punctuation">:</span> CD\n<span class="token key atrule">on</span><span class="token punctuation">:</span>\n  <span class="token comment"># 以主干的push事件作为触发条件</span>\n  <span class="token key atrule">push</span><span class="token punctuation">:</span>\n    <span class="token key atrule">branches</span><span class="token punctuation">:</span> main\n<span class="token key atrule">jobs</span><span class="token punctuation">:</span>\n  <span class="token key atrule">CD</span><span class="token punctuation">:</span>\n    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest\n    <span class="token key atrule">steps</span><span class="token punctuation">:</span>\n      <span class="token comment"># 拉取代码</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Checkout repository\n        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v2\n      <span class="token comment"># 下载Node</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Use Node.js\n        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>node@v3\n        <span class="token key atrule">with</span><span class="token punctuation">:</span>\n          <span class="token key atrule">node-version</span><span class="token punctuation">:</span> <span class="token string">"16.x"</span>\n      <span class="token comment"># 添加缓存，逻辑和CI Workflow里的一样</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Cache\n        <span class="token key atrule">id</span><span class="token punctuation">:</span> cache<span class="token punctuation">-</span>dependencies\n        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/cache@v3\n        <span class="token key atrule">with</span><span class="token punctuation">:</span>\n          <span class="token key atrule">path</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">\n            **/node_modules</span>\n          <span class="token key atrule">key</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span>runner.OS<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">-</span>$<span class="token punctuation">{</span><span class="token punctuation">{</span>hashFiles(\'<span class="token important">**/yarn.lock\')</span><span class="token punctuation">}</span><span class="token punctuation">}</span>\n      <span class="token comment"># 安装依赖。命中缓存则跳过此步</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Installing Dependencies\n        <span class="token key atrule">if</span><span class="token punctuation">:</span> steps.cache<span class="token punctuation">-</span>dependencies.outputs.cache<span class="token punctuation">-</span>hit <span class="token tag">!=</span> \'true\'\n        <span class="token key atrule">run</span><span class="token punctuation">:</span> yarn install\n      <span class="token comment"># 从package.json里获取version属性的值</span>\n      <span class="token comment"># 在CD Workflow中会给每个生成的制品打上标签，而标签取值于version值</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Read Version\n        <span class="token comment"># 读取出来的值会放在steps.[id].outputs.value供其他步骤step读取</span>\n        <span class="token key atrule">id</span><span class="token punctuation">:</span> version\n        <span class="token key atrule">uses</span><span class="token punctuation">:</span> ashley<span class="token punctuation">-</span>taylor/read<span class="token punctuation">-</span>json<span class="token punctuation">-</span>property<span class="token punctuation">-</span>action@v1.0\n        <span class="token key atrule">with</span><span class="token punctuation">:</span>\n          <span class="token key atrule">path</span><span class="token punctuation">:</span> ./package.json\n          <span class="token key atrule">property</span><span class="token punctuation">:</span> version\n      <span class="token comment"># 打包生成制品，且把制品压缩到assets.zip压缩包里</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Building\n        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">\n          yarn build\n          zip -r assets ./dist/**</span>\n      <span class="token comment"># 基于当前commit进行版本发布(Create a release)，tag_name是v前缀加上package.json的version值</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Create GitHub Release\n        <span class="token comment"># 此步骤中，版本发布后会返回对应的url，以供下面上传制品的步骤中读取使用</span>\n        <span class="token key atrule">id</span><span class="token punctuation">:</span> create_release\n        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/create<span class="token punctuation">-</span>release@v1\n        <span class="token key atrule">env</span><span class="token punctuation">:</span>\n          <span class="token comment"># GITHUB_TOKEN是准备工作步骤三申请的Personal Access Token</span>\n          <span class="token key atrule">GITHUB_TOKEN</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.PROJECT_ACCESS_TOKEN <span class="token punctuation">}</span><span class="token punctuation">}</span>\n        <span class="token key atrule">with</span><span class="token punctuation">:</span>\n          <span class="token key atrule">tag_name</span><span class="token punctuation">:</span> v$<span class="token punctuation">{</span><span class="token punctuation">{</span>steps.version.outputs.value<span class="token punctuation">}</span><span class="token punctuation">}</span>\n          <span class="token key atrule">release_name</span><span class="token punctuation">:</span> v$<span class="token punctuation">{</span><span class="token punctuation">{</span>steps.version.outputs.value<span class="token punctuation">}</span><span class="token punctuation">}</span>\n          <span class="token key atrule">draft</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>\n          <span class="token key atrule">prerelease</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>\n      <span class="token comment"># 把assets.zip上传到仓库对应的发布版本Release上</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Update Release Asset\n        <span class="token key atrule">id</span><span class="token punctuation">:</span> upload<span class="token punctuation">-</span>release<span class="token punctuation">-</span>asset\n        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/upload<span class="token punctuation">-</span>release<span class="token punctuation">-</span>asset@v1\n        <span class="token key atrule">env</span><span class="token punctuation">:</span>\n          <span class="token key atrule">GITHUB_TOKEN</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.PROJECT_ACCESS_TOKEN <span class="token punctuation">}</span><span class="token punctuation">}</span>\n        <span class="token key atrule">with</span><span class="token punctuation">:</span>\n          <span class="token key atrule">upload_url</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> steps.create_release.outputs.upload_url <span class="token punctuation">}</span><span class="token punctuation">}</span>\n          <span class="token key atrule">asset_path</span><span class="token punctuation">:</span> ./assets.zip\n          <span class="token key atrule">asset_name</span><span class="token punctuation">:</span> assets.zip\n          <span class="token key atrule">asset_content_type</span><span class="token punctuation">:</span> application/zip\n      <span class="token comment"># 把制品上传到部署机器</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Upload to Deploy Server\n        <span class="token key atrule">uses</span><span class="token punctuation">:</span> easingthemes/ssh<span class="token punctuation">-</span>deploy@v2.0.7\n        <span class="token key atrule">env</span><span class="token punctuation">:</span>\n          <span class="token comment"># SSH_PRIVATE_KEY为准备工作步骤三中生成密钥对里的私钥</span>\n          <span class="token key atrule">SSH_PRIVATE_KEY</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.DEPLOY_TOKEN <span class="token punctuation">}</span><span class="token punctuation">}</span>\n          <span class="token comment"># 指定当前目录中要上传的内容</span>\n          <span class="token key atrule">SOURCE</span><span class="token punctuation">:</span> <span class="token string">"dist/"</span>\n          <span class="token comment"># 指定上传到部署机器的哪个目录下</span>\n          <span class="token key atrule">TARGET</span><span class="token punctuation">:</span> <span class="token string">"/data/www"</span>\n          <span class="token comment"># 上传前指令，此处用于清空TARGET下的文件</span>\n          <span class="token key atrule">ARGS</span><span class="token punctuation">:</span> <span class="token string">"-avzr --delete"</span>\n          <span class="token comment"># REMOTE_HOST为机器的公网IP</span>\n          <span class="token key atrule">REMOTE_HOST</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.REMOTE_HOST <span class="token punctuation">}</span><span class="token punctuation">}</span>\n          <span class="token comment"># REMOTE_USER为登录机器时用到账号名</span>\n          <span class="token key atrule">REMOTE_USER</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span>secrets.REMOTE_USER<span class="token punctuation">}</span><span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br></div></div><p>这样子就完成了<strong>CD Workflow</strong>的流程了，运行效果如下所示：</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image.png" originSrc="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a9aa0c1c9e3b48fba193017b9de0898f~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?" data="aurora"></p>\n<p>在<strong>CD Workflow</strong>运行完成后，可以输入自己机器的公网 IP 查看部署的项目。<strong>注意：每次提 pr 时要确保 package.json 中的 version 值有变化，不然 CD Workflow 会在 Create GitHub Release 的步骤里报已存在 Tag 的错误。</strong></p>\n<p><strong>关于 CD Workflow 细节补充：</strong></p>\n<ol>\n<li>\n<p><em>为什么要获取<code>package.json</code>中<code>version</code>值，有什么作用?</em></p>\n<p><code>version</code>值在<strong>CD Workflow</strong>主要用于版本发布，此过程需要填写指定的<code>tag_name</code>。发布的版本如下所示：</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image.png" originSrc="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6b2f57ce89f64881be4635e41ce2a9f1~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?" data="aurora"></p>\n<p>点进去后可以看到当前项目的所有版本，如下所示：</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image.png" originSrc="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/62b357bd98724867946a81b3a45ab151~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?" data="aurora"></p>\n<p>我们也可以在通过<a href="https://link.juejin.cn?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dmhutchie.git-graph" target="_blank" rel="noopener noreferrer">VSCode GitGraph 插件<ExternalLinkIcon/></a>来看到自己发布的版本标签（commit 写的有点随便，不要介意），如下所示：</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image.png" originSrc="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/97aa18a6e64045ed9d1246bf5798db92~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?" data="aurora"></p>\n<p>在每次<strong>主干</strong>更新后进行版本发布不仅符合开源项目的更新流程，而且利于我们之后部署特定<strong>发布版本</strong>的制品（可看下面<strong>深入章节的回滚流程</strong>）。</p>\n</li>\n<li>\n<p>为什么要有 <strong>Update Release Asset</strong> 这个步骤？</p>\n<p>首先，把制品放在对应的<strong>发布版本</strong>上是很常见的开源行为，读者也可以把制品下载下来放到<code>nginx</code>直接查看页面效果。其次也是很重要的，是为了<strong>回滚（下面深入篇会写回滚机制的实现）**的实现，回滚需要快速获取前一个**发布版本</strong>的制品覆盖到部署机器上。因此需要我们把每个制品都存放在对应的<strong>发布版本</strong>以实现持久化。</p>\n</li>\n<li>\n<p><em>为什么 <strong>Update Release Asset(上传制品)</strong> 阶段不使用<a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Factions%2Fupload-artifact" target="_blank" rel="noopener noreferrer"><code>actions/upload-artifact</code><ExternalLinkIcon/></a>：</em></p>\n<p>首先在<strong>Release</strong>中上传制品是很多开源项目中常见的操作，其次<code>actions/upload-artifact</code>中存在两个缺点：</p>\n<ol>\n<li>上传的制品只能供同一个<code>Workflow</code>的不同<code>Job</code>中使用。换言之，不同<code>Workflow</code>是不能使用这个制品的，这样子我们就不利于我们在不同的流程去调用这个制品。例如<strong>回滚（下面深入篇会写回滚机制的实现）</strong>，在当前部署机器上的项目存在问题时，我们可以通过回滚迅速把前一个稳定的版本的制品覆盖到部署机器上。</li>\n<li>上传的制品最多只存在 90 天，不能做到持久化。</li>\n</ol>\n<p>因此这里没选择<code>actions/upload-artifact</code>。</p>\n</li>\n</ol>\n<h3 id="添加状态徽章" tabindex="-1"><a class="header-anchor" href="#添加状态徽章" aria-hidden="true">#</a> 添加状态徽章</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image.png" originSrc="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1c002a4f5f8946d7a77a2eac0721475f~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?" data="aurora"></p>\n<p>我们可以在项目的<code>README.md</code>中加了<code>CI</code>和<code>CD</code>两个状态徽章来代表这个项目已成功实现了<code>CI</code>和<code>CD</code>的流程，如上图所示。这两个状态徽章是根据你指定的<strong>Workflow</strong>的名称和最近一次运行的结果动态变化的。如果对应的流水线并没有运行记录，则效果如图上的<code>E2E-Test</code>状态徽章所示。</p>\n<p>徽章可以直接以下面的格式来插入到自己的<code>README.md</code>上：</p>\n<div class="language-markdown ext-md line-numbers-mode"><pre v-pre class="language-markdown"><code><span class="token url"><span class="token operator">!</span>[<span class="token content">example workflow</span>](<span class="token url">https://github.com/&lt;OWNER>/&lt;REPOSITORY>/actions/workflows/&lt;WORKFLOW_FILE>/badge.svg</span>)</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>例如我的<code>CI</code>和<code>CD</code>徽章分别如下所示：</p>\n<div class="language-markdown ext-md line-numbers-mode"><pre v-pre class="language-markdown"><code><span class="token url"><span class="token operator">!</span>[<span class="token content">CI</span>](<span class="token url">https://github.com/Hitotsubashi/cicd-study/actions/workflows/ci.yml/badge.svg</span>)</span>\n\n<span class="token url"><span class="token operator">!</span>[<span class="token content">CD</span>](<span class="token url">https://github.com/Hitotsubashi/cicd-study/actions/workflows/cd.yml/badge.svg</span>)</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>关于更多有关工作流程状态徽章的可看官方文档<a href="https://link.juejin.cn?target=https%3A%2F%2Fdocs.github.com%2Fcn%2Factions%2Fmonitoring-and-troubleshooting-workflows%2Fadding-a-workflow-status-badge" target="_blank" rel="noopener noreferrer">添加工作流程状态徽章<ExternalLinkIcon/></a></p>\n<p>文章转载于<a href="https://juejin.cn/post/7113562222852309023" target="_blank" rel="noopener noreferrer">掘金<ExternalLinkIcon/></a></p>\n',date:"2023-01-05",deps:[],hoistedTags:[],links:[],pathInferred:"/CICD/2023/20230105.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"20230105",filePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/CICD/2023/20230105.md",filePathRelative:"CICD/2023/20230105.md",componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/CICD/2023/20230105.html.vue",componentFilePathRelative:"pages/CICD/2023/20230105.html.vue",componentFileChunkName:"v-394ce253",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/CICD/2023/20230105.html.js",dataFilePathRelative:"pages/CICD/2023/20230105.html.js",dataFileChunkName:"v-394ce253",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/CICD/2023/20230105.html",htmlFilePathRelative:"CICD/2023/20230105.html"},{data:{key:"v-69c4de5e",path:"/js/2022/20220710.html",title:"手写实现一个数组扁平化的函数 flat",lang:"zh-CN",frontmatter:{title:"手写实现一个数组扁平化的函数 flat",date:"2022-07-10T00:00:00.000Z",tags:["js"],categories:["js"]},excerpt:"",headers:[{level:2,title:"代码",slug:"代码",children:[]}],git:{updatedTime:null,contributors:[]}},key:"v-69c4de5e",path:"/js/2022/20220710.html",title:"手写实现一个数组扁平化的函数 flat",lang:"zh-CN",frontmatter:{title:"手写实现一个数组扁平化的函数 flat",date:"2022-07-10T00:00:00.000Z",tags:["js"],categories:["js"]},excerpt:"",headers:[{level:2,title:"代码",slug:"代码",children:[]}],content:"\r\n::: tip\r\n\r\n手写实现数组中的`falt`扁平化数组方法\r\n\r\n:::\r\n\r\n## 代码\r\n\r\n```js\r\nfunction flatten (list, depth = 1) {\r\n  if (depth === 0) return list\r\n  return list.reduce((a, b) => a.concat(Array.isArray(b) ? flatten(b, depth - 1) : b), [])\r\n}\r\nconst b = flatten([1, 2, 3, [4, [5, 6]]], 2)\r\n\r\nconsole.log(b)\r\n```\r\n\r\n",contentRendered:'<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>手写实现数组中的<code>falt</code>扁平化数组方法</p>\n</div>\n<h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">flatten</span> <span class="token punctuation">(</span><span class="token parameter">list<span class="token punctuation">,</span> depth <span class="token operator">=</span> <span class="token number">1</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>depth <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> list\n  <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">flatten</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> depth <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token function">flatten</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>',date:"2022-07-10",deps:[],hoistedTags:[],links:[],pathInferred:"/js/2022/20220710.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"20220710",filePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/js/2022/20220710.md",filePathRelative:"js/2022/20220710.md",componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/js/2022/20220710.html.vue",componentFilePathRelative:"pages/js/2022/20220710.html.vue",componentFileChunkName:"v-69c4de5e",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/js/2022/20220710.html.js",dataFilePathRelative:"pages/js/2022/20220710.html.js",dataFileChunkName:"v-69c4de5e",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/js/2022/20220710.html",htmlFilePathRelative:"js/2022/20220710.html"},{data:{key:"v-006549e4",path:"/js/2022/20220801.html",title:"将数据转换成数据流",lang:"zh-CN",frontmatter:{title:"将数据转换成数据流",date:"2022-08-01T00:00:00.000Z",tags:["js"],categories:["js"]},excerpt:"",headers:[],git:{updatedTime:null,contributors:[]}},key:"v-006549e4",path:"/js/2022/20220801.html",title:"将数据转换成数据流",lang:"zh-CN",frontmatter:{title:"将数据转换成数据流",date:"2022-08-01T00:00:00.000Z",tags:["js"],categories:["js"]},excerpt:"",headers:[],content:"\r\n::: tip\r\n\r\n我们在开发项目时，很多时候会碰到需要将数据转换成数据流上传到服务器上或者下载文件到本地\r\n\r\n:::\r\n\r\n# 下载文件\r\n\r\n```js\r\nDownload () { // 请求后端返回数据流\r\n      getstaffexcel().then(data => {\r\n        this.downloadFile(data, '员工信息表.xlsx')\r\n      })\r\n    },\r\n // new Blob([content])：将数据转换成数据流\r\ndownloadFile (content, filename) {\r\n      var a = document.createElement('a')// 创建a标签\r\n      var blob = new Blob([content])\r\n      var url = window.URL.createObjectURL(blob)//创建url\r\n      a.href = url\r\n      a.download = filename\r\n      a.click()//模拟点击\r\n      window.URL.revokeObjectURL(url)//销毁url\r\n }\r\n```\r\n\r\n# 上传文件\r\n\r\n```js\r\n// content:需要上传的数据 \r\n// filename：上传数据时，文件叫什么名，例如 员工信息.xslx\r\nposthtml (content, filename) {\r\n      var blob = new Blob([content]) // 将数据转换成数据流\r\n      const fd = new FormData()  \r\n      fd.append('file', blob, filename)\r\n      fd.append('name', filename)\r\n      fd.append('md5', '')\r\n    // uploadFile：上传文件接口，返回的是上传文件的在线链接\r\n      uploadFile(fd).then(({fileInfo}) => {\r\n        this.form.contentUrl = fileInfo.url\r\n        this.addexciting()\r\n      })\r\n    },\r\n  // 如果使用组件库中的上传组件，下面示例\r\n  // handleUpload：为上传组件中定义的函数\r\n  handleUpload (options) {\r\n      // options:上传文件的信息\r\n      const fd = new FormData()\r\n      fd.append('file', options.file, options.file.name)\r\n      fd.append('name', options.file.name)\r\n      fd.append('md5', '')\r\n      importStaffs(fd).then(() => {\r\n        this.$message({\r\n          message: '上传成功',\r\n          type: 'success'\r\n        })\r\n      })\r\n    },\r\n \r\n```\r\n\r\n",contentRendered:'<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>我们在开发项目时，很多时候会碰到需要将数据转换成数据流上传到服务器上或者下载文件到本地</p>\n</div>\n<h1 id="下载文件" tabindex="-1"><a class="header-anchor" href="#下载文件" aria-hidden="true">#</a> 下载文件</h1>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token function">Download</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 请求后端返回数据流</span>\n      <span class="token function">getstaffexcel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">downloadFile</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">\'员工信息表.xlsx\'</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n <span class="token comment">// new Blob([content])：将数据转换成数据流</span>\n<span class="token function">downloadFile</span> <span class="token punctuation">(</span><span class="token parameter">content<span class="token punctuation">,</span> filename</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">var</span> a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">\'a\'</span><span class="token punctuation">)</span><span class="token comment">// 创建a标签</span>\n      <span class="token keyword">var</span> blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>content<span class="token punctuation">]</span><span class="token punctuation">)</span>\n      <span class="token keyword">var</span> url <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span><span class="token comment">//创建url</span>\n      a<span class="token punctuation">.</span>href <span class="token operator">=</span> url\n      a<span class="token punctuation">.</span>download <span class="token operator">=</span> filename\n      a<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//模拟点击</span>\n      window<span class="token punctuation">.</span><span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">revokeObjectURL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token comment">//销毁url</span>\n <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h1 id="上传文件" tabindex="-1"><a class="header-anchor" href="#上传文件" aria-hidden="true">#</a> 上传文件</h1>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// content:需要上传的数据 </span>\n<span class="token comment">// filename：上传数据时，文件叫什么名，例如 员工信息.xslx</span>\n<span class="token function">posthtml</span> <span class="token punctuation">(</span><span class="token parameter">content<span class="token punctuation">,</span> filename</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">var</span> blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>content<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 将数据转换成数据流</span>\n      <span class="token keyword">const</span> fd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  \n      fd<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">\'file\'</span><span class="token punctuation">,</span> blob<span class="token punctuation">,</span> filename<span class="token punctuation">)</span>\n      fd<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">\'name\'</span><span class="token punctuation">,</span> filename<span class="token punctuation">)</span>\n      fd<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">\'md5\'</span><span class="token punctuation">,</span> <span class="token string">\'\'</span><span class="token punctuation">)</span>\n    <span class="token comment">// uploadFile：上传文件接口，返回的是上传文件的在线链接</span>\n      <span class="token function">uploadFile</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>fileInfo<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>form<span class="token punctuation">.</span>contentUrl <span class="token operator">=</span> fileInfo<span class="token punctuation">.</span>url\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addexciting</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">// 如果使用组件库中的上传组件，下面示例</span>\n  <span class="token comment">// handleUpload：为上传组件中定义的函数</span>\n  <span class="token function">handleUpload</span> <span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// options:上传文件的信息</span>\n      <span class="token keyword">const</span> fd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      fd<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">\'file\'</span><span class="token punctuation">,</span> options<span class="token punctuation">.</span>file<span class="token punctuation">,</span> options<span class="token punctuation">.</span>file<span class="token punctuation">.</span>name<span class="token punctuation">)</span>\n      fd<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">\'name\'</span><span class="token punctuation">,</span> options<span class="token punctuation">.</span>file<span class="token punctuation">.</span>name<span class="token punctuation">)</span>\n      fd<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">\'md5\'</span><span class="token punctuation">,</span> <span class="token string">\'\'</span><span class="token punctuation">)</span>\n      <span class="token function">importStaffs</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$message</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n          <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">\'上传成功\'</span><span class="token punctuation">,</span>\n          <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">\'success\'</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div>',date:"2022-08-01",deps:[],hoistedTags:[],links:[],pathInferred:"/js/2022/20220801.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"20220801",filePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/js/2022/20220801.md",filePathRelative:"js/2022/20220801.md",componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/js/2022/20220801.html.vue",componentFilePathRelative:"pages/js/2022/20220801.html.vue",componentFileChunkName:"v-006549e4",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/js/2022/20220801.html.js",dataFilePathRelative:"pages/js/2022/20220801.html.js",dataFileChunkName:"v-006549e4",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/js/2022/20220801.html",htmlFilePathRelative:"js/2022/20220801.html"},{data:{key:"v-c2ffe65e",path:"/js/2022/20220831.html",title:"你真的熟悉a标签吗",lang:"zh-CN",frontmatter:{title:"你真的熟悉a标签吗",date:"2022-08-31T00:00:00.000Z",tags:["js"],categories:["js"]},excerpt:"",headers:[],git:{updatedTime:null,contributors:[]}},key:"v-c2ffe65e",path:"/js/2022/20220831.html",title:"你真的熟悉a标签吗",lang:"zh-CN",frontmatter:{title:"你真的熟悉a标签吗",date:"2022-08-31T00:00:00.000Z",tags:["js"],categories:["js"]},excerpt:"",headers:[],content:'\r\n::: tip\r\n\r\na标签对于我们来说应该不陌生，但是你真的了解a标签吗，这一篇就来讲讲a标签能做哪些事情\r\n\r\n:::\r\n\r\n# 拨打电话\r\n\r\n```js\r\n1. 在页面上写按钮或链接，点击实现拨打电话功能。\r\n<a href="tel:11111111111">点击可拨打电话：11111111111</a>\r\n2. 在js代码中（有逻辑判断的情况）实现拨打电话的功能。\r\nwindow.location.href = \'tel:11111111111\';\r\n```\r\n\r\n# 发送短信\r\n\r\n```js\r\n1. 在页面上写按钮或链接，点击实现拨打电话功能。\r\n<a href="sms:11111111111?body=duanxin">点击可发送短信</a>\r\n```\r\n\r\n# 发送邮件\r\n\r\n```js\r\n<a href="mailto:123456@123456.com?subject=testing&body=youjian">点击可发送短信</a>\r\n```\r\n\r\n',contentRendered:'<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>a标签对于我们来说应该不陌生，但是你真的了解a标签吗，这一篇就来讲讲a标签能做哪些事情</p>\n</div>\n<h1 id="拨打电话" tabindex="-1"><a class="header-anchor" href="#拨打电话" aria-hidden="true">#</a> 拨打电话</h1>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token number">1.</span> 在页面上写按钮或链接，点击实现拨打电话功能。\n<span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"tel:11111111111"</span><span class="token operator">></span>点击可拨打电话：<span class="token number">11111111111</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>\n<span class="token number">2.</span> 在js代码中（有逻辑判断的情况）实现拨打电话的功能。\nwindow<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">\'tel:11111111111\'</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h1 id="发送短信" tabindex="-1"><a class="header-anchor" href="#发送短信" aria-hidden="true">#</a> 发送短信</h1>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token number">1.</span> 在页面上写按钮或链接，点击实现拨打电话功能。\n<span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"sms:11111111111?body=duanxin"</span><span class="token operator">></span>点击可发送短信<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h1 id="发送邮件" tabindex="-1"><a class="header-anchor" href="#发送邮件" aria-hidden="true">#</a> 发送邮件</h1>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"mailto:123456@123456.com?subject=testing&amp;body=youjian"</span><span class="token operator">></span>点击可发送短信<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',date:"2022-08-31",deps:[],hoistedTags:[],links:[],pathInferred:"/js/2022/20220831.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"20220831",filePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/js/2022/20220831.md",filePathRelative:"js/2022/20220831.md",componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/js/2022/20220831.html.vue",componentFilePathRelative:"pages/js/2022/20220831.html.vue",componentFileChunkName:"v-c2ffe65e",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/js/2022/20220831.html.js",dataFilePathRelative:"pages/js/2022/20220831.html.js",dataFileChunkName:"v-c2ffe65e",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/js/2022/20220831.html",htmlFilePathRelative:"js/2022/20220831.html"},{data:{key:"v-60845a92",path:"/js/2022/20221215.html",title:"手写一个并发函数",lang:"zh-CN",frontmatter:{title:"手写一个并发函数",date:"2022-12-15T00:00:00.000Z",tags:["js"],categories:["js"]},excerpt:"",headers:[],git:{updatedTime:null,contributors:[]}},key:"v-60845a92",path:"/js/2022/20221215.html",title:"手写一个并发函数",lang:"zh-CN",frontmatter:{title:"手写一个并发函数",date:"2022-12-15T00:00:00.000Z",tags:["js"],categories:["js"]},excerpt:"",headers:[],content:"\r\n::: tip\r\n\r\n并发控制在我们项目开发中很常见，今天来手写一个并发函数\r\n\r\n:::\r\n\r\n# 代码实现\r\n\r\n```js\r\n/**\r\n * \r\n * @param {string[]} urls 待请求的 url 数组\r\n * @param {number} maxNum 最大并发数 \r\n * @returns \r\n */\r\nfunction ComplicatedBy(urls,maxNum) {\r\n  return new Promise((resolve) => {\r\n      if (urls.length === 0) {\r\n         resolve([])\r\n         return\r\n      }\r\n      const results = [] // 存储成功的数组\r\n      let index = 0 // 当前请求数组的下标\r\n      let count = 0 // 当前请求完成的数量\r\n      async function request() {\r\n        if (index === urls.length) {\r\n          return\r\n        }\r\n        const url = urls[index]\r\n        const i = index // 记录放在 results 哪一个位置\r\n        index++\r\n        try {\r\n           const resp = await fetch(url)\r\n           results[i] = resp\r\n        } catch (error) {\r\n           results[i] = error\r\n        } finally {\r\n          count++\r\n          if (count === urls.length) {\r\n             resolve(results)\r\n          }\r\n          request()\r\n        }\r\n      }\r\n      // 控制并发数\r\n      for (let index = 0; index < maxNum; index++) {\r\n        request()\r\n      }\r\n  })\r\n}\r\n```\r\n",contentRendered:'<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>并发控制在我们项目开发中很常见，今天来手写一个并发函数</p>\n</div>\n<h1 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现" aria-hidden="true">#</a> 代码实现</h1>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token doc-comment comment">/**\n * \n * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">urls</span> 待请求的 url 数组\n * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">maxNum</span> 最大并发数 \n * <span class="token keyword">@returns</span> \n */</span>\n<span class="token keyword">function</span> <span class="token function">ComplicatedBy</span><span class="token punctuation">(</span><span class="token parameter">urls<span class="token punctuation">,</span>maxNum</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>urls<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n         <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n         <span class="token keyword">return</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">const</span> results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 存储成功的数组</span>\n      <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// 当前请求数组的下标</span>\n      <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// 当前请求完成的数量</span>\n      <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">===</span> urls<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">return</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">const</span> url <span class="token operator">=</span> urls<span class="token punctuation">[</span>index<span class="token punctuation">]</span>\n        <span class="token keyword">const</span> i <span class="token operator">=</span> index <span class="token comment">// 记录放在 results 哪一个位置</span>\n        index<span class="token operator">++</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n           <span class="token keyword">const</span> resp <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>\n           results<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> resp\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n           results<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> error\n        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>\n          count<span class="token operator">++</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">===</span> urls<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n             <span class="token function">resolve</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span>\n          <span class="token punctuation">}</span>\n          <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n      <span class="token comment">// 控制并发数</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> maxNum<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div>',date:"2022-12-15",deps:[],hoistedTags:[],links:[],pathInferred:"/js/2022/20221215.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"20221215",filePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/js/2022/20221215.md",filePathRelative:"js/2022/20221215.md",componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/js/2022/20221215.html.vue",componentFilePathRelative:"pages/js/2022/20221215.html.vue",componentFileChunkName:"v-60845a92",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/js/2022/20221215.html.js",dataFilePathRelative:"pages/js/2022/20221215.html.js",dataFileChunkName:"v-60845a92",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/js/2022/20221215.html",htmlFilePathRelative:"js/2022/20221215.html"},{data:{key:"v-6fdeabe4",path:"/html/2019/20190908.html",title:"DOM的基本操作",lang:"zh-CN",frontmatter:{title:"DOM的基本操作",date:"2019-09-08T00:00:00.000Z",tags:["html"],categories:["html"]},excerpt:"",headers:[{level:2,title:"DOM的获取",slug:"dom的获取",children:[]},{level:2,title:"遍历节点树",slug:"遍历节点树",children:[]},{level:2,title:"基于元素节点树的遍历 (遍历元素节点树)",slug:"基于元素节点树的遍历-遍历元素节点树",children:[]},{level:2,title:"复制节点",slug:"复制节点",children:[]}],git:{updatedTime:null,contributors:[]}},key:"v-6fdeabe4",path:"/html/2019/20190908.html",title:"DOM的基本操作",lang:"zh-CN",frontmatter:{title:"DOM的基本操作",date:"2019-09-08T00:00:00.000Z",tags:["html"],categories:["html"]},excerpt:"",headers:[{level:2,title:"DOM的获取",slug:"dom的获取",children:[]},{level:2,title:"遍历节点树",slug:"遍历节点树",children:[]},{level:2,title:"基于元素节点树的遍历 (遍历元素节点树)",slug:"基于元素节点树的遍历-遍历元素节点树",children:[]},{level:2,title:"复制节点",slug:"复制节点",children:[]}],content:"\r\n## DOM的获取\r\n```js\r\n查看元素节点:\r\n\t1.  document.getElementById(' ') 通过id标识，来获取(查找)到需要的元素\r\n\t    ie8以下id是不区分大小写的\r\n\t\r\n\t2.  document.getElementsByTagName(' ')  \r\n\t    最主流的用法，兼容性最好\r\n\t    通过标签名来获取元素，意为获取文档中所有该标签\r\n\t    返回值是一个伪数组，哪怕只有一个也是伪数组\r\n\t\t\r\n\t3.  document.getElementsByClassName(' ')  \r\n\t    通过类名来获取元素，意为获取文档中所有具有该类名的标签\r\n\t    返回值是一个伪数组，哪怕只有一个也是伪数组\r\n\t    弊端: 兼容性不好，并不是所有浏览器都可以使用\r\n\t\r\n\t4.  document.getElementsByName(' ')  \r\n\t    并不常用，因为只有部分标签的name属性可以生效，一般是表单标签\r\n\t    通过name来获取元素\r\n\t    返回值是一个伪数组，哪怕只有一个也是伪数组\r\n\t\r\n\t5.  document.querySelector(' ')\r\n\t    通过css选择器来获取元素\r\n\t    返回值是一个具体的标签\r\n\t    弊端: 该方法并不是实时的，标签该表不会实时更新输出\r\n\t\t\r\n\t6.  document.querySelectorAll(' ')\r\n\t    通过css选择器来获取元素\r\n\t    返回值是一个伪数组\r\n\t    弊端: 该方法并不是实时的，标签该表不会实时更新输出\r\n\t    可以用来保存父本\r\n\r\n```\r\n\t\t\t\r\n##  遍历节点树\r\n\t1.  parentNode 父节点(最顶端的parentNode为#document)\r\n\t\r\n\t2.  childNodes 选择所有的子节点(包括文本、注释、元素等)\r\n\t\r\n\t3.  firstChild 选择第一个子节点\r\n\t    lastChild 选择最后一个子节点\r\n\t\r\n\t4.  nextSibling 后一个兄弟节点\r\n\t    previousSibling 前一个兄弟节点\r\n\t\r\n##  基于元素节点树的遍历 (遍历元素节点树)\r\n\t1.  parentElement 返回当前元素的父元素节点(ie不兼容)\r\n\t\r\n\t2.  children 返回当前元素的所有子元素  返回值为伪数组\r\n\t\r\n\t3.  firstElementChild 返回当前元素的第一个子元素节点(ie不兼容)\r\n\t\r\n\t4.  lastElementChild 返回当前元素的最后一个子元素节点(ie不兼容)\r\n\t\r\n\t5.  nextElementSibling 当前元素的下一个兄弟元素节点(ie不兼容)\r\n\t\r\n\t6.  previousSibling 当前元素的前一个兄弟节点(ie不兼容)\r\n\r\n## 复制节点\r\n\r\n    格式: 节点.cloneNode();\r\n\t参数: true: 表示深克隆，克隆元素和内部结构, false: 表示浅克隆，只克隆元素自身结构\r\n\r\n",contentRendered:'<h2 id="dom的获取" tabindex="-1"><a class="header-anchor" href="#dom的获取" aria-hidden="true">#</a> DOM的获取</h2>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token literal-property property">查看元素节点</span><span class="token operator">:</span>\n\t<span class="token number">1.</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">\' \'</span><span class="token punctuation">)</span> <span class="token function">通过id标识，来获取</span><span class="token punctuation">(</span>查找<span class="token punctuation">)</span>到需要的元素\n\t    ie8以下id是不区分大小写的\n\t\n\t<span class="token number">2.</span>  document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">\' \'</span><span class="token punctuation">)</span>  \n\t    最主流的用法，兼容性最好\n\t    通过标签名来获取元素，意为获取文档中所有该标签\n\t    返回值是一个伪数组，哪怕只有一个也是伪数组\n\t\t\n\t<span class="token number">3.</span>  document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">\' \'</span><span class="token punctuation">)</span>  \n\t    通过类名来获取元素，意为获取文档中所有具有该类名的标签\n\t    返回值是一个伪数组，哪怕只有一个也是伪数组\n\t    <span class="token literal-property property">弊端</span><span class="token operator">:</span> 兼容性不好，并不是所有浏览器都可以使用\n\t\n\t<span class="token number">4.</span>  document<span class="token punctuation">.</span><span class="token function">getElementsByName</span><span class="token punctuation">(</span><span class="token string">\' \'</span><span class="token punctuation">)</span>  \n\t    并不常用，因为只有部分标签的name属性可以生效，一般是表单标签\n\t    通过name来获取元素\n\t    返回值是一个伪数组，哪怕只有一个也是伪数组\n\t\n\t<span class="token number">5.</span>  document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">\' \'</span><span class="token punctuation">)</span>\n\t    通过css选择器来获取元素\n\t    返回值是一个具体的标签\n\t    <span class="token literal-property property">弊端</span><span class="token operator">:</span> 该方法并不是实时的，标签该表不会实时更新输出\n\t\t\n\t<span class="token number">6.</span>  document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">\' \'</span><span class="token punctuation">)</span>\n\t    通过css选择器来获取元素\n\t    返回值是一个伪数组\n\t    <span class="token literal-property property">弊端</span><span class="token operator">:</span> 该方法并不是实时的，标签该表不会实时更新输出\n\t    可以用来保存父本\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><h2 id="遍历节点树" tabindex="-1"><a class="header-anchor" href="#遍历节点树" aria-hidden="true">#</a> 遍历节点树</h2>\n<pre><code>1.  parentNode 父节点(最顶端的parentNode为#document)\n\n2.  childNodes 选择所有的子节点(包括文本、注释、元素等)\n\n3.  firstChild 选择第一个子节点\n    lastChild 选择最后一个子节点\n\n4.  nextSibling 后一个兄弟节点\n    previousSibling 前一个兄弟节点\n</code></pre>\n<h2 id="基于元素节点树的遍历-遍历元素节点树" tabindex="-1"><a class="header-anchor" href="#基于元素节点树的遍历-遍历元素节点树" aria-hidden="true">#</a> 基于元素节点树的遍历 (遍历元素节点树)</h2>\n<pre><code>1.  parentElement 返回当前元素的父元素节点(ie不兼容)\n\n2.  children 返回当前元素的所有子元素  返回值为伪数组\n\n3.  firstElementChild 返回当前元素的第一个子元素节点(ie不兼容)\n\n4.  lastElementChild 返回当前元素的最后一个子元素节点(ie不兼容)\n\n5.  nextElementSibling 当前元素的下一个兄弟元素节点(ie不兼容)\n\n6.  previousSibling 当前元素的前一个兄弟节点(ie不兼容)\n</code></pre>\n<h2 id="复制节点" tabindex="-1"><a class="header-anchor" href="#复制节点" aria-hidden="true">#</a> 复制节点</h2>\n<pre><code>格式: 节点.cloneNode();\n参数: true: 表示深克隆，克隆元素和内部结构, false: 表示浅克隆，只克隆元素自身结构\n</code></pre>\n',date:"2019-09-08",deps:[],hoistedTags:[],links:[],pathInferred:"/html/2019/20190908.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"20190908",filePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/html/2019/20190908.md",filePathRelative:"html/2019/20190908.md",componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/html/2019/20190908.html.vue",componentFilePathRelative:"pages/html/2019/20190908.html.vue",componentFileChunkName:"v-6fdeabe4",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/html/2019/20190908.html.js",dataFilePathRelative:"pages/html/2019/20190908.html.js",dataFileChunkName:"v-6fdeabe4",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/html/2019/20190908.html",htmlFilePathRelative:"html/2019/20190908.html"},{data:{key:"v-6cdfe61c",path:"/nuxt/2023/20230210.html",title:"nuxt3 入门教程",lang:"zh-CN",frontmatter:{title:"nuxt3 入门教程",date:"2023-02-10T00:00:00.000Z",tags:["nuxt"],categories:["vue"]},excerpt:"",headers:[{level:2,title:"Nuxt3的简介",slug:"nuxt3的简介",children:[]},{level:2,title:"Nuxt3的优势介绍",slug:"nuxt3的优势介绍",children:[]},{level:2,title:"Nuxt3 的安装",slug:"nuxt3-的安装",children:[]},{level:2,title:"Nuxt3的目录结构",slug:"nuxt3的目录结构",children:[{level:3,title:"编写Hello World",slug:"编写hello-world",children:[]}]},{level:2,title:"Nuxt3页面和约定路由的使用",slug:"nuxt3页面和约定路由的使用",children:[{level:3,title:"动态路由的使用",slug:"动态路由的使用",children:[]},{level:3,title:"嵌套路由的使用",slug:"嵌套路由的使用",children:[]}]},{level:2,title:"编程式路由导航&传参",slug:"编程式路由导航-传参",children:[]},{level:2,title:"路由中间件",slug:"路由中间件",children:[{level:3,title:"匿名路由中间件",slug:"匿名路由中间件",children:[]},{level:3,title:"具名路由中间件",slug:"具名路由中间件",children:[]}]},{level:2,title:"布局模板",slug:"布局模板",children:[]},{level:2,title:"自定义组件",slug:"自定义组件",children:[]},{level:2,title:"模块化代码 Composable文件夹的试用",slug:"模块化代码-composable文件夹的试用",children:[{level:3,title:"Composable中创建time.js的编写",slug:"composable中创建time-js的编写",children:[]},{level:3,title:"composables的引入规则",slug:"composables的引入规则",children:[]}]},{level:2,title:"Nuxt3中的数据请求",slug:"nuxt3中的数据请求",children:[{level:3,title:"useAsyncData的使用",slug:"useasyncdata的使用",children:[]},{level:3,title:"useFetch的使用",slug:"usefetch的使用",children:[]}]},{level:2,title:"Nuxt3 中SEO相关的配置",slug:"nuxt3-中seo相关的配置",children:[{level:3,title:"title 和 meta 标签的作用",slug:"title-和-meta-标签的作用",children:[]}]},{level:2,title:"Nuxt3中pinia的使用",slug:"nuxt3中pinia的使用",children:[{level:3,title:"Pinia的持久化存储",slug:"pinia的持久化存储",children:[]}]},{level:2,title:"Vueuse的使用",slug:"vueuse的使用",children:[]},{level:2,title:"ssr底层原理",slug:"ssr底层原理",children:[]}],git:{updatedTime:null,contributors:[]}},key:"v-6cdfe61c",path:"/nuxt/2023/20230210.html",title:"nuxt3 入门教程",lang:"zh-CN",frontmatter:{title:"nuxt3 入门教程",date:"2023-02-10T00:00:00.000Z",tags:["nuxt"],categories:["vue"]},excerpt:"",headers:[{level:2,title:"Nuxt3的简介",slug:"nuxt3的简介",children:[]},{level:2,title:"Nuxt3的优势介绍",slug:"nuxt3的优势介绍",children:[]},{level:2,title:"Nuxt3 的安装",slug:"nuxt3-的安装",children:[]},{level:2,title:"Nuxt3的目录结构",slug:"nuxt3的目录结构",children:[{level:3,title:"编写Hello World",slug:"编写hello-world",children:[]}]},{level:2,title:"Nuxt3页面和约定路由的使用",slug:"nuxt3页面和约定路由的使用",children:[{level:3,title:"动态路由的使用",slug:"动态路由的使用",children:[]},{level:3,title:"嵌套路由的使用",slug:"嵌套路由的使用",children:[]}]},{level:2,title:"编程式路由导航&传参",slug:"编程式路由导航-传参",children:[]},{level:2,title:"路由中间件",slug:"路由中间件",children:[{level:3,title:"匿名路由中间件",slug:"匿名路由中间件",children:[]},{level:3,title:"具名路由中间件",slug:"具名路由中间件",children:[]}]},{level:2,title:"布局模板",slug:"布局模板",children:[]},{level:2,title:"自定义组件",slug:"自定义组件",children:[]},{level:2,title:"模块化代码 Composable文件夹的试用",slug:"模块化代码-composable文件夹的试用",children:[{level:3,title:"Composable中创建time.js的编写",slug:"composable中创建time-js的编写",children:[]},{level:3,title:"composables的引入规则",slug:"composables的引入规则",children:[]}]},{level:2,title:"Nuxt3中的数据请求",slug:"nuxt3中的数据请求",children:[{level:3,title:"useAsyncData的使用",slug:"useasyncdata的使用",children:[]},{level:3,title:"useFetch的使用",slug:"usefetch的使用",children:[]}]},{level:2,title:"Nuxt3 中SEO相关的配置",slug:"nuxt3-中seo相关的配置",children:[{level:3,title:"title 和 meta 标签的作用",slug:"title-和-meta-标签的作用",children:[]}]},{level:2,title:"Nuxt3中pinia的使用",slug:"nuxt3中pinia的使用",children:[{level:3,title:"Pinia的持久化存储",slug:"pinia的持久化存储",children:[]}]},{level:2,title:"Vueuse的使用",slug:"vueuse的使用",children:[]},{level:2,title:"ssr底层原理",slug:"ssr底层原理",children:[]}],content:'\r\n::: tip\r\n\r\n我们开发 toc 项目时，例如电商网站，往往需要考虑seo和首屏优化，这篇我们将讲述如何使用 nuxt3 实现服务器渲染，从而优化seo和首屏加载时间\r\n\r\n:::\r\n\r\n## Nuxt3的简介\r\n\r\nNuxt3是基于Vue3发布的SSR框架，也是Vue全家桶系列的一员。如果你了解Nuxt2，应该也了解Nuxt3的使命和用途。但是如果你不了解，你需要先知道两个概念。\r\n\r\n- SPA应用：也就是单页应用，这些多是在客户端的应用，不能进行SEO优化（搜索引擎优化）。\r\n- SSR应用：在服务端进行渲染，渲染完成后返回给客户端，每个页面有独立的URL，对SEO友好。\r\n\r\n所以如果你开发的应用是企业网站、商品展示 、博客这类型的展示型网站，就需要使用搜索引擎喜欢的SSR应用。当我们明白这两个概念后，再来看Nuxt3的使命。因为Vue开发的应用默认是单页应用（SPA应用），但如果你想针对于搜索优化，就需要使用Vue的SSR模式开发，而[Nuxt3](https://nuxt.com/)就是Vue的SSR开发的框架。\r\n![img](https://img.jspang.com/ArticleImages/20220323_Nuxt003.png)\r\n\r\n## Nuxt3的优势介绍\r\n\r\n![img](https://img.jspang.com/ArticleImages/20220323_Nuxt002.png) 这是一张Nuxt3官网的图片，列出Nuxt3的新特性，一共12个。我们快速来解读一下。\r\n\r\n- 更轻量：以现代浏览器为基础的情况下，服务器部署和客户端产物最多减小75倍。\r\n- 更快：用动态服务端代码来优化冷启动。\r\n- Hybird：增量动态生成和其他高级模式现在都成为可能。\r\n- Suspense: 导航前后可在任何组件中获取数据。\r\n- Composition API : 使用Composition API 和 Nuxt3的composables 实现真正的可复用性。\r\n- Nuxt CLI ： 权限的零依赖体验，助你轻松搭建项目和集成模块。\r\n- Nuxt Devtools ：专属调试工具，更多的信息和快速修复，在浏览器中高效工作。\r\n- Nuxt Kit ：全新的基于 TypeScript 和跨版本兼容的模块开发。\r\n- Webpack5 ： 更快的构建速度和更小的构建包，并且零配置。\r\n- Vite：用Vite作为你的打包器，体验轻量级的快速HMR。\r\n- Vue3 ： 完全支持Vue3语法，这一点特别关键。\r\n- TypeScript：由原生TypeScript和ESM构成，没有额外配置步骤。\r\n\r\n## Nuxt3 的安装\r\n\r\n```\r\nnpx nuxi init <project-name>\r\n```\r\n\r\n> 注意：`npx`是npm从5.2版开始增加的命令，所以说你的 npm 最小版本也要是5.2版本。查看npm版本的命令如下。\r\n\r\n```\r\nnpm -v\r\n```\r\n\r\n如果你安装失败，或者安装很慢的话你需要多试几次，其实这个是国内网络问题造成的，道理就和你上不了Google是一样的。所以你可以使用科学上网解决这个问题。一般获取不到内容，就会得到下面一段警告。\r\n\r\n```\r\ncould not fetch remote https://github.com/nuxt/starter\r\nMake sure you have installed git correctly   \r\n```\r\n\r\n直到出现下面的文字就算安装成功了。\r\n![Nuxt3安装成功页面](https://img.jspang.com/ArticleImages/20220323_Nuxt004.png)\r\n\r\n如果一直安装失败的话，下载Nuxt3的文件包，然后再用yarn命令进行安装\r\n\r\n```html\r\nhttps://github.com/nuxt/starter/tree/v3\r\n```\r\n\r\n打开网址可以看到，这个就是最简单的Nuxt3项目的目录，这时候你可以Clone下来，但我发现Clone还是会报错，意思是无法找到仓库位置。那这时候我只能用最原始的下载ZIP（Download ZIP）的方式了。\r\n下载完成后，再使用yarn命令进行安装。\r\n\r\n```html\r\nyarn install\r\n```\r\n\r\n稍等一会，就可以安装成功了。安装成功以后，再使用\r\n\r\n```html\r\nyarn dev\r\n```\r\n\r\n然后打开浏览器，输入`http://localhost:3000`，就可以看到下面的页面了。 ![img](https://img.jspang.com/ArticleImages/20220323_Nuxt001.png)\r\n\r\n## Nuxt3的目录结构\r\n\r\n默认的项目里就如下几个文件和目录\r\n\r\n```JSON\r\n- .nuxt               // 自动生成的目录，用于展示结果\r\n- node_modules        // 项目依赖包存放目录\r\n- .gitignore          // Git的配置目录，比如一些文件不用Git管理就可以在这个文件中配置\r\n- app.vue             // 项目入口文件，你可以在这里配置路由的出口\r\n- nuxt.config.ts      // nuxt项目的配置文件 ，这个里边可以配置Nuxt项目的方法面面\r\n- package-lock.json   // 锁定安装时包的版本，以保证其他人在 npm install时和你保持一致\r\n- package.json        // 包的配置文件和项目的启动调式命令配置\r\n- README.md           // 项目的说明文件\r\n- tsconfig.json       // TypeScript的配置文件\r\n \r\n```\r\n\r\n随着我们的开发目录也会越来越多，比如常用的还有下面三个目录。\r\n\r\n```JSON\r\n- pages               // 开发的页面目录\r\n- components          // 组件目录\r\n- assets              // 静态资源目录\r\n- layouts             // 项目布局目录\r\n```\r\n\r\n好了，现在我们对Nuxt3的基础目录了解后，接下来我们试着去作一个HelloWorld的程序。\r\n\r\n### 编写Hello World\r\n\r\n通过上面的介绍，我们知道了`App.vue` 这个文件是项目的入口文件。用VSCode打开文件，可以看到文件的基础结构。\r\n\r\n```html\r\n<template>\r\n  <div>\r\n    <NuxtWelcome /> \r\n  </div>\r\n</template>\r\n```\r\n\r\n其中`<NuxtWelcome />` 就是一个框架自带的组件，我们直接删除就可以，不用纠结删除这个组件。删除后，在 `\\components` 目录下新建一个文件，叫做`HelloWorld.vue` 然后编写下面的代码。\r\n\r\n```html\r\n<template>\r\n  <div class="">\r\n    <h1>Hello World</h1>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport {} from "vue";\r\n<\/script>\r\n\r\n<style scoped></style>\r\n```\r\n\r\n然后再回到`app.vue`文件中直接写入这个 `HelloWorld`组件，回到浏览器，就可以看到 HelloWord 效果了。\r\n\r\n```html\r\n<template>\r\n  <div>\r\n    <hello-world />\r\n  </div>\r\n</template>\r\n```\r\n\r\n## Nuxt3页面和约定路由的使用\r\n\r\nNuxt3的一个特点就是**约定式开发**，讲究的是约定大于配置。如果你熟悉 **umi** 的话，那你可以很快的了解并上手\r\n\r\n- 在 **components** 文件夹下的 vue 文件，无需引入，可以直接在 app.vue 中使用\r\n\r\n```vue\r\n<template>\r\n  <div>\r\n    <h1>Welcome to the homepage</h1>\r\n    <AppAlert> // components/AppAlert 文件\r\n      This is an auto-imported component.\r\n    </AppAlert>\r\n  </div>\r\n</template>\r\n```\r\n\r\n- 在 **pages** 文件夹下的 vue 文件，每一个文件`pages/`代表显示其内容的不同路径。要使用页面，请创建`pages/index.vue`文件并将  `<NuxtPage/>` 添加到app.vue，这样你就可以刷新浏览器，看到 **pages/index** 文件中的内容了\r\n\r\n```vue\r\n<template>\r\n  <div>\r\n    <NuxtPage/>\r\n  </div>\r\n</template>\r\n\r\n```\r\n\r\n当我们在 **pages** 文件夹下有多个文件，需要来回跳转时，我们可以借助 **NuxtLink ** 标签来进行路由跳转\r\n\r\n```vue\r\n<template>\r\n  <div>\r\n    <NuxtPage/>\r\n    <NuxtLink to="/demo1">前往Demo</NuxtLink> \x3c!-- 这样就可以跳转到 pages/Demo1 文件页面了 --\x3e \r\n  </div>\r\n</template>\r\n\r\n```\r\n\r\n### 动态路由的使用\r\n\r\n我们在 **pages** 文件夹下创建的文件中，文件名中用`[ ]`扩起来就可以了，例demo2-[id].vue，这样我们就创建了一个动态路由\r\n\r\n```vue\r\n// demo2-[id].vue\r\n\r\n<template>\r\n  <div class="">获取的id:{{ $route.params.id }}</div>\r\n</template>\r\n```\r\n\r\n```vue\r\n<template>\r\n    <NuxtLink to="/demo1-34">前往demo2</NuxtLink>\r\n</template>\r\n```\r\n\r\n如果想传递多个参数，需要建立一个文件夹，然后在文件夹上使用`[ ]`来确定参数。比如我们要传递一个name的参数过来。就需要把目录和文件建立成这样。\r\n\r\n```JSON\r\n-|  pages/\r\n---| index.vue\r\n---| goods-[name]/\r\n-----| demo2-[id].vue\r\n```\r\n\r\n然后修改一些`demo2-[id].vue`的文件，修改获取的参数。\r\n\r\n```html\r\n<template>\r\n  <div class="">获取的id:{{ id }}</div>\r\n  <div class="">获取的name:{{ name }}</div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from "vue";\r\nconst route = useRoute();\r\nconst id = ref(route.params.id);\r\nconst name = ref(route.params.name);\r\n<\/script>\r\n\r\n<style scoped></style>\r\n```\r\n\r\n再到`index.vue` 修改链接，传递两个参数。\r\n\r\n```html\r\n<NuxtLink to="/goods-zhangsan/demo2-38">Demo2.vue</NuxtLink>\r\n```\r\n\r\n完成后再到浏览器中查看结果，可以看到已经接收到了两个参数\r\n\r\n### 嵌套路由的使用\r\n\r\n嵌套路由的建立非常容易，用一句话解释为：目录和文件名同名，就制作了一个嵌套路由。\r\n制作一个嵌套路由页面一般需要三步：\r\n\r\n1. 建立嵌套路由的文件夹（约定大于配置）\r\n2. 创建和文件夹相同名称的文件（父页面）\r\n3. 在新建文件夹下任意创建子页面\r\n\r\n```text\r\n|--pages/\r\n|----parent/\r\n|------child.vue\r\n|----parent.vue\r\n```\r\n\r\n先在`\\pages`目录下，新建一个文件夹 `parent` ，然后在 `pages` 目录下再建立一个`parent.vue`的文件\r\n\r\n```vue\r\nparent.vue 页面\r\n<template>\r\n  <div class="">Parent Page</div>\r\n  \x3c!-- 子页面的出口--\x3e\r\n  <NuxtChild></NuxtChild>\r\n</template>\r\n```\r\n\r\n这里的  `NuxtChild`  就是嵌套路由的出口，所以如果是嵌套路由，就必须要加上这个标签。这是Nuxt的一个内置组件。 有了父页面之后，在新建的parent文件夹下，再建立一个 `child.vue`子页面。然后编写代码。\r\n\r\n```html\r\n<template>\r\n  <div class="">Child Page</div>\r\n</template>\r\n```\r\n\r\n然后为了看到效果，我们还需要一个路由链接过来。直接到`index.uve`增加路由链接。\r\n\r\n```html\r\n<NuxtLink to="/parent/child">/parent/child</NuxtLink>\r\n```\r\n\r\n多个子页面的制作与制作一个单页面是相同的。在`\\pages\\parent\\`文件夹下面再新建一个文件 `two.vue`。然后编写代码。\r\n\r\n```html\r\n<template>\r\n  <div class="">Two Page</div>\r\n</template>\r\n```\r\n\r\n写完后再到`index.vue`页面，增加导航路由。\r\n\r\n```html\r\n<NuxtLink to="/parent/two">/parent/two</NuxtLink>\r\n```\r\n\r\n## 编程式路由导航&传参\r\n\r\n`navigateTo`是一个路由器帮助函数，允许以编程方式在您的 Nuxt 应用程序中导航用户。如下面的例子，**注意：确保在调用它时始终使用`await`or`return`结果**\r\n\r\n```vue\r\n<template>\r\n  <div @click="codego">编程式导航</div>\r\n</template>\r\n\r\n<script setup>\r\nconst codego = async () => {\r\n  await navigateTo({\r\n    path: "/demo2",\r\n    params: {\r\n      id: 1,\r\n      sort: "asc",\r\n    },\r\n  });\r\n};\r\n<\/script>\r\n```\r\n\r\n必须使用 **params** 进行传参，否则会报错\r\n\r\n## 路由中间件\r\n\r\nNuxt 提供了一个可自定义的路由中间件框架，您可以在整个应用程序中使用它，非常适合在导航到特定路由之前提取要运行的代码。路由中间件分为三种：\r\n\r\n1. 匿名（或内联）路由中间件，直接在使用它们的页面中定义。\r\n2. 具名路由中间件，放在`middleware/`目录下，页面使用时会异步导入自动加载。（**注意**：路由中间件名称被规范化为 kebab-case，因此`someMiddleware`变为`some-middleware`。）\r\n3. 全局路由中间件，放在`middleware/`目录下（带后缀`.global`），每次路由变化都会自动运行。\r\n\r\n### 匿名路由中间件\r\n\r\n使用 `definePageMeta` 来实现匿名路由中间件，该`validate`属性接受`route`作为参数。您可以返回一个布尔值来确定这是否是要使用此页面呈现的有效路由。如果您返回`false`，并且找不到另一个匹配项，这将导致 404 错误。也可以直接返回一个带`statusCode`/的对象`statusMessage`来立即响应错误（不会检查其他匹配项）。\r\n\r\n```vue\r\n<template>\r\n  <div>id:{{ id }}</div>\r\n  <div>name:{{ name }}</div>\r\n  <NuxtLink to="/">前往index</NuxtLink>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from "vue";\r\nconst route = useRoute();\r\nconst id = ref(route.params.id);\r\nconst name = ref(route.params.name);\r\ndefinePageMeta({\r\n  validate: async (route) => {\r\n     // 通过就 return true\r\n    // 不通过时可以使用下面的代码\r\n    throw createError({ statusCode: 404, statusMessage: \'拒绝访问\' })\r\n  },\r\n});\r\n<\/script>\r\n<style lang="scss" scoped>\r\n</style>\r\n```\r\n\r\n### 具名路由中间件\r\n\r\n在 middleware 文件夹下创建一个 js 文件，例如 auth.js \r\n\r\n```js\r\nexport default defineNuxtRouteMiddleware((to, from) => {\r\n     console.log(to); // 目标路由信息\r\n     console.log(from);  // 来时路由信息\r\n  })\r\n  \r\n```\r\n\r\n```vue\r\n<template>\r\n  <div>hello world</div>\r\n</template>\r\n\r\n<script setup>\r\ndefinePageMeta({\r\n  middleware: \'auth\' // 使用哪一个路由中间件\r\n})\r\n<\/script>\r\n```\r\n\r\n## 布局模板\r\n\r\n布局模板的作用就是你先定义好一个布局页面，然后提取一些通用的UI或代码到可重用的模板中，提高代码复用性，从而降低代码的复杂度，让代码重用性提高。\r\n\r\n新建一个文件夹`layouts\\`然后再里边写编写一个 `defalut.vue`文件，代码如下。\r\n\r\n```vue\r\n<template>\r\n  <div>\r\n    我是布局模板，default.vue\r\n    <slot />\r\n  </div>\r\n</template>\r\n```\r\n\r\n上边这段代码就相当于你创建了一个布局模板。有了这个模板后，可以在任何你想要使用的页面中用`NuxtLayout`标签为页面赋予模板中的内容。\r\n\r\n```vue\r\n<template>\r\n  <NuxtLayout name="default">\r\n    <div>\r\n      我是插槽里面的内容\r\n    </div>\r\n  </NuxtLayout>\r\n</template>\r\n```\r\n\r\n如果想使用多个插槽的话，可以给插槽具名，你可以在页面中通过 `<template #xxx >` 的形式来指定对应的模板插槽\r\n\r\n```vue\r\n<template>\r\n  <div>\r\n    我是布局模板，default.vue\r\n    <slot name="one" />\r\n    <slot name="two" />\r\n  </div>\r\n</template>\r\n```\r\n\r\n```vue\r\n<template>\r\n  <NuxtLayout name="default">\r\n    <template #one>\r\n      我是one中的内容\r\n    </template>\r\n    <template #two> 我是two中的内容 </template>\r\n  </NuxtLayout>\r\n</template>\r\n```\r\n\r\n## 自定义组件\r\n\r\nNuxt3的所有自定义组件，必须写在`components`目录下，写在这个目录下他会自动加载到页面中，而不用我们自己不断的重复引入到每个页面中。比如现在要创建一个`TheFooter`的组件，我们在项目跟目录建立一个文件夹`components` ，然后建立一个文件`TheFooter.vue`。\r\n\r\n```vue\r\n<template>\r\n  <h1>The Footer Box</h1>\r\n</template>\r\n```\r\n\r\n```vue\r\n<template>\r\n      <TheFooter />  // 这样就可以直接使用自定义组件\r\n</template>\r\n```\r\n\r\n在实际工作中组件会非常多，所以会把组件分门别类的放置。那这种有层级的组件，我们要如何引用那。比如在` components`文件夹下面，新建一个 `test`文件夹，然后在test文件夹下面再创建一个 `MyButton.vue`文件。\r\n\r\n```html\r\n<template>\r\n  <div class=""><button>MyButton</button></div>\r\n</template>\r\n```\r\n\r\n写完这个组件后，最关键的一步，就是在页面里如何引用到这个组件。方法很简单，只要在这个页面的前面加上文件夹的名称就可以了\r\n\r\n```html\r\n<TestMyButton />\r\n```\r\n\r\n## 模块化代码 Composable文件夹的试用\r\n\r\n在开发中我们经常会有一些通用的业务逻辑代码，需要模块化管理，这时候就可以试用`Composable` 这个文件夹来编写。比如我们常用的显示当前时间，这种常用的通用代码，就可以编写成一个单独的代码段，然后在每个页面进行使用。\r\n\r\n### Composable中创建time.js的编写\r\n\r\n新建一个文件夹`composables` 然后在文件夹里边，新建一个文件`time.js` ，然后编写下面的代码。这段代码你一定编写过，所以就不给大家讲解里边的具体含义了。你可以直接复制这段代码。\r\n\r\n```javascript\r\nexport  const getTime=()=>{\r\n  const timezone = 8;\r\n  const offset_GMT = new Date().getTimezoneOffset();\r\n  const nowDate = new Date().getTime();\r\n  const today = new Date(nowDate + offset_GMT * 60 * 1000 + timezone * 60 * 60 * 1000);\r\n  const date = today.getFullYear() + "-" + twoDigits(today.getMonth() + 1) + "-" + twoDigits(today.getDate());\r\n  const time = twoDigits(today.getHours()) + ":" + twoDigits(today.getMinutes()) + ":" + twoDigits(today.getSeconds());\r\n  const timeString =\'当前时间：\' + date + \'  \' + time;\r\n\r\n  return timeString;\r\n\r\n}\r\n\r\nfunction twoDigits(val) {\r\n  if (val < 10) return "0" + val;\r\n  return val;\r\n}\r\n```\r\n\r\n写完之后，如何在页面中使用呢？在`pages` 文件夹下面，新建一个`\\pages\\demo3.vue` 的文件，然后你就可以直接在这个页面中使用刚才写的获得时间的方法了。\r\n\r\n```html\r\n<template>\r\n  <div class="">{{ time }}</div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from "vue";\r\nconst time = ref(getTime());\r\n<\/script>\r\n\r\n<style scoped></style>\r\n```\r\n\r\n打开浏览器就可以获得当前时间了。 你可以把任何你在项目中经常使用的代码，封装到这个文件夹里，实现代码的复用。这个文件夹的功能和组件很相似，只是组件是UI部分的代码复用，而这个是业务逻辑代码的复用。\r\n\r\n### composables的引入规则\r\n\r\n`composables` 文件夹的引入规则是，**只有顶层文件会被引入**。也就是说我们如果在这个文件下再新建一个文件夹，是不会被引入到 页面中实现代码复用的。 比如下面的文件格式就没办法引入。\r\n\r\n```html\r\n--|composables\r\n----|test\r\n------|test.js\r\n```\r\n\r\n但是有一种是例外的，就是我们可以写成下面的这种形式。\r\n\r\n```html\r\n--|composables\r\n----|test\r\n------|index.js\r\n```\r\n\r\n我们这里测试一下，新建一个`\\test` 文件夹，然后在它的下面再创建一个`index.js` 文件。写入下面的代码。\r\n\r\n```javascript\r\nexport const test = ()=>{\r\n  console.log(\'index\')\r\n}\r\n```\r\n\r\n然后回到`Demo3.vue` 页面使用`test( )` 方法，结果是可以使用这个方法的。\r\n\r\n```html\r\n<template>\r\n  <div class="">{{ time }}</div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from "vue";\r\nconst time = ref(getTime());\r\ntest();\r\n<\/script>\r\n```\r\n\r\n## Nuxt3中的数据请求\r\n\r\nNuxt3中提供了四种方法：`useAsyncData` 、`useFetch` 、`useLazyFetch` 、`useLazyAsyncData` 。提供的四个方法，都是获取后台数据的，但是使用场景和使用方法有所不同。\r\n\r\n### useAsyncData的使用\r\n\r\n使用`useAsyncData` 异步获取数据，它可以使用在页面中，组件和插件中。我们先通过这个方法来获取一下服务端的数据。 在pages文件夹下，新建一个页面，然后编写下面的代码。\r\n\r\n```html\r\n<template>\r\n  <div class=""></div>\r\n</template>\r\n\r\n<script setup>\r\nimport {} from "vue";\r\n// 第一个参数是一个字符串，相当于给这个请求起一个名字\r\nconst res = await useAsyncData("getList", () =>\r\n  $fetch("请求地址")\r\n);\r\nconsole.log(res);\r\n<\/script>\r\n\r\n<style scoped></style>\r\n```\r\n\r\n$fetch( )方法是nuxt3提供的内置方法，我们直接可以使用。打开浏览器的调试面包，在`终端`里可以看到返回值是一个对象，对象里有四个属性。\r\n\r\n- data: 返回的数据，我们需要的服务器数据就在这个属性里。\r\n- error：是否存在错误，如果存在错误，可以在这个属性中获得，返回的是一个对象。\r\n- pending：这次请求的状态，返回的是布尔值。\r\n- refresh：这个返回的是一个函数，可以用来刷新 handler 函数返回的数据。\r\n\r\n这个方法的一个特点是，它可以进行很多选项的配置，但是在真实开发中，其实我们用的不多。最常用的就是`lazy` 选项，比如我们设置成`true` 就是需要数据都返回后，才会显示出来 ，简单说就是会阻塞页面。默认是false。 比如要设置lazy为true，就可以这样写。因为我们的数据太少，所以基本看不出来效果。\r\n\r\n```javascript\r\nconst res = await useAsyncData(\r\n  "getList",\r\n  () => $fetch("请求地址"),\r\n  {\r\n    lazy: true,\r\n  }\r\n);\r\n```\r\n\r\n这个可配置的选项`option` 其实还是挺多的，有七项。如果想详细了解的，可以到[官方](https://v3.nuxtjs.org/api/composables/use-async-data)去看一下\r\n\r\n### useFetch的使用\r\n\r\n`useFetch` 可以理解为所有的都选择默认配置的`useAsyncData` 方法。比如还是上面的请求，我们就可以写成下面的形式。\r\n\r\n```js\r\nconst res = await useFetch("请求地址");\r\n```\r\n\r\n这样我们依然可以获取数据，当然也是可以传递参数和配置请求方法的。比如我们要设置请求方法是get，传递id是1, 就可以写成下面的形式。\r\n\r\n```javascript\r\nconst res = await useFetch("http://121.36.81.61:8000/getTenArticleList", {\r\n  method: "get",\r\n  id: 1,\r\n});\r\n```\r\n\r\n`useLazyAsyncData` 和`useLazyFetch` 。他们只是把配置选项中的`Lazy` 设置成了true， 也就是会阻塞页面。\r\n\r\n## Nuxt3 中SEO相关的配置\r\n\r\n使用Nuxt3框架解决的主要问题就是要对搜索引擎友好，那为什么搜索引擎可以搜到我想要的网站？这要归功于HTML中的`Mate`标签和`title` 标签。\r\n\r\n### title 和 meta 标签的作用\r\n\r\n**title标签**：主要是为了告诉搜索引擎我们的网站标题是什么，然后搜索引擎才会根据你提供的的title给你打上tag，用户在搜索的时候才会搜索到你。 \r\n\r\n**meta标签**：这个标签根据name的不同有很多种，和SEO相关的主要是`name=description` 和`name=keywords` 这两种，如果不设置这两个标签，对SEO的效果就会有所影响。 所以我们在开发需要SEO的网站时，对这两个标签一定要进行设置。你可以用两种方法对meta标签进行设置。 \r\n\r\n1.使用useHead( )方法 \r\n\r\n```vue\r\n<template>\r\n  <div class="">Demo Page</div>\r\n</template>\r\n\r\n<script setup>\r\nuseHead({\r\n  title: " 星空的博客  ",\r\n  viewport: "width=device-width,initial-scale=1,maximum-scale=1 ",\r\n  charset: "utf-8",\r\n  meta: [\r\n    { name: "description", content: "星空的前端博客" },\r\n    { name: "keywords", content: "星空" },\r\n  ],\r\n});\r\n<\/script>\r\n```\r\n\r\n2.直接在模板中使用标签\r\n\r\n```vue\r\n<template>\r\n  <div class="">\r\n    <Head>\r\n      <Title>{{ title }}</Title>\r\n      <Meta name="description" :content="title" />\r\n    </Head>\r\n    <div>技术胖的博客</div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from "vue";\r\nconst title = ref("星空的博客");\r\n<\/script>\r\n```\r\n\r\n从代码中可以看到，我们直接使用了`Head`标签，然后在里边还可以使用`Meta`标签和`Title`标签，可以设置这两个标签后，关于SEO的设置就都可以作了。 我们使用Nuxt的意义就在于可以有很好的SEO效果，所以在你开发的时候，一定要对页面进行标题、描述和关键词的设置和编写。 \r\n\r\n## Nuxt3中pinia的使用\r\n\r\n**1. 安装：**\r\n\r\n```bash\r\nyarn add pinia @pinia/nuxt\r\n```\r\n\r\n**2. 配置 `nuxt.config.js`**\r\n\r\n```ts\r\n// nuxt.config.js\r\nexport default defineNuxtConfig({\r\n  // ... 其他配置\r\n  modules: [\r\n    // ...\r\n    \'@pinia/nuxt\',\r\n  ],\r\n})\r\n```\r\n\r\n我们可以利用composables目录的自动导入功能，在该目录下创建store目录用于存放pinia的store文件，另外在composables目录下创建store.ts文件（文件名可自拟）\r\n\r\n```json\r\n-|  composables/\r\n--| store/    \r\n---| users/\r\n-----| index.js\r\n---| index.js\r\n```\r\n\r\n 我们可以在 **store** 文件夹下创建多个文件夹，每个文件夹代表一个模块，最后我们通过 **store** 文件夹下的 **index.js** 文件引入所有的模块，例如下面例子\r\n\r\n```js\r\n/composables/store/users/index.js\r\nexport const user = defineStore("user", {\r\n    state: () => {\r\n        return {\r\n            name: "Dragon Wu",\r\n            age: 100,\r\n            sex: "male",\r\n            token: "xxx"\r\n        }\r\n    }\r\n})\r\n```\r\n\r\n```js\r\n /composables/store/index.js索引所有store\r\nimport {user} from "./user/index"\r\n....\r\n//模块\r\nconst stores = {\r\n    user\r\n    ....\r\n}\r\n \r\nexport default stores\r\n```\r\n\r\n```js\r\n/composables/store.js自动导入，方便直接调用\r\nimport stores from "./store/index"\r\n \r\nexport const useStore = stores\r\n```\r\n\r\n想使用哪个模块就使用哪个模块，例如我想使用 user 模块\r\n\r\n```vue\r\n<template>\r\n  <div>\r\n    <span>{{ user.name }}</span>\r\n    <span>{{ user.age }}</span>\r\n    <span>{{ user.sex }}</span>\r\n    <span>{{ user.token }}</span>\r\n  </div>\r\n</template>\r\n \r\n<script lang="ts" setup>\r\nconst user = useStore.user()\r\n<\/script>\r\n```\r\n\r\n其他的方法和正常使用 **pinia** 一样\r\n\r\n### Pinia的持久化存储\r\n\r\npinia默认是不会自动持久化存储的，当页面刷新时数据还是会丢失，此时需要使用自动持久化插件，Nuxt3的使用方法参考插件[官网文档](https://prazdevs.github.io/pinia-plugin-persistedstate/frameworks/nuxt-3.html)\r\n\r\n## Vueuse的使用\r\n\r\n`VueUse` 是一个基于 `Composition API` 的实用函数集合。\r\n\r\n一句话：它就是一个工具函数包；\r\n\r\n**1. 安装：**\r\n\r\n```bash\r\nyarn add @vueuse/nuxt @vueuse/core\r\n```\r\n\r\n**2. 配置 `nuxt.config.js`**\r\n\r\n```ts\r\n// nuxt.config.js\r\nexport default defineNuxtConfig({\r\n  // ... 其他配置\r\n  modules: [\r\n    // ...\r\n    \'@vueuse/nuxt\',\r\n  ],\r\n})\r\n```\r\n\r\n**3. 使用 VueUse 函数：**\r\n\r\n```xml\r\n<script setup lang="ts">\r\nconst { x, y } = useMouse()\r\n<\/script>\r\n\r\n<template>\r\n  <div>pos: {{x}}, {{y}}</div>\r\n</template>\r\n```\r\n\r\n## ssr底层原理\r\n\r\n```js\r\nlet server = require(\'express\')();\r\nconst Vue = require(\'vue\');\r\n// nuxt中利用 vue-server-renderer 实现服务端渲染\r\nconst renderer = require(\'vue-server-renderer\').createRenderer()\r\n\r\nserver.get(\'/api/home\', (req, res) => {\r\n\r\n  //0. 根据req，参数，兜库 \r\n\r\n  //1. 创建一个Vue实例\r\n\r\n  const app = new Vue({\r\n    data: {\r\n      url: req.url\r\n    },\r\n    template: `<div>hello ssr123,你访问的是{{url}}</div>`\r\n  })\r\n\r\n  // 服务端渲染\r\n  renderer.renderToString(app).then(\r\n    html => res.send(\r\n      `\r\n      <!DOCTYPE html>\r\n      <html lang="zh">\r\n      <head>\r\n        <meta charset="UTF-8">\r\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\r\n        <meta http-equiv="X-UA-Compatible" content="ie=edge">\r\n        <title></title>\r\n      </head>\r\n      <body>\r\n        ${html}\r\n      </body>\r\n      </html>\r\n    `\r\n    )\r\n  ).catch(\r\n    err => console.log(err)\r\n  )\r\n})\r\n\r\nserver.listen(3000) \r\n\r\n```\r\n\r\n',contentRendered:'<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>我们开发 toc 项目时，例如电商网站，往往需要考虑seo和首屏优化，这篇我们将讲述如何使用 nuxt3 实现服务器渲染，从而优化seo和首屏加载时间</p>\n</div>\n<h2 id="nuxt3的简介" tabindex="-1"><a class="header-anchor" href="#nuxt3的简介" aria-hidden="true">#</a> Nuxt3的简介</h2>\n<p>Nuxt3是基于Vue3发布的SSR框架，也是Vue全家桶系列的一员。如果你了解Nuxt2，应该也了解Nuxt3的使命和用途。但是如果你不了解，你需要先知道两个概念。</p>\n<ul>\n<li>SPA应用：也就是单页应用，这些多是在客户端的应用，不能进行SEO优化（搜索引擎优化）。</li>\n<li>SSR应用：在服务端进行渲染，渲染完成后返回给客户端，每个页面有独立的URL，对SEO友好。</li>\n</ul>\n<p>所以如果你开发的应用是企业网站、商品展示 、博客这类型的展示型网站，就需要使用搜索引擎喜欢的SSR应用。当我们明白这两个概念后，再来看Nuxt3的使命。因为Vue开发的应用默认是单页应用（SPA应用），但如果你想针对于搜索优化，就需要使用Vue的SSR模式开发，而<a href="https://nuxt.com/" target="_blank" rel="noopener noreferrer">Nuxt3<ExternalLinkIcon/></a>就是Vue的SSR开发的框架。\n<img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://img.jspang.com/ArticleImages/20220323_Nuxt003.png" data="aurora"></p>\n<h2 id="nuxt3的优势介绍" tabindex="-1"><a class="header-anchor" href="#nuxt3的优势介绍" aria-hidden="true">#</a> Nuxt3的优势介绍</h2>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://img.jspang.com/ArticleImages/20220323_Nuxt002.png" data="aurora"> 这是一张Nuxt3官网的图片，列出Nuxt3的新特性，一共12个。我们快速来解读一下。</p>\n<ul>\n<li>更轻量：以现代浏览器为基础的情况下，服务器部署和客户端产物最多减小75倍。</li>\n<li>更快：用动态服务端代码来优化冷启动。</li>\n<li>Hybird：增量动态生成和其他高级模式现在都成为可能。</li>\n<li>Suspense: 导航前后可在任何组件中获取数据。</li>\n<li>Composition API : 使用Composition API 和 Nuxt3的composables 实现真正的可复用性。</li>\n<li>Nuxt CLI ： 权限的零依赖体验，助你轻松搭建项目和集成模块。</li>\n<li>Nuxt Devtools ：专属调试工具，更多的信息和快速修复，在浏览器中高效工作。</li>\n<li>Nuxt Kit ：全新的基于 TypeScript 和跨版本兼容的模块开发。</li>\n<li>Webpack5 ： 更快的构建速度和更小的构建包，并且零配置。</li>\n<li>Vite：用Vite作为你的打包器，体验轻量级的快速HMR。</li>\n<li>Vue3 ： 完全支持Vue3语法，这一点特别关键。</li>\n<li>TypeScript：由原生TypeScript和ESM构成，没有额外配置步骤。</li>\n</ul>\n<h2 id="nuxt3-的安装" tabindex="-1"><a class="header-anchor" href="#nuxt3-的安装" aria-hidden="true">#</a> Nuxt3 的安装</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>npx nuxi init &lt;project-name>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><blockquote>\n<p>注意：<code>npx</code>是npm从5.2版开始增加的命令，所以说你的 npm 最小版本也要是5.2版本。查看npm版本的命令如下。</p>\n</blockquote>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>npm -v\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>如果你安装失败，或者安装很慢的话你需要多试几次，其实这个是国内网络问题造成的，道理就和你上不了Google是一样的。所以你可以使用科学上网解决这个问题。一般获取不到内容，就会得到下面一段警告。</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>could not fetch remote https://github.com/nuxt/starter\nMake sure you have installed git correctly   \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>直到出现下面的文字就算安装成功了。\n<img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="Nuxt3安装成功页面" originSrc="https://img.jspang.com/ArticleImages/20220323_Nuxt004.png" data="aurora"></p>\n<p>如果一直安装失败的话，下载Nuxt3的文件包，然后再用yarn命令进行安装</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code>https://github.com/nuxt/starter/tree/v3\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>打开网址可以看到，这个就是最简单的Nuxt3项目的目录，这时候你可以Clone下来，但我发现Clone还是会报错，意思是无法找到仓库位置。那这时候我只能用最原始的下载ZIP（Download ZIP）的方式了。\n下载完成后，再使用yarn命令进行安装。</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code>yarn install\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>稍等一会，就可以安装成功了。安装成功以后，再使用</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code>yarn dev\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>然后打开浏览器，输入<code>http://localhost:3000</code>，就可以看到下面的页面了。 <img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://img.jspang.com/ArticleImages/20220323_Nuxt001.png" data="aurora"></p>\n<h2 id="nuxt3的目录结构" tabindex="-1"><a class="header-anchor" href="#nuxt3的目录结构" aria-hidden="true">#</a> Nuxt3的目录结构</h2>\n<p>默认的项目里就如下几个文件和目录</p>\n<div class="language-JSON ext-JSON line-numbers-mode"><pre v-pre class="language-JSON"><code>- .nuxt               // 自动生成的目录，用于展示结果\n- node_modules        // 项目依赖包存放目录\n- .gitignore          // Git的配置目录，比如一些文件不用Git管理就可以在这个文件中配置\n- app.vue             // 项目入口文件，你可以在这里配置路由的出口\n- nuxt.config.ts      // nuxt项目的配置文件 ，这个里边可以配置Nuxt项目的方法面面\n- package-lock.json   // 锁定安装时包的版本，以保证其他人在 npm install时和你保持一致\n- package.json        // 包的配置文件和项目的启动调式命令配置\n- README.md           // 项目的说明文件\n- tsconfig.json       // TypeScript的配置文件\n \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>随着我们的开发目录也会越来越多，比如常用的还有下面三个目录。</p>\n<div class="language-JSON ext-JSON line-numbers-mode"><pre v-pre class="language-JSON"><code>- pages               // 开发的页面目录\n- components          // 组件目录\n- assets              // 静态资源目录\n- layouts             // 项目布局目录\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>好了，现在我们对Nuxt3的基础目录了解后，接下来我们试着去作一个HelloWorld的程序。</p>\n<h3 id="编写hello-world" tabindex="-1"><a class="header-anchor" href="#编写hello-world" aria-hidden="true">#</a> 编写Hello World</h3>\n<p>通过上面的介绍，我们知道了<code>App.vue</code> 这个文件是项目的入口文件。用VSCode打开文件，可以看到文件的基础结构。</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NuxtWelcome</span> <span class="token punctuation">/></span></span> \n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>其中<code>&lt;NuxtWelcome /&gt;</code> 就是一个框架自带的组件，我们直接删除就可以，不用纠结删除这个组件。删除后，在 <code>\\components</code> 目录下新建一个文件，叫做<code>HelloWorld.vue</code> 然后编写下面的代码。</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">import</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>然后再回到<code>app.vue</code>文件中直接写入这个 <code>HelloWorld</code>组件，回到浏览器，就可以看到 HelloWord 效果了。</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hello-world</span> <span class="token punctuation">/></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="nuxt3页面和约定路由的使用" tabindex="-1"><a class="header-anchor" href="#nuxt3页面和约定路由的使用" aria-hidden="true">#</a> Nuxt3页面和约定路由的使用</h2>\n<p>Nuxt3的一个特点就是<strong>约定式开发</strong>，讲究的是约定大于配置。如果你熟悉 <strong>umi</strong> 的话，那你可以很快的了解并上手</p>\n<ul>\n<li>在 <strong>components</strong> 文件夹下的 vue 文件，无需引入，可以直接在 app.vue 中使用</li>\n</ul>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Welcome to the homepage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AppAlert</span><span class="token punctuation">></span></span> // components/AppAlert 文件\n      This is an auto-imported component.\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>AppAlert</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ul>\n<li>在 <strong>pages</strong> 文件夹下的 vue 文件，每一个文件<code>pages/</code>代表显示其内容的不同路径。要使用页面，请创建<code>pages/index.vue</code>文件并将  <code>&lt;NuxtPage/&gt;</code> 添加到app.vue，这样你就可以刷新浏览器，看到 <strong>pages/index</strong> 文件中的内容了</li>\n</ul>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NuxtPage</span><span class="token punctuation">/></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>当我们在 <strong>pages</strong> 文件夹下有多个文件，需要来回跳转时，我们可以借助 **NuxtLink ** 标签来进行路由跳转</p>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NuxtPage</span><span class="token punctuation">/></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NuxtLink</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/demo1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>前往Demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>NuxtLink</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!-- 这样就可以跳转到 pages/Demo1 文件页面了 --\x3e</span> \n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="动态路由的使用" tabindex="-1"><a class="header-anchor" href="#动态路由的使用" aria-hidden="true">#</a> 动态路由的使用</h3>\n<p>我们在 <strong>pages</strong> 文件夹下创建的文件中，文件名中用<code>[ ]</code>扩起来就可以了，例demo2-[id].vue，这样我们就创建了一个动态路由</p>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code>// demo2-[id].vue\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>获取的id:{{ $route.params.id }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NuxtLink</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/demo1-34<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>前往demo2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>NuxtLink</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>如果想传递多个参数，需要建立一个文件夹，然后在文件夹上使用<code>[ ]</code>来确定参数。比如我们要传递一个name的参数过来。就需要把目录和文件建立成这样。</p>\n<div class="language-JSON ext-JSON line-numbers-mode"><pre v-pre class="language-JSON"><code>-|  pages/\n---| index.vue\n---| goods-[name]/\n-----| demo2-[id].vue\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>然后修改一些<code>demo2-[id].vue</code>的文件，修改获取的参数。</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>获取的id:{{ id }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>获取的name:{{ name }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> route <span class="token operator">=</span> <span class="token function">useRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> id <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span>route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span>route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>再到<code>index.vue</code> 修改链接，传递两个参数。</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NuxtLink</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/goods-zhangsan/demo2-38<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Demo2.vue<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>NuxtLink</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>完成后再到浏览器中查看结果，可以看到已经接收到了两个参数</p>\n<h3 id="嵌套路由的使用" tabindex="-1"><a class="header-anchor" href="#嵌套路由的使用" aria-hidden="true">#</a> 嵌套路由的使用</h3>\n<p>嵌套路由的建立非常容易，用一句话解释为：目录和文件名同名，就制作了一个嵌套路由。\n制作一个嵌套路由页面一般需要三步：</p>\n<ol>\n<li>建立嵌套路由的文件夹（约定大于配置）</li>\n<li>创建和文件夹相同名称的文件（父页面）</li>\n<li>在新建文件夹下任意创建子页面</li>\n</ol>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>|--pages/\n|----parent/\n|------child.vue\n|----parent.vue\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>先在<code>\\pages</code>目录下，新建一个文件夹 <code>parent</code> ，然后在 <code>pages</code> 目录下再建立一个<code>parent.vue</code>的文件</p>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code>parent.vue 页面\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Parent Page<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token comment">&lt;!-- 子页面的出口--\x3e</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NuxtChild</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>NuxtChild</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>这里的  <code>NuxtChild</code>  就是嵌套路由的出口，所以如果是嵌套路由，就必须要加上这个标签。这是Nuxt的一个内置组件。 有了父页面之后，在新建的parent文件夹下，再建立一个 <code>child.vue</code>子页面。然后编写代码。</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Child Page<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>然后为了看到效果，我们还需要一个路由链接过来。直接到<code>index.uve</code>增加路由链接。</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NuxtLink</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/parent/child<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>/parent/child<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>NuxtLink</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>多个子页面的制作与制作一个单页面是相同的。在<code>\\pages\\parent\\</code>文件夹下面再新建一个文件 <code>two.vue</code>。然后编写代码。</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Two Page<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>写完后再到<code>index.vue</code>页面，增加导航路由。</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NuxtLink</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/parent/two<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>/parent/two<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>NuxtLink</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="编程式路由导航-传参" tabindex="-1"><a class="header-anchor" href="#编程式路由导航-传参" aria-hidden="true">#</a> 编程式路由导航&amp;传参</h2>\n<p><code>navigateTo</code>是一个路由器帮助函数，允许以编程方式在您的 Nuxt 应用程序中导航用户。如下面的例子，<strong>注意：确保在调用它时始终使用<code>await</code>or<code>return</code>结果</strong></p>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>codego<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>编程式导航<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">const</span> <span class="token function-variable function">codego</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">await</span> <span class="token function">navigateTo</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/demo2"</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">sort</span><span class="token operator">:</span> <span class="token string">"asc"</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>必须使用 <strong>params</strong> 进行传参，否则会报错</p>\n<h2 id="路由中间件" tabindex="-1"><a class="header-anchor" href="#路由中间件" aria-hidden="true">#</a> 路由中间件</h2>\n<p>Nuxt 提供了一个可自定义的路由中间件框架，您可以在整个应用程序中使用它，非常适合在导航到特定路由之前提取要运行的代码。路由中间件分为三种：</p>\n<ol>\n<li>匿名（或内联）路由中间件，直接在使用它们的页面中定义。</li>\n<li>具名路由中间件，放在<code>middleware/</code>目录下，页面使用时会异步导入自动加载。（<strong>注意</strong>：路由中间件名称被规范化为 kebab-case，因此<code>someMiddleware</code>变为<code>some-middleware</code>。）</li>\n<li>全局路由中间件，放在<code>middleware/</code>目录下（带后缀<code>.global</code>），每次路由变化都会自动运行。</li>\n</ol>\n<h3 id="匿名路由中间件" tabindex="-1"><a class="header-anchor" href="#匿名路由中间件" aria-hidden="true">#</a> 匿名路由中间件</h3>\n<p>使用 <code>definePageMeta</code> 来实现匿名路由中间件，该<code>validate</code>属性接受<code>route</code>作为参数。您可以返回一个布尔值来确定这是否是要使用此页面呈现的有效路由。如果您返回<code>false</code>，并且找不到另一个匹配项，这将导致 404 错误。也可以直接返回一个带<code>statusCode</code>/的对象<code>statusMessage</code>来立即响应错误（不会检查其他匹配项）。</p>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>id:{{ id }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>name:{{ name }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NuxtLink</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>前往index<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>NuxtLink</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> route <span class="token operator">=</span> <span class="token function">useRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> id <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span>route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span>route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">definePageMeta</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token function-variable function">validate</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">route</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n     <span class="token comment">// 通过就 return true</span>\n    <span class="token comment">// 不通过时可以使用下面的代码</span>\n    <span class="token keyword">throw</span> <span class="token function">createError</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">statusCode</span><span class="token operator">:</span> <span class="token number">404</span><span class="token punctuation">,</span> <span class="token literal-property property">statusMessage</span><span class="token operator">:</span> <span class="token string">\'拒绝访问\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scss<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h3 id="具名路由中间件" tabindex="-1"><a class="header-anchor" href="#具名路由中间件" aria-hidden="true">#</a> 具名路由中间件</h3>\n<p>在 middleware 文件夹下创建一个 js 文件，例如 auth.js</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineNuxtRouteMiddleware</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> <span class="token keyword">from</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 目标路由信息</span>\n     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 来时路由信息</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n<span class="token function">definePageMeta</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">middleware</span><span class="token operator">:</span> <span class="token string">\'auth\'</span> <span class="token comment">// 使用哪一个路由中间件</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="布局模板" tabindex="-1"><a class="header-anchor" href="#布局模板" aria-hidden="true">#</a> 布局模板</h2>\n<p>布局模板的作用就是你先定义好一个布局页面，然后提取一些通用的UI或代码到可重用的模板中，提高代码复用性，从而降低代码的复杂度，让代码重用性提高。</p>\n<p>新建一个文件夹<code>layouts\\</code>然后再里边写编写一个 <code>defalut.vue</code>文件，代码如下。</p>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n    我是布局模板，default.vue\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token punctuation">/></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>上边这段代码就相当于你创建了一个布局模板。有了这个模板后，可以在任何你想要使用的页面中用<code>NuxtLayout</code>标签为页面赋予模板中的内容。</p>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NuxtLayout</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>default<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n      我是插槽里面的内容\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>NuxtLayout</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>如果想使用多个插槽的话，可以给插槽具名，你可以在页面中通过 <code>&lt;template #xxx &gt;</code> 的形式来指定对应的模板插槽</p>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n    我是布局模板，default.vue\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>one<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>two<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NuxtLayout</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>default<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#one</span><span class="token punctuation">></span></span>\n      我是one中的内容\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#two</span><span class="token punctuation">></span></span> 我是two中的内容 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>NuxtLayout</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="自定义组件" tabindex="-1"><a class="header-anchor" href="#自定义组件" aria-hidden="true">#</a> 自定义组件</h2>\n<p>Nuxt3的所有自定义组件，必须写在<code>components</code>目录下，写在这个目录下他会自动加载到页面中，而不用我们自己不断的重复引入到每个页面中。比如现在要创建一个<code>TheFooter</code>的组件，我们在项目跟目录建立一个文件夹<code>components</code> ，然后建立一个文件<code>TheFooter.vue</code>。</p>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>The Footer Box<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TheFooter</span> <span class="token punctuation">/></span></span>  // 这样就可以直接使用自定义组件\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>在实际工作中组件会非常多，所以会把组件分门别类的放置。那这种有层级的组件，我们要如何引用那。比如在<code> components</code>文件夹下面，新建一个 <code>test</code>文件夹，然后在test文件夹下面再创建一个 <code>MyButton.vue</code>文件。</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>MyButton<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>写完这个组件后，最关键的一步，就是在页面里如何引用到这个组件。方法很简单，只要在这个页面的前面加上文件夹的名称就可以了</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TestMyButton</span> <span class="token punctuation">/></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="模块化代码-composable文件夹的试用" tabindex="-1"><a class="header-anchor" href="#模块化代码-composable文件夹的试用" aria-hidden="true">#</a> 模块化代码 Composable文件夹的试用</h2>\n<p>在开发中我们经常会有一些通用的业务逻辑代码，需要模块化管理，这时候就可以试用<code>Composable</code> 这个文件夹来编写。比如我们常用的显示当前时间，这种常用的通用代码，就可以编写成一个单独的代码段，然后在每个页面进行使用。</p>\n<h3 id="composable中创建time-js的编写" tabindex="-1"><a class="header-anchor" href="#composable中创建time-js的编写" aria-hidden="true">#</a> Composable中创建time.js的编写</h3>\n<p>新建一个文件夹<code>composables</code> 然后在文件夹里边，新建一个文件<code>time.js</code> ，然后编写下面的代码。这段代码你一定编写过，所以就不给大家讲解里边的具体含义了。你可以直接复制这段代码。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">export</span>  <span class="token keyword">const</span> <span class="token function-variable function">getTime</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">{</span>\n  <span class="token keyword">const</span> timezone <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> offset_GMT <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTimezoneOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> nowDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> today <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>nowDate <span class="token operator">+</span> offset_GMT <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span> <span class="token operator">+</span> timezone <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> date <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> <span class="token function">twoDigits</span><span class="token punctuation">(</span>today<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> <span class="token function">twoDigits</span><span class="token punctuation">(</span>today<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> time <span class="token operator">=</span> <span class="token function">twoDigits</span><span class="token punctuation">(</span>today<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> <span class="token function">twoDigits</span><span class="token punctuation">(</span>today<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> <span class="token function">twoDigits</span><span class="token punctuation">(</span>today<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> timeString <span class="token operator">=</span><span class="token string">\'当前时间：\'</span> <span class="token operator">+</span> date <span class="token operator">+</span> <span class="token string">\'  \'</span> <span class="token operator">+</span> time<span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> timeString<span class="token punctuation">;</span>\n\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">twoDigits</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">"0"</span> <span class="token operator">+</span> val<span class="token punctuation">;</span>\n  <span class="token keyword">return</span> val<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>写完之后，如何在页面中使用呢？在<code>pages</code> 文件夹下面，新建一个<code>\\pages\\demo3.vue</code> 的文件，然后你就可以直接在这个页面中使用刚才写的获得时间的方法了。</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{ time }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> time <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>打开浏览器就可以获得当前时间了。 你可以把任何你在项目中经常使用的代码，封装到这个文件夹里，实现代码的复用。这个文件夹的功能和组件很相似，只是组件是UI部分的代码复用，而这个是业务逻辑代码的复用。</p>\n<h3 id="composables的引入规则" tabindex="-1"><a class="header-anchor" href="#composables的引入规则" aria-hidden="true">#</a> composables的引入规则</h3>\n<p><code>composables</code> 文件夹的引入规则是，<strong>只有顶层文件会被引入</strong>。也就是说我们如果在这个文件下再新建一个文件夹，是不会被引入到 页面中实现代码复用的。 比如下面的文件格式就没办法引入。</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code>--|composables\n----|test\n------|test.js\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>但是有一种是例外的，就是我们可以写成下面的这种形式。</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code>--|composables\n----|test\n------|index.js\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>我们这里测试一下，新建一个<code>\\test</code> 文件夹，然后在它的下面再创建一个<code>index.js</code> 文件。写入下面的代码。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">test</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'index\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>然后回到<code>Demo3.vue</code> 页面使用<code>test( )</code> 方法，结果是可以使用这个方法的。</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{ time }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> time <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="nuxt3中的数据请求" tabindex="-1"><a class="header-anchor" href="#nuxt3中的数据请求" aria-hidden="true">#</a> Nuxt3中的数据请求</h2>\n<p>Nuxt3中提供了四种方法：<code>useAsyncData</code> 、<code>useFetch</code> 、<code>useLazyFetch</code> 、<code>useLazyAsyncData</code> 。提供的四个方法，都是获取后台数据的，但是使用场景和使用方法有所不同。</p>\n<h3 id="useasyncdata的使用" tabindex="-1"><a class="header-anchor" href="#useasyncdata的使用" aria-hidden="true">#</a> useAsyncData的使用</h3>\n<p>使用<code>useAsyncData</code> 异步获取数据，它可以使用在页面中，组件和插件中。我们先通过这个方法来获取一下服务端的数据。 在pages文件夹下，新建一个页面，然后编写下面的代码。</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">import</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span>\n<span class="token comment">// 第一个参数是一个字符串，相当于给这个请求起一个名字</span>\n<span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">useAsyncData</span><span class="token punctuation">(</span><span class="token string">"getList"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>\n  <span class="token function">$fetch</span><span class="token punctuation">(</span><span class="token string">"请求地址"</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>$fetch( )方法是nuxt3提供的内置方法，我们直接可以使用。打开浏览器的调试面包，在<code>终端</code>里可以看到返回值是一个对象，对象里有四个属性。</p>\n<ul>\n<li>data: 返回的数据，我们需要的服务器数据就在这个属性里。</li>\n<li>error：是否存在错误，如果存在错误，可以在这个属性中获得，返回的是一个对象。</li>\n<li>pending：这次请求的状态，返回的是布尔值。</li>\n<li>refresh：这个返回的是一个函数，可以用来刷新 handler 函数返回的数据。</li>\n</ul>\n<p>这个方法的一个特点是，它可以进行很多选项的配置，但是在真实开发中，其实我们用的不多。最常用的就是<code>lazy</code> 选项，比如我们设置成<code>true</code> 就是需要数据都返回后，才会显示出来 ，简单说就是会阻塞页面。默认是false。 比如要设置lazy为true，就可以这样写。因为我们的数据太少，所以基本看不出来效果。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">useAsyncData</span><span class="token punctuation">(</span>\n  <span class="token string">"getList"</span><span class="token punctuation">,</span>\n  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">$fetch</span><span class="token punctuation">(</span><span class="token string">"请求地址"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    <span class="token literal-property property">lazy</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>这个可配置的选项<code>option</code> 其实还是挺多的，有七项。如果想详细了解的，可以到<a href="https://v3.nuxtjs.org/api/composables/use-async-data" target="_blank" rel="noopener noreferrer">官方<ExternalLinkIcon/></a>去看一下</p>\n<h3 id="usefetch的使用" tabindex="-1"><a class="header-anchor" href="#usefetch的使用" aria-hidden="true">#</a> useFetch的使用</h3>\n<p><code>useFetch</code> 可以理解为所有的都选择默认配置的<code>useAsyncData</code> 方法。比如还是上面的请求，我们就可以写成下面的形式。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">useFetch</span><span class="token punctuation">(</span><span class="token string">"请求地址"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>这样我们依然可以获取数据，当然也是可以传递参数和配置请求方法的。比如我们要设置请求方法是get，传递id是1, 就可以写成下面的形式。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">useFetch</span><span class="token punctuation">(</span><span class="token string">"http://121.36.81.61:8000/getTenArticleList"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">"get"</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>useLazyAsyncData</code> 和<code>useLazyFetch</code> 。他们只是把配置选项中的<code>Lazy</code> 设置成了true， 也就是会阻塞页面。</p>\n<h2 id="nuxt3-中seo相关的配置" tabindex="-1"><a class="header-anchor" href="#nuxt3-中seo相关的配置" aria-hidden="true">#</a> Nuxt3 中SEO相关的配置</h2>\n<p>使用Nuxt3框架解决的主要问题就是要对搜索引擎友好，那为什么搜索引擎可以搜到我想要的网站？这要归功于HTML中的<code>Mate</code>标签和<code>title</code> 标签。</p>\n<h3 id="title-和-meta-标签的作用" tabindex="-1"><a class="header-anchor" href="#title-和-meta-标签的作用" aria-hidden="true">#</a> title 和 meta 标签的作用</h3>\n<p><strong>title标签</strong>：主要是为了告诉搜索引擎我们的网站标题是什么，然后搜索引擎才会根据你提供的的title给你打上tag，用户在搜索的时候才会搜索到你。</p>\n<p><strong>meta标签</strong>：这个标签根据name的不同有很多种，和SEO相关的主要是<code>name=description</code> 和<code>name=keywords</code> 这两种，如果不设置这两个标签，对SEO的效果就会有所影响。 所以我们在开发需要SEO的网站时，对这两个标签一定要进行设置。你可以用两种方法对meta标签进行设置。</p>\n<p>1.使用useHead( )方法</p>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Demo Page<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n<span class="token function">useHead</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">" 星空的博客  "</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">viewport</span><span class="token operator">:</span> <span class="token string">"width=device-width,initial-scale=1,maximum-scale=1 "</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">charset</span><span class="token operator">:</span> <span class="token string">"utf-8"</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"description"</span><span class="token punctuation">,</span> <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">"星空的前端博客"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"keywords"</span><span class="token punctuation">,</span> <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">"星空"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>2.直接在模板中使用标签</p>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Head</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Title</span><span class="token punctuation">></span></span>{{ title }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Title</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span> <span class="token attr-name">:content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Head</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>技术胖的博客<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> title <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">"星空的博客"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>从代码中可以看到，我们直接使用了<code>Head</code>标签，然后在里边还可以使用<code>Meta</code>标签和<code>Title</code>标签，可以设置这两个标签后，关于SEO的设置就都可以作了。 我们使用Nuxt的意义就在于可以有很好的SEO效果，所以在你开发的时候，一定要对页面进行标题、描述和关键词的设置和编写。</p>\n<h2 id="nuxt3中pinia的使用" tabindex="-1"><a class="header-anchor" href="#nuxt3中pinia的使用" aria-hidden="true">#</a> Nuxt3中pinia的使用</h2>\n<p><strong>1. 安装：</strong></p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">add</span> pinia @pinia/nuxt\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><strong>2. 配置 <code>nuxt.config.js</code></strong></p>\n<div class="language-typescript ext-ts line-numbers-mode"><pre v-pre class="language-typescript"><code><span class="token comment">// nuxt.config.js</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineNuxtConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// ... 其他配置</span>\n  modules<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token comment">// ...</span>\n    <span class="token string">\'@pinia/nuxt\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>我们可以利用composables目录的自动导入功能，在该目录下创建store目录用于存放pinia的store文件，另外在composables目录下创建store.ts文件（文件名可自拟）</p>\n<div class="language-json ext-json line-numbers-mode"><pre v-pre class="language-json"><code>-|  composables/\n--| store/    \n---| users/\n-----| index.js\n---| index.js\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>我们可以在 <strong>store</strong> 文件夹下创建多个文件夹，每个文件夹代表一个模块，最后我们通过 <strong>store</strong> 文件夹下的 <strong>index.js</strong> 文件引入所有的模块，例如下面例子</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token operator">/</span>composables<span class="token operator">/</span>store<span class="token operator">/</span>users<span class="token operator">/</span>index<span class="token punctuation">.</span>js\n<span class="token keyword">export</span> <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    <span class="token function-variable function">state</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token punctuation">{</span>\n            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Dragon Wu"</span><span class="token punctuation">,</span>\n            <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>\n            <span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token string">"male"</span><span class="token punctuation">,</span>\n            <span class="token literal-property property">token</span><span class="token operator">:</span> <span class="token string">"xxx"</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code> <span class="token operator">/</span>composables<span class="token operator">/</span>store<span class="token operator">/</span>index<span class="token punctuation">.</span>js索引所有store\n<span class="token keyword">import</span> <span class="token punctuation">{</span>user<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./user/index"</span>\n<span class="token operator">...</span><span class="token punctuation">.</span>\n<span class="token comment">//模块</span>\n<span class="token keyword">const</span> stores <span class="token operator">=</span> <span class="token punctuation">{</span>\n    user\n    <span class="token operator">...</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n \n<span class="token keyword">export</span> <span class="token keyword">default</span> stores\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token operator">/</span>composables<span class="token operator">/</span>store<span class="token punctuation">.</span>js自动导入，方便直接调用\n<span class="token keyword">import</span> stores <span class="token keyword">from</span> <span class="token string">"./store/index"</span>\n \n<span class="token keyword">export</span> <span class="token keyword">const</span> useStore <span class="token operator">=</span> stores\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>想使用哪个模块就使用哪个模块，例如我想使用 user 模块</p>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{{ user.name }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{{ user.age }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{{ user.sex }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{{ user.token }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n \n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span> <span class="token attr-name">setup</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">const</span> user <span class="token operator">=</span> useStore<span class="token punctuation">.</span><span class="token function">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>其他的方法和正常使用 <strong>pinia</strong> 一样</p>\n<h3 id="pinia的持久化存储" tabindex="-1"><a class="header-anchor" href="#pinia的持久化存储" aria-hidden="true">#</a> Pinia的持久化存储</h3>\n<p>pinia默认是不会自动持久化存储的，当页面刷新时数据还是会丢失，此时需要使用自动持久化插件，Nuxt3的使用方法参考插件<a href="https://prazdevs.github.io/pinia-plugin-persistedstate/frameworks/nuxt-3.html" target="_blank" rel="noopener noreferrer">官网文档<ExternalLinkIcon/></a></p>\n<h2 id="vueuse的使用" tabindex="-1"><a class="header-anchor" href="#vueuse的使用" aria-hidden="true">#</a> Vueuse的使用</h2>\n<p><code>VueUse</code> 是一个基于 <code>Composition API</code> 的实用函数集合。</p>\n<p>一句话：它就是一个工具函数包；</p>\n<p><strong>1. 安装：</strong></p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">add</span> @vueuse/nuxt @vueuse/core\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><strong>2. 配置 <code>nuxt.config.js</code></strong></p>\n<div class="language-typescript ext-ts line-numbers-mode"><pre v-pre class="language-typescript"><code><span class="token comment">// nuxt.config.js</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineNuxtConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// ... 其他配置</span>\n  modules<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token comment">// ...</span>\n    <span class="token string">\'@vueuse/nuxt\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><strong>3. 使用 VueUse 函数：</strong></p>\n<div class="language-xml ext-xml line-numbers-mode"><pre v-pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\nconst { x, y } = useMouse()\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>pos: {{x}}, {{y}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="ssr底层原理" tabindex="-1"><a class="header-anchor" href="#ssr底层原理" aria-hidden="true">#</a> ssr底层原理</h2>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">let</span> server <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'express\'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> Vue <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'vue\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// nuxt中利用 vue-server-renderer 实现服务端渲染</span>\n<span class="token keyword">const</span> renderer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'vue-server-renderer\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createRenderer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\nserver<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">\'/api/home\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\n  <span class="token comment">//0. 根据req，参数，兜库 </span>\n\n  <span class="token comment">//1. 创建一个Vue实例</span>\n\n  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">url</span><span class="token operator">:</span> req<span class="token punctuation">.</span>url\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>hello ssr123,你访问的是{{url}}&lt;/div></span><span class="token template-punctuation string">`</span></span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n  <span class="token comment">// 服务端渲染</span>\n  renderer<span class="token punctuation">.</span><span class="token function">renderToString</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>\n    <span class="token parameter">html</span> <span class="token operator">=></span> res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>\n      <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n      &lt;!DOCTYPE html>\n      &lt;html lang="zh">\n      &lt;head>\n        &lt;meta charset="UTF-8">\n        &lt;meta name="viewport" content="width=device-width, initial-scale=1.0">\n        &lt;meta http-equiv="X-UA-Compatible" content="ie=edge">\n        &lt;title>&lt;/title>\n      &lt;/head>\n      &lt;body>\n        </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>html<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\n      &lt;/body>\n      &lt;/html>\n    </span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">)</span>\n  <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>\n    <span class="token parameter">err</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\nserver<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span> \n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div>',date:"2023-02-10",deps:[],hoistedTags:[],links:[],pathInferred:"/nuxt/2023/20230210.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"20230210",filePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/nuxt/2023/20230210.md",filePathRelative:"nuxt/2023/20230210.md",componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/nuxt/2023/20230210.html.vue",componentFilePathRelative:"pages/nuxt/2023/20230210.html.vue",componentFileChunkName:"v-6cdfe61c",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/nuxt/2023/20230210.html.js",dataFilePathRelative:"pages/nuxt/2023/20230210.html.js",dataFileChunkName:"v-6cdfe61c",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/nuxt/2023/20230210.html",htmlFilePathRelative:"nuxt/2023/20230210.html"},{data:{key:"v-2497784b",path:"/html/2022/20220923.html",title:"使用 canvas 标签实现签名功能",lang:"zh-CN",frontmatter:{title:"使用 canvas 标签实现签名功能",date:"2022-09-23T00:00:00.000Z",tags:["html"],categories:["canvas"]},excerpt:"",headers:[],git:{updatedTime:null,contributors:[]}},key:"v-2497784b",path:"/html/2022/20220923.html",title:"使用 canvas 标签实现签名功能",lang:"zh-CN",frontmatter:{title:"使用 canvas 标签实现签名功能",date:"2022-09-23T00:00:00.000Z",tags:["html"],categories:["canvas"]},excerpt:"",headers:[],content:'\r\n::: tip\r\n\r\ncanvas 标签我们日常中会经常用到，这一篇用 canvas 标签实现一个简单的电子签名功能\r\n\r\n:::\r\n\r\n# 代码部分\r\n\r\n```js\r\n<!DOCTYPE html>\r\n<html lang="en">\r\n  <head>\r\n    <meta charset="UTF-8" />\r\n    <meta http-equiv="X-UA-Compatible" content="IE=edge" />\r\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\r\n    <title>Document</title>\r\n    <script src="./utils.js"><\/script>\r\n    <style>\r\n      * {\r\n        margin: 0;\r\n        padding: 0;\r\n      }\r\n      .cvs {\r\n          border: 1px solid skyblue;\r\n          position: relative;\r\n          left: 700px;\r\n          top: 40px;\r\n      }\r\n    </style>\r\n  </head>\r\n  <body>\r\n    <canvas class="cvs" width="500" height="300"></canvas>\r\n    <script>\r\n       const cvs = document.querySelector(\'.cvs\') // 获取 canvas 标签\r\n       const ctx = cvs.getContext(\'2d\') // 获取 canvas 对象，也就是渲染实例\r\n       let isDrawing = false // 开关\r\n       cvs.addEventListener(\'mousedown\',e => {\r\n           isDrawing = true\r\n           ctx.moveTo(e.offsetX,e.offsetY) // 定位，初始化鼠标位置\r\n       })\r\n       cvs.addEventListener(\'mousemove\',e => {\r\n          if (isDrawing) {\r\n            ctx.lineTo(e.offsetX,e.offsetY) // 绘画\r\n            ctx.stroke()  // 渲染\r\n          }\r\n      })\r\n      cvs.addEventListener(\'mouseup\',e => {\r\n          isDrawing = false\r\n      })\r\n      \r\n    <\/script>\r\n\r\n</body>\r\n</html>\r\n\r\n```\r\n\r\n',contentRendered:'<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>canvas 标签我们日常中会经常用到，这一篇用 canvas 标签实现一个简单的电子签名功能</p>\n</div>\n<h1 id="代码部分" tabindex="-1"><a class="header-anchor" href="#代码部分" aria-hidden="true">#</a> 代码部分</h1>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span>\n<span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span>head<span class="token operator">></span>\n    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span> <span class="token operator">/</span><span class="token operator">></span>\n    <span class="token operator">&lt;</span>meta http<span class="token operator">-</span>equiv<span class="token operator">=</span><span class="token string">"X-UA-Compatible"</span> content<span class="token operator">=</span><span class="token string">"IE=edge"</span> <span class="token operator">/</span><span class="token operator">></span>\n    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span> <span class="token operator">/</span><span class="token operator">></span>\n    <span class="token operator">&lt;</span>title<span class="token operator">></span>Document<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>\n    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"./utils.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>\n    <span class="token operator">&lt;</span>style<span class="token operator">></span>\n      <span class="token operator">*</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">margin</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token literal-property property">padding</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token punctuation">.</span>cvs <span class="token punctuation">{</span>\n          <span class="token literal-property property">border</span><span class="token operator">:</span> 1px solid skyblue<span class="token punctuation">;</span>\n          <span class="token literal-property property">position</span><span class="token operator">:</span> relative<span class="token punctuation">;</span>\n          <span class="token literal-property property">left</span><span class="token operator">:</span> 700px<span class="token punctuation">;</span>\n          <span class="token literal-property property">top</span><span class="token operator">:</span> 40px<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>\n  <span class="token operator">&lt;</span>body<span class="token operator">></span>\n    <span class="token operator">&lt;</span>canvas <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"cvs"</span> width<span class="token operator">=</span><span class="token string">"500"</span> height<span class="token operator">=</span><span class="token string">"300"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>canvas<span class="token operator">></span>\n    <span class="token operator">&lt;</span>script<span class="token operator">></span>\n       <span class="token keyword">const</span> cvs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">\'.cvs\'</span><span class="token punctuation">)</span> <span class="token comment">// 获取 canvas 标签</span>\n       <span class="token keyword">const</span> ctx <span class="token operator">=</span> cvs<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">\'2d\'</span><span class="token punctuation">)</span> <span class="token comment">// 获取 canvas 对象，也就是渲染实例</span>\n       <span class="token keyword">let</span> isDrawing <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment">// 开关</span>\n       cvs<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'mousedown\'</span><span class="token punctuation">,</span><span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n           isDrawing <span class="token operator">=</span> <span class="token boolean">true</span>\n           ctx<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>offsetX<span class="token punctuation">,</span>e<span class="token punctuation">.</span>offsetY<span class="token punctuation">)</span> <span class="token comment">// 定位，初始化鼠标位置</span>\n       <span class="token punctuation">}</span><span class="token punctuation">)</span>\n       cvs<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'mousemove\'</span><span class="token punctuation">,</span><span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span>isDrawing<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>offsetX<span class="token punctuation">,</span>e<span class="token punctuation">.</span>offsetY<span class="token punctuation">)</span> <span class="token comment">// 绘画</span>\n            ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 渲染</span>\n          <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      cvs<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'mouseup\'</span><span class="token punctuation">,</span><span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n          isDrawing <span class="token operator">=</span> <span class="token boolean">false</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      \n    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>\n\n<span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br></div></div>',date:"2022-09-23",deps:[],hoistedTags:[],links:[],pathInferred:"/html/2022/20220923.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"20220923",filePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/html/2022/20220923.md",filePathRelative:"html/2022/20220923.md",componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/html/2022/20220923.html.vue",componentFilePathRelative:"pages/html/2022/20220923.html.vue",componentFileChunkName:"v-2497784b",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/html/2022/20220923.html.js",dataFilePathRelative:"pages/html/2022/20220923.html.js",dataFileChunkName:"v-2497784b",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/html/2022/20220923.html",htmlFilePathRelative:"html/2022/20220923.html"},{data:{key:"v-117b5e97",path:"/html/2022/20221230.html",title:"使用 canvas 标签实现图片水印",lang:"zh-CN",frontmatter:{title:"使用 canvas 标签实现图片水印",date:"2022-12-30T00:00:00.000Z",tags:["html"],categories:["canvas"]},excerpt:"",headers:[],git:{updatedTime:null,contributors:[]}},key:"v-117b5e97",path:"/html/2022/20221230.html",title:"使用 canvas 标签实现图片水印",lang:"zh-CN",frontmatter:{title:"使用 canvas 标签实现图片水印",date:"2022-12-30T00:00:00.000Z",tags:["html"],categories:["canvas"]},excerpt:"",headers:[],content:'\r\n::: tip\r\n\r\n我们日常开发中，经常碰到给图片或者背景添加水印，这一篇以图片为例实现水印功能\r\n\r\n:::\r\n\r\n# 代码部分\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang="en">\r\n  <head>\r\n    <meta charset="UTF-8" />\r\n    <meta http-equiv="X-UA-Compatible" content="IE=edge" />\r\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\r\n    <title>Document</title>\r\n    <script src="./utils.js"><\/script>\r\n    <style>\r\n      * {\r\n        margin: 0;\r\n        padding: 0;\r\n      }\r\n    </style>\r\n  </head>\r\n  <body>\r\n    <canvas id="img"></canvas>\r\n    <script>\r\n     \r\n    function setWatermark (imgUrl, str) {\r\n      var canvasImg = document.querySelector(`#img`);\r\n      var ctxImg = canvasImg.getContext("2d"); // 获取画布canvas实例\r\n      var img = new Image(); // 获取img实例\r\n      img.src =imgUrl;  // img图片\r\n      img.width = 500   // img宽度\r\n      img.height = 400  // img高度\r\n      canvasImg.width = img.width  // canvas宽度\r\n      canvasImg.height = img.height // canvas高度\r\n      // 图片加载完成触发事件\r\n      img.onload = function(){\r\n        // 将图片放到canvas上，参数是图片，x轴，y轴，图片宽度，图片高度\r\n        ctxImg.drawImage(img, 0, 0, img.width, img.height); \r\n\r\n        // 创建水印 canvas\r\n        var canvas = document.createElement(\'canvas\');\r\n        canvas.id = "canvas"\r\n        // 设置canvas画布大小\r\n        canvas.width = 80\r\n        canvas.height = 30\r\n    \r\n        var ctx = canvas.getContext(\'2d\')  // 获取水印canvas实例\r\n        \r\n        ctx.rotate(6.10); // 水印旋转角度\r\n        // ctx.translate(0, 0);\r\n        ctx.font = \'14px Arial\'\r\n        ctx.fillStyle = \'skyblue\'\r\n        ctx.fillText(str, 0, 20) // 水印在画布的位置x，y轴\r\n        \r\n        // 计算铺满的数量循环\r\n        var tamp_w = Math.ceil(canvasImg.width / canvas.width)\r\n        var tamp_h = Math.ceil(canvasImg.height / canvas.height)+2\r\n\r\n        for(var i = 0; i < tamp_h; i++) {\r\n          for(var j = 0; j < tamp_w; j++) {\r\n            canvasImg.getContext("2d").drawImage(canvas, j * canvas.width, i* canvas.height)\r\n          }\r\n        }\r\n      }\r\n    }\r\n    setWatermark(\'https://www.runoob.com/images/img_the_scream.jpg\',\'测试水印111111111111\')\r\n    <\/script>\r\n\r\n</body>\r\n</html>\r\n```\r\n\r\n',contentRendered:'<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>我们日常开发中，经常碰到给图片或者背景添加水印，这一篇以图片为例实现水印功能</p>\n</div>\n<h1 id="代码部分" tabindex="-1"><a class="header-anchor" href="#代码部分" aria-hidden="true">#</a> 代码部分</h1>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./utils.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">\n      <span class="token selector">*</span> <span class="token punctuation">{</span>\n        <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>\n        <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n     \n    <span class="token keyword">function</span> <span class="token function">setWatermark</span> <span class="token punctuation">(</span><span class="token parameter">imgUrl<span class="token punctuation">,</span> str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">var</span> canvasImg <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">#img</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">var</span> ctxImg <span class="token operator">=</span> canvasImg<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取画布canvas实例</span>\n      <span class="token keyword">var</span> img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取img实例</span>\n      img<span class="token punctuation">.</span>src <span class="token operator">=</span>imgUrl<span class="token punctuation">;</span>  <span class="token comment">// img图片</span>\n      img<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token number">500</span>   <span class="token comment">// img宽度</span>\n      img<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">400</span>  <span class="token comment">// img高度</span>\n      canvasImg<span class="token punctuation">.</span>width <span class="token operator">=</span> img<span class="token punctuation">.</span>width  <span class="token comment">// canvas宽度</span>\n      canvasImg<span class="token punctuation">.</span>height <span class="token operator">=</span> img<span class="token punctuation">.</span>height <span class="token comment">// canvas高度</span>\n      <span class="token comment">// 图片加载完成触发事件</span>\n      img<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token comment">// 将图片放到canvas上，参数是图片，x轴，y轴，图片宽度，图片高度</span>\n        ctxImg<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> img<span class="token punctuation">.</span>width<span class="token punctuation">,</span> img<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span> \n\n        <span class="token comment">// 创建水印 canvas</span>\n        <span class="token keyword">var</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">\'canvas\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        canvas<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token string">"canvas"</span>\n        <span class="token comment">// 设置canvas画布大小</span>\n        canvas<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token number">80</span>\n        canvas<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">30</span>\n    \n        <span class="token keyword">var</span> ctx <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">\'2d\'</span><span class="token punctuation">)</span>  <span class="token comment">// 获取水印canvas实例</span>\n        \n        ctx<span class="token punctuation">.</span><span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">6.10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 水印旋转角度</span>\n        <span class="token comment">// ctx.translate(0, 0);</span>\n        ctx<span class="token punctuation">.</span>font <span class="token operator">=</span> <span class="token string">\'14px Arial\'</span>\n        ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">\'skyblue\'</span>\n        ctx<span class="token punctuation">.</span><span class="token function">fillText</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token comment">// 水印在画布的位置x，y轴</span>\n        \n        <span class="token comment">// 计算铺满的数量循环</span>\n        <span class="token keyword">var</span> tamp_w <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>canvasImg<span class="token punctuation">.</span>width <span class="token operator">/</span> canvas<span class="token punctuation">.</span>width<span class="token punctuation">)</span>\n        <span class="token keyword">var</span> tamp_h <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>canvasImg<span class="token punctuation">.</span>height <span class="token operator">/</span> canvas<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">2</span>\n\n        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tamp_h<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> tamp_w<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            canvasImg<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>canvas<span class="token punctuation">,</span> j <span class="token operator">*</span> canvas<span class="token punctuation">.</span>width<span class="token punctuation">,</span> i<span class="token operator">*</span> canvas<span class="token punctuation">.</span>height<span class="token punctuation">)</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">setWatermark</span><span class="token punctuation">(</span><span class="token string">\'https://www.runoob.com/images/img_the_scream.jpg\'</span><span class="token punctuation">,</span><span class="token string">\'测试水印111111111111\'</span><span class="token punctuation">)</span>\n    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br></div></div>',date:"2022-12-30",deps:[],hoistedTags:[],links:[],pathInferred:"/html/2022/20221230.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"20221230",filePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/html/2022/20221230.md",filePathRelative:"html/2022/20221230.md",componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/html/2022/20221230.html.vue",componentFilePathRelative:"pages/html/2022/20221230.html.vue",componentFileChunkName:"v-117b5e97",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/html/2022/20221230.html.js",dataFilePathRelative:"pages/html/2022/20221230.html.js",dataFileChunkName:"v-117b5e97",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/html/2022/20221230.html",htmlFilePathRelative:"html/2022/20221230.html"},{data:{key:"v-3c65068c",path:"/react/2022/20220612.html",title:"企业级前端框架UMI3",lang:"zh-CN",frontmatter:{title:"企业级前端框架UMI3",date:"2022-06-12T00:00:00.000Z",tags:["react"],categories:["react"]},excerpt:"",headers:[{level:2,title:"模块一 : 框架环境和基本使用",slug:"模块一-框架环境和基本使用",children:[{level:3,title:"01 | 环境准备，快速上手",slug:"_01-环境准备-快速上手",children:[]},{level:3,title:"02 | 目录结构",slug:"_02-目录结构",children:[]},{level:3,title:"03 | 构建时配置",slug:"_03-构建时配置",children:[]},{level:3,title:"04 |  模板约定",slug:"_04-模板约定",children:[]},{level:3,title:"05 | antd, antd-mobile使用",slug:"_05-antd-antd-mobile使用",children:[]},{level:3,title:"06 | 图片和其他资源引入",slug:"_06-图片和其他资源引入",children:[]}]},{level:2,title:"模块二 : 组件书写风格与页面跳转",slug:"模块二-组件书写风格与页面跳转",children:[{level:3,title:"01 | Less 变量，混合，嵌套，父选择器",slug:"_01-less-变量-混合-嵌套-父选择器",children:[]},{level:3,title:"02 | hooks + 函数式编写组件",slug:"_02-hooks-函数式编写组件",children:[]},{level:3,title:"03 | 路由,权限,动态,约定式",slug:"_03-路由-权限-动态-约定式",children:[]},{level:3,title:"04 | 页面跳转，参数接收",slug:"_04-页面跳转-参数接收",children:[]}]},{level:2,title:"模块三 : 数据生成与请求",slug:"模块三-数据生成与请求",children:[{level:3,title:"01 |  数据模拟umi-mock",slug:"_01-数据模拟umi-mock",children:[]},{level:3,title:"02 |  数据模拟 json-server",slug:"_02-数据模拟-json-server",children:[]},{level:3,title:"03 | 反向代理",slug:"_03-反向代理",children:[]},{level:3,title:"04 |  fetch请求",slug:"_04-fetch请求",children:[]},{level:3,title:"05 |  umi-request请求",slug:"_05-umi-request请求",children:[]},{level:3,title:"06 |  useRequest请求",slug:"_06-userequest请求",children:[]}]},{level:2,title:"模块四 ：状态管理",slug:"模块四-状态管理",children:[{level:3,title:"01｜dva 介绍",slug:"_01-dva-介绍",children:[]},{level:3,title:"02 | 数据流向",slug:"_02-数据流向",children:[]},{level:3,title:"03 | 全局数据&页面数据获取和修改",slug:"_03-全局数据-页面数据获取和修改",children:[]},{level:3,title:"04 | 异步逻辑处理",slug:"_04-异步逻辑处理",children:[]},{level:3,title:"05 | 丢弃connect高阶组件，转投hooks",slug:"_05-丢弃connect高阶组件-转投hooks",children:[]},{level:3,title:"06 | subscriptions 源 获取",slug:"_06-subscriptions-源-获取",children:[]}]},{level:2,title:"模块五 ：运行时配置",slug:"模块五-运行时配置",children:[{level:3,title:"01 | 渲染前的权限校验",slug:"_01-渲染前的权限校验",children:[]},{level:3,title:"02 | 动态路由读取、添加",slug:"_02-动态路由读取、添加",children:[]},{level:3,title:"03 | 路由监听，埋点统计",slug:"_03-路由监听-埋点统计",children:[]},{level:3,title:"04 | 拦截器",slug:"_04-拦截器",children:[]}]},{level:2,title:"结束语",slug:"结束语",children:[{level:3,title:"结束语 | 未来愉快替代create-react-app 开发",slug:"结束语-未来愉快替代create-react-app-开发",children:[]}]}],git:{updatedTime:null,contributors:[]}},key:"v-3c65068c",path:"/react/2022/20220612.html",title:"企业级前端框架UMI3",lang:"zh-CN",frontmatter:{title:"企业级前端框架UMI3",date:"2022-06-12T00:00:00.000Z",tags:["react"],categories:["react"]},excerpt:"",headers:[{level:2,title:"模块一 : 框架环境和基本使用",slug:"模块一-框架环境和基本使用",children:[{level:3,title:"01 | 环境准备，快速上手",slug:"_01-环境准备-快速上手",children:[]},{level:3,title:"02 | 目录结构",slug:"_02-目录结构",children:[]},{level:3,title:"03 | 构建时配置",slug:"_03-构建时配置",children:[]},{level:3,title:"04 |  模板约定",slug:"_04-模板约定",children:[]},{level:3,title:"05 | antd, antd-mobile使用",slug:"_05-antd-antd-mobile使用",children:[]},{level:3,title:"06 | 图片和其他资源引入",slug:"_06-图片和其他资源引入",children:[]}]},{level:2,title:"模块二 : 组件书写风格与页面跳转",slug:"模块二-组件书写风格与页面跳转",children:[{level:3,title:"01 | Less 变量，混合，嵌套，父选择器",slug:"_01-less-变量-混合-嵌套-父选择器",children:[]},{level:3,title:"02 | hooks + 函数式编写组件",slug:"_02-hooks-函数式编写组件",children:[]},{level:3,title:"03 | 路由,权限,动态,约定式",slug:"_03-路由-权限-动态-约定式",children:[]},{level:3,title:"04 | 页面跳转，参数接收",slug:"_04-页面跳转-参数接收",children:[]}]},{level:2,title:"模块三 : 数据生成与请求",slug:"模块三-数据生成与请求",children:[{level:3,title:"01 |  数据模拟umi-mock",slug:"_01-数据模拟umi-mock",children:[]},{level:3,title:"02 |  数据模拟 json-server",slug:"_02-数据模拟-json-server",children:[]},{level:3,title:"03 | 反向代理",slug:"_03-反向代理",children:[]},{level:3,title:"04 |  fetch请求",slug:"_04-fetch请求",children:[]},{level:3,title:"05 |  umi-request请求",slug:"_05-umi-request请求",children:[]},{level:3,title:"06 |  useRequest请求",slug:"_06-userequest请求",children:[]}]},{level:2,title:"模块四 ：状态管理",slug:"模块四-状态管理",children:[{level:3,title:"01｜dva 介绍",slug:"_01-dva-介绍",children:[]},{level:3,title:"02 | 数据流向",slug:"_02-数据流向",children:[]},{level:3,title:"03 | 全局数据&页面数据获取和修改",slug:"_03-全局数据-页面数据获取和修改",children:[]},{level:3,title:"04 | 异步逻辑处理",slug:"_04-异步逻辑处理",children:[]},{level:3,title:"05 | 丢弃connect高阶组件，转投hooks",slug:"_05-丢弃connect高阶组件-转投hooks",children:[]},{level:3,title:"06 | subscriptions 源 获取",slug:"_06-subscriptions-源-获取",children:[]}]},{level:2,title:"模块五 ：运行时配置",slug:"模块五-运行时配置",children:[{level:3,title:"01 | 渲染前的权限校验",slug:"_01-渲染前的权限校验",children:[]},{level:3,title:"02 | 动态路由读取、添加",slug:"_02-动态路由读取、添加",children:[]},{level:3,title:"03 | 路由监听，埋点统计",slug:"_03-路由监听-埋点统计",children:[]},{level:3,title:"04 | 拦截器",slug:"_04-拦截器",children:[]}]},{level:2,title:"结束语",slug:"结束语",children:[{level:3,title:"结束语 | 未来愉快替代create-react-app 开发",slug:"结束语-未来愉快替代create-react-app-开发",children:[]}]}],content:"\n::: tip\n\nUmi 是蚂蚁金服的底层前端框架，是可扩展的企业级前端应用框架，内置了路由、构建、部署、测试， 包含组件打包、文档工具、请求库、hooks 库、数据流等 ， 通过框架的方式简化 React 开发\n\n:::\n\n## 模块一 : 框架环境和基本使用\n\n### 01 | 环境准备，快速上手\n\n#### 准备工作\n\n由于国内网络和前端的特殊性，在安装依赖等方面可能会失败或导致无法启动，浪费大量的时间，推荐使用yarn作为包管理器，并且使用国内镜像，推荐yrm这个工具管理yarn镜像\n\n安装\n\n```powershell\nnpm install -g yrm  \n```\n\n查看yarn镜像源\n\n```powershell\nyrm ls\n```\n\n切换源\n\n```powershell\nyrm use taobao\n```\n\n#### 项目初始化\n\n 先找个地方建个空目录。 \n\n```bash\nmkdir myapp && cd myapp\n```\n\n使用yarn安装下载umi环境\n\n```bash\nyarn create @umijs/umi-app\n```\n\n安装依赖：\n\n```shell\n$ cd 目录\n$ yarn\n```\n\n启动项目：\n\n```jsx\nyarn start\n```\n\n在浏览器里打开 http://localhost:8000/，能看到以下界面，\n\n![img](https://img.alicdn.com/tfs/TB1JpeLwxD1gK0jSZFsXXbldVXa-1540-950.png)\n\n\n\n### 02 | 目录结构\n\n umi 更倾向于选择约定的方式，支持``js|jsx|ts|tsx``等后缀\n\n```bash\n.\n├── dist                          // 默认的 build 输出目录\n├── mock                          // mock 文件所在目录，基于 express\n├── config\n    ├── config.js                  // umi 配置，同 .umirc.js，二选一\n├── public  \t\t\t\t\t \t\t\t\t\t\t // 变通的数据资源目录和一些无需打包的资源\n└── src                           // 源码目录\n    ├── layouts/index.js           // 全局布局\n    ├── models\t\t\t\t\t           // 数据流\n    ├── wrappers\t\t\t\t\t         // 权限管理\n    ├── pages                     // 页面目录，里面的文件即路由\n        ├── .umi                  // dev 临时目录，需添加到 .gitignore\n        ├── .umi-production       // build 临时目录，会自动删除\n        ├── document.ejs           // HTML 模板\n        ├── 404.js                 // 404 页面\n        ├── page1.js               // 页面 1，任意命名，导出 react 组件\n        ├── page1.test.js          // 测试用例文件\n        └── page2               \t\t// 页面 2，内部可含有\n    ├── global.css                 // 约定的全局样式文件，自动引入，也可以用 global.less\n    ├── global.js                  // 可以在这里加入 polyfill\n    ├── app.js                     // 运行时配置文件\n├── .umirc.js                      // umi 配置，同 config/config.js，二选一\n├── .env                           // 环境变量\n└── package.json\n```\n\n\n\n### 03 | 构建时配置\n\n 构建时是对开发环境配置，如果项目的配置不复杂，推荐在 `.umirc.ts` 中写配置； 如果项目的配置比较复杂，可以将配置写在 `config/config.ts` 中，并把配置的一部分拆分出去，现实往往是复杂的所以推荐``config/config`` , 两种配置方式二选一，`.umirc.ts` 优先级更高，采用config配置时，一般删除``.umirc.ts``\n\n```jsx\nimport { defineConfig } from 'umi';\nimport proxy from './proxy';\nimport routes from './routes';\nimport theme from './theme'\n\nexport default defineConfig({\n  nodeModulesTransform: {// node_modules 目录下依赖文件的编译方式\n    type: 'none',// all 慢 兼容性好 none 快 兼容性一般\n  },\n  mfsu: {},//打包提速\n  fastRefresh: {},//快速刷新 可以保持组件状态，同时编辑提供即时反馈\n  title:'UMI3',//配置标题。\n  mountElementId: 'app',//指定 react app 渲染到的 HTML 元素 id。\n  favicon: '/favicon.ico',//使用本地的图片，图片请放到 public 目录\n\n  routes: routes,\n\n  proxy:proxy,//配置反向代理\n\n  //启用按需加载\n  dynamicImport: {\n    loading: '@/components/loading',//按需加载时指定的loading组件\n  },\n\n  theme,//配置主题，实际上是配 less 变量。\n  devServer: {\n    port: 8666, // .env里面权限更高一些\n    // https:true,//启用https安全访问，于对应协议服务器通讯\n  }\n\n})\n```\n\n\n\n### 04 |  模板约定  \n\numi内部默认没有html，会自行生成，如果需要修改， 新建 `src/pages/document.ejs` \n\n```html\n<!doctype html>\n<html>\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"viewport\" content=\"width=device-width\">\n  <title>Your App</title>\n</head>\n<body>\n  <div id=\"app\"></div>\n</body>\n</html>\n```\n\n\n\n### 05 | antd, antd-mobile使用\n\n**antd**\n\numi 已整合 antd 组件库，可通过``import {Xxx} from 'antd'``使用\n\n使用指定版本组件库，``yarn add xx-xx@x.x.x``后，会优先使用指定版本\n\n**antd主题设定**\n\n找到``config/theme``\n\n```jsx\nexport default {\n  \"@primary-color\": \"#399\" // antd全局样式copy过来统一修改\n};\n```\n\n[antd样式变量](https://ant.design/docs/react/customize-theme-cn)\n\n**antd-mobile**\n\numi 已整合 antd-mobile 组件库，可通过``import {Xxx} from 'antd-mobile'``使用v5版本，可通过``import {Xxx} from 'antd-mobile-v2'``使用v2版本，使用指定版本组件库，``yarn add xx-xx@x.x.x``后，会优先使用指定版本，推荐使用v5\n\n使用v5版本报错，找不到被使用的组件时尝试：\n\n- 删除.umi\n- 更新 @umijs/preset-react 包\n- 关闭mfsu\n- 重启\n\nv5主题修改\n\n``src/global.less``\n\n```less\n:root:root {\n  --adm-color-primary: #399;// antd-mobile全局样式copy过来统一修改\n}\n```\n\n[antd-mobile提供的所有全局变量](https://mobile.ant.design/zh/guide/theming)\n\n### 06 | 图片和其他资源引入 \n\n项目中使用图片有两种方式，\n\n1. 先把图片传到 cdn，然后在 JS 和 CSS 中使用图片的绝对路径\n2. 把图片放在项目里，然后在 JS 和 CSS 中通过相对路径的方式使用\n\n 前者趋向数据图片，后者趋向写死的图片，通过相对路径引入图片的时候，如果图片小于 10K，会被编译为 Base64嵌入网页\n\n```jsx\nimport styles from './index.css';\nimport user from '../../assets/images/userBj.png'\nfunction CssImg(props){\n  return (\n    <div>\n\n      <img src={user}/>\n      <img src={require('../../assets/images/userBj.png')} alt=\"\"/>\n\n      {/*动态图片 丢到服务器 推荐,或临时指向public 不推荐*/}\n\t\t\t<img src=\"cnd\" width=\"100\" alt=\"\"/>\n      <img src=\"/img/bg.jpg\" width=\"100\" alt=\"\"/>\n      \n      <div className={styles.test1} style={{height:50}}>测试</div>\n    </div>\n  );\n}\n\nexport default CssImg\n```\n\n```less\n.test1{\n  /* background: url(\"../../assets/images/bg.jpg\"); */\n  /* background: url(\"~@/assets/images/bg.jpg\"); */\n  background: url(\"/img/bg.jpg\");\n}\n```\n\n\n\n## 模块二 : 组件书写风格与页面跳转\n\n### 01 | Less 变量，混合，嵌套，父选择器  \n\n框架 自带了 less，css 及模块化的解析工具 ，推荐模块化使用less``import styles from 'xx.less``避免了全局污染 和 选择器复杂\n\n模块化的基本原理很简单，就是对每个类名（非 :global 声明的）按照一定规则进行转换，保证它的唯一性。如果在浏览器里查看这个示例的 dom 结构，你会发现实际渲染出来是这样的：\n\n```html\n<div class=\"title___3TqAx\">title</div>\n```\n\n类名被自动添加了一个 hash 值，这保证了它的唯一性。\n\n>  实际开发中简单的样式我们并不推荐写 css，推荐使用模板组件来进行开发，或者直接写行内 css。css 并没有很好的依赖关系，很多项目都有冗余的 css，但是却不敢删除 \n\n#### 全局变量\n\n```jsx\n{/* title 为global.less配置的整体样式 */}\n<h2 className=\"title\">全局样式</h2>\n\n\n@import '~antd/es/style/themes/default.less';\n//使用default的变量\n.myLink {\n  color: @primary-color;\n  font-size: @font-size-base;\n}\n<div className={styles.myLink}>测试</div>\n```\n\n#### 局部变量\n\n```less\n@width: 100px;\n@height: @width - 80px;\n\n.header {\n  width: @width;\n  height: @height;\n  background: red;\n}\n```\n\n#### 混合\n\n```less\n.bordered (@topW: 1px, @bottomW: 2px) {\n  border-top: dotted @topW black;\n  border-bottom: solid @bottomW black;\n}\n\n#a1 {\n  color: #111;\n  .bordered();\n}\n\n.a2 {\n  color: red;\n  .bordered(2px, 4px);\n  // border-bottom: solid 5px black; //覆盖混合\n}\n```\n\n#### 嵌套\n\n```less\n.nesting {\n  color: blue;\n  h3 {\n    color: coral;\n  }\n  p {\n    color: aqua;\n  }\n}\n\n<div className={styles.nesting}>\n  <h3>测试</h3>\n  <p>测试</p>\n</div>\n```\n\n#### :global\n\n打包后每个class名都会被自动加上一串唯一的序列号,在编译后模块化样式都会加上序号，global可使后面的样式编译后没有序号,脱离模块化，作用到全局，调用方式为非模块化\n\n```less\n/* 定义多个全局样式 */\n.bars_right {\n  font-weight: bold;\n  :global {\n    .ant-btn {\n      border: 0;\n    }\n    .title {\n      background: #fafafa;\n    }\n  }\n}\n\n<div className={styles.bars_right}>\n\t<button className={`ant-btn`}>按钮</button>\n```\n\n\n\n### 02 | hooks + 函数式编写组件  \n\n#### 函数式编写组件\n\n```jsx\nfunction 组件(){}\nconst 组件 = (props) = >{\n  \n  //使用hooks\n  \n  //定义 函数 变量\n  \n  return jsx\n}\n```\n\n#### hooks\n\n##### **useContext**\n\n组件上下文共享，越级传递数据，响应式\n\n```jsx\n// 创建上下文 context.jsx \nimport {createContext} from 'react'\nconst AppContext = createContext({})\nexport default AppContext;\n\n\n//祖先组件提供上文 parent.jsx\nfunction 父组件() {\n  const [msg, setMsg] = useState('hooks组件数据')\n  return (\n  \t<AppContext.Provider value={{ msg, setMsg }}>\n      ....\n      <子组件/>\n      ...\n    </AppContext.Provider>\n  )\n}\n//后代组件接受下文 child.jsx\nimport { useContext } from \"react\";\nimport AppContext from \"../context\";\n\nfunction 后代组件(){\n  const {msg,setMsg} = useContext(AppContext);\n  return (\n    <>\n      <div>{msg}</div>\n      <button onClick={setMsg}>按钮</button>\n    </>\n  )\n}\n```\n\n##### **useMemo**\n\nhooks出来之后，我们能够使用function的形式来创建包含内部state的组件。但是，使用function的形式，失去shouldComponentUpdate，我们无法通过判断前后状态来决定是否更新。在函数组件中，react不再区分mount和update两个状态，函数组件的每一次调用都会执行其内部的所有逻辑，如下：\n\n```jsx\nexport default function Xxx() {\n  \n  const [count, setCount] = useState(1);\n  const [value, setValue] = useState('');\n  \n  function getNum() {\n    console.log(\"getNum\");\n    return count * 100\n  }\n \t\n  return (\n    {/* 组件任何一条数据变化，getNum函数重复调用 */}\n    <div>getNum：{getNum()}</div>\n    <button onClick={() => setCount(count + 1)}>+1</button>\n    <input value={value} onChange={ev => setValue(ev.target.value)} />\n  )\n}\n```\n\n那么会带来较大的性能损耗。useMemo可指定依赖的数据变化才渲染，类似vue计算属性，返回缓存后的值数据，可拿去渲染\n\n```jsx\nconst getNumMemo = useMemo(() => {\n  //可执行一些没有副作用的业务，比如同步重新计算count\n  return count * 100\n}, [count])\n\nreturn (\n    {/* 组件任何一条数据变化，getNum函数重复调用 */}\n    <div>getNum：{getNumMemo}</div>\n    <button onClick={() => setCount(count + 1)}>+1</button>\n    <input value={value} onChange={ev => setValue(ev.target.value)} />\n  )\n```\n\n[^count]: 被依赖的数据，若无则多次执行，若为[]执行一次，一般需要依赖数据\n\n##### **memo**\n\nreact父组件更新未传递给子的数据，子组件也会更新，如下：\n\n```jsx\n//修改count 或者 value 时，child组件都会更新\n<button onClick={() => setCount(count + 1)}>+1</button>\n<input value={value} onChange={ev => setValue(ev.target.value)} />\n<Child count={count} />\n```\n\nmemo可以协助子组件只依赖传递过来的数据变化时才更新\n\n```jsx\nimport {memo} from 'react'\n\nfunction Child({count}){\n  const show = () => console.log('child组件渲染')\n  return (\n    <>\n      <h3>Child2组件</h3>\n      <div>{show()}</div>\n      <div>{count}</div>\n    </>\n  )\n}\n//memo 修饰当前组件 依赖父的数据变化时，才渲染\nexport default memo(Child)\n\n//不包装的情况下，父任意数据更新子都会更新\n// export default Child\n```\n\n##### **useCallback**\n\n由于组件内的业务函数传递给子组件时，每次都会是新的引用，会导致子组件无故更新，如下：\n\n父组件\n\n```jsx\n//修改count 或者 value 时，child组件都会更新\n<button onClick={() => setCount(count + 1)}>+1</button>\n<input value={value} onChange={ev => setValue(ev.target.value)} />\n<Child updateCount=(()=>console.log('业务')) />\n```\n\n子组件\n\n```jsx\nimport {memo} from 'react'\nfunction Child({updateCount}){\n  const show = () => console.log('child组件渲染')\n  return (\n    <>\n      <h3>Child3组件</h3>\n      <div>{show()}</div>\n      <button onClick={updateCount}>测</button>\n    </>\n  )\n}\n//memo 修饰当前组件 依赖父的数据变化时，才渲染 但依赖父的是个函数时memo无效\nexport default memo(Child)\n```\n\nuseCallback可以将函数缓存起来，节省性能，指定某个被依赖的数据变化才更新函数，子组件配合memo实现，如下：\n\n```jsx\nexport default () => {\n  \n  const updateCount = useCallback(()=>{\n    //业务\n  },[])\n\n  return (\n  \t //修改count 或者 value 时，child组件都会更新\n    <button onClick={() => setCount(count + 1)}>+1</button>\n    <input value={value} onChange={ev => setValue(ev.target.value)} />\n    <Child updateCount={updateCount} />\n  )\n}\n```\n\n[^count]: 被依赖的数据，若无则多次执行，若为[]执行一次，一般需要依赖数据\n\n##### useLayoutEffect\n\nuseLayoutEffect**早于**类组件**早于**useEffect\n\n**挂载时**\n\n类render → 函数render → useLayoutEffect→ 类didmount → useEffect\n\n**更新时**\n\n类render渲染 → 函数render → useLayoutEffect 销毁→ useLayoutEffect 执行→ 类didUpdate → useEffect 销毁… → useEffect 执行\n\n### 03 | 路由,权限,动态,约定式  \n\n页面地址的跳转都是在浏览器端完成的，不会重新请求服务端获取 html，html 只在应用初始化时加载一次  ，页面由不同的组件构成，页面的切换其实就是不同组件的切换， 只需要在把不同的路由路径和对应的组件关联上 ，实现方式如下两种\n\n- 配置型路由（`在配置文件写入相关配置代码`)，配置型存在时，约定式失效\n\n- 约定式(`约定文件位置名称与格式无需写代码配置`)\n\n约定式是理想型方案，实际开发一般会向现实低头，推荐采用配置型路由\n\n配置`config/config`的`routes`属性，接受数组，一般单独写一个routes模块文件如下:\n\n```jsx\n//  config/routes\nexport default [\n  { path: '/less', component: 'less' },// 不写路径从 src/pages找组件\n  { path: '/antd', component: './antd' },//当前指向pages\n  { component: '@/pages/404' },//@指向src\n]\n```\n\n[^path]: 浏览器地址栏地址\n[^component]: 要打开的组件\n\n```jsx\n//  config/routes\nexport default [\n  ...\n  { path: '/antd', component: 'antd' },\n  {  path:'/', redirect: '/antd' },\n  { component: '@/pages/404' },//@指向src\n]\n```\n\n[^redirect]: 重定向\n\n```jsx\nexport default [\n    { path: '/login', component: 'login' },\n    { path: '/reg', component: './reg' },\n\n    {\n      path: '/',\n      component: '@/layouts/layout1',// layout组件\n      routes: [\n        { path: '/less', component: 'less' },\n        { path: '/antd', component: 'antd' },\n        {  path:'/', redirect: '/antd' },\n        { component: '@/pages/404' },\n      ],\n    },\n\n    { component: '@/pages/404' },\n\n\n  ]\n```\n\n[^layout组件]: 布局组件，控制一部分路由在跳转前先渲染布局组件自身UI，执行自身业务，后在自身内部渲染目标路由组件\n[^routes]: 配置子路由，通常在需要为多个路径增加 layout 组件时使用\n\n```jsx\n//layouts/布局组件\n\n//可引入一些components下的公共组件来完成公共布局\nimport Nav1 from '../../components/nav1'\nimport styles from './index.less'\n\nconst Layout1 = props => {\n  return (\n    <>\n      {props.children}\n      <div className={styles['adm-tab-bar']}><Nav1/></div>\n    </>\n  )\n}\n\nexport default Layout1;\n```\n\n[^props.children]: 布局组件内部渲染的目标路由组件\n\n```jsx\n{ path: '/user', component: 'user',wrappers:['@/wrappers/auth']},//路由守卫\n```\n\n[^wrappers]: 当前工权限校验工作可交给一个或者多个组件介权，通过了才被允许到目标路由\n\n```jsx\n//wrappers/auth\nimport { Redirect } from 'umi'\n\nexport default (props) => {\n  if (Math.random() < .5) {\n    return <div>{props.children}</div>;\n  } else {\n    return <Redirect to=\"/login\" />;\n  }\n}\n```\n\n多级子路由\n\n```jsx\n{ \n  path: '/goods', \n  component: '@/layouts/layout2',//展示区\n  routes:[\n    // { path: '/goods', component: 'goods' },\n    // { path:'/goods', redirect: '/goods/2' },//这里的\n    { path: '/goods/:id?', component: 'goods/goods-detail' },//动态可选路由\n    { path: '/goods/:id/comment', component: 'goods/comment' },//不配routes,占用当前展示区\n    { path: '/goods/:id/comment/:cid', component: 'goods/comment/comment-detail' },\n    { component: '@/pages/404' },\n  ]\n},\n```\n\n[^:变量]: 动态路由，路由名为动态可变\n[^:变量?]: 动态可选路由，路由名可变，且可不传递\n\n\n\n### 04 | 页面跳转，参数接收\n\n声明式跳转+传参\n\n```jsx\nconst nav1 = ()=>{\n  return (\n  \t<NavLink activeClassName={styles.xx} to=\"/antd\">antd</NavLink>\n  \t<NavLink activeStyle={{color:'#399'}} to=\"/antd\">antd</NavLink>\n  \t<Link to=\"/antd\">antd</Link>\n  \t<Link to={{pathname:'/antd',search:'?a=1',query:{a:1}}}>antd</Link>\n  )\n}\n```\n\n编程式跳转+传参\n\n```jsx\n//history可以导入或者上下文获取\nimport { history } from 'umi';\nconst 组件({history})=>{}\n\n// 跳转到指定路由\nhistory.push('/list');\n\n// 带参数跳转到指定路由\nhistory.push('/list?a=b');\nhistory.push({\n  pathname: '/list',\n  query: {\n    a: 'b',\n  },\n});\n\n// 跳转到上一个路由\nhistory.go(-1);\n```\n\n参数接收\n\n```jsx\n//可以从组件上下文获取\nconst 组件 = ({location,match})=>{}\n\n//如果没有上下文可以withRouter包装组件\nimport { withRouter } from 'umi';\nconst withRouter({location,match})=>{}\n\n//可以直接使用umi的hooks获取\nimport { useLocation,useParams,useRouteMatch} from 'umi';\nconst 组件 = ()=>{\n  const params = useParams();\n  params.id | params.cid\n  const location = useLocation();\n  location.search | location.query\n}\n```\n\n相关api[查阅](https://umijs.org/zh-CN/api#link)\n\n## 模块三 : 数据生成与请求\n\n### 01 |  数据模拟umi-mock    \n\n Mock 数据是前端开发过程中必不可少的一环，是分离前后端开发的关键链路。通过预先跟服务器端约定好的接口，模拟请求数据甚至逻辑，能够让前端开发独立自主，不会被服务端的开发所阻塞 \n\nUMI3里约定 mock 文件夹下的文件或者 page(s) 文件夹下的 _mock 文件即 mock 文件，文件导出接口定义，支持基于 `require` 动态分析的实时刷新，支持 ES6 语法，以及友好的出错提示。\n\n```js\nexport default {\n  // 支持值为 Object 和 Array\n  'GET /api/users': { users: [1, 2] },\n  \n  // GET 可省略\n  '/api/users/1': { id: 1 },\n\n  // 支持自定义函数，API 参考 express@4,可完成业务\n  'POST /api/users/create': (req, res) => {res.end('OK'); },\n};\n```\n\n当客户端（浏览器）发送请求，如：`GET /api/users`，那么本地启动的 `umi dev` 会跟此配置文件匹配请求路径以及方法，如果匹配到了，就会将请求通过配置处理，就可以像样例一样，你可以直接返回数据\n\n[Mock.js](http://mockjs.com/) 辅助生成自然且多条数据\n\n```js\nimport Mock from 'mockjs';\n\nexport default {\n  // 使用 mockjs 等三方库\n  'GET /api/tags': Mock.mock({\n    'list|100': [{ name: '@city', 'value|1-100': 50, 'type|0-2': 1 }],\n  }),\n};\n```\n\n对于整个系统来说，请求接口是复杂并且繁多的，为了处理大量模拟请求的场景，我们通常把每一个数据模型抽象成一个文件，统一放在 `mock` 的文件夹中，然后他们会自动被引入。\n\n为了更加真实的模拟网络数据请求，往往需要模拟网络延迟时间，可以通过第三方插件来简化这个问题，如：[roadhog-api-doc#delay](https://github.com/nikogu/roadhog-api-doc/blob/master/lib/utils.js#L5)。\n\n```js\nimport { delay } from 'roadhog-api-doc'; // 模拟延时\n\nexport default delay(\n  {\n    // 支持值为 Object 和 Array\n    '/umi/goods': [\n      { id: 1, name: '韭菜' },\n      { id: 2, name: '西红柿' },\n    ],\n  },\n  2000,\n); //延时\n```\n\n介权\n\n```jsx\n//mock/auth\nexport default {\n  'POST /umi/login': (req, res) => {\n    const { username, password } = req.body;\n    if (username === 'alex' && password === 'alex123') {\n      res.send({\n        err: 0,\n        msg: '成功',\n        currentAuthority: 'user',\n      });\n    } else if (username === 'admin' && password === 'admin123') {\n      res.send({\n        err: 0,\n        msg: '成功',\n        currentAuthority: 'admin',\n      });\n    } else {\n      res.send({\n        err: 1,\n        msg: '失败',\n      });\n    }\n  },\n};\n\n```\n\n分页\n\n```jsx\n//查分页\n//指定页数范围内显示全数据，超过只显示两条\n'GET /umi/list': (req, res) => {\n  const { _page = 1, _limit = 3 } = req.query;\n\n  const totalPage = 3; //设定总页数\n  const lastPageLimit = 2; //设定尾页条数\n  const total = _limit * (totalPage - 1) + lastPageLimit; //计算总条数\n\n  res.send({\n    code: 0,\n    data: {\n      _page,\n      _limit,\n      total,\n      //控制data键，后面数组的条数\n      ...Mock.mock({\n        [`data|${_page >= totalPage ? lastPageLimit : _limit}`]: [\n          {\n            'id|+1': 1,\n            create_at: '@date(\"yyyy-MM-dd HH:mm:ss\")',\n            'type_str|1': [\n              '中转费明细',\n              '调整单明细',\n              '代收到付明细',\n              '客户运费明细',\n              '导入失败记录',\n            ],\n            name: function () {\n              return [\n                Mock.mock('@datetime(\"MMdd\")'),\n                Mock.mock('@county()'),\n                this.operator,\n              ].join('-');\n            },\n            path: 'http://xxx/shop/quotation/导入失败列表.xlsx',\n            operator: '@cname',\n            'status|1': ['0', '1', '2', '3'],\n          },\n        ],\n      }),\n    },\n  });\n},\n```\n\n增删改\n\n```jsx\n//增\n'POST /umi/list': (req, res) => {\n  console.log(req.body);\n  res.send(\n    Mock.mock({\n      'data|1': [\n        {\n          code: 0,\n          data: { ...req.body, a: 2 },\n          msg: '成功',\n        },\n        {\n          code: 1,\n          msg: '失败',\n        },\n      ],\n    }).data,\n  );\n},\n\n//删\n'DELETE /umi/list/:id': (req, res) => {\n  console.log(req.params.id);\n  res.send(\n    Mock.mock({\n      'data|1': [\n        {\n          code: 0,\n          data: { task_id: '123' },\n          msg: '成功',\n        },\n        {\n          code: 1,\n          msg: '失败',\n        },\n      ],\n    }).data,\n  );\n},\n  \n//改\n'PATCH /umi/list/:id': (req, res) => {\n  console.log(req.body);\n  res.send(\n    Mock.mock({\n      'data|1': [\n        {\n          code: 0,\n          data: { ...req.body },\n          msg: '成功',\n        },\n        {\n          code: 1,\n          msg: '失败',\n        },\n      ],\n    }).data,\n  );\n},\n```\n\n### 02 |  数据模拟 json-server   \n\n一款第三方模拟服务器和数据的包，支持json文件存本地被修改，自动生成resut风格可操作的接口，有效的CURD操作，对数据要求高时，推荐使用\n\n### 03 | 反向代理 \n\n工作中前后端是分离式开发，需要访问本地或者线上真实服务器时，跨域也成了每个前端工程师都需要了解的基本知识，解决方案有前端或者后端开发人员来解决\n\n在 UMI3 中配置`config/config`的proxy键，接受一个对象，可单独做一个模块到`config/proxy`，并暴露出来\n\n```tsx\nexport default {\n  '/api/': {\n    // 要代理的真实服务器地址\n    target: 'https://localhost:9001',\n    // 配置了这个可以从 http 代理到 https\n    https:true\n    // 依赖 origin 的功能可能需要这个，比如 cookie\n    changeOrigin: true,\n    pathRewrite: { '^/api': '' },//路径替换\n  } \n}\n```\n\n\n\n### 04 |  fetch请求    \n\nfetch是原生的数据请求方法，返回promise\n\n```tsx\nconst getData = async () => {\n    //let res = await fetch('/umi/goods/home?_limit=3'); \n\t\tlet res = await fetch(\n    '/umi/login',{\n      method:'post',\n      headers:{\"Content-type\":\"application/x-www-form-urlencoded\"},\n      body:'username=alex&password=alex123'\n    });\n    let data = await res.json();\n    console.log(data);\n};\n```\n\n\n\n### 05 |  umi-request请求 \n\n 通过 `import { request } from 'umi';` 你可以使用内置的请求方法。第一个参数是 url，第二个参数是请求的 options。options 具体格式参考 [umi-request](https://github.com/umijs/umi-request/blob/master/README_zh-CN.md)，也和axios用法基本一致\n\n```jsx\nconst getData = async () => {\n  let res = await request('/umi/goods',{params:{_limit:1}})\n  // let res = await request('/api/goods/home',{params:{_limit:1}})\n  console.log(res)\n}\n```\n\n### 06 |  useRequest请求\n\nuseRequest 是最佳实践中内置的一个 Hook ，默认对数据要求必须返回一个data字段，如果不希望有此限定，可以构建时配置一下`config/config`\n\n```jsx\nrequest: {\n  dataField: '',\n},\n```\n\n在组件初次加载时， 自动触发该函数执行。同时 useRequest 会自动管理异步请求的 `loading` , `data` , `error` 等状态。\n\n```tsx\nimport {useRequest} from 'umi'\n\nexport default function  RequestHooks(){\n\n  // 用法 1\n  const { data, error, loading } = useRequest('/umi/goods');\n\n\t// 用法 2\n  const { data, error, loading } = useRequest({\n    url: '/umi/goods',\n    params:{_limit:1}\n  });\n\n\t// 用法 4\n  const { data, loading, run } = useRequest((_limit) => ({\n    url: '/umi/goods',\n    params: { _limit }\n  }), {\n    manual: true,//手动通过运行run触发\n  });\n  \n  // 轮询\n  const { data, loading, run } = useRequest((_limit) => ({\n    url: '/umi/goods',\n    params: { _limit }\n  }), {\n    manual: true,//手动通过运行run触发\n    pollingInterval:1000,//轮询 一秒读一次\n    pollingWhenHidden:false,//屏幕不可见时，暂停轮询\n  });\n  \n  if (error) {\n    return <div>failed to load</div>\n  }\n\n  if (loading) {\n    return <div>loading...</div>\n  }\n\n  return (\n    <div>{JSON.stringify(data)}</div>\n    <button onClick={()=>run(1)}>手动</button>\n  );\n}\n```\n\n###### \n\n## 模块四 ：状态管理\n\n### 01｜dva 介绍    \n\n dva 首先是一个基于 [redux](https://github.com/reduxjs/redux) 和 [redux-saga](https://github.com/redux-saga/redux-saga) 的数据流方案，被umi以插件的方式内置，无需安装直接使用，在原有redux使用基础上更加简化和高效\n\ndva里面有关状态管理（数据流）的角色和redux的对比如下\n\n|                      | redux    | dva          |\n| -------------------- | -------- | ------------ |\n| 状态数据             | state    | state        |\n| 行为描述             | action   | action       |\n| 无副作用业务         | reducer  | reducer      |\n| 有副作用业务         | creators | effect       |\n| 通讯请求修改状态函数 | dispatch | dispatch     |\n| 通讯请求获取状态函数 | connect  | connect      |\n| 从 **源** 获取数据   | 无       | subscription |\n\n[^状态数据]:  javascript 对象，存公共状态的仓库\n[^行为描述]: javascript 对象，必须带有 `type` 属性指明具体的行为，其它字段可以自定义\n[^dispatch]: 用于触发 action 的函数\n[^无副作用业务]: 一个纯函数，处理公共状态时的一些同步业务\n[^有副作用业务]: 处理公共状态时的一些异步业务\n[^connect]: 连接状态仓库state，把数据流向组件页面\n\n\n\n### 02 | 数据流向   \n\n 数据的改变发生通常是通过用户交互行为或者浏览器行为（如路由跳转等）触发的，当此类行为会改变数据的时候可以通过 `dispatch` 发起一个 action，如果是同步行为会直接通过 `Reducers` 改变 `State` ，如果是异步行为（副作用）会先触发 `Effects` 然后流向 `Reducers` 最终改变 `State` ，最后`State`的数据再流回组件页面\n\n![dva数据流](https://zos.alipayobjects.com/rmsportal/PPrerEAKbIoDZYr.png)\n\n定义一个dva的Model如下：\n\n```jsx\nexport default {\n  namespace:'Model名'，//省略不写，认定文件名为Model名\n  state:{公共状态数据},\n  reducers:{一堆纯函数},\n  effects:{一堆异步副作用函数}\n\tsubscription:{一堆监听函数}\n}\n```\n\n\n\n### 03 | 全局数据&页面数据获取和修改 \n\n全局数据定义在`src/models/XX`，所有页面都可以访问，同步业务的处理交给reducers\n\n```JSX\nimport { history, request } from 'umi';\nimport key from 'keymaster';\n\nexport default {\n  \n  namespace: 'global',//所有models里面的namespace不能重名\n  \n  //初始化全局数据\n  state: {\n    title:'全局 title',\n    text: '全局text',\n    login: false,\n    a:'全局models aaaa',\n  },\n  \n  //处理同步业务  接收dispatch({type:'global/setText',...\n  reducers: {\n    setText(state) {\n      // copy更新并返回\n      return {\n        ...state,\n        text: '全局设置 后的text'+Math.random().toFixed(2),\n      };\n    },\n    setTitle(state,action) {//action 接受到的参数\n      return {\n        ...state,\n        title: `全局设置 后的title${action.payload.a}/${action.payload.b}`,\n      };\n    },\n    signin:(state)=>({\n      ...state,\n      login: true,\n    }),\n  },\n  \n};\n\n```\n\n组件内部获取和修改全局数据\n\n```jsx\nimport {connect} from 'umi'\n\nconst 组件 = (props) => {\n  return (\n    <>\n      <h3 className=\"title\">获取全局 state  </h3>\n\n      <div>text:{props.text}</div>\n      <div>title:{props.title}</div>\n      <div>a:{props.A}</div>\n      {\n        props.isLogin ? <div>已登录</div> : <div>未登录</div>\n      }\n\n      <h3 className=\"title\">修改全局 state</h3>\n      <button\n        onClick={() => {\n          props.dispatch({\n            type: 'global/setText',\n          });\n        }}\n      >\n        修改全局text,不传参\n      </button>\n\n      <button\n        onClick={() => {\n          props.dispatch({\n            type: 'global/setTitle',\n            payload:{a:1,b:2}\n          });\n        }}\n      >\n        修改全局text,传参\n      </button>\n    </>\n  );\n}\n\nexport default connect(state => ({\n  //抓取全局,重命名\n  text: state.global.text,\n  title: state.global.title,\n  A: state.global.a,\n  isLogin: state.global.login,\n}))(组件);\n```\n\n页面数据获取和修改\n\n页面数据定义在`pages/页面目录/model.js`或者`pages/ 页面目录/models/*.js`，当前``页面目录``只分配一个数据文件时，使用`model.js`,当前`页面目录`分配多个数据文件时，使用`models/*.js`\n\n``页面目录/*.jsx``可访问当前`页面目录/model.js`及当前`页面目录/models/*.js`,也可向上访问，但子集`页面目录`和同级`页面目录`数据不可访问\n\n```jsx\n//pages/*/model.js\nexport default {\n  namespace: 'dva',\n  state: 'bmw', \n  reducers: {\n    setStr(state) {\n      return 'qq';\n    },\n  }\n};\n\n//pages/*/models/a.js\nexport default {\n  namespace: 'a',\n  state: 'page model a',\n};\n\n```\n\n组件内部获取和修改页面数据\n\n```jsx\nimport {connect,getDvaApp} from 'umi'\nimport Child from './child'\n\nconst Dva = (props) => {\n  return (\n    <>\n      <h3 className=\"title\">获取页面models</h3>\n      <p>model.js里面的数据:{props.dva}</p>\n      <p>models目录里面的的数据:{props.a}</p>\n      <p>models目录里面的的数据:{props.b}</p>\n      <hr/>\n      <h3 className='title'>修改页面model数据</h3>\n      <button onClick={()=>props.dispatch({type:'dva/setStr'})}>修改</button>\n    </>\n  );\n}\n\nexport default connect(state => ({\n  //抓取页面级别\n  dva:state.dva,\n  a: state.a,\n  b: state.b,\n}))(Dva);\n\n//connect不传参不获取数据，dispatch默认传给组件\n//export default connect()(Dva);\n```\n\n### 04 | 异步逻辑处理      \n\neffects处理异步等一些有副作用的逻辑，如下\n\n```jsx\nimport { request } from 'umi';\nexport default {\n  namespace: 'global',//所有models里面的namespace不能重名\n  state: {\n    login: false,\n  },\n  reducers: {//处理同步 左key 接收dispatch({type:key\n    signin:(state,{type,payload})=>({\n      ...state,\n      login: true,//payload.实际数据决定login的值\n    }),\n  },\n  effects: {\n    //接收来自 dispatch({type:'global/login'...\n    *login(action, { call, put, select }) {\n      const data = yield call(request,'/umi/login',{method:'post',data:{username:action.payload.username,password:action.payload.password}})\n      yield put({\n        type: 'signin',\n        payload:data\n      });\n    },\n  }\n};\n\n```\n\n[^call]: 执行异步函数\n[^put]: 发出一个 Action，给reducers\n[^select]: 从state里获取数据,如`const todos = yield select(state => state.todos)`\n[^yield]: 状态机语法，类似await，同步书写异步代码\n[^action]: 可获取发送请求时的类型，携带的负载\n\n### 05 | 丢弃connect高阶组件，转投hooks\n\n```jsx\nimport { useDispatch, useSelector } from 'umi';\n\nconst 组件 = () => {\n  const dispatch = useDispatch();\n  const { dva } = useSelector((state) => ({ dva: state.dva }));\n  return (\n    <>\n      <h3 className=\"title\">子组件3</h3>\n      <div>{dva}</div>\n      <div>\n        <button\n          onClick={() => {\n            dispatch({ type: 'global/setTitle', payload: { a: 11, b: 22 } });\n          }}\n        >\n          修改全局model\n        </button>\n      </div>\n    </>\n  );\n};\n\nexport default 组件;\n\n```\n\n\n\n### 06 | subscriptions **源** 获取 \n\n订阅一个数据“源”的变化，使用场景如：服务器的 websocket 连接、keyboard 输入、geolocation 变化、history 路由变化\n\n```jsx\nimport key from 'keymaster';\n\nexport default {\n  namespace: 'global',\n  state: {\n  },\n  subscriptions: {\n    listenRoute({ dispatch,history}) {\n      history.listen(({ pathname, query }) => {\n        console.log('global subscriptions',pathname,query);\n      });\n    },\n    listenKeyboard({dispatch}) {//监听键盘\n      key('⌘+i, ctrl+i', () => { dispatch({type:'setText'}) });\n    },\n    listenResize({dispatch}) {//监听窗口变化\n      window.onresize = function(){\n        console.log('onresize')\n      }\n    },\n    listenScroll({dispatch,history}){\n      window.onscroll=function () {\n        console.log('onscroll')\n      }\n    }\n  },\n};\n\n```\n\n[^listenRoute]: subsription中的方法名是随意定的\n[^dispatch]: 发送action给reducers\n[^history]: 等同于umi包内history对象\n\n\n\n## 模块五 ：运行时配置\n\n构建时配置`config/config`能覆盖大量场景，但有一些却是编译时很难触及的。\n\n比如：\n\n- 在出错时显示个 message 提示用户\n- 在加载和路由切换时显示个 loading\n- 页面载入完成时请求后端，根据响应动态修改路由\n\n 运行时配置和构建时配置的区别是他跑在浏览器端，基于此，我们可以在这里写函数、jsx、import 浏览器端依赖等等，注意不要引入 node 依赖。 \n\n**配置方式**\n\n约定 `src/app.jsx` 定义并暴露一些固定名称的函数，他们会在浏览器端择机运行，全局执行一些业务\n\n### 01 | 渲染前的权限校验\n\nrender函数， 用于改写把整个应用 render 到 dom 树里， 覆写 render，接受一个 oldRender 函数，最后用 oldRender 来渲染dom， 需至少被调用一次 \n\n```jsx\nexport const render = async (oldRender) => {\n  const { isLogin} = await request('/umi/auth');\n  if (!isLogin) {\n    history.push('/login');\n  }\n  // oldRender， Function，原始 rende}r 方法，需至少被调用一次\n  oldRender();\n}  \n\n```\n\n```jsx\n//mock/auth  \n'GET /umi/auth': (req, res) => {\n  res.send({\n    isLogin: true,\n  });\n},\n```\n\n[^注意]: render方法只调用一次\n\n### 02 | 动态路由读取、添加\n\n`patchRoutes`函数提供了在运行时，动态修改路由的入口，一般可以和`render`函数配合， 请求服务端根据响应动态更新路由 \n\n```jsx\nexport function patchRoutes({ routes }) {\n\t//routes为当前路由\n  routes.unshift({\n    path: '/foo',\n    exact: true,\n    component: require('@/pages/foo').default,\n  });\n}\n```\n\n需要注意的地方是：\n\n- 动态路由的`compnent`要的是一个组件不是一段地址，可通过require引入\n- 动态路由读取后，跳转后不显示，需要关闭mfsu: {}\n- 子路由不跳转，除了layout组件，其他需要添加exact，构建时的配置在编译后都会自动加，而动态路由如果路由数据没有exact会导致不跳转\n- 数据数据里面不可以有require，数据需要过滤，require(非空字符拼接+变量)\n- document.ejs报错，需要require拼接时找到index.jsx 目前umi3有这个问题\n\n\n\n模拟路由数据\n\n```jsx\n//mock/auth\n\n'GET /umi/menus': (req, res) => {\n    res.send([\n      {\n        path: '/',\n        component: 'layouts/layout1',\n        routes: [\n          {\n            title: '资源引入',\n            path: '/resources',\n            component: 'pages/css-img',\n          },\n          { path: '/less', component: 'pages/less' },\n          {\n            path: '/goods',\n            component: 'layouts/layout2',\n            routes: [\n              { path: '/goods/:id?', component: 'pages/goods/goods-detail' },\n              {\n                path: '/goods/:id/comment',\n                component: 'pages/goods/comment',\n              },\n              {\n                path: '/goods/:id/comment/:cid',\n                component: 'pages/goods/comment/comment-detail',\n              },\n              { component: 'pages/404' },\n            ],\n          },\n          { path: '/data-interaction', component: 'pages/data-interaction' },\n          { path: '/dva', component: 'pages/dva' },\n          { path: '/antd', component: 'pages/antd' },\n          { path: '/hooks', component: 'pages/hooks' },\n          {\n            path: '/user',\n            component: 'pages/user',\n            wrappers: ['wrappers/auth'],\n          },\n\n          { path: '/', redirect: '/antd' },\n          { component: 'pages/404' },\n        ],\n      },\n      { component: 'pages/404' },\n    ]);\n  },\n```\n\n读取路由数据并添加路由：\n\n```jsx\n//src/app\n\nlet routesData = [];//模块变量用来存储路由数据\n\n//render函数里面读取路由数据\nexport const render = async (oldRender) => {\n  const { isLogin } = await http('/umi/auth');\n  if (isLogin) {\n    //获取路由数据\n    routesData = await http('/umi/menus');\n  } else {\n    history.push('/login');\n  }\n  oldRender();\n};\n\nexport function patchRoutes({ routes }) {\n  filterRoutes(routesData);//处理数据，添加exact，指定index.js,拼接require\n  routesData.map((item) => routes.push(item));//动态添加路由\n}\n\nconst filterRoutes = (routesData) => {\n  routesData.map((item) => {\n    \n    //exact处理\n    if (item.routes && item.routes.length > 0) {\n      filterRoutes(item.routes);//含 routes键的需要递归处理\n    } else {\n      item.exact = true;//不含routes键的都添加exact\n    }\n    \n    //component地址拼接处理\n    if (!item.redirect) {//不处理带有redirect字段\n      if (item.component.includes('404')) {//404没有index文件结构\n        item.component = require('@/' + item.component + '.jsx').default;\n      } else {\n        //其他页面都指向index结构，避免umi3的document.ejs报错\n        item.component = require('@/' + item.component + '/index.jsx').default;\n      }\n     \t//部分需要授权路由的拼接\n      if (item.wrappers && item.wrappers.length > 0) {\n        item.wrappers.map((str, index) => {\n          item.wrappers[index] = require('@/' + str + '.jsx').default;\n        });\n      }\n    }\n  });\n};\n```\n\n\n\n### 03 | 路由监听，埋点统计\n\n `onRouteChange`函数内部可以设置，在初始加载和路由切换时做一些事情，比如埋点，设置动态标题等操作\n\n```jsx\nexport function onRouteChange({ matchedRoutes, location, routes, action }) {\n  //动态设置标题\n  document.title = matchedRoutes[matchedRoutes.length - 1].route.title || '默认标题'\n}\n```\n\n[^matchedRoutes]: 当前匹配的路由及其子路由\n[^location]: history 提供的 location 对象\n[^routes]: 路由集合\n[^action]: `PUSH|POP|REPLACE|undefined`，初次加载时为 `undefined`\n\n\n\n### 04 | 拦截器 \n\numi内置的request和useRequest在发送请求之前和数据返回后，可以做一些通用的配置业务，这个时候考虑配置拦截器，参考[插件配置](https://umijs.org/zh-CN/plugins/plugin-request#%E8%BF%90%E8%A1%8C%E6%97%B6%E9%85%8D%E7%BD%AE)\n\n```jsx\nexport const request = {\n  requestInterceptors: [\n    (url, options) => {\n      // 请求地址 配置项\n      options.headers = {\n        token:'..',\n      };\n      return { url, options };\n    },\n  ],\n  responseInterceptors: [],\n};\n```\n\n[^注意]: 对fetch和第三方的请求库无效，如axios，需要自行配置\n\n\n\n##  结束语  \n\n###  结束语 | 未来愉快替代create-react-app 开发  \n\numi3框架到这里就告一段落了，一般适合开发一些h5端的各类web应用，如果考虑开发中台管理系统，推荐去看看蚂蚁系还提供了antd-pro框架\n\n",contentRendered:'<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>Umi 是蚂蚁金服的底层前端框架，是可扩展的企业级前端应用框架，内置了路由、构建、部署、测试， 包含组件打包、文档工具、请求库、hooks 库、数据流等 ， 通过框架的方式简化 React 开发</p>\n</div>\n<h2 id="模块一-框架环境和基本使用" tabindex="-1"><a class="header-anchor" href="#模块一-框架环境和基本使用" aria-hidden="true">#</a> 模块一 : 框架环境和基本使用</h2>\n<h3 id="_01-环境准备-快速上手" tabindex="-1"><a class="header-anchor" href="#_01-环境准备-快速上手" aria-hidden="true">#</a> 01 | 环境准备，快速上手</h3>\n<h4 id="准备工作" tabindex="-1"><a class="header-anchor" href="#准备工作" aria-hidden="true">#</a> 准备工作</h4>\n<p>由于国内网络和前端的特殊性，在安装依赖等方面可能会失败或导致无法启动，浪费大量的时间，推荐使用yarn作为包管理器，并且使用国内镜像，推荐yrm这个工具管理yarn镜像</p>\n<p>安装</p>\n<div class="language-powershell ext-powershell line-numbers-mode"><pre v-pre class="language-powershell"><code>npm install <span class="token operator">-</span>g yrm  \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>查看yarn镜像源</p>\n<div class="language-powershell ext-powershell line-numbers-mode"><pre v-pre class="language-powershell"><code>yrm <span class="token function">ls</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>切换源</p>\n<div class="language-powershell ext-powershell line-numbers-mode"><pre v-pre class="language-powershell"><code>yrm use taobao\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="项目初始化" tabindex="-1"><a class="header-anchor" href="#项目初始化" aria-hidden="true">#</a> 项目初始化</h4>\n<p>先找个地方建个空目录。</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token function">mkdir</span> myapp <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> myapp\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>使用yarn安装下载umi环境</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token function">yarn</span> create @umijs/umi-app\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>安装依赖：</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code>$ <span class="token builtin class-name">cd</span> 目录\n$ <span class="token function">yarn</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>启动项目：</p>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code>yarn start\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>在浏览器里打开 http://localhost:8000/，能看到以下界面，</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="https://img.alicdn.com/tfs/TB1JpeLwxD1gK0jSZFsXXbldVXa-1540-950.png" data="aurora"></p>\n<h3 id="_02-目录结构" tabindex="-1"><a class="header-anchor" href="#_02-目录结构" aria-hidden="true">#</a> 02 | 目录结构</h3>\n<p>umi 更倾向于选择约定的方式，支持<code>js|jsx|ts|tsx</code>等后缀</p>\n<div class="language-bash ext-sh line-numbers-mode"><pre v-pre class="language-bash"><code><span class="token builtin class-name">.</span>\n├── dist                          // 默认的 build 输出目录\n├── mock                          // mock 文件所在目录，基于 express\n├── config\n    ├── config.js                  // umi 配置，同 .umirc.js，二选一\n├── public  \t\t\t\t\t \t\t\t\t\t\t // 变通的数据资源目录和一些无需打包的资源\n└── src                           // 源码目录\n    ├── layouts/index.js           // 全局布局\n    ├── models\t\t\t\t\t           // 数据流\n    ├── wrappers\t\t\t\t\t         // 权限管理\n    ├── pages                     // 页面目录，里面的文件即路由\n        ├── .umi                  // dev 临时目录，需添加到 .gitignore\n        ├── .umi-production       // build 临时目录，会自动删除\n        ├── document.ejs           // HTML 模板\n        ├── <span class="token number">404</span>.js                 // <span class="token number">404</span> 页面\n        ├── page1.js               // 页面 <span class="token number">1</span>，任意命名，导出 react 组件\n        ├── page1.test.js          // 测试用例文件\n        └── page2               \t\t// 页面 <span class="token number">2</span>，内部可含有\n    ├── global.css                 // 约定的全局样式文件，自动引入，也可以用 global.less\n    ├── global.js                  // 可以在这里加入 polyfill\n    ├── app.js                     // 运行时配置文件\n├── .umirc.js                      // umi 配置，同 config/config.js，二选一\n├── .env                           // 环境变量\n└── package.json\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h3 id="_03-构建时配置" tabindex="-1"><a class="header-anchor" href="#_03-构建时配置" aria-hidden="true">#</a> 03 | 构建时配置</h3>\n<p>构建时是对开发环境配置，如果项目的配置不复杂，推荐在 <code>.umirc.ts</code> 中写配置； 如果项目的配置比较复杂，可以将配置写在 <code>config/config.ts</code> 中，并把配置的一部分拆分出去，现实往往是复杂的所以推荐<code>config/config</code> , 两种配置方式二选一，<code>.umirc.ts</code> 优先级更高，采用config配置时，一般删除<code>.umirc.ts</code></p>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'umi\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> proxy <span class="token keyword">from</span> <span class="token string">\'./proxy\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> routes <span class="token keyword">from</span> <span class="token string">\'./routes\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> theme <span class="token keyword">from</span> <span class="token string">\'./theme\'</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">nodeModulesTransform</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token comment">// node_modules 目录下依赖文件的编译方式</span>\n    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">\'none\'</span><span class="token punctuation">,</span><span class="token comment">// all 慢 兼容性好 none 快 兼容性一般</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">mfsu</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">//打包提速</span>\n  <span class="token literal-property property">fastRefresh</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">//快速刷新 可以保持组件状态，同时编辑提供即时反馈</span>\n  <span class="token literal-property property">title</span><span class="token operator">:</span><span class="token string">\'UMI3\'</span><span class="token punctuation">,</span><span class="token comment">//配置标题。</span>\n  <span class="token literal-property property">mountElementId</span><span class="token operator">:</span> <span class="token string">\'app\'</span><span class="token punctuation">,</span><span class="token comment">//指定 react app 渲染到的 HTML 元素 id。</span>\n  <span class="token literal-property property">favicon</span><span class="token operator">:</span> <span class="token string">\'/favicon.ico\'</span><span class="token punctuation">,</span><span class="token comment">//使用本地的图片，图片请放到 public 目录</span>\n\n  <span class="token literal-property property">routes</span><span class="token operator">:</span> routes<span class="token punctuation">,</span>\n\n  <span class="token literal-property property">proxy</span><span class="token operator">:</span>proxy<span class="token punctuation">,</span><span class="token comment">//配置反向代理</span>\n\n  <span class="token comment">//启用按需加载</span>\n  <span class="token literal-property property">dynamicImport</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">loading</span><span class="token operator">:</span> <span class="token string">\'@/components/loading\'</span><span class="token punctuation">,</span><span class="token comment">//按需加载时指定的loading组件</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n  theme<span class="token punctuation">,</span><span class="token comment">//配置主题，实际上是配 less 变量。</span>\n  <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">8666</span><span class="token punctuation">,</span> <span class="token comment">// .env里面权限更高一些</span>\n    <span class="token comment">// https:true,//启用https安全访问，于对应协议服务器通讯</span>\n  <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><h3 id="_04-模板约定" tabindex="-1"><a class="header-anchor" href="#_04-模板约定" aria-hidden="true">#</a> 04 |  模板约定</h3>\n<p>umi内部默认没有html，会自行生成，如果需要修改， 新建 <code>src/pages/document.ejs</code></p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">doctype</span> <span class="token name">html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Your App<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="_05-antd-antd-mobile使用" tabindex="-1"><a class="header-anchor" href="#_05-antd-antd-mobile使用" aria-hidden="true">#</a> 05 | antd, antd-mobile使用</h3>\n<p><strong>antd</strong></p>\n<p>umi 已整合 antd 组件库，可通过<code>import {Xxx} from \'antd\'</code>使用</p>\n<p>使用指定版本组件库，<code>yarn add xx-xx@x.x.x</code>后，会优先使用指定版本</p>\n<p><strong>antd主题设定</strong></p>\n<p>找到<code>config/theme</code></p>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token string-property property">"@primary-color"</span><span class="token operator">:</span> <span class="token string">"#399"</span> <span class="token comment">// antd全局样式copy过来统一修改</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><a href="https://ant.design/docs/react/customize-theme-cn" target="_blank" rel="noopener noreferrer">antd样式变量<ExternalLinkIcon/></a></p>\n<p><strong>antd-mobile</strong></p>\n<p>umi 已整合 antd-mobile 组件库，可通过<code>import {Xxx} from \'antd-mobile\'</code>使用v5版本，可通过<code>import {Xxx} from \'antd-mobile-v2\'</code>使用v2版本，使用指定版本组件库，<code>yarn add xx-xx@x.x.x</code>后，会优先使用指定版本，推荐使用v5</p>\n<p>使用v5版本报错，找不到被使用的组件时尝试：</p>\n<ul>\n<li>删除.umi</li>\n<li>更新 @umijs/preset-react 包</li>\n<li>关闭mfsu</li>\n<li>重启</li>\n</ul>\n<p>v5主题修改</p>\n<p><code>src/global.less</code></p>\n<div class="language-less ext-less line-numbers-mode"><pre v-pre class="language-less"><code><span class="token selector">:root:root</span> <span class="token punctuation">{</span>\n  <span class="token property">--adm-color-primary</span><span class="token punctuation">:</span> #399<span class="token punctuation">;</span><span class="token comment">// antd-mobile全局样式copy过来统一修改</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><a href="https://mobile.ant.design/zh/guide/theming" target="_blank" rel="noopener noreferrer">antd-mobile提供的所有全局变量<ExternalLinkIcon/></a></p>\n<h3 id="_06-图片和其他资源引入" tabindex="-1"><a class="header-anchor" href="#_06-图片和其他资源引入" aria-hidden="true">#</a> 06 | 图片和其他资源引入</h3>\n<p>项目中使用图片有两种方式，</p>\n<ol>\n<li>先把图片传到 cdn，然后在 JS 和 CSS 中使用图片的绝对路径</li>\n<li>把图片放在项目里，然后在 JS 和 CSS 中通过相对路径的方式使用</li>\n</ol>\n<p>前者趋向数据图片，后者趋向写死的图片，通过相对路径引入图片的时候，如果图片小于 10K，会被编译为 Base64嵌入网页</p>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token keyword">import</span> styles <span class="token keyword">from</span> <span class="token string">\'./index.css\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> user <span class="token keyword">from</span> <span class="token string">\'../../assets/images/userBj.png\'</span>\n<span class="token keyword">function</span> <span class="token function">CssImg</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>user<span class="token punctuation">}</span></span><span class="token punctuation">/></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'../../assets/images/userBj.png\'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token plain-text">\n\n      </span><span class="token punctuation">{</span><span class="token comment">/*动态图片 丢到服务器 推荐,或临时指向public 不推荐*/</span><span class="token punctuation">}</span><span class="token plain-text">\n\t\t\t</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cnd<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/img/bg.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token plain-text">\n      \n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>test1<span class="token punctuation">}</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token literal-property property">height</span><span class="token operator">:</span><span class="token number">50</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">测试</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> CssImg\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><div class="language-less ext-less line-numbers-mode"><pre v-pre class="language-less"><code><span class="token selector">.test1</span><span class="token punctuation">{</span>\n  <span class="token comment">/* background: url("../../assets/images/bg.jpg"); */</span>\n  <span class="token comment">/* background: url("~@/assets/images/bg.jpg"); */</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">"/img/bg.jpg"</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="模块二-组件书写风格与页面跳转" tabindex="-1"><a class="header-anchor" href="#模块二-组件书写风格与页面跳转" aria-hidden="true">#</a> 模块二 : 组件书写风格与页面跳转</h2>\n<h3 id="_01-less-变量-混合-嵌套-父选择器" tabindex="-1"><a class="header-anchor" href="#_01-less-变量-混合-嵌套-父选择器" aria-hidden="true">#</a> 01 | Less 变量，混合，嵌套，父选择器</h3>\n<p>框架 自带了 less，css 及模块化的解析工具 ，推荐模块化使用less<code>import styles from \'xx.less</code>避免了全局污染 和 选择器复杂</p>\n<p>模块化的基本原理很简单，就是对每个类名（非 :global 声明的）按照一定规则进行转换，保证它的唯一性。如果在浏览器里查看这个示例的 dom 结构，你会发现实际渲染出来是这样的：</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title___3TqAx<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>类名被自动添加了一个 hash 值，这保证了它的唯一性。</p>\n<blockquote>\n<p>实际开发中简单的样式我们并不推荐写 css，推荐使用模板组件来进行开发，或者直接写行内 css。css 并没有很好的依赖关系，很多项目都有冗余的 css，但是却不敢删除</p>\n</blockquote>\n<h4 id="全局变量" tabindex="-1"><a class="header-anchor" href="#全局变量" aria-hidden="true">#</a> 全局变量</h4>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token punctuation">{</span><span class="token comment">/* title 为global.less配置的整体样式 */</span><span class="token punctuation">}</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">全局样式</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>\n\n\n@<span class="token keyword">import</span> <span class="token string">\'~antd/es/style/themes/default.less\'</span><span class="token punctuation">;</span>\n<span class="token comment">//使用default的变量</span>\n<span class="token punctuation">.</span>myLink <span class="token punctuation">{</span>\n  <span class="token literal-property property">color</span><span class="token operator">:</span> @primary<span class="token operator">-</span>color<span class="token punctuation">;</span>\n  font<span class="token operator">-</span>size<span class="token operator">:</span> @font<span class="token operator">-</span>size<span class="token operator">-</span>base<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>myLink<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">测试</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h4 id="局部变量" tabindex="-1"><a class="header-anchor" href="#局部变量" aria-hidden="true">#</a> 局部变量</h4>\n<div class="language-less ext-less line-numbers-mode"><pre v-pre class="language-less"><code><span class="token variable">@width<span class="token punctuation">:</span></span> 100px<span class="token punctuation">;</span>\n<span class="token variable">@height<span class="token punctuation">:</span></span> <span class="token variable">@width</span> <span class="token operator">-</span> 80px<span class="token punctuation">;</span>\n\n<span class="token selector">.header</span> <span class="token punctuation">{</span>\n  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token variable">@width</span><span class="token punctuation">;</span>\n  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token variable">@height</span><span class="token punctuation">;</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="混合" tabindex="-1"><a class="header-anchor" href="#混合" aria-hidden="true">#</a> 混合</h4>\n<div class="language-less ext-less line-numbers-mode"><pre v-pre class="language-less"><code><span class="token selector">.bordered (<span class="token variable">@topW</span>: 1px, <span class="token variable">@bottomW</span>: 2px)</span> <span class="token punctuation">{</span>\n  <span class="token property">border-top</span><span class="token punctuation">:</span> dotted <span class="token variable">@topW</span> black<span class="token punctuation">;</span>\n  <span class="token property">border-bottom</span><span class="token punctuation">:</span> solid <span class="token variable">@bottomW</span> black<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">#a1</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> #111<span class="token punctuation">;</span>\n  <span class="token mixin-usage function">.bordered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">.a2</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n  <span class="token mixin-usage function">.bordered</span><span class="token punctuation">(</span>2px<span class="token punctuation">,</span> 4px<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// border-bottom: solid 5px black; //覆盖混合</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h4 id="嵌套" tabindex="-1"><a class="header-anchor" href="#嵌套" aria-hidden="true">#</a> 嵌套</h4>\n<div class="language-less ext-less line-numbers-mode"><pre v-pre class="language-less"><code><span class="token selector">.nesting</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>\n  <span class="token selector">h3</span> <span class="token punctuation">{</span>\n    <span class="token property">color</span><span class="token punctuation">:</span> coral<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token selector">p</span> <span class="token punctuation">{</span>\n    <span class="token property">color</span><span class="token punctuation">:</span> aqua<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">&lt;div className=</span><span class="token punctuation">{</span>styles.nesting<span class="token punctuation">}</span>>\n  &lt;h3>测试&lt;<span class="token operator">/</span>h3>\n  &lt;p>测试&lt;<span class="token operator">/</span>p>\n&lt;<span class="token operator">/</span>div>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h4 id="global" tabindex="-1"><a class="header-anchor" href="#global" aria-hidden="true">#</a> :global</h4>\n<p>打包后每个class名都会被自动加上一串唯一的序列号,在编译后模块化样式都会加上序号，global可使后面的样式编译后没有序号,脱离模块化，作用到全局，调用方式为非模块化</p>\n<div class="language-less ext-less line-numbers-mode"><pre v-pre class="language-less"><code><span class="token comment">/* 定义多个全局样式 */</span>\n<span class="token selector">.bars_right</span> <span class="token punctuation">{</span>\n  <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>\n  <span class="token selector">:global</span> <span class="token punctuation">{</span>\n    <span class="token selector">.ant-btn</span> <span class="token punctuation">{</span>\n      <span class="token property">border</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token selector">.title</span> <span class="token punctuation">{</span>\n      <span class="token property">background</span><span class="token punctuation">:</span> #fafafa<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">&lt;div className=</span><span class="token punctuation">{</span>styles.bars_right<span class="token punctuation">}</span><span class="token selector">>\n\t&lt;button className=</span><span class="token punctuation">{</span>`ant<span class="token operator">-</span>btn`<span class="token punctuation">}</span>>按钮&lt;<span class="token operator">/</span>button>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="_02-hooks-函数式编写组件" tabindex="-1"><a class="header-anchor" href="#_02-hooks-函数式编写组件" aria-hidden="true">#</a> 02 | hooks + 函数式编写组件</h3>\n<h4 id="函数式编写组件" tabindex="-1"><a class="header-anchor" href="#函数式编写组件" aria-hidden="true">#</a> 函数式编写组件</h4>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">组件</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">const</span> 组件 <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">></span><span class="token punctuation">{</span>\n  \n  <span class="token comment">//使用hooks</span>\n  \n  <span class="token comment">//定义 函数 变量</span>\n  \n  <span class="token keyword">return</span> jsx\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="hooks" tabindex="-1"><a class="header-anchor" href="#hooks" aria-hidden="true">#</a> hooks</h4>\n<h5 id="usecontext" tabindex="-1"><a class="header-anchor" href="#usecontext" aria-hidden="true">#</a> <strong>useContext</strong></h5>\n<p>组件上下文共享，越级传递数据，响应式</p>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token comment">// 创建上下文 context.jsx </span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>createContext<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react\'</span>\n<span class="token keyword">const</span> AppContext <span class="token operator">=</span> <span class="token function">createContext</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> AppContext<span class="token punctuation">;</span>\n\n\n<span class="token comment">//祖先组件提供上文 parent.jsx</span>\n<span class="token keyword">function</span> <span class="token function">父组件</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>msg<span class="token punctuation">,</span> setMsg<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">\'hooks组件数据\'</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n  \t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">AppContext.Provider</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> msg<span class="token punctuation">,</span> setMsg <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n      ....\n      &lt;子组件/>\n      ...\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">AppContext.Provider</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token comment">//后代组件接受下文 child.jsx</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> useContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> AppContext <span class="token keyword">from</span> <span class="token string">"../context"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">后代组件</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span>msg<span class="token punctuation">,</span>setMsg<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>AppContext<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>msg<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>setMsg<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">按钮</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><h5 id="usememo" tabindex="-1"><a class="header-anchor" href="#usememo" aria-hidden="true">#</a> <strong>useMemo</strong></h5>\n<p>hooks出来之后，我们能够使用function的形式来创建包含内部state的组件。但是，使用function的形式，失去shouldComponentUpdate，我们无法通过判断前后状态来决定是否更新。在函数组件中，react不再区分mount和update两个状态，函数组件的每一次调用都会执行其内部的所有逻辑，如下：</p>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Xxx</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  \n  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> setValue<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  \n  <span class="token keyword">function</span> <span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"getNum"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> count <span class="token operator">*</span> <span class="token number">100</span>\n  <span class="token punctuation">}</span>\n \t\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token punctuation">{</span><span class="token comment">/* 组件任何一条数据变化，getNum函数重复调用 */</span><span class="token punctuation">}</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">getNum：</span><span class="token punctuation">{</span><span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">+1</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>value<span class="token punctuation">}</span></span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token parameter">ev</span> <span class="token operator">=></span> <span class="token function">setValue</span><span class="token punctuation">(</span>ev<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>那么会带来较大的性能损耗。useMemo可指定依赖的数据变化才渲染，类似vue计算属性，返回缓存后的值数据，可拿去渲染</p>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token keyword">const</span> getNumMemo <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">//可执行一些没有副作用的业务，比如同步重新计算count</span>\n  <span class="token keyword">return</span> count <span class="token operator">*</span> <span class="token number">100</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n<span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token punctuation">{</span><span class="token comment">/* 组件任何一条数据变化，getNum函数重复调用 */</span><span class="token punctuation">}</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">getNum：</span><span class="token punctuation">{</span>getNumMemo<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">+1</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>value<span class="token punctuation">}</span></span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token parameter">ev</span> <span class="token operator">=></span> <span class="token function">setValue</span><span class="token punctuation">(</span>ev<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n  <span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h5 id="memo" tabindex="-1"><a class="header-anchor" href="#memo" aria-hidden="true">#</a> <strong>memo</strong></h5>\n<p>react父组件更新未传递给子的数据，子组件也会更新，如下：</p>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token comment">//修改count 或者 value 时，child组件都会更新</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">+1</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>value<span class="token punctuation">}</span></span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token parameter">ev</span> <span class="token operator">=></span> <span class="token function">setValue</span><span class="token punctuation">(</span>ev<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Child</span></span> <span class="token attr-name">count</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>count<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>memo可以协助子组件只依赖传递过来的数据变化时才更新</p>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>memo<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react\'</span>\n\n<span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>count<span class="token punctuation">}</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">show</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'child组件渲染\'</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span><span class="token plain-text">Child2组件</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">{</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token comment">//memo 修饰当前组件 依赖父的数据变化时，才渲染</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">memo</span><span class="token punctuation">(</span>Child<span class="token punctuation">)</span>\n\n<span class="token comment">//不包装的情况下，父任意数据更新子都会更新</span>\n<span class="token comment">// export default Child</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h5 id="usecallback" tabindex="-1"><a class="header-anchor" href="#usecallback" aria-hidden="true">#</a> <strong>useCallback</strong></h5>\n<p>由于组件内的业务函数传递给子组件时，每次都会是新的引用，会导致子组件无故更新，如下：</p>\n<p>父组件</p>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token comment">//修改count 或者 value 时，child组件都会更新</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">+1</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>value<span class="token punctuation">}</span></span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token parameter">ev</span> <span class="token operator">=></span> <span class="token function">setValue</span><span class="token punctuation">(</span>ev<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n<span class="token operator">&lt;</span>Child updateCount<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'业务\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>子组件</p>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>memo<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react\'</span>\n<span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>updateCount<span class="token punctuation">}</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">show</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'child组件渲染\'</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span><span class="token plain-text">Child3组件</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">{</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>updateCount<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">测</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token comment">//memo 修饰当前组件 依赖父的数据变化时，才渲染 但依赖父的是个函数时memo无效</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">memo</span><span class="token punctuation">(</span>Child<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>useCallback可以将函数缓存起来，节省性能，指定某个被依赖的数据变化才更新函数，子组件配合memo实现，如下：</p>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  \n  <span class="token keyword">const</span> updateCount <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">{</span>\n    <span class="token comment">//业务</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n  \t <span class="token comment">//修改count 或者 value 时，child组件都会更新</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">+1</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>value<span class="token punctuation">}</span></span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token parameter">ev</span> <span class="token operator">=></span> <span class="token function">setValue</span><span class="token punctuation">(</span>ev<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Child</span></span> <span class="token attr-name">updateCount</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>updateCount<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h5 id="uselayouteffect" tabindex="-1"><a class="header-anchor" href="#uselayouteffect" aria-hidden="true">#</a> useLayoutEffect</h5>\n<p>useLayoutEffect<strong>早于</strong>类组件<strong>早于</strong>useEffect</p>\n<p><strong>挂载时</strong></p>\n<p>类render → 函数render → useLayoutEffect→ 类didmount → useEffect</p>\n<p><strong>更新时</strong></p>\n<p>类render渲染 → 函数render → useLayoutEffect 销毁→ useLayoutEffect 执行→ 类didUpdate → useEffect 销毁… → useEffect 执行</p>\n<h3 id="_03-路由-权限-动态-约定式" tabindex="-1"><a class="header-anchor" href="#_03-路由-权限-动态-约定式" aria-hidden="true">#</a> 03 | 路由,权限,动态,约定式</h3>\n<p>页面地址的跳转都是在浏览器端完成的，不会重新请求服务端获取 html，html 只在应用初始化时加载一次  ，页面由不同的组件构成，页面的切换其实就是不同组件的切换， 只需要在把不同的路由路径和对应的组件关联上 ，实现方式如下两种</p>\n<ul>\n<li>\n<p>配置型路由（<code>在配置文件写入相关配置代码</code>)，配置型存在时，约定式失效</p>\n</li>\n<li>\n<p>约定式(<code>约定文件位置名称与格式无需写代码配置</code>)</p>\n</li>\n</ul>\n<p>约定式是理想型方案，实际开发一般会向现实低头，推荐采用配置型路由</p>\n<p>配置<code>config/config</code>的<code>routes</code>属性，接受数组，一般单独写一个routes模块文件如下:</p>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token comment">//  config/routes</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/less\'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">\'less\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">// 不写路径从 src/pages找组件</span>\n  <span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/antd\'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">\'./antd\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">//当前指向pages</span>\n  <span class="token punctuation">{</span> <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">\'@/pages/404\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">//@指向src</span>\n<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token comment">//  config/routes</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">[</span>\n  <span class="token operator">...</span>\n  <span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/antd\'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">\'antd\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>  <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">\'/\'</span><span class="token punctuation">,</span> <span class="token literal-property property">redirect</span><span class="token operator">:</span> <span class="token string">\'/antd\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">\'@/pages/404\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">//@指向src</span>\n<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/login\'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">\'login\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/reg\'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">\'./reg\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n    <span class="token punctuation">{</span>\n      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/\'</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">\'@/layouts/layout1\'</span><span class="token punctuation">,</span><span class="token comment">// layout组件</span>\n      <span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/less\'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">\'less\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/antd\'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">\'antd\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span>  <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">\'/\'</span><span class="token punctuation">,</span> <span class="token literal-property property">redirect</span><span class="token operator">:</span> <span class="token string">\'/antd\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span> <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">\'@/pages/404\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n    <span class="token punctuation">{</span> <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">\'@/pages/404\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n\n  <span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>[^routes]: 配置子路由，通常在需要为多个路径增加 layout 组件时使用</p>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token comment">//layouts/布局组件</span>\n\n<span class="token comment">//可引入一些components下的公共组件来完成公共布局</span>\n<span class="token keyword">import</span> Nav1 <span class="token keyword">from</span> <span class="token string">\'../../components/nav1\'</span>\n<span class="token keyword">import</span> styles <span class="token keyword">from</span> <span class="token string">\'./index.less\'</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">Layout1</span> <span class="token operator">=</span> <span class="token parameter">props</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>children<span class="token punctuation">}</span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">[</span><span class="token string">\'adm-tab-bar\'</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Nav1</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> Layout1<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/user\'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">\'user\'</span><span class="token punctuation">,</span><span class="token literal-property property">wrappers</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">\'@/wrappers/auth\'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">//路由守卫</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token comment">//wrappers/auth</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Redirect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'umi\'</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">.5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>children<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Redirect</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/login<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>多级子路由</p>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token punctuation">{</span> \n  <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/goods\'</span><span class="token punctuation">,</span> \n  <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">\'@/layouts/layout2\'</span><span class="token punctuation">,</span><span class="token comment">//展示区</span>\n  <span class="token literal-property property">routes</span><span class="token operator">:</span><span class="token punctuation">[</span>\n    <span class="token comment">// { path: \'/goods\', component: \'goods\' },</span>\n    <span class="token comment">// { path:\'/goods\', redirect: \'/goods/2\' },//这里的</span>\n    <span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/goods/:id?\'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">\'goods/goods-detail\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">//动态可选路由</span>\n    <span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/goods/:id/comment\'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">\'goods/comment\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">//不配routes,占用当前展示区</span>\n    <span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/goods/:id/comment/:cid\'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">\'goods/comment/comment-detail\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">\'@/pages/404\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="_04-页面跳转-参数接收" tabindex="-1"><a class="header-anchor" href="#_04-页面跳转-参数接收" aria-hidden="true">#</a> 04 | 页面跳转，参数接收</h3>\n<p>声明式跳转+传参</p>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token keyword">const</span> <span class="token function-variable function">nav1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n  \t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">NavLink</span></span> <span class="token attr-name">activeClassName</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>xx<span class="token punctuation">}</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/antd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">antd</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">NavLink</span></span><span class="token punctuation">></span></span>\n  \t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">NavLink</span></span> <span class="token attr-name">activeStyle</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token literal-property property">color</span><span class="token operator">:</span><span class="token string">\'#399\'</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/antd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">antd</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">NavLink</span></span><span class="token punctuation">></span></span>\n  \t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Link</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/antd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">antd</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Link</span></span><span class="token punctuation">></span></span>\n  \t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Link</span></span> <span class="token attr-name">to</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token literal-property property">pathname</span><span class="token operator">:</span><span class="token string">\'/antd\'</span><span class="token punctuation">,</span><span class="token literal-property property">search</span><span class="token operator">:</span><span class="token string">\'?a=1\'</span><span class="token punctuation">,</span><span class="token literal-property property">query</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">antd</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Link</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>编程式跳转+传参</p>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token comment">//history可以导入或者上下文获取</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> history <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'umi\'</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function">组件</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>history<span class="token punctuation">}</span></span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token comment">// 跳转到指定路由</span>\nhistory<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">\'/list\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 带参数跳转到指定路由</span>\nhistory<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">\'/list?a=b\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nhistory<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">pathname</span><span class="token operator">:</span> <span class="token string">\'/list\'</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">query</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token string">\'b\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 跳转到上一个路由</span>\nhistory<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>参数接收</p>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token comment">//可以从组件上下文获取</span>\n<span class="token keyword">const</span> <span class="token function-variable function">组件</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>location<span class="token punctuation">,</span>match<span class="token punctuation">}</span></span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token comment">//如果没有上下文可以withRouter包装组件</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> withRouter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'umi\'</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function">withRouter</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>location<span class="token punctuation">,</span>match<span class="token punctuation">}</span></span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token comment">//可以直接使用umi的hooks获取</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> useLocation<span class="token punctuation">,</span>useParams<span class="token punctuation">,</span>useRouteMatch<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'umi\'</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">组件</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">{</span>\n  <span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token function">useParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  params<span class="token punctuation">.</span>id <span class="token operator">|</span> params<span class="token punctuation">.</span>cid\n  <span class="token keyword">const</span> location <span class="token operator">=</span> <span class="token function">useLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  location<span class="token punctuation">.</span>search <span class="token operator">|</span> location<span class="token punctuation">.</span>query\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>相关api<a href="https://umijs.org/zh-CN/api#link" target="_blank" rel="noopener noreferrer">查阅<ExternalLinkIcon/></a></p>\n<h2 id="模块三-数据生成与请求" tabindex="-1"><a class="header-anchor" href="#模块三-数据生成与请求" aria-hidden="true">#</a> 模块三 : 数据生成与请求</h2>\n<h3 id="_01-数据模拟umi-mock" tabindex="-1"><a class="header-anchor" href="#_01-数据模拟umi-mock" aria-hidden="true">#</a> 01 |  数据模拟umi-mock</h3>\n<p>Mock 数据是前端开发过程中必不可少的一环，是分离前后端开发的关键链路。通过预先跟服务器端约定好的接口，模拟请求数据甚至逻辑，能够让前端开发独立自主，不会被服务端的开发所阻塞</p>\n<p>UMI3里约定 mock 文件夹下的文件或者 page(s) 文件夹下的 _mock 文件即 mock 文件，文件导出接口定义，支持基于 <code>require</code> 动态分析的实时刷新，支持 ES6 语法，以及友好的出错提示。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 支持值为 Object 和 Array</span>\n  <span class="token string-property property">\'GET /api/users\'</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">users</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  \n  <span class="token comment">// GET 可省略</span>\n  <span class="token string-property property">\'/api/users/1\'</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n  <span class="token comment">// 支持自定义函数，API 参考 express@4,可完成业务</span>\n  <span class="token string-property property">\'POST /api/users/create\'</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">\'OK\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>当客户端（浏览器）发送请求，如：<code>GET /api/users</code>，那么本地启动的 <code>umi dev</code> 会跟此配置文件匹配请求路径以及方法，如果匹配到了，就会将请求通过配置处理，就可以像样例一样，你可以直接返回数据</p>\n<p><a href="http://mockjs.com/" target="_blank" rel="noopener noreferrer">Mock.js<ExternalLinkIcon/></a> 辅助生成自然且多条数据</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">import</span> Mock <span class="token keyword">from</span> <span class="token string">\'mockjs\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 使用 mockjs 等三方库</span>\n  <span class="token string-property property">\'GET /api/tags\'</span><span class="token operator">:</span> Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token string-property property">\'list|100\'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">\'@city\'</span><span class="token punctuation">,</span> <span class="token string-property property">\'value|1-100\'</span><span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token string-property property">\'type|0-2\'</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>对于整个系统来说，请求接口是复杂并且繁多的，为了处理大量模拟请求的场景，我们通常把每一个数据模型抽象成一个文件，统一放在 <code>mock</code> 的文件夹中，然后他们会自动被引入。</p>\n<p>为了更加真实的模拟网络数据请求，往往需要模拟网络延迟时间，可以通过第三方插件来简化这个问题，如：<a href="https://github.com/nikogu/roadhog-api-doc/blob/master/lib/utils.js#L5" target="_blank" rel="noopener noreferrer">roadhog-api-doc#delay<ExternalLinkIcon/></a>。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> delay <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'roadhog-api-doc\'</span><span class="token punctuation">;</span> <span class="token comment">// 模拟延时</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">delay</span><span class="token punctuation">(</span>\n  <span class="token punctuation">{</span>\n    <span class="token comment">// 支持值为 Object 和 Array</span>\n    <span class="token string-property property">\'/umi/goods\'</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">\'韭菜\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">\'西红柿\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token number">2000</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//延时</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>介权</p>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token comment">//mock/auth</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token string-property property">\'POST /umi/login\'</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> username<span class="token punctuation">,</span> password <span class="token punctuation">}</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>username <span class="token operator">===</span> <span class="token string">\'alex\'</span> <span class="token operator">&amp;&amp;</span> password <span class="token operator">===</span> <span class="token string">\'alex123\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">err</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">\'成功\'</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">currentAuthority</span><span class="token operator">:</span> <span class="token string">\'user\'</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>username <span class="token operator">===</span> <span class="token string">\'admin\'</span> <span class="token operator">&amp;&amp;</span> password <span class="token operator">===</span> <span class="token string">\'admin123\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">err</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">\'成功\'</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">currentAuthority</span><span class="token operator">:</span> <span class="token string">\'admin\'</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">err</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">\'失败\'</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>分页</p>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token comment">//查分页</span>\n<span class="token comment">//指定页数范围内显示全数据，超过只显示两条</span>\n<span class="token string-property property">\'GET /umi/list\'</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> _page <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> _limit <span class="token operator">=</span> <span class="token number">3</span> <span class="token punctuation">}</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> totalPage <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">//设定总页数</span>\n  <span class="token keyword">const</span> lastPageLimit <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">//设定尾页条数</span>\n  <span class="token keyword">const</span> total <span class="token operator">=</span> _limit <span class="token operator">*</span> <span class="token punctuation">(</span>totalPage <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> lastPageLimit<span class="token punctuation">;</span> <span class="token comment">//计算总条数</span>\n\n  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      _page<span class="token punctuation">,</span>\n      _limit<span class="token punctuation">,</span>\n      total<span class="token punctuation">,</span>\n      <span class="token comment">//控制data键，后面数组的条数</span>\n      <span class="token operator">...</span>Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">data|</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>_page <span class="token operator">>=</span> totalPage <span class="token operator">?</span> lastPageLimit <span class="token operator">:</span> _limit<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span>\n            <span class="token string-property property">\'id|+1\'</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n            <span class="token literal-property property">create_at</span><span class="token operator">:</span> <span class="token string">\'@date("yyyy-MM-dd HH:mm:ss")\'</span><span class="token punctuation">,</span>\n            <span class="token string-property property">\'type_str|1\'</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n              <span class="token string">\'中转费明细\'</span><span class="token punctuation">,</span>\n              <span class="token string">\'调整单明细\'</span><span class="token punctuation">,</span>\n              <span class="token string">\'代收到付明细\'</span><span class="token punctuation">,</span>\n              <span class="token string">\'客户运费明细\'</span><span class="token punctuation">,</span>\n              <span class="token string">\'导入失败记录\'</span><span class="token punctuation">,</span>\n            <span class="token punctuation">]</span><span class="token punctuation">,</span>\n            <span class="token function-variable function">name</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              <span class="token keyword">return</span> <span class="token punctuation">[</span>\n                Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token string">\'@datetime("MMdd")\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n                Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token string">\'@county()\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n                <span class="token keyword">this</span><span class="token punctuation">.</span>operator<span class="token punctuation">,</span>\n              <span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">\'-\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'http://xxx/shop/quotation/导入失败列表.xlsx\'</span><span class="token punctuation">,</span>\n            <span class="token literal-property property">operator</span><span class="token operator">:</span> <span class="token string">\'@cname\'</span><span class="token punctuation">,</span>\n            <span class="token string-property property">\'status|1\'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'0\'</span><span class="token punctuation">,</span> <span class="token string">\'1\'</span><span class="token punctuation">,</span> <span class="token string">\'2\'</span><span class="token punctuation">,</span> <span class="token string">\'3\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br></div></div><p>增删改</p>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token comment">//增</span>\n<span class="token string-property property">\'POST /umi/list\'</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>\n    Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token string-property property">\'data|1\'</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n          <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span>req<span class="token punctuation">.</span>body<span class="token punctuation">,</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">\'成功\'</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span>\n          <span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n          <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">\'失败\'</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n<span class="token comment">//删</span>\n<span class="token string-property property">\'DELETE /umi/list/:id\'</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>\n    Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token string-property property">\'data|1\'</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n          <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">task_id</span><span class="token operator">:</span> <span class="token string">\'123\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">\'成功\'</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span>\n          <span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n          <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">\'失败\'</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n  \n<span class="token comment">//改</span>\n<span class="token string-property property">\'PATCH /umi/list/:id\'</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>\n    Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token string-property property">\'data|1\'</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n          <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span>req<span class="token punctuation">.</span>body <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">\'成功\'</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span>\n          <span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n          <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">\'失败\'</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br></div></div><h3 id="_02-数据模拟-json-server" tabindex="-1"><a class="header-anchor" href="#_02-数据模拟-json-server" aria-hidden="true">#</a> 02 |  数据模拟 json-server</h3>\n<p>一款第三方模拟服务器和数据的包，支持json文件存本地被修改，自动生成resut风格可操作的接口，有效的CURD操作，对数据要求高时，推荐使用</p>\n<h3 id="_03-反向代理" tabindex="-1"><a class="header-anchor" href="#_03-反向代理" aria-hidden="true">#</a> 03 | 反向代理</h3>\n<p>工作中前后端是分离式开发，需要访问本地或者线上真实服务器时，跨域也成了每个前端工程师都需要了解的基本知识，解决方案有前端或者后端开发人员来解决</p>\n<p>在 UMI3 中配置<code>config/config</code>的proxy键，接受一个对象，可单独做一个模块到<code>config/proxy</code>，并暴露出来</p>\n<div class="language-tsx ext-tsx line-numbers-mode"><pre v-pre class="language-tsx"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token string-property property">\'/api/\'</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 要代理的真实服务器地址</span>\n    target<span class="token operator">:</span> <span class="token string">\'https://localhost:9001\'</span><span class="token punctuation">,</span>\n    <span class="token comment">// 配置了这个可以从 http 代理到 https</span>\n    https<span class="token operator">:</span><span class="token boolean">true</span>\n    <span class="token comment">// 依赖 origin 的功能可能需要这个，比如 cookie</span>\n    changeOrigin<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    pathRewrite<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">\'^/api\'</span><span class="token operator">:</span> <span class="token string">\'\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">//路径替换</span>\n  <span class="token punctuation">}</span> \n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="_04-fetch请求" tabindex="-1"><a class="header-anchor" href="#_04-fetch请求" aria-hidden="true">#</a> 04 |  fetch请求</h3>\n<p>fetch是原生的数据请求方法，返回promise</p>\n<div class="language-tsx ext-tsx line-numbers-mode"><pre v-pre class="language-tsx"><code><span class="token keyword">const</span> <span class="token function-variable function">getData</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token comment">//let res = await fetch(\'/umi/goods/home?_limit=3\'); </span>\n\t\t<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>\n    <span class="token string">\'/umi/login\'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n      method<span class="token operator">:</span><span class="token string">\'post\'</span><span class="token punctuation">,</span>\n      headers<span class="token operator">:</span><span class="token punctuation">{</span><span class="token string-property property">"Content-type"</span><span class="token operator">:</span><span class="token string">"application/x-www-form-urlencoded"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n      body<span class="token operator">:</span><span class="token string">\'username=alex&amp;password=alex123\'</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token keyword">await</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="_05-umi-request请求" tabindex="-1"><a class="header-anchor" href="#_05-umi-request请求" aria-hidden="true">#</a> 05 |  umi-request请求</h3>\n<p>通过 <code>import { request } from \'umi\';</code> 你可以使用内置的请求方法。第一个参数是 url，第二个参数是请求的 options。options 具体格式参考 <a href="https://github.com/umijs/umi-request/blob/master/README_zh-CN.md" target="_blank" rel="noopener noreferrer">umi-request<ExternalLinkIcon/></a>，也和axios用法基本一致</p>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token keyword">const</span> <span class="token function-variable function">getData</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token string">\'/umi/goods\'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">params</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">_limit</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token comment">// let res = await request(\'/api/goods/home\',{params:{_limit:1}})</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="_06-userequest请求" tabindex="-1"><a class="header-anchor" href="#_06-userequest请求" aria-hidden="true">#</a> 06 |  useRequest请求</h3>\n<p>useRequest 是最佳实践中内置的一个 Hook ，默认对数据要求必须返回一个data字段，如果不希望有此限定，可以构建时配置一下<code>config/config</code></p>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token literal-property property">request</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">dataField</span><span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>在组件初次加载时， 自动触发该函数执行。同时 useRequest 会自动管理异步请求的 <code>loading</code> , <code>data</code> , <code>error</code> 等状态。</p>\n<div class="language-tsx ext-tsx line-numbers-mode"><pre v-pre class="language-tsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>useRequest<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'umi\'</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span>  <span class="token function">RequestHooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\n  <span class="token comment">// 用法 1</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> data<span class="token punctuation">,</span> error<span class="token punctuation">,</span> loading <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useRequest</span><span class="token punctuation">(</span><span class="token string">\'/umi/goods\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t<span class="token comment">// 用法 2</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> data<span class="token punctuation">,</span> error<span class="token punctuation">,</span> loading <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useRequest</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    url<span class="token operator">:</span> <span class="token string">\'/umi/goods\'</span><span class="token punctuation">,</span>\n    params<span class="token operator">:</span><span class="token punctuation">{</span>_limit<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t<span class="token comment">// 用法 4</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> data<span class="token punctuation">,</span> loading<span class="token punctuation">,</span> run <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useRequest</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_limit<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n    url<span class="token operator">:</span> <span class="token string">\'/umi/goods\'</span><span class="token punctuation">,</span>\n    params<span class="token operator">:</span> <span class="token punctuation">{</span> _limit <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    manual<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//手动通过运行run触发</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  \n  <span class="token comment">// 轮询</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> data<span class="token punctuation">,</span> loading<span class="token punctuation">,</span> run <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useRequest</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_limit<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n    url<span class="token operator">:</span> <span class="token string">\'/umi/goods\'</span><span class="token punctuation">,</span>\n    params<span class="token operator">:</span> <span class="token punctuation">{</span> _limit <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    manual<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//手动通过运行run触发</span>\n    pollingInterval<span class="token operator">:</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token comment">//轮询 一秒读一次</span>\n    pollingWhenHidden<span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment">//屏幕不可见时，暂停轮询</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  \n  <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">failed to load</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>loading<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">loading...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">{</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token function">run</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">手动</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br></div></div><h6 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a> </h6>\n<h2 id="模块四-状态管理" tabindex="-1"><a class="header-anchor" href="#模块四-状态管理" aria-hidden="true">#</a> 模块四 ：状态管理</h2>\n<h3 id="_01-dva-介绍" tabindex="-1"><a class="header-anchor" href="#_01-dva-介绍" aria-hidden="true">#</a> 01｜dva 介绍</h3>\n<p>dva 首先是一个基于 <a href="https://github.com/reduxjs/redux" target="_blank" rel="noopener noreferrer">redux<ExternalLinkIcon/></a> 和 <a href="https://github.com/redux-saga/redux-saga" target="_blank" rel="noopener noreferrer">redux-saga<ExternalLinkIcon/></a> 的数据流方案，被umi以插件的方式内置，无需安装直接使用，在原有redux使用基础上更加简化和高效</p>\n<p>dva里面有关状态管理（数据流）的角色和redux的对比如下</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>redux</th>\n<th>dva</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>状态数据</td>\n<td>state</td>\n<td>state</td>\n</tr>\n<tr>\n<td>行为描述</td>\n<td>action</td>\n<td>action</td>\n</tr>\n<tr>\n<td>无副作用业务</td>\n<td>reducer</td>\n<td>reducer</td>\n</tr>\n<tr>\n<td>有副作用业务</td>\n<td>creators</td>\n<td>effect</td>\n</tr>\n<tr>\n<td>通讯请求修改状态函数</td>\n<td>dispatch</td>\n<td>dispatch</td>\n</tr>\n<tr>\n<td>通讯请求获取状态函数</td>\n<td>connect</td>\n<td>connect</td>\n</tr>\n<tr>\n<td>从 <strong>源</strong> 获取数据</td>\n<td>无</td>\n<td>subscription</td>\n</tr>\n</tbody>\n</table>\n<p>[^状态数据]:  javascript 对象，存公共状态的仓库\n[^行为描述]: javascript 对象，必须带有 <code>type</code> 属性指明具体的行为，其它字段可以自定义\n<a href="%E5%8F%91%E9%80%81action%E7%BB%99reducers">^dispatch</a>: 用于触发 action 的函数\n[^无副作用业务]: 一个纯函数，处理公共状态时的一些同步业务\n[^有副作用业务]: 处理公共状态时的一些异步业务\n[^connect]: 连接状态仓库state，把数据流向组件页面</p>\n<h3 id="_02-数据流向" tabindex="-1"><a class="header-anchor" href="#_02-数据流向" aria-hidden="true">#</a> 02 | 数据流向</h3>\n<p>数据的改变发生通常是通过用户交互行为或者浏览器行为（如路由跳转等）触发的，当此类行为会改变数据的时候可以通过 <code>dispatch</code> 发起一个 action，如果是同步行为会直接通过 <code>Reducers</code> 改变 <code>State</code> ，如果是异步行为（副作用）会先触发 <code>Effects</code> 然后流向 <code>Reducers</code> 最终改变 <code>State</code> ，最后<code>State</code>的数据再流回组件页面</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="dva数据流" originSrc="https://zos.alipayobjects.com/rmsportal/PPrerEAKbIoDZYr.png" data="aurora"></p>\n<p>定义一个dva的Model如下：</p>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">namespace</span><span class="token operator">:</span><span class="token string">\'Model名\'</span>，<span class="token comment">//省略不写，认定文件名为Model名</span>\n  <span class="token literal-property property">state</span><span class="token operator">:</span><span class="token punctuation">{</span>公共状态数据<span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">reducers</span><span class="token operator">:</span><span class="token punctuation">{</span>一堆纯函数<span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">effects</span><span class="token operator">:</span><span class="token punctuation">{</span>一堆异步副作用函数<span class="token punctuation">}</span>\n\t<span class="token literal-property property">subscription</span><span class="token operator">:</span><span class="token punctuation">{</span>一堆监听函数<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="_03-全局数据-页面数据获取和修改" tabindex="-1"><a class="header-anchor" href="#_03-全局数据-页面数据获取和修改" aria-hidden="true">#</a> 03 | 全局数据&amp;页面数据获取和修改</h3>\n<p>全局数据定义在<code>src/models/XX</code>，所有页面都可以访问，同步业务的处理交给reducers</p>\n<div class="language-JSX ext-JSX line-numbers-mode"><pre v-pre class="language-JSX"><code>import { history, request } from \'umi\';\nimport key from \'keymaster\';\n\nexport default {\n  \n  namespace: \'global\',//所有models里面的namespace不能重名\n  \n  //初始化全局数据\n  state: {\n    title:\'全局 title\',\n    text: \'全局text\',\n    login: false,\n    a:\'全局models aaaa\',\n  },\n  \n  //处理同步业务  接收dispatch({type:\'global/setText\',...\n  reducers: {\n    setText(state) {\n      // copy更新并返回\n      return {\n        ...state,\n        text: \'全局设置 后的text\'+Math.random().toFixed(2),\n      };\n    },\n    setTitle(state,action) {//action 接受到的参数\n      return {\n        ...state,\n        title: `全局设置 后的title${action.payload.a}/${action.payload.b}`,\n      };\n    },\n    signin:(state)=&gt;({\n      ...state,\n      login: true,\n    }),\n  },\n  \n};\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><p>组件内部获取和修改全局数据</p>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>connect<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'umi\'</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">组件</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">获取全局 state  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token plain-text">\n\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">text:</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>text<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">title:</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>title<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">a:</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span><span class="token constant">A</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token punctuation">{</span>\n        props<span class="token punctuation">.</span>isLogin <span class="token operator">?</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">已登录</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token operator">:</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">未登录</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n      <span class="token punctuation">}</span><span class="token plain-text">\n\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">修改全局 state</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>\n        <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n          props<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n            <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">\'global/setText\'</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n      <span class="token punctuation">></span></span><span class="token plain-text">\n        修改全局text,不传参\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">\n\n      &lt;button\n        onClick=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n          props<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n            <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">\'global/setTitle\'</span><span class="token punctuation">,</span>\n            <span class="token literal-property property">payload</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token literal-property property">b</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">}</span>\n          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token plain-text">\n      >\n        修改全局text,传参\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token parameter">state</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">//抓取全局,重命名</span>\n  <span class="token literal-property property">text</span><span class="token operator">:</span> state<span class="token punctuation">.</span>global<span class="token punctuation">.</span>text<span class="token punctuation">,</span>\n  <span class="token literal-property property">title</span><span class="token operator">:</span> state<span class="token punctuation">.</span>global<span class="token punctuation">.</span>title<span class="token punctuation">,</span>\n  <span class="token constant">A</span><span class="token operator">:</span> state<span class="token punctuation">.</span>global<span class="token punctuation">.</span>a<span class="token punctuation">,</span>\n  <span class="token literal-property property">isLogin</span><span class="token operator">:</span> state<span class="token punctuation">.</span>global<span class="token punctuation">.</span>login<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>组件<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br></div></div><p>页面数据获取和修改</p>\n<p>页面数据定义在<code>pages/页面目录/model.js</code>或者<code>pages/ 页面目录/models/*.js</code>，当前<code>页面目录</code>只分配一个数据文件时，使用<code>model.js</code>,当前<code>页面目录</code>分配多个数据文件时，使用<code>models/*.js</code></p>\n<p><code>页面目录/*.jsx</code>可访问当前<code>页面目录/model.js</code>及当前<code>页面目录/models/*.js</code>,也可向上访问，但子集<code>页面目录</code>和同级<code>页面目录</code>数据不可访问</p>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token comment">//pages/*/model.js</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">namespace</span><span class="token operator">:</span> <span class="token string">\'dva\'</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token string">\'bmw\'</span><span class="token punctuation">,</span> \n  <span class="token literal-property property">reducers</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token function">setStr</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token string">\'qq\'</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">//pages/*/models/a.js</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">namespace</span><span class="token operator">:</span> <span class="token string">\'a\'</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token string">\'page model a\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>组件内部获取和修改页面数据</p>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>connect<span class="token punctuation">,</span>getDvaApp<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'umi\'</span>\n<span class="token keyword">import</span> Child <span class="token keyword">from</span> <span class="token string">\'./child\'</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">Dva</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">获取页面models</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">model.js里面的数据:</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>dva<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">models目录里面的的数据:</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>a<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">models目录里面的的数据:</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>b<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">/></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">\'</span>title<span class="token punctuation">\'</span></span><span class="token punctuation">></span></span><span class="token plain-text">修改页面model数据</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span>props<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">\'dva/setStr\'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">修改</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token parameter">state</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">//抓取页面级别</span>\n  <span class="token literal-property property">dva</span><span class="token operator">:</span>state<span class="token punctuation">.</span>dva<span class="token punctuation">,</span>\n  <span class="token literal-property property">a</span><span class="token operator">:</span> state<span class="token punctuation">.</span>a<span class="token punctuation">,</span>\n  <span class="token literal-property property">b</span><span class="token operator">:</span> state<span class="token punctuation">.</span>b<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Dva<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">//connect不传参不获取数据，dispatch默认传给组件</span>\n<span class="token comment">//export default connect()(Dva);</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h3 id="_04-异步逻辑处理" tabindex="-1"><a class="header-anchor" href="#_04-异步逻辑处理" aria-hidden="true">#</a> 04 | 异步逻辑处理</h3>\n<p>effects处理异步等一些有副作用的逻辑，如下</p>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> request <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'umi\'</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">namespace</span><span class="token operator">:</span> <span class="token string">\'global\'</span><span class="token punctuation">,</span><span class="token comment">//所有models里面的namespace不能重名</span>\n  <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">login</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">reducers</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token comment">//处理同步 左key 接收dispatch({type:key</span>\n    <span class="token function-variable function">signin</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span><span class="token punctuation">{</span>type<span class="token punctuation">,</span>payload<span class="token punctuation">}</span></span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token operator">...</span>state<span class="token punctuation">,</span>\n      <span class="token literal-property property">login</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//payload.实际数据决定login的值</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">effects</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">//接收来自 dispatch({type:\'global/login\'...</span>\n    <span class="token operator">*</span><span class="token function">login</span><span class="token punctuation">(</span><span class="token parameter">action<span class="token punctuation">,</span> <span class="token punctuation">{</span> call<span class="token punctuation">,</span> put<span class="token punctuation">,</span> select <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">call</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">\'/umi/login\'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">method</span><span class="token operator">:</span><span class="token string">\'post\'</span><span class="token punctuation">,</span><span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">username</span><span class="token operator">:</span>action<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>username<span class="token punctuation">,</span><span class="token literal-property property">password</span><span class="token operator">:</span>action<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>password<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token keyword">yield</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">\'signin\'</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">payload</span><span class="token operator">:</span>data\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>[^put]: 发出一个 Action，给reducers\n[^select]: 从state里获取数据,如<code>const todos = yield select(state =&gt; state.todos)</code>\n[^yield]: 状态机语法，类似await，同步书写异步代码\n[^action]: 可获取发送请求时的类型，携带的负载</p>\n<h3 id="_05-丢弃connect高阶组件-转投hooks" tabindex="-1"><a class="header-anchor" href="#_05-丢弃connect高阶组件-转投hooks" aria-hidden="true">#</a> 05 | 丢弃connect高阶组件，转投hooks</h3>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useDispatch<span class="token punctuation">,</span> useSelector <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'umi\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">组件</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> dispatch <span class="token operator">=</span> <span class="token function">useDispatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> dva <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useSelector</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">dva</span><span class="token operator">:</span> state<span class="token punctuation">.</span>dva <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">子组件3</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>dva<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n        &lt;button\n          onClick=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n            <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">\'global/setTitle\'</span><span class="token punctuation">,</span> <span class="token literal-property property">payload</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">22</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token plain-text">\n        >\n          修改全局model\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> 组件<span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h3 id="_06-subscriptions-源-获取" tabindex="-1"><a class="header-anchor" href="#_06-subscriptions-源-获取" aria-hidden="true">#</a> 06 | subscriptions <strong>源</strong> 获取</h3>\n<p>订阅一个数据“源”的变化，使用场景如：服务器的 websocket 连接、keyboard 输入、geolocation 变化、history 路由变化</p>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token keyword">import</span> key <span class="token keyword">from</span> <span class="token string">\'keymaster\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">namespace</span><span class="token operator">:</span> <span class="token string">\'global\'</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">subscriptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token function">listenRoute</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> dispatch<span class="token punctuation">,</span>history<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      history<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> pathname<span class="token punctuation">,</span> query <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'global subscriptions\'</span><span class="token punctuation">,</span>pathname<span class="token punctuation">,</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function">listenKeyboard</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>dispatch<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//监听键盘</span>\n      <span class="token function">key</span><span class="token punctuation">(</span><span class="token string">\'⌘+i, ctrl+i\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">\'setText\'</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function">listenResize</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>dispatch<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//监听窗口变化</span>\n      window<span class="token punctuation">.</span><span class="token function-variable function">onresize</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'onresize\'</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function">listenScroll</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>dispatch<span class="token punctuation">,</span>history<span class="token punctuation">}</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n      window<span class="token punctuation">.</span><span class="token function-variable function">onscroll</span><span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'onscroll\'</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h2 id="模块五-运行时配置" tabindex="-1"><a class="header-anchor" href="#模块五-运行时配置" aria-hidden="true">#</a> 模块五 ：运行时配置</h2>\n<p>构建时配置<code>config/config</code>能覆盖大量场景，但有一些却是编译时很难触及的。</p>\n<p>比如：</p>\n<ul>\n<li>在出错时显示个 message 提示用户</li>\n<li>在加载和路由切换时显示个 loading</li>\n<li>页面载入完成时请求后端，根据响应动态修改路由</li>\n</ul>\n<p>运行时配置和构建时配置的区别是他跑在浏览器端，基于此，我们可以在这里写函数、jsx、import 浏览器端依赖等等，注意不要引入 node 依赖。</p>\n<p><strong>配置方式</strong></p>\n<p>约定 <code>src/app.jsx</code> 定义并暴露一些固定名称的函数，他们会在浏览器端择机运行，全局执行一些业务</p>\n<h3 id="_01-渲染前的权限校验" tabindex="-1"><a class="header-anchor" href="#_01-渲染前的权限校验" aria-hidden="true">#</a> 01 | 渲染前的权限校验</h3>\n<p>render函数， 用于改写把整个应用 render 到 dom 树里， 覆写 render，接受一个 oldRender 函数，最后用 oldRender 来渲染dom， 需至少被调用一次</p>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">render</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">oldRender</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> isLogin<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token string">\'/umi/auth\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isLogin<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">\'/login\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// oldRender， Function，原始 rende}r 方法，需至少被调用一次</span>\n  <span class="token function">oldRender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>  \n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token comment">//mock/auth  </span>\n<span class="token string-property property">\'GET /umi/auth\'</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">isLogin</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_02-动态路由读取、添加" tabindex="-1"><a class="header-anchor" href="#_02-动态路由读取、添加" aria-hidden="true">#</a> 02 | 动态路由读取、添加</h3>\n<p><code>patchRoutes</code>函数提供了在运行时，动态修改路由的入口，一般可以和<code>render</code>函数配合， 请求服务端根据响应动态更新路由</p>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">patchRoutes</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> routes <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token comment">//routes为当前路由</span>\n  routes<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/foo\'</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">exact</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'@/pages/foo\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>需要注意的地方是：</p>\n<ul>\n<li>动态路由的<code>compnent</code>要的是一个组件不是一段地址，可通过require引入</li>\n<li>动态路由读取后，跳转后不显示，需要关闭mfsu: {}</li>\n<li>子路由不跳转，除了layout组件，其他需要添加exact，构建时的配置在编译后都会自动加，而动态路由如果路由数据没有exact会导致不跳转</li>\n<li>数据数据里面不可以有require，数据需要过滤，require(非空字符拼接+变量)</li>\n<li>document.ejs报错，需要require拼接时找到index.jsx 目前umi3有这个问题</li>\n</ul>\n<p>模拟路由数据</p>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token comment">//mock/auth</span>\n\n<span class="token string-property property">\'GET /umi/menus\'</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/\'</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">\'layouts/layout1\'</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span>\n            <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">\'资源引入\'</span><span class="token punctuation">,</span>\n            <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/resources\'</span><span class="token punctuation">,</span>\n            <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">\'pages/css-img\'</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/less\'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">\'pages/less\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">{</span>\n            <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/goods\'</span><span class="token punctuation">,</span>\n            <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">\'layouts/layout2\'</span><span class="token punctuation">,</span>\n            <span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n              <span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/goods/:id?\'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">\'pages/goods/goods-detail\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n              <span class="token punctuation">{</span>\n                <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/goods/:id/comment\'</span><span class="token punctuation">,</span>\n                <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">\'pages/goods/comment\'</span><span class="token punctuation">,</span>\n              <span class="token punctuation">}</span><span class="token punctuation">,</span>\n              <span class="token punctuation">{</span>\n                <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/goods/:id/comment/:cid\'</span><span class="token punctuation">,</span>\n                <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">\'pages/goods/comment/comment-detail\'</span><span class="token punctuation">,</span>\n              <span class="token punctuation">}</span><span class="token punctuation">,</span>\n              <span class="token punctuation">{</span> <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">\'pages/404\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token punctuation">]</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/data-interaction\'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">\'pages/data-interaction\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/dva\'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">\'pages/dva\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/antd\'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">\'pages/antd\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/hooks\'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">\'pages/hooks\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">{</span>\n            <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/user\'</span><span class="token punctuation">,</span>\n            <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">\'pages/user\'</span><span class="token punctuation">,</span>\n            <span class="token literal-property property">wrappers</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'wrappers/auth\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n          <span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">\'/\'</span><span class="token punctuation">,</span> <span class="token literal-property property">redirect</span><span class="token operator">:</span> <span class="token string">\'/antd\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">{</span> <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">\'pages/404\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span> <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">\'pages/404\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br></div></div><p>读取路由数据并添加路由：</p>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token comment">//src/app</span>\n\n<span class="token keyword">let</span> routesData <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//模块变量用来存储路由数据</span>\n\n<span class="token comment">//render函数里面读取路由数据</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">render</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">oldRender</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> isLogin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">http</span><span class="token punctuation">(</span><span class="token string">\'/umi/auth\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>isLogin<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//获取路由数据</span>\n    routesData <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">http</span><span class="token punctuation">(</span><span class="token string">\'/umi/menus\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">\'/login\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">oldRender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">patchRoutes</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> routes <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">filterRoutes</span><span class="token punctuation">(</span>routesData<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//处理数据，添加exact，指定index.js,拼接require</span>\n  routesData<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> routes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//动态添加路由</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">filterRoutes</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">routesData</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  routesData<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    \n    <span class="token comment">//exact处理</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>routes <span class="token operator">&amp;&amp;</span> item<span class="token punctuation">.</span>routes<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">filterRoutes</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>routes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//含 routes键的需要递归处理</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      item<span class="token punctuation">.</span>exact <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//不含routes键的都添加exact</span>\n    <span class="token punctuation">}</span>\n    \n    <span class="token comment">//component地址拼接处理</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>item<span class="token punctuation">.</span>redirect<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//不处理带有redirect字段</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>component<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">\'404\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//404没有index文件结构</span>\n        item<span class="token punctuation">.</span>component <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'@/\'</span> <span class="token operator">+</span> item<span class="token punctuation">.</span>component <span class="token operator">+</span> <span class="token string">\'.jsx\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token comment">//其他页面都指向index结构，避免umi3的document.ejs报错</span>\n        item<span class="token punctuation">.</span>component <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'@/\'</span> <span class="token operator">+</span> item<span class="token punctuation">.</span>component <span class="token operator">+</span> <span class="token string">\'/index.jsx\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n     \t<span class="token comment">//部分需要授权路由的拼接</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>wrappers <span class="token operator">&amp;&amp;</span> item<span class="token punctuation">.</span>wrappers<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        item<span class="token punctuation">.</span>wrappers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n          item<span class="token punctuation">.</span>wrappers<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'@/\'</span> <span class="token operator">+</span> str <span class="token operator">+</span> <span class="token string">\'.jsx\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br></div></div><h3 id="_03-路由监听-埋点统计" tabindex="-1"><a class="header-anchor" href="#_03-路由监听-埋点统计" aria-hidden="true">#</a> 03 | 路由监听，埋点统计</h3>\n<p><code>onRouteChange</code>函数内部可以设置，在初始加载和路由切换时做一些事情，比如埋点，设置动态标题等操作</p>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">onRouteChange</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> matchedRoutes<span class="token punctuation">,</span> location<span class="token punctuation">,</span> routes<span class="token punctuation">,</span> action <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">//动态设置标题</span>\n  document<span class="token punctuation">.</span>title <span class="token operator">=</span> matchedRoutes<span class="token punctuation">[</span>matchedRoutes<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>route<span class="token punctuation">.</span>title <span class="token operator">||</span> <span class="token string">\'默认标题\'</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>[^location]: history 提供的 location 对象\n[^routes]: 路由集合\n[^action]: <code>PUSH|POP|REPLACE|undefined</code>，初次加载时为 <code>undefined</code></p>\n<h3 id="_04-拦截器" tabindex="-1"><a class="header-anchor" href="#_04-拦截器" aria-hidden="true">#</a> 04 | 拦截器</h3>\n<p>umi内置的request和useRequest在发送请求之前和数据返回后，可以做一些通用的配置业务，这个时候考虑配置拦截器，参考<a href="https://umijs.org/zh-CN/plugins/plugin-request#%E8%BF%90%E8%A1%8C%E6%97%B6%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener noreferrer">插件配置<ExternalLinkIcon/></a></p>\n<div class="language-jsx ext-jsx line-numbers-mode"><pre v-pre class="language-jsx"><code><span class="token keyword">export</span> <span class="token keyword">const</span> request <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">requestInterceptors</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token comment">// 请求地址 配置项</span>\n      options<span class="token punctuation">.</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">token</span><span class="token operator">:</span><span class="token string">\'..\'</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">;</span>\n      <span class="token keyword">return</span> <span class="token punctuation">{</span> url<span class="token punctuation">,</span> options <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">responseInterceptors</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="结束语" tabindex="-1"><a class="header-anchor" href="#结束语" aria-hidden="true">#</a> 结束语</h2>\n<h3 id="结束语-未来愉快替代create-react-app-开发" tabindex="-1"><a class="header-anchor" href="#结束语-未来愉快替代create-react-app-开发" aria-hidden="true">#</a> 结束语 | 未来愉快替代create-react-app 开发</h3>\n<p>umi3框架到这里就告一段落了，一般适合开发一些h5端的各类web应用，如果考虑开发中台管理系统，推荐去看看蚂蚁系还提供了antd-pro框架</p>\n',date:"2022-06-12",deps:[],hoistedTags:[],links:[],pathInferred:"/react/2022/20220612.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"20220612",filePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/react/2022/20220612.md",filePathRelative:"react/2022/20220612.md",componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/react/2022/20220612.html.vue",componentFilePathRelative:"pages/react/2022/20220612.html.vue",componentFileChunkName:"v-3c65068c",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/react/2022/20220612.html.js",dataFilePathRelative:"pages/react/2022/20220612.html.js",dataFileChunkName:"v-3c65068c",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/react/2022/20220612.html",htmlFilePathRelative:"react/2022/20220612.html"},{data:{key:"v-a4ce4834",path:"/vue/2022/20220325.html",title:"尤雨溪强势推荐的Pinia",lang:"zh-CN",frontmatter:{title:"尤雨溪强势推荐的Pinia",date:"2022-03-25T00:00:00.000Z",tags:["vue"],categories:["vue"]},excerpt:"",headers:[{level:2,title:"Pinia 基本使用",slug:"pinia-基本使用",children:[]},{level:2,title:"解构store",slug:"解构store",children:[{level:3,title:"ES传统方式解构(能获取到值，但是不具有响应性)",slug:"es传统方式解构-能获取到值-但是不具有响应性",children:[]},{level:3,title:"Pinia解构方法：storeToRefs",slug:"pinia解构方法-storetorefs",children:[]}]},{level:2,title:"Pinia修改数据状态",slug:"pinia修改数据状态",children:[{level:3,title:"简单数据修改",slug:"简单数据修改",children:[]},{level:3,title:"多条数据修改",slug:"多条数据修改",children:[]},{level:3,title:"通过action修改",slug:"通过action修改",children:[]}]},{level:2,title:"Pinia中的Getters",slug:"pinia中的getters",children:[]},{level:2,title:"store之间的相互调用",slug:"store之间的相互调用",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],git:{updatedTime:null,contributors:[]}},key:"v-a4ce4834",path:"/vue/2022/20220325.html",title:"尤雨溪强势推荐的Pinia",lang:"zh-CN",frontmatter:{title:"尤雨溪强势推荐的Pinia",date:"2022-03-25T00:00:00.000Z",tags:["vue"],categories:["vue"]},excerpt:"",headers:[{level:2,title:"Pinia 基本使用",slug:"pinia-基本使用",children:[]},{level:2,title:"解构store",slug:"解构store",children:[{level:3,title:"ES传统方式解构(能获取到值，但是不具有响应性)",slug:"es传统方式解构-能获取到值-但是不具有响应性",children:[]},{level:3,title:"Pinia解构方法：storeToRefs",slug:"pinia解构方法-storetorefs",children:[]}]},{level:2,title:"Pinia修改数据状态",slug:"pinia修改数据状态",children:[{level:3,title:"简单数据修改",slug:"简单数据修改",children:[]},{level:3,title:"多条数据修改",slug:"多条数据修改",children:[]},{level:3,title:"通过action修改",slug:"通过action修改",children:[]}]},{level:2,title:"Pinia中的Getters",slug:"pinia中的getters",children:[]},{level:2,title:"store之间的相互调用",slug:"store之间的相互调用",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],content:"\r\n::: tip\r\n\r\nPinia是一个全新的Vue状态管理库，是Vuex的代替者，尤雨溪强势推荐\r\n\r\n1. Vue2 和 Vue3 都能支持\r\n2. 抛弃传统的 `Mutation` ，只有 `state, getter` 和 `action` ，简化状态管理库\r\n3. 不需要嵌套模块，符合 Vue3 的 Composition api，让代码扁平化\r\n4. TypeScript支持\r\n5. 代码简介，很好的代码自动分割\r\n\r\n:::\r\n\r\n## Pinia 基本使用\r\n\r\n**初始化项目：** `npm init vite@latest`\r\n\r\n**安装Pinia:** `npm i pinia`\r\n\r\n**挂载Pinia**\r\n\r\n![全局挂载Pinia](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8c8d5e3fde9b40c49963bff8bb80cb66~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp)\r\n\r\n**创建Store**\r\n\r\n![pinia-创建store](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/150f6a3d42994269b5125270992b4801~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp)\r\n\r\n**使用Store**\r\n\r\n![pinia-使用Store](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/620b9847427f4732a3dcdcd7d70be862~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp)\r\n\r\n## 解构store\r\n\r\n当store中的多个参数需要被使用到的时候，为了更简洁的使用这些变量，我们通常采用结构的方式一次性获取所有的变量名\r\n\r\n### ES传统方式解构(能获取到值，但是不具有响应性)\r\n\r\n![pinia-ES传统方式解构Store](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f080f0d53a054a67b54878d3d0791f2d~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp)\r\n\r\n### Pinia解构方法：storeToRefs\r\n\r\n![pinia-storeToRefs解构Store](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/821275676927405188b9be39b05806c8~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp)\r\n\r\n## Pinia修改数据状态\r\n\r\n### 简单数据修改\r\n\r\n简单数据直接通过在方法中操作 `store.属性名` 来修改\r\n\r\n![pinia-简单数据修改](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6d5c183112c5482db4cf6ee0bd181d5b~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp)\r\n\r\n### 多条数据修改\r\n\r\n通过基础数据修改方式去修改多条数据也是可行的，但是在 `pinia` 官网中，已经明确表示`$patch` 的方式是经过优化的，会加快修改速度，对性能有很大好处，所以在进行多条数据修改的时候，更推荐使用 `$patch`\r\n\r\n`$patch` 方法可以接受两个类型的参数，函数 和 对象\r\n\r\n- **$patch + 对象**\r\n- **$patch + 函数：** 通过函数方式去使用的时候，函数接受一个 state 的参数，state 就是 store 仓库中的 state\r\n\r\n![pinia-多条数据修改](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cd7ff1a198d04b179562d51b95f296da~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp)\r\n\r\n### 通过action修改\r\n\r\n- Store.actions中添加 `changeState` 方法\r\n\r\n  ![pinia-多条数据修改action_store](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c5040c61df2b43798aae25663fb471a6~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp)\r\n\r\n- 组件方法调用 `store.方法名`\r\n\r\n  ![pinia-多条数据修改action_components](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/158c352fbfba40bb8284480d01b6af19~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp)\r\n\r\n## Pinia中的Getters\r\n\r\nPinia 中的 getter 和 Vue 中的计算属性几乎一样，在获取 State值之前做一些逻辑处理\r\n\r\n1. getter 中的值有缓存特性，如果值没有改变，多次使用也只会调用一次\r\n\r\n   - 添加 getter方法\r\n\r\n   ![pinia-添加getter](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d0d1fa3b3d3c4d248e7840daab479598~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp)\r\n\r\n   - 组件内多次调用\r\n\r\n   ![pinia-getter基本使用](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c3dfc0ffba6c48448c1e1fc24ecac234~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp)\r\n\r\n   ![image-20220313194548932](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2d890aff47884bb69a9709562740e87d~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp)\r\n\r\n2. getter 中不仅可以传递 `state` 直接改变数据状态，还可以使用 `this` 来改变数据\r\n\r\n   ![pinia-this方式添加getter](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e6d2dcd2a6664e959c4090af96155a24~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp)\r\n\r\n## store之间的相互调用\r\n\r\n在 Pinia 中，可以在一个 `store` 中 `import` 另外一个 `store` ，然后通过调用引入 store 方法的形式，获取引入 `store` 的状态\r\n\r\n- 新建 store\r\n\r\n![pinia-新建store](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7c9eef2dddc64924b0f60c90160f2abb~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp)\r\n\r\n- 在原 store 中引入 allanStore，并获取 `moveList`\r\n\r\n![pinia-store互相引用](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/effd4216b8a24d01814bb80af2d2a515~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp)\r\n\r\n- 组件中使用 `mainStore.getAllanStoreList`\r\n\r\n![image-20220313201156248](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/14d33eb3fede4f1297e8debf1715e223~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp)\r\n\r\n## 总结\r\n\r\n总得来说，Pinia 就是 Vuex 的替代版，可以更好的兼容 Vue2，Vue3以及TypeScript。在Vuex的基础上去掉了 Mutation，只保留了 state, getter和action。Pinia拥有更简洁的语法， 扁平化的代码编排，符合Vue3 的 Composition api",contentRendered:'<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>Pinia是一个全新的Vue状态管理库，是Vuex的代替者，尤雨溪强势推荐</p>\n<ol>\n<li>Vue2 和 Vue3 都能支持</li>\n<li>抛弃传统的 <code>Mutation</code> ，只有 <code>state, getter</code> 和 <code>action</code> ，简化状态管理库</li>\n<li>不需要嵌套模块，符合 Vue3 的 Composition api，让代码扁平化</li>\n<li>TypeScript支持</li>\n<li>代码简介，很好的代码自动分割</li>\n</ol>\n</div>\n<h2 id="pinia-基本使用" tabindex="-1"><a class="header-anchor" href="#pinia-基本使用" aria-hidden="true">#</a> Pinia 基本使用</h2>\n<p><strong>初始化项目：</strong> <code>npm init vite@latest</code></p>\n<p><strong>安装Pinia:</strong> <code>npm i pinia</code></p>\n<p><strong>挂载Pinia</strong></p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="全局挂载Pinia" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8c8d5e3fde9b40c49963bff8bb80cb66~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" data="aurora"></p>\n<p><strong>创建Store</strong></p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="pinia-创建store" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/150f6a3d42994269b5125270992b4801~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" data="aurora"></p>\n<p><strong>使用Store</strong></p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="pinia-使用Store" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/620b9847427f4732a3dcdcd7d70be862~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" data="aurora"></p>\n<h2 id="解构store" tabindex="-1"><a class="header-anchor" href="#解构store" aria-hidden="true">#</a> 解构store</h2>\n<p>当store中的多个参数需要被使用到的时候，为了更简洁的使用这些变量，我们通常采用结构的方式一次性获取所有的变量名</p>\n<h3 id="es传统方式解构-能获取到值-但是不具有响应性" tabindex="-1"><a class="header-anchor" href="#es传统方式解构-能获取到值-但是不具有响应性" aria-hidden="true">#</a> ES传统方式解构(能获取到值，但是不具有响应性)</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="pinia-ES传统方式解构Store" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f080f0d53a054a67b54878d3d0791f2d~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" data="aurora"></p>\n<h3 id="pinia解构方法-storetorefs" tabindex="-1"><a class="header-anchor" href="#pinia解构方法-storetorefs" aria-hidden="true">#</a> Pinia解构方法：storeToRefs</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="pinia-storeToRefs解构Store" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/821275676927405188b9be39b05806c8~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" data="aurora"></p>\n<h2 id="pinia修改数据状态" tabindex="-1"><a class="header-anchor" href="#pinia修改数据状态" aria-hidden="true">#</a> Pinia修改数据状态</h2>\n<h3 id="简单数据修改" tabindex="-1"><a class="header-anchor" href="#简单数据修改" aria-hidden="true">#</a> 简单数据修改</h3>\n<p>简单数据直接通过在方法中操作 <code>store.属性名</code> 来修改</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="pinia-简单数据修改" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6d5c183112c5482db4cf6ee0bd181d5b~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" data="aurora"></p>\n<h3 id="多条数据修改" tabindex="-1"><a class="header-anchor" href="#多条数据修改" aria-hidden="true">#</a> 多条数据修改</h3>\n<p>通过基础数据修改方式去修改多条数据也是可行的，但是在 <code>pinia</code> 官网中，已经明确表示<code>$patch</code> 的方式是经过优化的，会加快修改速度，对性能有很大好处，所以在进行多条数据修改的时候，更推荐使用 <code>$patch</code></p>\n<p><code>$patch</code> 方法可以接受两个类型的参数，函数 和 对象</p>\n<ul>\n<li><strong>$patch + 对象</strong></li>\n<li><strong>$patch + 函数：</strong> 通过函数方式去使用的时候，函数接受一个 state 的参数，state 就是 store 仓库中的 state</li>\n</ul>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="pinia-多条数据修改" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cd7ff1a198d04b179562d51b95f296da~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" data="aurora"></p>\n<h3 id="通过action修改" tabindex="-1"><a class="header-anchor" href="#通过action修改" aria-hidden="true">#</a> 通过action修改</h3>\n<ul>\n<li>\n<p>Store.actions中添加 <code>changeState</code> 方法</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="pinia-多条数据修改action_store" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c5040c61df2b43798aae25663fb471a6~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" data="aurora"></p>\n</li>\n<li>\n<p>组件方法调用 <code>store.方法名</code></p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="pinia-多条数据修改action_components" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/158c352fbfba40bb8284480d01b6af19~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" data="aurora"></p>\n</li>\n</ul>\n<h2 id="pinia中的getters" tabindex="-1"><a class="header-anchor" href="#pinia中的getters" aria-hidden="true">#</a> Pinia中的Getters</h2>\n<p>Pinia 中的 getter 和 Vue 中的计算属性几乎一样，在获取 State值之前做一些逻辑处理</p>\n<ol>\n<li>\n<p>getter 中的值有缓存特性，如果值没有改变，多次使用也只会调用一次</p>\n<ul>\n<li>添加 getter方法</li>\n</ul>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="pinia-添加getter" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d0d1fa3b3d3c4d248e7840daab479598~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" data="aurora"></p>\n<ul>\n<li>组件内多次调用</li>\n</ul>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="pinia-getter基本使用" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c3dfc0ffba6c48448c1e1fc24ecac234~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" data="aurora"></p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20220313194548932" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2d890aff47884bb69a9709562740e87d~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" data="aurora"></p>\n</li>\n<li>\n<p>getter 中不仅可以传递 <code>state</code> 直接改变数据状态，还可以使用 <code>this</code> 来改变数据</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="pinia-this方式添加getter" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e6d2dcd2a6664e959c4090af96155a24~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" data="aurora"></p>\n</li>\n</ol>\n<h2 id="store之间的相互调用" tabindex="-1"><a class="header-anchor" href="#store之间的相互调用" aria-hidden="true">#</a> store之间的相互调用</h2>\n<p>在 Pinia 中，可以在一个 <code>store</code> 中 <code>import</code> 另外一个 <code>store</code> ，然后通过调用引入 store 方法的形式，获取引入 <code>store</code> 的状态</p>\n<ul>\n<li>新建 store</li>\n</ul>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="pinia-新建store" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7c9eef2dddc64924b0f60c90160f2abb~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" data="aurora"></p>\n<ul>\n<li>在原 store 中引入 allanStore，并获取 <code>moveList</code></li>\n</ul>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="pinia-store互相引用" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/effd4216b8a24d01814bb80af2d2a515~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" data="aurora"></p>\n<ul>\n<li>组件中使用 <code>mainStore.getAllanStoreList</code></li>\n</ul>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20220313201156248" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/14d33eb3fede4f1297e8debf1715e223~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" data="aurora"></p>\n<h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2>\n<p>总得来说，Pinia 就是 Vuex 的替代版，可以更好的兼容 Vue2，Vue3以及TypeScript。在Vuex的基础上去掉了 Mutation，只保留了 state, getter和action。Pinia拥有更简洁的语法， 扁平化的代码编排，符合Vue3 的 Composition api</p>\n',date:"2022-03-25",deps:[],hoistedTags:[],links:[],pathInferred:"/vue/2022/20220325.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"20220325",filePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/vue/2022/20220325.md",filePathRelative:"vue/2022/20220325.md",componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/vue/2022/20220325.html.vue",componentFilePathRelative:"pages/vue/2022/20220325.html.vue",componentFileChunkName:"v-a4ce4834",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/vue/2022/20220325.html.js",dataFilePathRelative:"pages/vue/2022/20220325.html.js",dataFileChunkName:"v-a4ce4834",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/vue/2022/20220325.html",htmlFilePathRelative:"vue/2022/20220325.html"},{data:{key:"v-493de946",path:"/vue/2022/20220930.html",title:"大文件分片上传",lang:"zh-CN",frontmatter:{title:"大文件分片上传",date:"2022-09-30T00:00:00.000Z",tags:["vue"],categories:["vue"]},excerpt:"",headers:[],git:{updatedTime:null,contributors:[]}},key:"v-493de946",path:"/vue/2022/20220930.html",title:"大文件分片上传",lang:"zh-CN",frontmatter:{title:"大文件分片上传",date:"2022-09-30T00:00:00.000Z",tags:["vue"],categories:["vue"]},excerpt:"",headers:[],content:"\r\n::: tip\r\n\r\n项目开发中，大文件上传不可避免的因各种原因上传失败，这一篇来讲在 vue 项目中如何分片上传\r\n\r\n:::\r\n\r\n# 代码部分\r\n\r\n需要下载 js-md5，分片上传需要用 md5 \r\n\r\n```js\r\nimport { uploadByPieces } from '@/utils/burst'\r\n\r\n// 上传接口\r\nhandleUploadvideo (options) {\r\n    // 通过上传组件获取到文件的信息，调用分片上传接口\r\n      this.afterRead(options)\r\n},\r\n\r\n// 视频上传\r\n    afterRead (files, code) {\r\n      // uploadByPieces函数由另外的js文件引入\r\n      uploadByPieces({\r\n        files,\r\n        pieceSize: 1,\r\n        concurrent: 2,\r\n        success: this.VideoSuccess,\r\n        error: this.VideoFail\r\n      })\r\n    },\r\n    // 上传视频成功回调\r\n    VideoSuccess ({\r\n      data: {\r\n        data: { url }\r\n      }\r\n    }) {\r\n      this.form.video = url\r\n      console.log(url, '上传成功')\r\n    },\r\n    // 上传失败回调\r\n    VideoFail (res) {\r\n      console.log(res, '失败回调')\r\n    }\r\n```\r\n\r\n```js\r\nburst.js 文件\r\n\r\nimport md5 from 'js-md5' // 引入MD5加密\r\nimport { chunkupload } from '@/pages/busmanagement/children/GroupService.js' // 分片上传接口\r\nimport { concurrentExecution } from './jnxh.js' // 并发文件\r\n/**\r\n * 文件分片上传\r\n * @params file {File} 文件\r\n * @params pieceSize {Number} 分片大小 默认1MB\r\n * @params concurrent {Number} 并发数量 默认2\r\n * @params process {Function} 进度回调函数\r\n * @params success {Function} 成功回调函数\r\n * @params error {Function} 失败回调函数\r\n */\r\nexport const uploadByPieces = ({\r\n  files: { file },\r\n  pieceSize = 1,\r\n  concurrent = 2,\r\n  process,\r\n  success,\r\n  error\r\n}) => {\r\n  // 如果文件传入为空直接 return 返回\r\n  console.log(file)\r\n  if (!file || file.length < 1) {\r\n    return error('文件不能为空')\r\n  }\r\n  let fileMD5 = '' // 总文件列表\r\n  const chunkSize = pieceSize * 1024 * 1024 // 3MB一片\r\n  const chunkCount = Math.ceil(file.size / chunkSize) // 总片数\r\n  const chunkList = [] // 分片列表\r\n  let uploaded = [] // 已经上传的\r\n  // let fileType = '' // 文件类型\r\n  let uploadId = '' // 上传id\r\n  // 获取md5\r\n  /***\r\n     * 获取md5\r\n     **/\r\n  console.log(1111)\r\n  const readFileMD5 = () => {\r\n    // 读取视频文件的md5\r\n    // fileType = file.name.substring(file.name.lastIndexOf('.') + 1, file.name.length)\r\n    const fileRederInstance = new FileReader()\r\n    console.log('file', file)\r\n    fileRederInstance.readAsBinaryString(file)\r\n    fileRederInstance.addEventListener('load', e => {\r\n      const fileBolb = e.target.result\r\n      fileMD5 = md5(fileBolb)\r\n\r\n      const {\r\n        chunk\r\n      } = getChunkInfo(file, 0, chunkSize)\r\n      const chunkInfo = {\r\n        chunk,\r\n        currentChunk: 0,\r\n        chunkCount,\r\n        uploadId\r\n      }\r\n      const uploadData = createUploadData(chunkInfo)\r\n\r\n      chunkupload(uploadData).then(res => {\r\n        const { data: { data } } = res\r\n        if (data.skipUpload) {\r\n          console.log(res, '文件已被上传')\r\n          success(res)\r\n        } else {\r\n          uploadId = data.uploadId\r\n          // 判断是否是断点续传\r\n          if (data.uploaded && data.uploaded.length != 0) {\r\n            uploaded = [].concat(data.uploaded)\r\n          }\r\n          console.log('已上传的分片：' + uploaded)\r\n          // 判断是并发上传或顺序上传\r\n          if (concurrent === 1 || chunkCount === 1) {\r\n            console.log('顺序上传')\r\n            sequentialUplode(0)\r\n          } else {\r\n            console.log('并发上传')\r\n            concurrentUpload()\r\n          }\r\n        }\r\n      }).catch((e) => {\r\n        console.log('文件合并错误')\r\n      })\r\n    })\r\n  }\r\n  /***\r\n     * 获取每一个分片的详情\r\n     **/\r\n  const getChunkInfo = (file, currentChunk, chunkSize) => {\r\n    const start = currentChunk * chunkSize\r\n    const end = Math.min(file.size, start + chunkSize)\r\n    const chunk = file.slice(start, end)\r\n    return {\r\n      start,\r\n      end,\r\n      chunk\r\n    }\r\n  }\r\n  /***\r\n     * 原始上传\r\n     **/\r\n  const uploadChunk = (chunkInfo) => {\r\n    const sd = parseInt((chunkInfo.currentChunk / chunkInfo.chunkCount) * 100)\r\n    console.log(sd, '进度')\r\n    // process(sd)\r\n    console.log(chunkInfo, '分片大小')\r\n    const inde = chunkInfo.currentChunk + 1\r\n    if (uploaded.indexOf(inde + '') > -1) {\r\n      const {\r\n        chunk\r\n      } = getChunkInfo(file, chunkInfo.currentChunk + 1, chunkSize)\r\n      uploadChunk({\r\n        chunk,\r\n        currentChunk: inde,\r\n        chunkCount\r\n      })\r\n    } else {\r\n      const uploadData = createUploadData(chunkInfo)\r\n      console.log(uploadData)\r\n      chunkupload(uploadData).then(res => {\r\n        if (res.errcode == 0) {\r\n          console.log('分片上传成功')\r\n          uploaded.push(chunkInfo.currentChunk + 1)\r\n          // 判断是否全部上传完\r\n          if (uploaded.length == chunkInfo.chunkCount) {\r\n            console.log('全部完成')\r\n            success(res)\r\n            // process(100)\r\n          } else {\r\n            const {\r\n              chunk\r\n            } = getChunkInfo(file, chunkInfo.currentChunk + 1, chunkSize)\r\n            uploadChunk({\r\n              chunk,\r\n              currentChunk: chunkInfo.currentChunk + 1,\r\n              chunkCount\r\n            })\r\n          }\r\n        } else {\r\n          console.log(res.msg)\r\n        }\r\n      }).catch((e) => {\r\n        error(e)\r\n      })\r\n      // if (chunkInfo.currentChunk < chunkInfo.chunkCount) {\r\n      //   setTimeout(() => {\r\n      //\r\n      //   }, 1000)\r\n      // }\r\n    }\r\n  }\r\n  /***\r\n     * 顺序上传\r\n     **/\r\n  const sequentialUplode = (currentChunk) => {\r\n    const {\r\n      chunk\r\n    } = getChunkInfo(file, currentChunk, chunkSize)\r\n    const chunkInfo = {\r\n      chunk,\r\n      currentChunk,\r\n      chunkCount,\r\n      uploadId\r\n    }\r\n    // const sd = parseInt((chunkInfo.currentChunk / chunkInfo.chunkCount) * 100)\r\n    // process(sd)\r\n    console.log('当前上传分片：' + currentChunk)\r\n    const inde = chunkInfo.currentChunk + 1\r\n    if (uploaded.indexOf(inde + '') > -1) {\r\n      console.log('分片【' + currentChunk + '】已上传')\r\n      sequentialUplode(currentChunk + 1)\r\n    } else {\r\n      const uploadData = createUploadData(chunkInfo)\r\n\r\n      // 执行分片上传\r\n      chunkupload(uploadData).then(res => {\r\n        console.log(res, 'sdfsdfsd')\r\n        if (res.errcode == 0) {\r\n          console.log('分片【' + currentChunk + '】上传成功')\r\n          uploaded.push(chunkInfo.currentChunk + 1)\r\n          // 判断是否全部上传完\r\n          if (uploaded.length == chunkInfo.chunkCount) {\r\n            console.log('全部完成')\r\n            success(res)\r\n            // process(100)\r\n          } else {\r\n            sequentialUplode(currentChunk + 1)\r\n          }\r\n        } else {\r\n          console.log(res.errmsg)\r\n        }\r\n      }).catch((e) => {\r\n        error(e)\r\n      })\r\n    }\r\n  }\r\n  /***\r\n     * 并发上传\r\n     **/\r\n  const concurrentUpload = () => {\r\n    for (let i = 0; i < chunkCount; i++) {\r\n      const index = Number(i) + 1\r\n      if (uploaded.indexOf(index) === -1) {\r\n        chunkList.push(Number(i))\r\n      }\r\n    }\r\n    // debugger\r\n    console.log('需要上传的分片索引：' + chunkList)\r\n    concurrentExecution(chunkList, concurrent, (curItem) => {\r\n      return new Promise((resolve, reject) => {\r\n        const {\r\n          chunk\r\n        } = getChunkInfo(file, curItem, chunkSize)\r\n        const chunkInfo = {\r\n          chunk,\r\n          currentChunk: curItem,\r\n          chunkCount,\r\n          uploadId\r\n        }\r\n        // const sd = parseInt((chunkInfo.currentChunk / chunkInfo.chunkCount) * 100)\r\n        // process(sd)\r\n        console.log('当前上传分片：' + curItem)\r\n        const inde = chunkInfo.currentChunk + 1\r\n        if (uploaded.indexOf(inde) == -1) {\r\n          // 构建上传文件的formData\r\n          const uploadData = createUploadData(chunkInfo)\r\n          chunkupload(uploadData).then(res => {\r\n            console.log(res)\r\n            if (res.errcode == 0) {\r\n              uploaded.push(chunkInfo.currentChunk + 1)\r\n              console.log('已经上传完成的分片：' + uploaded)\r\n              // 判断是否全部上传完\r\n              if (uploaded.length == chunkInfo.chunkCount) {\r\n                success(res)\r\n                // process(100)\r\n              }\r\n              resolve()\r\n            } else {\r\n              reject(res)\r\n              console.log(res.errmsg)\r\n            }\r\n          }).catch((e) => {\r\n            console.log(e, 'errrrr')\r\n            reject(e)\r\n            error(e)\r\n          })\r\n        } else {\r\n          console.log('分片【' + chunkInfo.currentChunk + '】已上传')\r\n          resolve()\r\n        }\r\n      })\r\n    }).then(res => {\r\n      console.log('finish', res)\r\n    })\r\n  }\r\n  /***\r\n     * 创建文件上传参数\r\n     **/\r\n  const createUploadData = (chunkInfo) => {\r\n    const fetchForm = new FormData()\r\n    fetchForm.append('identifier', fileMD5) // 文件MD5编码\r\n    fetchForm.append('filename', file.name) // 文件名\r\n    fetchForm.append('totalChunks', chunkInfo.chunkCount) // 分片总数\r\n    fetchForm.append('chunkSize', chunkSize) // 每片大小\r\n    fetchForm.append('chunkNumber', chunkInfo.currentChunk + 1) // 当前为第几片\r\n    fetchForm.append('currentChunkSize', chunkInfo.chunk.size) // 当前分片大小\r\n    const chunkfile = new File([chunkInfo.chunk], file.name)\r\n    fetchForm.append('file', chunkfile) // 文件\r\n    fetchForm.append('uploadId', chunkInfo.uploadId) // 第一次不传，后面的请求需要传\r\n    // fetchForm.append('objectType', fileType)\r\n    return fetchForm\r\n  }\r\n  readFileMD5() // 开始执行代码\r\n}\r\n\r\n```\r\n\r\n```js\r\njnxh.js 文件\r\n\r\n/**\r\n * 并发执行\r\n * @params list {Array} - 要迭代的数组\r\n * @params limit {Number} - 并发数量控制数,最好小于3\r\n * @params asyncHandle {Function} - 对`list`的每一个项的处理函数，参数为当前处理项，必须 return 一个Promise来确定是否继续进行迭代\r\n * @return {Promise} - 返回一个 Promise 值来确认所有数据是否迭代完成\r\n */\r\nexport function concurrentExecution (list, limit, asyncHandle) {\r\n  // 递归执行\r\n  const recursion = (arr) => {\r\n    // 执行方法 arr.shift() 取出并移除第一个数据\r\n    return asyncHandle(arr.shift()).then(() => {\r\n      // 数组还未迭代完，递归继续进行迭代\r\n      if (arr.length !== 0) {\r\n        return recursion(arr)\r\n      } else {\r\n        return 'finish'\r\n      }\r\n    })\r\n  }\r\n  // 创建新的并发数组\r\n  const listCopy = [].concat(list)\r\n  // 正在进行的所有并发异步操作\r\n  const asyncList = []\r\n  limit = limit > listCopy.length ? listCopy.length : limit\r\n  console.log(limit)\r\n  while (limit--) {\r\n    asyncList.push(recursion(listCopy))\r\n  }\r\n  // 所有并发异步操作都完成后，本次并发控制迭代完成\r\n  return Promise.all(asyncList)\r\n}\r\n```\r\n\r\n\r\n\r\n# 文档借鉴地址\r\n\r\n1：https://www.jb51.net/article/260764.htm\r\n\r\n2：https://blog.csdn.net/qq_43040552/article/details/123375581?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-123375581-blog-123520915.pc_relevant_aa_2&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-123375581-blog-123520915.pc_relevant_aa_2&utm_relevant_index=1",contentRendered:'<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>项目开发中，大文件上传不可避免的因各种原因上传失败，这一篇来讲在 vue 项目中如何分片上传</p>\n</div>\n<h1 id="代码部分" tabindex="-1"><a class="header-anchor" href="#代码部分" aria-hidden="true">#</a> 代码部分</h1>\n<p>需要下载 js-md5，分片上传需要用 md5</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> uploadByPieces <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@/utils/burst\'</span>\n\n<span class="token comment">// 上传接口</span>\n<span class="token function">handleUploadvideo</span> <span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 通过上传组件获取到文件的信息，调用分片上传接口</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">afterRead</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n<span class="token comment">// 视频上传</span>\n    <span class="token function">afterRead</span> <span class="token punctuation">(</span><span class="token parameter">files<span class="token punctuation">,</span> code</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// uploadByPieces函数由另外的js文件引入</span>\n      <span class="token function">uploadByPieces</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        files<span class="token punctuation">,</span>\n        <span class="token literal-property property">pieceSize</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">concurrent</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">success</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>VideoSuccess<span class="token punctuation">,</span>\n        <span class="token literal-property property">error</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>VideoFail\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">// 上传视频成功回调</span>\n    <span class="token function">VideoSuccess</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>\n      <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span> url <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>form<span class="token punctuation">.</span>video <span class="token operator">=</span> url\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token string">\'上传成功\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">// 上传失败回调</span>\n    <span class="token function">VideoFail</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token string">\'失败回调\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>burst<span class="token punctuation">.</span>js 文件\n\n<span class="token keyword">import</span> md5 <span class="token keyword">from</span> <span class="token string">\'js-md5\'</span> <span class="token comment">// 引入MD5加密</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> chunkupload <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@/pages/busmanagement/children/GroupService.js\'</span> <span class="token comment">// 分片上传接口</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> concurrentExecution <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./jnxh.js\'</span> <span class="token comment">// 并发文件</span>\n<span class="token doc-comment comment">/**\n * 文件分片上传\n * <span class="token keyword">@params</span> file <span class="token punctuation">{</span>File<span class="token punctuation">}</span> 文件\n * <span class="token keyword">@params</span> pieceSize <span class="token punctuation">{</span>Number<span class="token punctuation">}</span> 分片大小 默认1MB\n * <span class="token keyword">@params</span> concurrent <span class="token punctuation">{</span>Number<span class="token punctuation">}</span> 并发数量 默认2\n * <span class="token keyword">@params</span> process <span class="token punctuation">{</span>Function<span class="token punctuation">}</span> 进度回调函数\n * <span class="token keyword">@params</span> success <span class="token punctuation">{</span>Function<span class="token punctuation">}</span> 成功回调函数\n * <span class="token keyword">@params</span> error <span class="token punctuation">{</span>Function<span class="token punctuation">}</span> 失败回调函数\n */</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">uploadByPieces</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>\n  <span class="token literal-property property">files</span><span class="token operator">:</span> <span class="token punctuation">{</span> file <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  pieceSize <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>\n  concurrent <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>\n  process<span class="token punctuation">,</span>\n  success<span class="token punctuation">,</span>\n  error\n<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// 如果文件传入为空直接 return 返回</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file <span class="token operator">||</span> file<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">error</span><span class="token punctuation">(</span><span class="token string">\'文件不能为空\'</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">let</span> fileMD5 <span class="token operator">=</span> <span class="token string">\'\'</span> <span class="token comment">// 总文件列表</span>\n  <span class="token keyword">const</span> chunkSize <span class="token operator">=</span> pieceSize <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token comment">// 3MB一片</span>\n  <span class="token keyword">const</span> chunkCount <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>size <span class="token operator">/</span> chunkSize<span class="token punctuation">)</span> <span class="token comment">// 总片数</span>\n  <span class="token keyword">const</span> chunkList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 分片列表</span>\n  <span class="token keyword">let</span> uploaded <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 已经上传的</span>\n  <span class="token comment">// let fileType = \'\' // 文件类型</span>\n  <span class="token keyword">let</span> uploadId <span class="token operator">=</span> <span class="token string">\'\'</span> <span class="token comment">// 上传id</span>\n  <span class="token comment">// 获取md5</span>\n  <span class="token doc-comment comment">/***\n     * 获取md5\n     **/</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1111</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">readFileMD5</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token comment">// 读取视频文件的md5</span>\n    <span class="token comment">// fileType = file.name.substring(file.name.lastIndexOf(\'.\') + 1, file.name.length)</span>\n    <span class="token keyword">const</span> fileRederInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'file\'</span><span class="token punctuation">,</span> file<span class="token punctuation">)</span>\n    fileRederInstance<span class="token punctuation">.</span><span class="token function">readAsBinaryString</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>\n    fileRederInstance<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">\'load\'</span><span class="token punctuation">,</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> fileBolb <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result\n      fileMD5 <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span>fileBolb<span class="token punctuation">)</span>\n\n      <span class="token keyword">const</span> <span class="token punctuation">{</span>\n        chunk\n      <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">getChunkInfo</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> chunkSize<span class="token punctuation">)</span>\n      <span class="token keyword">const</span> chunkInfo <span class="token operator">=</span> <span class="token punctuation">{</span>\n        chunk<span class="token punctuation">,</span>\n        <span class="token literal-property property">currentChunk</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n        chunkCount<span class="token punctuation">,</span>\n        uploadId\n      <span class="token punctuation">}</span>\n      <span class="token keyword">const</span> uploadData <span class="token operator">=</span> <span class="token function">createUploadData</span><span class="token punctuation">(</span>chunkInfo<span class="token punctuation">)</span>\n\n      <span class="token function">chunkupload</span><span class="token punctuation">(</span>uploadData<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token operator">=</span> res\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>skipUpload<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token string">\'文件已被上传\'</span><span class="token punctuation">)</span>\n          <span class="token function">success</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n          uploadId <span class="token operator">=</span> data<span class="token punctuation">.</span>uploadId\n          <span class="token comment">// 判断是否是断点续传</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>uploaded <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">.</span>uploaded<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            uploaded <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>uploaded<span class="token punctuation">)</span>\n          <span class="token punctuation">}</span>\n          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'已上传的分片：\'</span> <span class="token operator">+</span> uploaded<span class="token punctuation">)</span>\n          <span class="token comment">// 判断是并发上传或顺序上传</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span>concurrent <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">||</span> chunkCount <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'顺序上传\'</span><span class="token punctuation">)</span>\n            <span class="token function">sequentialUplode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'并发上传\'</span><span class="token punctuation">)</span>\n            <span class="token function">concurrentUpload</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'文件合并错误\'</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token doc-comment comment">/***\n     * 获取每一个分片的详情\n     **/</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">getChunkInfo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">file<span class="token punctuation">,</span> currentChunk<span class="token punctuation">,</span> chunkSize</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> start <span class="token operator">=</span> currentChunk <span class="token operator">*</span> chunkSize\n    <span class="token keyword">const</span> end <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>size<span class="token punctuation">,</span> start <span class="token operator">+</span> chunkSize<span class="token punctuation">)</span>\n    <span class="token keyword">const</span> chunk <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      start<span class="token punctuation">,</span>\n      end<span class="token punctuation">,</span>\n      chunk\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token doc-comment comment">/***\n     * 原始上传\n     **/</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">uploadChunk</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">chunkInfo</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> sd <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>chunkInfo<span class="token punctuation">.</span>currentChunk <span class="token operator">/</span> chunkInfo<span class="token punctuation">.</span>chunkCount<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sd<span class="token punctuation">,</span> <span class="token string">\'进度\'</span><span class="token punctuation">)</span>\n    <span class="token comment">// process(sd)</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>chunkInfo<span class="token punctuation">,</span> <span class="token string">\'分片大小\'</span><span class="token punctuation">)</span>\n    <span class="token keyword">const</span> inde <span class="token operator">=</span> chunkInfo<span class="token punctuation">.</span>currentChunk <span class="token operator">+</span> <span class="token number">1</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>uploaded<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>inde <span class="token operator">+</span> <span class="token string">\'\'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> <span class="token punctuation">{</span>\n        chunk\n      <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">getChunkInfo</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> chunkInfo<span class="token punctuation">.</span>currentChunk <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> chunkSize<span class="token punctuation">)</span>\n      <span class="token function">uploadChunk</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        chunk<span class="token punctuation">,</span>\n        <span class="token literal-property property">currentChunk</span><span class="token operator">:</span> inde<span class="token punctuation">,</span>\n        chunkCount\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> uploadData <span class="token operator">=</span> <span class="token function">createUploadData</span><span class="token punctuation">(</span>chunkInfo<span class="token punctuation">)</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>uploadData<span class="token punctuation">)</span>\n      <span class="token function">chunkupload</span><span class="token punctuation">(</span>uploadData<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>errcode <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'分片上传成功\'</span><span class="token punctuation">)</span>\n          uploaded<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>chunkInfo<span class="token punctuation">.</span>currentChunk <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n          <span class="token comment">// 判断是否全部上传完</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span>uploaded<span class="token punctuation">.</span>length <span class="token operator">==</span> chunkInfo<span class="token punctuation">.</span>chunkCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'全部完成\'</span><span class="token punctuation">)</span>\n            <span class="token function">success</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n            <span class="token comment">// process(100)</span>\n          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token keyword">const</span> <span class="token punctuation">{</span>\n              chunk\n            <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">getChunkInfo</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> chunkInfo<span class="token punctuation">.</span>currentChunk <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> chunkSize<span class="token punctuation">)</span>\n            <span class="token function">uploadChunk</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n              chunk<span class="token punctuation">,</span>\n              <span class="token literal-property property">currentChunk</span><span class="token operator">:</span> chunkInfo<span class="token punctuation">.</span>currentChunk <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>\n              chunkCount\n            <span class="token punctuation">}</span><span class="token punctuation">)</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>msg<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token comment">// if (chunkInfo.currentChunk &lt; chunkInfo.chunkCount) {</span>\n      <span class="token comment">//   setTimeout(() => {</span>\n      <span class="token comment">//</span>\n      <span class="token comment">//   }, 1000)</span>\n      <span class="token comment">// }</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token doc-comment comment">/***\n     * 顺序上传\n     **/</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">sequentialUplode</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">currentChunk</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span>\n      chunk\n    <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">getChunkInfo</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> currentChunk<span class="token punctuation">,</span> chunkSize<span class="token punctuation">)</span>\n    <span class="token keyword">const</span> chunkInfo <span class="token operator">=</span> <span class="token punctuation">{</span>\n      chunk<span class="token punctuation">,</span>\n      currentChunk<span class="token punctuation">,</span>\n      chunkCount<span class="token punctuation">,</span>\n      uploadId\n    <span class="token punctuation">}</span>\n    <span class="token comment">// const sd = parseInt((chunkInfo.currentChunk / chunkInfo.chunkCount) * 100)</span>\n    <span class="token comment">// process(sd)</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'当前上传分片：\'</span> <span class="token operator">+</span> currentChunk<span class="token punctuation">)</span>\n    <span class="token keyword">const</span> inde <span class="token operator">=</span> chunkInfo<span class="token punctuation">.</span>currentChunk <span class="token operator">+</span> <span class="token number">1</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>uploaded<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>inde <span class="token operator">+</span> <span class="token string">\'\'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'分片【\'</span> <span class="token operator">+</span> currentChunk <span class="token operator">+</span> <span class="token string">\'】已上传\'</span><span class="token punctuation">)</span>\n      <span class="token function">sequentialUplode</span><span class="token punctuation">(</span>currentChunk <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> uploadData <span class="token operator">=</span> <span class="token function">createUploadData</span><span class="token punctuation">(</span>chunkInfo<span class="token punctuation">)</span>\n\n      <span class="token comment">// 执行分片上传</span>\n      <span class="token function">chunkupload</span><span class="token punctuation">(</span>uploadData<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token string">\'sdfsdfsd\'</span><span class="token punctuation">)</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>errcode <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'分片【\'</span> <span class="token operator">+</span> currentChunk <span class="token operator">+</span> <span class="token string">\'】上传成功\'</span><span class="token punctuation">)</span>\n          uploaded<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>chunkInfo<span class="token punctuation">.</span>currentChunk <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n          <span class="token comment">// 判断是否全部上传完</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span>uploaded<span class="token punctuation">.</span>length <span class="token operator">==</span> chunkInfo<span class="token punctuation">.</span>chunkCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'全部完成\'</span><span class="token punctuation">)</span>\n            <span class="token function">success</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n            <span class="token comment">// process(100)</span>\n          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token function">sequentialUplode</span><span class="token punctuation">(</span>currentChunk <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>errmsg<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token doc-comment comment">/***\n     * 并发上传\n     **/</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">concurrentUpload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> chunkCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> index <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>uploaded<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        chunkList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// debugger</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'需要上传的分片索引：\'</span> <span class="token operator">+</span> chunkList<span class="token punctuation">)</span>\n    <span class="token function">concurrentExecution</span><span class="token punctuation">(</span>chunkList<span class="token punctuation">,</span> concurrent<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">curItem</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> <span class="token punctuation">{</span>\n          chunk\n        <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">getChunkInfo</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> curItem<span class="token punctuation">,</span> chunkSize<span class="token punctuation">)</span>\n        <span class="token keyword">const</span> chunkInfo <span class="token operator">=</span> <span class="token punctuation">{</span>\n          chunk<span class="token punctuation">,</span>\n          <span class="token literal-property property">currentChunk</span><span class="token operator">:</span> curItem<span class="token punctuation">,</span>\n          chunkCount<span class="token punctuation">,</span>\n          uploadId\n        <span class="token punctuation">}</span>\n        <span class="token comment">// const sd = parseInt((chunkInfo.currentChunk / chunkInfo.chunkCount) * 100)</span>\n        <span class="token comment">// process(sd)</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'当前上传分片：\'</span> <span class="token operator">+</span> curItem<span class="token punctuation">)</span>\n        <span class="token keyword">const</span> inde <span class="token operator">=</span> chunkInfo<span class="token punctuation">.</span>currentChunk <span class="token operator">+</span> <span class="token number">1</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>uploaded<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>inde<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token comment">// 构建上传文件的formData</span>\n          <span class="token keyword">const</span> uploadData <span class="token operator">=</span> <span class="token function">createUploadData</span><span class="token punctuation">(</span>chunkInfo<span class="token punctuation">)</span>\n          <span class="token function">chunkupload</span><span class="token punctuation">(</span>uploadData<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>errcode <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              uploaded<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>chunkInfo<span class="token punctuation">.</span>currentChunk <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'已经上传完成的分片：\'</span> <span class="token operator">+</span> uploaded<span class="token punctuation">)</span>\n              <span class="token comment">// 判断是否全部上传完</span>\n              <span class="token keyword">if</span> <span class="token punctuation">(</span>uploaded<span class="token punctuation">.</span>length <span class="token operator">==</span> chunkInfo<span class="token punctuation">.</span>chunkCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token function">success</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n                <span class="token comment">// process(100)</span>\n              <span class="token punctuation">}</span>\n              <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n              <span class="token function">reject</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>errmsg<span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token string">\'errrrr\'</span><span class="token punctuation">)</span>\n            <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>\n            <span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>\n          <span class="token punctuation">}</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'分片【\'</span> <span class="token operator">+</span> chunkInfo<span class="token punctuation">.</span>currentChunk <span class="token operator">+</span> <span class="token string">\'】已上传\'</span><span class="token punctuation">)</span>\n          <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'finish\'</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token doc-comment comment">/***\n     * 创建文件上传参数\n     **/</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">createUploadData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">chunkInfo</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> fetchForm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    fetchForm<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">\'identifier\'</span><span class="token punctuation">,</span> fileMD5<span class="token punctuation">)</span> <span class="token comment">// 文件MD5编码</span>\n    fetchForm<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">\'filename\'</span><span class="token punctuation">,</span> file<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// 文件名</span>\n    fetchForm<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">\'totalChunks\'</span><span class="token punctuation">,</span> chunkInfo<span class="token punctuation">.</span>chunkCount<span class="token punctuation">)</span> <span class="token comment">// 分片总数</span>\n    fetchForm<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">\'chunkSize\'</span><span class="token punctuation">,</span> chunkSize<span class="token punctuation">)</span> <span class="token comment">// 每片大小</span>\n    fetchForm<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">\'chunkNumber\'</span><span class="token punctuation">,</span> chunkInfo<span class="token punctuation">.</span>currentChunk <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 当前为第几片</span>\n    fetchForm<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">\'currentChunkSize\'</span><span class="token punctuation">,</span> chunkInfo<span class="token punctuation">.</span>chunk<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token comment">// 当前分片大小</span>\n    <span class="token keyword">const</span> chunkfile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token punctuation">[</span>chunkInfo<span class="token punctuation">.</span>chunk<span class="token punctuation">]</span><span class="token punctuation">,</span> file<span class="token punctuation">.</span>name<span class="token punctuation">)</span>\n    fetchForm<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">\'file\'</span><span class="token punctuation">,</span> chunkfile<span class="token punctuation">)</span> <span class="token comment">// 文件</span>\n    fetchForm<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">\'uploadId\'</span><span class="token punctuation">,</span> chunkInfo<span class="token punctuation">.</span>uploadId<span class="token punctuation">)</span> <span class="token comment">// 第一次不传，后面的请求需要传</span>\n    <span class="token comment">// fetchForm.append(\'objectType\', fileType)</span>\n    <span class="token keyword">return</span> fetchForm\n  <span class="token punctuation">}</span>\n  <span class="token function">readFileMD5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 开始执行代码</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br><span class="line-number">135</span><br><span class="line-number">136</span><br><span class="line-number">137</span><br><span class="line-number">138</span><br><span class="line-number">139</span><br><span class="line-number">140</span><br><span class="line-number">141</span><br><span class="line-number">142</span><br><span class="line-number">143</span><br><span class="line-number">144</span><br><span class="line-number">145</span><br><span class="line-number">146</span><br><span class="line-number">147</span><br><span class="line-number">148</span><br><span class="line-number">149</span><br><span class="line-number">150</span><br><span class="line-number">151</span><br><span class="line-number">152</span><br><span class="line-number">153</span><br><span class="line-number">154</span><br><span class="line-number">155</span><br><span class="line-number">156</span><br><span class="line-number">157</span><br><span class="line-number">158</span><br><span class="line-number">159</span><br><span class="line-number">160</span><br><span class="line-number">161</span><br><span class="line-number">162</span><br><span class="line-number">163</span><br><span class="line-number">164</span><br><span class="line-number">165</span><br><span class="line-number">166</span><br><span class="line-number">167</span><br><span class="line-number">168</span><br><span class="line-number">169</span><br><span class="line-number">170</span><br><span class="line-number">171</span><br><span class="line-number">172</span><br><span class="line-number">173</span><br><span class="line-number">174</span><br><span class="line-number">175</span><br><span class="line-number">176</span><br><span class="line-number">177</span><br><span class="line-number">178</span><br><span class="line-number">179</span><br><span class="line-number">180</span><br><span class="line-number">181</span><br><span class="line-number">182</span><br><span class="line-number">183</span><br><span class="line-number">184</span><br><span class="line-number">185</span><br><span class="line-number">186</span><br><span class="line-number">187</span><br><span class="line-number">188</span><br><span class="line-number">189</span><br><span class="line-number">190</span><br><span class="line-number">191</span><br><span class="line-number">192</span><br><span class="line-number">193</span><br><span class="line-number">194</span><br><span class="line-number">195</span><br><span class="line-number">196</span><br><span class="line-number">197</span><br><span class="line-number">198</span><br><span class="line-number">199</span><br><span class="line-number">200</span><br><span class="line-number">201</span><br><span class="line-number">202</span><br><span class="line-number">203</span><br><span class="line-number">204</span><br><span class="line-number">205</span><br><span class="line-number">206</span><br><span class="line-number">207</span><br><span class="line-number">208</span><br><span class="line-number">209</span><br><span class="line-number">210</span><br><span class="line-number">211</span><br><span class="line-number">212</span><br><span class="line-number">213</span><br><span class="line-number">214</span><br><span class="line-number">215</span><br><span class="line-number">216</span><br><span class="line-number">217</span><br><span class="line-number">218</span><br><span class="line-number">219</span><br><span class="line-number">220</span><br><span class="line-number">221</span><br><span class="line-number">222</span><br><span class="line-number">223</span><br><span class="line-number">224</span><br><span class="line-number">225</span><br><span class="line-number">226</span><br><span class="line-number">227</span><br><span class="line-number">228</span><br><span class="line-number">229</span><br><span class="line-number">230</span><br><span class="line-number">231</span><br><span class="line-number">232</span><br><span class="line-number">233</span><br><span class="line-number">234</span><br><span class="line-number">235</span><br><span class="line-number">236</span><br><span class="line-number">237</span><br><span class="line-number">238</span><br><span class="line-number">239</span><br><span class="line-number">240</span><br><span class="line-number">241</span><br><span class="line-number">242</span><br><span class="line-number">243</span><br><span class="line-number">244</span><br><span class="line-number">245</span><br><span class="line-number">246</span><br><span class="line-number">247</span><br><span class="line-number">248</span><br><span class="line-number">249</span><br><span class="line-number">250</span><br><span class="line-number">251</span><br><span class="line-number">252</span><br><span class="line-number">253</span><br><span class="line-number">254</span><br><span class="line-number">255</span><br><span class="line-number">256</span><br><span class="line-number">257</span><br><span class="line-number">258</span><br><span class="line-number">259</span><br><span class="line-number">260</span><br><span class="line-number">261</span><br><span class="line-number">262</span><br><span class="line-number">263</span><br><span class="line-number">264</span><br><span class="line-number">265</span><br><span class="line-number">266</span><br><span class="line-number">267</span><br><span class="line-number">268</span><br><span class="line-number">269</span><br><span class="line-number">270</span><br><span class="line-number">271</span><br><span class="line-number">272</span><br><span class="line-number">273</span><br><span class="line-number">274</span><br><span class="line-number">275</span><br><span class="line-number">276</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>jnxh<span class="token punctuation">.</span>js 文件\n\n<span class="token doc-comment comment">/**\n * 并发执行\n * <span class="token keyword">@params</span> list <span class="token punctuation">{</span>Array<span class="token punctuation">}</span> - 要迭代的数组\n * <span class="token keyword">@params</span> limit <span class="token punctuation">{</span>Number<span class="token punctuation">}</span> - 并发数量控制数,最好小于3\n * <span class="token keyword">@params</span> asyncHandle <span class="token punctuation">{</span>Function<span class="token punctuation">}</span> - 对`list`的每一个项的处理函数，参数为当前处理项，必须 return 一个Promise来确定是否继续进行迭代\n * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>Promise<span class="token punctuation">}</span></span> - 返回一个 Promise 值来确认所有数据是否迭代完成\n */</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">concurrentExecution</span> <span class="token punctuation">(</span><span class="token parameter">list<span class="token punctuation">,</span> limit<span class="token punctuation">,</span> asyncHandle</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 递归执行</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">recursion</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token comment">// 执行方法 arr.shift() 取出并移除第一个数据</span>\n    <span class="token keyword">return</span> <span class="token function">asyncHandle</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token comment">// 数组还未迭代完，递归继续进行迭代</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token function">recursion</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token string">\'finish\'</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 创建新的并发数组</span>\n  <span class="token keyword">const</span> listCopy <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span>\n  <span class="token comment">// 正在进行的所有并发异步操作</span>\n  <span class="token keyword">const</span> asyncList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  limit <span class="token operator">=</span> limit <span class="token operator">></span> listCopy<span class="token punctuation">.</span>length <span class="token operator">?</span> listCopy<span class="token punctuation">.</span>length <span class="token operator">:</span> limit\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>limit<span class="token punctuation">)</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>limit<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    asyncList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">recursion</span><span class="token punctuation">(</span>listCopy<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 所有并发异步操作都完成后，本次并发控制迭代完成</span>\n  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>asyncList<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><h1 id="文档借鉴地址" tabindex="-1"><a class="header-anchor" href="#文档借鉴地址" aria-hidden="true">#</a> 文档借鉴地址</h1>\n<p>1：https://www.jb51.net/article/260764.htm</p>\n<p>2：https://blog.csdn.net/qq_43040552/article/details/123375581?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-123375581-blog-123520915.pc_relevant_aa_2&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-123375581-blog-123520915.pc_relevant_aa_2&amp;utm_relevant_index=1</p>\n',date:"2022-09-30",deps:[],hoistedTags:[],links:[],pathInferred:"/vue/2022/20220930.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"20220930",filePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/vue/2022/20220930.md",filePathRelative:"vue/2022/20220930.md",componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/vue/2022/20220930.html.vue",componentFilePathRelative:"pages/vue/2022/20220930.html.vue",componentFileChunkName:"v-493de946",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/vue/2022/20220930.html.js",dataFilePathRelative:"pages/vue/2022/20220930.html.js",dataFileChunkName:"v-493de946",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/vue/2022/20220930.html",htmlFilePathRelative:"vue/2022/20220930.html"},{data:{key:"v-c962782a",path:"/vue/2022/20221002.html",title:"vue项目中如何配置环境变量",lang:"zh-CN",frontmatter:{title:"vue项目中如何配置环境变量",date:"2022-10-02T00:00:00.000Z",tags:["vue"],categories:["vue"]},excerpt:"",headers:[],git:{updatedTime:null,contributors:[]}},key:"v-c962782a",path:"/vue/2022/20221002.html",title:"vue项目中如何配置环境变量",lang:"zh-CN",frontmatter:{title:"vue项目中如何配置环境变量",date:"2022-10-02T00:00:00.000Z",tags:["vue"],categories:["vue"]},excerpt:"",headers:[],content:'\r\n::: tip\r\n\r\n项目开发中，我们可能有多种环境，开发环境，线上环境，测试环境等等，这一篇就来讲讲如何配置环境变量\r\n\r\n:::\r\n\r\n# 代码部分\r\n\r\n创建好一个 vue 项目\r\n\r\n```js\r\n在项目根目录下创建环境配置文件：\r\n.env.development ：开发环境\r\n.env.production ：打包的时候会执行的环境\r\n.env.test ：测试环境\r\n```\r\n\r\n```js\r\n.env.development 文件 （其他环境文件同理）\r\n// 请注意，只有 NODE_ENV，BASE_URL 和以 VUE_APP_ 开头的变量将通过 webpack.DefinePlugin 静态地嵌入到客户端侧的代码中，这个案例中使用了 VUE_APP_\r\nVUE_APP_BASE_URL= "127.0.0.7" \r\n```\r\n\r\n```js\r\nvue.config.js 文件\r\n\r\nconst { defineConfig } = require(\'@vue/cli-service\')\r\n// 可以在这里书写这行代码测试是否配置成功，终端执行不同的命令会打印不同的环境:例 yarn run dev\r\nconsole.log(process.env.VUE_APP_BASE_URL)  // 127.0.0.7\r\n\r\nmodule.exports = defineConfig({\r\n  transpileDependencies: true\r\n})\r\n\r\n```\r\n\r\n配置测试后，可以在 api 文件中使用环境变量，从而实现一套代码不同环境\r\n\r\n```js\r\n例：\r\n......\r\n// url.startsWith ：判断 url 是否以（）中的条件开头\r\nif (url.startsWith(\'/customer\') || url.startsWith(\'/file\')) {\r\n    url = process.env.VUE_APP_CM_URL + url  // 使用环境变量\r\n  } \r\n\r\n```\r\n\r\n# 多套环境\r\n\r\n在 package.json 文件中\r\n\r\n```js\r\n例：\r\n{\r\n  "name": "env",\r\n  "version": "0.1.0",\r\n  "private": true,\r\n  "scripts": {\r\n    "serve": "vue-cli-service serve",\r\n    "dev": "vue-cli-service serve --mode development", //执行这个脚本会找到development环境文件\r\n    "build:test": "vue-cli-service build --mode test", // 打包使用测试环境\r\n    "build:prod": "vue-cli-service build --mode production", // 打包使用生产环境\r\n    "lint": "vue-cli-service lint"\r\n  },\r\n  ......\r\n}\r\n\r\n```\r\n\r\n',contentRendered:'<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>项目开发中，我们可能有多种环境，开发环境，线上环境，测试环境等等，这一篇就来讲讲如何配置环境变量</p>\n</div>\n<h1 id="代码部分" tabindex="-1"><a class="header-anchor" href="#代码部分" aria-hidden="true">#</a> 代码部分</h1>\n<p>创建好一个 vue 项目</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>在项目根目录下创建环境配置文件：\n<span class="token punctuation">.</span>env<span class="token punctuation">.</span>development ：开发环境\n<span class="token punctuation">.</span>env<span class="token punctuation">.</span>production ：打包的时候会执行的环境\n<span class="token punctuation">.</span>env<span class="token punctuation">.</span>test ：测试环境\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token punctuation">.</span>env<span class="token punctuation">.</span>development 文件 （其他环境文件同理）\n<span class="token comment">// 请注意，只有 NODE_ENV，BASE_URL 和以 VUE_APP_ 开头的变量将通过 webpack.DefinePlugin 静态地嵌入到客户端侧的代码中，这个案例中使用了 VUE_APP_</span>\n<span class="token constant">VUE_APP_BASE_URL</span><span class="token operator">=</span> <span class="token string">"127.0.0.7"</span> \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>js 文件\n\n<span class="token keyword">const</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'@vue/cli-service\'</span><span class="token punctuation">)</span>\n<span class="token comment">// 可以在这里书写这行代码测试是否配置成功，终端执行不同的命令会打印不同的环境:例 yarn run dev</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">VUE_APP_BASE_URL</span><span class="token punctuation">)</span>  <span class="token comment">// 127.0.0.7</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">transpileDependencies</span><span class="token operator">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>配置测试后，可以在 api 文件中使用环境变量，从而实现一套代码不同环境</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>例：\n<span class="token operator">...</span><span class="token operator">...</span>\n<span class="token comment">// url.startsWith ：判断 url 是否以（）中的条件开头</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">\'/customer\'</span><span class="token punctuation">)</span> <span class="token operator">||</span> url<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">\'/file\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    url <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">VUE_APP_CM_URL</span> <span class="token operator">+</span> url  <span class="token comment">// 使用环境变量</span>\n  <span class="token punctuation">}</span> \n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h1 id="多套环境" tabindex="-1"><a class="header-anchor" href="#多套环境" aria-hidden="true">#</a> 多套环境</h1>\n<p>在 package.json 文件中</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>例：\n<span class="token punctuation">{</span>\n  <span class="token string-property property">"name"</span><span class="token operator">:</span> <span class="token string">"env"</span><span class="token punctuation">,</span>\n  <span class="token string-property property">"version"</span><span class="token operator">:</span> <span class="token string">"0.1.0"</span><span class="token punctuation">,</span>\n  <span class="token string-property property">"private"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token string-property property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token string-property property">"serve"</span><span class="token operator">:</span> <span class="token string">"vue-cli-service serve"</span><span class="token punctuation">,</span>\n    <span class="token string-property property">"dev"</span><span class="token operator">:</span> <span class="token string">"vue-cli-service serve --mode development"</span><span class="token punctuation">,</span> <span class="token comment">//执行这个脚本会找到development环境文件</span>\n    <span class="token string-property property">"build:test"</span><span class="token operator">:</span> <span class="token string">"vue-cli-service build --mode test"</span><span class="token punctuation">,</span> <span class="token comment">// 打包使用测试环境</span>\n    <span class="token string-property property">"build:prod"</span><span class="token operator">:</span> <span class="token string">"vue-cli-service build --mode production"</span><span class="token punctuation">,</span> <span class="token comment">// 打包使用生产环境</span>\n    <span class="token string-property property">"lint"</span><span class="token operator">:</span> <span class="token string">"vue-cli-service lint"</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token operator">...</span><span class="token operator">...</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div>',date:"2022-10-02",deps:[],hoistedTags:[],links:[],pathInferred:"/vue/2022/20221002.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"20221002",filePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/vue/2022/20221002.md",filePathRelative:"vue/2022/20221002.md",componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/vue/2022/20221002.html.vue",componentFilePathRelative:"pages/vue/2022/20221002.html.vue",componentFileChunkName:"v-c962782a",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/vue/2022/20221002.html.js",dataFilePathRelative:"pages/vue/2022/20221002.html.js",dataFileChunkName:"v-c962782a",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/vue/2022/20221002.html",htmlFilePathRelative:"vue/2022/20221002.html"},{data:{key:"v-571b9622",path:"/three/2023/20230115.html",title:"初探three",lang:"zh-CN",frontmatter:{title:"初探three",date:"2023-01-15T00:00:00.000Z",tags:["three"],categories:["three"]},excerpt:"",headers:[{level:2,title:"分析构成",slug:"分析构成",children:[]},{level:2,title:"容器canvas",slug:"容器canvas",children:[{level:3,title:"渲染器WebGLRenderer",slug:"渲染器webglrenderer",children:[]}]},{level:2,title:"场景Scene",slug:"场景scene",children:[]},{level:2,title:"相机OrthographicCamera or PerspectiveCamera",slug:"相机orthographiccamera-or-perspectivecamera",children:[{level:3,title:"正交相机（OrthographicCamera）",slug:"正交相机-orthographiccamera",children:[]},{level:3,title:"透视相机（PerspectiveCamera）",slug:"透视相机-perspectivecamera",children:[]}]},{level:2,title:"网格Mesh",slug:"网格mesh",children:[]},{level:2,title:"渲染场景与相机",slug:"渲染场景与相机",children:[]},{level:2,title:"操作几何体",slug:"操作几何体",children:[]},{level:2,title:"demo展示",slug:"demo展示",children:[]},{level:2,title:"轨道控制器(controls)",slug:"轨道控制器-controls",children:[]},{level:2,title:"坐标轴辅助器",slug:"坐标轴辅助器",children:[]},{level:2,title:"物体的移动，缩放，旋转",slug:"物体的移动-缩放-旋转",children:[]},{level:2,title:"时钟(clock)",slug:"时钟-clock",children:[]},{level:2,title:"动画库：gsap",slug:"动画库-gsap",children:[]},{level:2,title:"应用图形用户界面",slug:"应用图形用户界面",children:[]}],git:{updatedTime:null,contributors:[]}},key:"v-571b9622",path:"/three/2023/20230115.html",title:"初探three",lang:"zh-CN",frontmatter:{title:"初探three",date:"2023-01-15T00:00:00.000Z",tags:["three"],categories:["three"]},excerpt:"",headers:[{level:2,title:"分析构成",slug:"分析构成",children:[]},{level:2,title:"容器canvas",slug:"容器canvas",children:[{level:3,title:"渲染器WebGLRenderer",slug:"渲染器webglrenderer",children:[]}]},{level:2,title:"场景Scene",slug:"场景scene",children:[]},{level:2,title:"相机OrthographicCamera or PerspectiveCamera",slug:"相机orthographiccamera-or-perspectivecamera",children:[{level:3,title:"正交相机（OrthographicCamera）",slug:"正交相机-orthographiccamera",children:[]},{level:3,title:"透视相机（PerspectiveCamera）",slug:"透视相机-perspectivecamera",children:[]}]},{level:2,title:"网格Mesh",slug:"网格mesh",children:[]},{level:2,title:"渲染场景与相机",slug:"渲染场景与相机",children:[]},{level:2,title:"操作几何体",slug:"操作几何体",children:[]},{level:2,title:"demo展示",slug:"demo展示",children:[]},{level:2,title:"轨道控制器(controls)",slug:"轨道控制器-controls",children:[]},{level:2,title:"坐标轴辅助器",slug:"坐标轴辅助器",children:[]},{level:2,title:"物体的移动，缩放，旋转",slug:"物体的移动-缩放-旋转",children:[]},{level:2,title:"时钟(clock)",slug:"时钟-clock",children:[]},{level:2,title:"动画库：gsap",slug:"动画库-gsap",children:[]},{level:2,title:"应用图形用户界面",slug:"应用图形用户界面",children:[]}],content:'\r\n::: tip\r\n\r\n最近经常刷到使用3D技术做的网站以及各种有趣的demo,这也成功引起了我的兴趣. 因此,我也准备浅尝一下制作3D效果的乐趣，在使用的技术上,选择了目前使用率比较高的threejs来进行demo的构建\r\n\r\n:::\r\n\r\n## 分析构成\r\n\r\n\r\n\r\n首先分析一下使用threejs制作的3D效果需要的基本要素有哪些\r\n\r\n1. 容器 -> 用来承载构建的场景以及内容\r\n2. 渲染器 -> 将内容渲染到容器中\r\n3. 场景 -> 用来承载我们的内容(相机, 灯光, 动画, 网格等)\r\n4. 相机 -> 调整相机可以调整页面展示内容的大小,多少,展示角度等\r\n5. 网格 -> 网格是内容的主要组成部分,可以说是我们要展示的主体\r\n\r\n## 容器canvas\r\n\r\n\r\n\r\nthree是使用canvas来作为承载一切的容器,因此我们首先要添加一个canvas\r\n\r\n```html\r\n<canvas id="demo"></canvas>\r\n```\r\n\r\n### 渲染器WebGLRenderer\r\n\r\n\r\n\r\nthreejs中的渲染器使用的是**WebGLRenderer**, 通过 **new THREE.WebGLRenderer** 初始化渲染器，并将 canvas 容器作为参数传给它\r\n通过调用 **setSize** 方法设置渲染器的尺寸；\r\n调用 **setPixelRatio** 设置 canvas 的像素比为当前设备的屏幕像素比，避免高分屏下出现模糊情况。\r\n\r\n```js\r\n// 初始化渲染器\r\nconst canvas = document.querySelector("#demo");\r\nconst renderer = new THREE.WebGLRenderer({\r\n  canvas: canvas\r\n});\r\n// 设置渲染器尺寸\r\nrenderer.setSize(window.innerWidth, window.innerHeight);\r\n// 设置canvas像素比为当前设备屏幕像素比\r\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 1));\r\n\r\n```\r\n\r\n## 场景Scene\r\n\r\n\r\n\r\n使用 **new THREE.Scene** 来初始化场景, 后面我们的相机 网格等都需要放入场景中,下面是一些常见的场景属性\r\n\r\n| 属性             | 参数介绍                                                |\r\n| ---------------- | ------------------------------------------------------- |\r\n| fog              | 设置场景的雾化效果,可以渲染出一层雾气，隐层远处的的物体 |\r\n| autoUpdate       | 设置是否自动更新                                        |\r\n| background       | 设置场景背景，默认为黑色                                |\r\n| children         | 所有对象的列表                                          |\r\n| add()            | 向场景中添加对象                                        |\r\n| remove()         | 从场景中移除对象                                        |\r\n| getChildByName() | 根据名字直接返回这个对象                                |\r\n| traverse()       | 传入一个回调函数访问所有的对象                          |\r\n\r\n```js\r\n// 初始化场景\r\nconst scene = new THREE.Scene()\r\n// 场景颜色\r\nscene.background = new THREE.Color(0x1a1a1a);\r\n\r\n```\r\n\r\n## 相机OrthographicCamera or PerspectiveCamera\r\n\r\n\r\n\r\nthreejs中相机主要分为两种：正交相机(OrthographicCamera)和透视相机(PerspectiveCamera)\r\n\r\n### 正交相机（OrthographicCamera）\r\n\r\n\r\n\r\n这一摄像机使用orthographic projection（正交投影）来进行投影。\r\n在这种投影模式下，无论物体距离相机距离远或者近，在最终渲染的图片中物体的大小都保持不变。\r\n这对于渲染2D场景或者UI元素是非常有用的。\r\n\r\n### 透视相机（PerspectiveCamera）\r\n\r\n\r\n\r\n这一摄像机使用perspective projection（透视投影）来进行投影。\r\n这一投影模式被用来模拟人眼所看到的景象，它是3D场景的渲染中使用得最普遍的投影模式。\r\n\r\n![img](http://oss.xingyijun.cn/uploads/file-1673423427823.png)\r\n在当前的demo中我们使用的是透视相机PerspectiveCamera\r\n\r\n| 属性   | 参数介绍                                                     |\r\n| ------ | ------------------------------------------------------------ |\r\n| fov    | 摄像机视锥体垂直视野角度，从视图的底部到顶部，以角度来表示。默认值是50 |\r\n| aspect | 摄像机视锥体的长宽比，通常是使用画布的宽/画布的高。默认值是1（正方形画布） |\r\n| near   | 摄像机的近端面，表示的是从距离相机多远的位置开始渲染,默认值是0.1 |\r\n| far    | 摄像机的远端面，表示的是距离相机多远的位置截止渲染,默认值是2000 |\r\n\r\n```js\r\n// 初始化相机\r\nconst camera = new THREE.PerspectiveCamera(70, sizes.width / sizes.height);\r\n// 相机的z轴\r\ncamera.position.z = 2;\r\n// 添加相机到场景种\r\nscene.add(camera);\r\n\r\n```\r\n\r\n## 网格Mesh\r\n\r\n\r\n\r\nthreejs中使用 **new THREE.Mesh** 来创建网格,但是网格本身还有两部分构成: 几何体和材质\r\n要创建一个可正常显示在场景中的三维模型，需要将网格 **Mesh** 添加到场景中，并创建所需的几何体 **Geometry** 和 材质 **Material**\r\n几何体与材质分为多种,各有自己对应的属性和功能,本文在这里就不多做赘述了,有想深入了解的同学可以去查看文档\r\nthreejs中文文档: [https://threejs.org/docs/index.html#manual/zh/introduction/Creating-a-scene](https://threejs.org/docs/index.html#manual/zh/introduction/Creating-a-scene)\r\n\r\n```js\r\n// 添加立方缓冲几何体（BoxGeometry\r\nconst geometry = new THREE.BoxGeometry(1, 1, 1);\r\n// 设置基础网格材质(MeshBasicMaterial)\r\nconst material = new THREE.MeshBasicMaterial({ color: 0xab6ab6 });\r\n// 初始化网格对象\r\nconst mesh = new THREE.Mesh(geometry, material);\r\n// 将网格对象添加到场景中\r\nscene.add(mesh);\r\n\r\n```\r\n\r\n## 渲染场景与相机\r\n\r\n\r\n\r\n在上面的步骤都完成后,我们的几大要素都已经具备了,但是页面上依然是没有任何内容,这是因为还没有将场景与相机添加到渲染器中\r\n\r\n```js\r\n// 将场景与相机添加到渲染器中并渲染\r\nrenderer.render(scene, camera)\r\n\r\n```\r\n\r\n## 操作几何体\r\n\r\n\r\n\r\n在添加如上代码后,页面上出现了几何体\r\n![img](http://oss.xingyijun.cn/uploads/file-1673427382592.png)\r\n虽然看上去像是一个2d的正方形,但实际上是立方体,此时它是正对着屏幕的.我们当然是更加希望看到一个3d的效果,如果可以还希望能够鼠标操作放大缩小等.\r\n这时,就需要借助一个叫 **轨道控制器（OrbitControls）**的东西\r\n这里我就不多介绍它是怎么引入的了,有需要的同学可以去查询一下,在单纯html中引入与在脚手架项目中引入也是有一些区别的\r\n..........就当这里已经引入了,通过使用 **new THREE.OrbitControls** 来初始化轨道控制器\r\n\r\n| 参数       | 参数介绍                                                     |\r\n| ---------- | ------------------------------------------------------------ |\r\n| object     | 将要被控制的相机。该相机不允许是其他任何对象的子级，除非该对象是场景自身 |\r\n| domElement | 用于事件监听的HTML元素                                       |\r\n\r\n```js\r\n// 初始化轨道控制器\r\nconst controls = new THREE.OrbitControls(camera, renderer.domElement);\r\n\r\n```\r\n\r\n当然单纯初始化轨道控制器后依然是无法进行使用的,因此在操作的同时,需要对其进行更新.\r\n\r\n```js\r\n// 创建一个更新的方法\r\nconst update = () => {\r\n  // 跟随更新方法去渲染内容\r\n  renderer.render(scene, camera)\r\n  // 更新控制器。必须在摄像机的变换发生任何手动改变后调用\r\n  controls.update()\r\n  // 使用帧动画重复调用更新\r\n  requestAnimationFrame(update)\r\n}\r\nupdate()\r\n\r\n```\r\n\r\n## demo展示\r\n\r\n\r\n在完成以上所有步骤后,得到了一个可以使用鼠标进行操作的3D立方体\r\n\r\n<iframe height="300" scrolling="no" title="Space globe - Three.js" src="https://codepen.io/qianshi-ffg/embed/JjBWqqv?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true" style="box-sizing: border-box; border-width: 0px; border-style: solid; border-color: rgb(229, 231, 235); --tw-border-spacing-x:0; --tw-border-spacing-y:0; --tw-translate-x:0; --tw-translate-y:0; --tw-rotate:0; --tw-skew-x:0; --tw-skew-y:0; --tw-scale-x:1; --tw-scale-y:1; --tw-pan-x: ; --tw-pan-y: ; --tw-pinch-zoom: ; --tw-scroll-snap-strictness:proximity; --tw-ordinal: ; --tw-slashed-zero: ; --tw-numeric-figure: ; --tw-numeric-spacing: ; --tw-numeric-fraction: ; --tw-ring-inset: ; --tw-ring-offset-width:0px; --tw-ring-offset-color:#fff; --tw-ring-color:rgb(59 130 246 / 0.5); --tw-ring-offset-shadow:0 0 #0000; --tw-ring-shadow:0 0 #0000; --tw-shadow:0 0 #0000; --tw-shadow-colored:0 0 #0000; --tw-blur: ; --tw-brightness: ; --tw-contrast: ; --tw-grayscale: ; --tw-hue-rotate: ; --tw-invert: ; --tw-saturate: ; --tw-sepia: ; --tw-drop-shadow: ; --tw-backdrop-blur: ; --tw-backdrop-brightness: ; --tw-backdrop-contrast: ; --tw-backdrop-grayscale: ; --tw-backdrop-hue-rotate: ; --tw-backdrop-invert: ; --tw-backdrop-opacity: ; --tw-backdrop-saturate: ; --tw-backdrop-sepia: ; display: block; vertical-align: middle; color: rgb(33, 53, 71); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI Variable&quot;, &quot;Segoe UI&quot;, system-ui, ui-sans-serif, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;; font-size: 16px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; width: 840px;"></iframe>\r\n\r\n## 轨道控制器(controls)\r\n\r\n利用控制器，可以进行一系列的交互，例如 **轨道控制器（OrbitControls）** ，可以使得相机围绕目标进行轨道运动，设置了以后，鼠标移动，物体会跟着移动\r\n\r\n```js\r\n// 创建轨道控制器\r\nconst controls = new OrbitControls(camera, renderer.domElement);\r\n```\r\n\r\n## 坐标轴辅助器\r\n\r\n可以显示坐标轴，辅助我们进行开发\r\n\r\n```js\r\n// 添加坐标轴辅助器，参数是轴的长度多少\r\nconst axesHelper = new THREE.AxesHelper(5);\r\n// 设置控制器阻尼，让控制器更有真实效果,但是必须在动画循环里调用.update()。\r\ncontrols.enableDamping = true;\r\n// 添加到场景中\r\nscene.add(axesHelper); \r\n\r\n// 动画函数\r\nfunction render() {\r\n  controls.update();\r\n  renderer.render(scene, camera);\r\n  // 设置浏览器每一帧刷新的时候都重新渲染一遍，渲染下一帧的时候就会调用render函数\r\n  requestAnimationFrame(render);\r\n}\r\n\r\nrender();\r\n```\r\n\r\n## 物体的移动，缩放，旋转\r\n\r\n```js\r\n// 修改物体的位置\r\ncube.position.set(5, 0, 0); // x,y,z\r\ncube.position.x = 3; // 单独设置\r\n// 缩放\r\ncube.scale.set(3, 2, 1); // x,y,z\r\ncube.scale.x = 5; // 单独设置\r\n// 旋转\r\ncube.rotation.set(Math.PI / 4, 0, 0); // x,y,z的弧度\r\n\r\n// 更多信息查询官方文档\r\n```\r\n\r\n## 时钟(clock)\r\n\r\n该对象用于跟踪时间,可以帮助我们优化动画效果\r\n\r\n```js\r\n// 例：\r\n// 设置时钟\r\nconst clock = new THREE.Clock();\r\nfunction render() {\r\n  // 获取时钟运行的总时长\r\n  let time = clock.getElapsedTime();\r\n  // let deltaTime = clock.getDelta();\r\n  //  console.log("两次获取时间的间隔时间：", deltaTime);\r\n  let t = time % 5;\r\n  cube.position.x = t * 1; // 物体位移\r\n\r\n  renderer.render(scene, camera);\r\n  //  渲染下一帧的时候就会调用render函数\r\n  requestAnimationFrame(render);\r\n}\r\n\r\nrender();\r\n```\r\n\r\n## 动画库：gsap\r\n\r\n**gsap** 是一个**JavaScript** 动画库，可以帮助我们实现各种动画效果，下面是案例，详细信息查看[官方文档](https://greensock.com/gsap/)\r\n\r\n```js\r\n1.安装\r\nnpm i gsap\r\n```\r\n\r\n```js\r\n// 案例\r\n// 导入动画库\r\nimport gsap from "gsap";\r\n// 第一个参数是要动的元素，这里是物体的位移，第二个参数是个对象\r\ngsap.to(cube.position, {\r\n  x: 5,\r\n  duration: 5, // 一共需要多少时间，这里是5秒\r\n  ease: "power1.inOut", // 运动的类型\r\n  //   设置重复的次数，无限次循环-1\r\n  repeat: -1,\r\n  //   往返运动\r\n  yoyo: true,\r\n  //   delay，延迟2秒运动\r\n  delay: 2,\r\n  onComplete: () => {\r\n    console.log("动画完成");\r\n  },\r\n  onStart: () => {\r\n    console.log("动画开始");\r\n  },\r\n});\r\n\r\n// gsap.to也会返回一个对象，当你想做一些操作时，可以用一个变量接收\r\n// 例如双击事件，animate1是返回的对象\r\nwindow.addEventListener("dblclick", () => {\r\n    // 当在运动时\r\n  if (animate1.isActive()) {\r\n    //   暂停\r\n    animate1.pause();\r\n  } else {\r\n    //   恢复\r\n    animate1.resume();\r\n  }\r\n});\r\n```\r\n\r\n## 应用图形用户界面\r\n\r\n可以实现通过可视化界面操作图形变化，例如下面案例\r\n\r\n```js\r\n// 安装\r\nnpm install --save dat.gui\r\n// 导入dat.gui\r\nimport * as dat from "dat.gui";\r\n// 创建可视化窗口\r\nconst gui = new dat.GUI();\r\n// 添加选项，移动x轴，最小值，最大值，步骤间距单位\r\ngui\r\n  .add(cube.position, "x")\r\n  .min(0)\r\n  .max(5)\r\n  .step(0.01)\r\n  .name("移动x轴")\r\n  .onChange((value) => {\r\n    console.log("值被修改：", value);\r\n  })\r\n  .onFinishChange((value) => {\r\n    console.log("完全停下来:", value);\r\n  });\r\n\r\n//   修改物体的颜色\r\nconst params = {\r\n  color: "#ffff00",\r\n  fn: () => {\r\n    //   让立方体运动起来\r\n    gsap.to(cube.position, { x: 5, duration: 2, yoyo: true, repeat: -1 });\r\n  },\r\n};\r\ngui.addColor(params, "color").onChange((value) => {\r\n  console.log("值被修改：", value);\r\n  cube.material.color.set(value);\r\n});\r\n// 设置选项框\r\ngui.add(cube, "visible").name("是否显示");\r\n\r\nvar folder = gui.addFolder("设置立方体");\r\nfolder.add(cube.material, "wireframe");\r\n// 设置按钮点击触发某个事件\r\nfolder.add(params, "fn").name("立方体运动");\r\n```\r\n\r\n',contentRendered:'<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>最近经常刷到使用3D技术做的网站以及各种有趣的demo,这也成功引起了我的兴趣. 因此,我也准备浅尝一下制作3D效果的乐趣，在使用的技术上,选择了目前使用率比较高的threejs来进行demo的构建</p>\n</div>\n<h2 id="分析构成" tabindex="-1"><a class="header-anchor" href="#分析构成" aria-hidden="true">#</a> 分析构成</h2>\n<p>首先分析一下使用threejs制作的3D效果需要的基本要素有哪些</p>\n<ol>\n<li>容器 -&gt; 用来承载构建的场景以及内容</li>\n<li>渲染器 -&gt; 将内容渲染到容器中</li>\n<li>场景 -&gt; 用来承载我们的内容(相机, 灯光, 动画, 网格等)</li>\n<li>相机 -&gt; 调整相机可以调整页面展示内容的大小,多少,展示角度等</li>\n<li>网格 -&gt; 网格是内容的主要组成部分,可以说是我们要展示的主体</li>\n</ol>\n<h2 id="容器canvas" tabindex="-1"><a class="header-anchor" href="#容器canvas" aria-hidden="true">#</a> 容器canvas</h2>\n<p>three是使用canvas来作为承载一切的容器,因此我们首先要添加一个canvas</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="渲染器webglrenderer" tabindex="-1"><a class="header-anchor" href="#渲染器webglrenderer" aria-hidden="true">#</a> 渲染器WebGLRenderer</h3>\n<p>threejs中的渲染器使用的是<strong>WebGLRenderer</strong>, 通过 <strong>new THREE.WebGLRenderer</strong> 初始化渲染器，并将 canvas 容器作为参数传给它\n通过调用 <strong>setSize</strong> 方法设置渲染器的尺寸；\n调用 <strong>setPixelRatio</strong> 设置 canvas 的像素比为当前设备的屏幕像素比，避免高分屏下出现模糊情况。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 初始化渲染器</span>\n<span class="token keyword">const</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#demo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> renderer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>WebGLRenderer</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">canvas</span><span class="token operator">:</span> canvas\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 设置渲染器尺寸</span>\nrenderer<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">,</span> window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 设置canvas像素比为当前设备屏幕像素比</span>\nrenderer<span class="token punctuation">.</span><span class="token function">setPixelRatio</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>devicePixelRatio<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="场景scene" tabindex="-1"><a class="header-anchor" href="#场景scene" aria-hidden="true">#</a> 场景Scene</h2>\n<p>使用 <strong>new THREE.Scene</strong> 来初始化场景, 后面我们的相机 网格等都需要放入场景中,下面是一些常见的场景属性</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>参数介绍</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>fog</td>\n<td>设置场景的雾化效果,可以渲染出一层雾气，隐层远处的的物体</td>\n</tr>\n<tr>\n<td>autoUpdate</td>\n<td>设置是否自动更新</td>\n</tr>\n<tr>\n<td>background</td>\n<td>设置场景背景，默认为黑色</td>\n</tr>\n<tr>\n<td>children</td>\n<td>所有对象的列表</td>\n</tr>\n<tr>\n<td>add()</td>\n<td>向场景中添加对象</td>\n</tr>\n<tr>\n<td>remove()</td>\n<td>从场景中移除对象</td>\n</tr>\n<tr>\n<td>getChildByName()</td>\n<td>根据名字直接返回这个对象</td>\n</tr>\n<tr>\n<td>traverse()</td>\n<td>传入一个回调函数访问所有的对象</td>\n</tr>\n</tbody>\n</table>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 初始化场景</span>\n<span class="token keyword">const</span> scene <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>Scene</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">// 场景颜色</span>\nscene<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>Color</span><span class="token punctuation">(</span><span class="token number">0x1a1a1a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="相机orthographiccamera-or-perspectivecamera" tabindex="-1"><a class="header-anchor" href="#相机orthographiccamera-or-perspectivecamera" aria-hidden="true">#</a> 相机OrthographicCamera or PerspectiveCamera</h2>\n<p>threejs中相机主要分为两种：正交相机(OrthographicCamera)和透视相机(PerspectiveCamera)</p>\n<h3 id="正交相机-orthographiccamera" tabindex="-1"><a class="header-anchor" href="#正交相机-orthographiccamera" aria-hidden="true">#</a> 正交相机（OrthographicCamera）</h3>\n<p>这一摄像机使用orthographic projection（正交投影）来进行投影。\n在这种投影模式下，无论物体距离相机距离远或者近，在最终渲染的图片中物体的大小都保持不变。\n这对于渲染2D场景或者UI元素是非常有用的。</p>\n<h3 id="透视相机-perspectivecamera" tabindex="-1"><a class="header-anchor" href="#透视相机-perspectivecamera" aria-hidden="true">#</a> 透视相机（PerspectiveCamera）</h3>\n<p>这一摄像机使用perspective projection（透视投影）来进行投影。\n这一投影模式被用来模拟人眼所看到的景象，它是3D场景的渲染中使用得最普遍的投影模式。</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="http://oss.xingyijun.cn/uploads/file-1673423427823.png" data="aurora">\n在当前的demo中我们使用的是透视相机PerspectiveCamera</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>参数介绍</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>fov</td>\n<td>摄像机视锥体垂直视野角度，从视图的底部到顶部，以角度来表示。默认值是50</td>\n</tr>\n<tr>\n<td>aspect</td>\n<td>摄像机视锥体的长宽比，通常是使用画布的宽/画布的高。默认值是1（正方形画布）</td>\n</tr>\n<tr>\n<td>near</td>\n<td>摄像机的近端面，表示的是从距离相机多远的位置开始渲染,默认值是0.1</td>\n</tr>\n<tr>\n<td>far</td>\n<td>摄像机的远端面，表示的是距离相机多远的位置截止渲染,默认值是2000</td>\n</tr>\n</tbody>\n</table>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 初始化相机</span>\n<span class="token keyword">const</span> camera <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>PerspectiveCamera</span><span class="token punctuation">(</span><span class="token number">70</span><span class="token punctuation">,</span> sizes<span class="token punctuation">.</span>width <span class="token operator">/</span> sizes<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 相机的z轴</span>\ncamera<span class="token punctuation">.</span>position<span class="token punctuation">.</span>z <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n<span class="token comment">// 添加相机到场景种</span>\nscene<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>camera<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="网格mesh" tabindex="-1"><a class="header-anchor" href="#网格mesh" aria-hidden="true">#</a> 网格Mesh</h2>\n<p>threejs中使用 <strong>new THREE.Mesh</strong> 来创建网格,但是网格本身还有两部分构成: 几何体和材质\n要创建一个可正常显示在场景中的三维模型，需要将网格 <strong>Mesh</strong> 添加到场景中，并创建所需的几何体 <strong>Geometry</strong> 和 材质 <strong>Material</strong>\n几何体与材质分为多种,各有自己对应的属性和功能,本文在这里就不多做赘述了,有想深入了解的同学可以去查看文档\nthreejs中文文档: <a href="https://threejs.org/docs/index.html#manual/zh/introduction/Creating-a-scene" target="_blank" rel="noopener noreferrer">https://threejs.org/docs/index.html#manual/zh/introduction/Creating-a-scene<ExternalLinkIcon/></a></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 添加立方缓冲几何体（BoxGeometry</span>\n<span class="token keyword">const</span> geometry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>BoxGeometry</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 设置基础网格材质(MeshBasicMaterial)</span>\n<span class="token keyword">const</span> material <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>MeshBasicMaterial</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token number">0xab6ab6</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 初始化网格对象</span>\n<span class="token keyword">const</span> mesh <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>Mesh</span><span class="token punctuation">(</span>geometry<span class="token punctuation">,</span> material<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 将网格对象添加到场景中</span>\nscene<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>mesh<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="渲染场景与相机" tabindex="-1"><a class="header-anchor" href="#渲染场景与相机" aria-hidden="true">#</a> 渲染场景与相机</h2>\n<p>在上面的步骤都完成后,我们的几大要素都已经具备了,但是页面上依然是没有任何内容,这是因为还没有将场景与相机添加到渲染器中</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 将场景与相机添加到渲染器中并渲染</span>\nrenderer<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>scene<span class="token punctuation">,</span> camera<span class="token punctuation">)</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="操作几何体" tabindex="-1"><a class="header-anchor" href="#操作几何体" aria-hidden="true">#</a> 操作几何体</h2>\n<p>在添加如上代码后,页面上出现了几何体\n<img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="img" originSrc="http://oss.xingyijun.cn/uploads/file-1673427382592.png" data="aurora">\n虽然看上去像是一个2d的正方形,但实际上是立方体,此时它是正对着屏幕的.我们当然是更加希望看到一个3d的效果,如果可以还希望能够鼠标操作放大缩小等.\n这时,就需要借助一个叫 **轨道控制器（OrbitControls）**的东西\n这里我就不多介绍它是怎么引入的了,有需要的同学可以去查询一下,在单纯html中引入与在脚手架项目中引入也是有一些区别的\n..........就当这里已经引入了,通过使用 <strong>new THREE.OrbitControls</strong> 来初始化轨道控制器</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>参数介绍</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>object</td>\n<td>将要被控制的相机。该相机不允许是其他任何对象的子级，除非该对象是场景自身</td>\n</tr>\n<tr>\n<td>domElement</td>\n<td>用于事件监听的HTML元素</td>\n</tr>\n</tbody>\n</table>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 初始化轨道控制器</span>\n<span class="token keyword">const</span> controls <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>OrbitControls</span><span class="token punctuation">(</span>camera<span class="token punctuation">,</span> renderer<span class="token punctuation">.</span>domElement<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>当然单纯初始化轨道控制器后依然是无法进行使用的,因此在操作的同时,需要对其进行更新.</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 创建一个更新的方法</span>\n<span class="token keyword">const</span> <span class="token function-variable function">update</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// 跟随更新方法去渲染内容</span>\n  renderer<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>scene<span class="token punctuation">,</span> camera<span class="token punctuation">)</span>\n  <span class="token comment">// 更新控制器。必须在摄像机的变换发生任何手动改变后调用</span>\n  controls<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token comment">// 使用帧动画重复调用更新</span>\n  <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>update<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="demo展示" tabindex="-1"><a class="header-anchor" href="#demo展示" aria-hidden="true">#</a> demo展示</h2>\n<p>在完成以上所有步骤后,得到了一个可以使用鼠标进行操作的3D立方体</p>\n<iframe height="300" scrolling="no" title="Space globe - Three.js" src="https://codepen.io/qianshi-ffg/embed/JjBWqqv?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true" style="box-sizing: border-box; border-width: 0px; border-style: solid; border-color: rgb(229, 231, 235); --tw-border-spacing-x:0; --tw-border-spacing-y:0; --tw-translate-x:0; --tw-translate-y:0; --tw-rotate:0; --tw-skew-x:0; --tw-skew-y:0; --tw-scale-x:1; --tw-scale-y:1; --tw-pan-x: ; --tw-pan-y: ; --tw-pinch-zoom: ; --tw-scroll-snap-strictness:proximity; --tw-ordinal: ; --tw-slashed-zero: ; --tw-numeric-figure: ; --tw-numeric-spacing: ; --tw-numeric-fraction: ; --tw-ring-inset: ; --tw-ring-offset-width:0px; --tw-ring-offset-color:#fff; --tw-ring-color:rgb(59 130 246 / 0.5); --tw-ring-offset-shadow:0 0 #0000; --tw-ring-shadow:0 0 #0000; --tw-shadow:0 0 #0000; --tw-shadow-colored:0 0 #0000; --tw-blur: ; --tw-brightness: ; --tw-contrast: ; --tw-grayscale: ; --tw-hue-rotate: ; --tw-invert: ; --tw-saturate: ; --tw-sepia: ; --tw-drop-shadow: ; --tw-backdrop-blur: ; --tw-backdrop-brightness: ; --tw-backdrop-contrast: ; --tw-backdrop-grayscale: ; --tw-backdrop-hue-rotate: ; --tw-backdrop-invert: ; --tw-backdrop-opacity: ; --tw-backdrop-saturate: ; --tw-backdrop-sepia: ; display: block; vertical-align: middle; color: rgb(33, 53, 71); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI Variable&quot;, &quot;Segoe UI&quot;, system-ui, ui-sans-serif, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;; font-size: 16px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; width: 840px;"></iframe>\n<h2 id="轨道控制器-controls" tabindex="-1"><a class="header-anchor" href="#轨道控制器-controls" aria-hidden="true">#</a> 轨道控制器(controls)</h2>\n<p>利用控制器，可以进行一系列的交互，例如 <strong>轨道控制器（OrbitControls）</strong> ，可以使得相机围绕目标进行轨道运动，设置了以后，鼠标移动，物体会跟着移动</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 创建轨道控制器</span>\n<span class="token keyword">const</span> controls <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrbitControls</span><span class="token punctuation">(</span>camera<span class="token punctuation">,</span> renderer<span class="token punctuation">.</span>domElement<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="坐标轴辅助器" tabindex="-1"><a class="header-anchor" href="#坐标轴辅助器" aria-hidden="true">#</a> 坐标轴辅助器</h2>\n<p>可以显示坐标轴，辅助我们进行开发</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 添加坐标轴辅助器，参数是轴的长度多少</span>\n<span class="token keyword">const</span> axesHelper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>AxesHelper</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 设置控制器阻尼，让控制器更有真实效果,但是必须在动画循环里调用.update()。</span>\ncontrols<span class="token punctuation">.</span>enableDamping <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token comment">// 添加到场景中</span>\nscene<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>axesHelper<span class="token punctuation">)</span><span class="token punctuation">;</span> \n\n<span class="token comment">// 动画函数</span>\n<span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  controls<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  renderer<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>scene<span class="token punctuation">,</span> camera<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// 设置浏览器每一帧刷新的时候都重新渲染一遍，渲染下一帧的时候就会调用render函数</span>\n  <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>render<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="物体的移动-缩放-旋转" tabindex="-1"><a class="header-anchor" href="#物体的移动-缩放-旋转" aria-hidden="true">#</a> 物体的移动，缩放，旋转</h2>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 修改物体的位置</span>\ncube<span class="token punctuation">.</span>position<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// x,y,z</span>\ncube<span class="token punctuation">.</span>position<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 单独设置</span>\n<span class="token comment">// 缩放</span>\ncube<span class="token punctuation">.</span>scale<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// x,y,z</span>\ncube<span class="token punctuation">.</span>scale<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// 单独设置</span>\n<span class="token comment">// 旋转</span>\ncube<span class="token punctuation">.</span>rotation<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// x,y,z的弧度</span>\n\n<span class="token comment">// 更多信息查询官方文档</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="时钟-clock" tabindex="-1"><a class="header-anchor" href="#时钟-clock" aria-hidden="true">#</a> 时钟(clock)</h2>\n<p>该对象用于跟踪时间,可以帮助我们优化动画效果</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 例：</span>\n<span class="token comment">// 设置时钟</span>\n<span class="token keyword">const</span> clock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>Clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 获取时钟运行的总时长</span>\n  <span class="token keyword">let</span> time <span class="token operator">=</span> clock<span class="token punctuation">.</span><span class="token function">getElapsedTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// let deltaTime = clock.getDelta();</span>\n  <span class="token comment">//  console.log("两次获取时间的间隔时间：", deltaTime);</span>\n  <span class="token keyword">let</span> t <span class="token operator">=</span> time <span class="token operator">%</span> <span class="token number">5</span><span class="token punctuation">;</span>\n  cube<span class="token punctuation">.</span>position<span class="token punctuation">.</span>x <span class="token operator">=</span> t <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 物体位移</span>\n\n  renderer<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>scene<span class="token punctuation">,</span> camera<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">//  渲染下一帧的时候就会调用render函数</span>\n  <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>render<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="动画库-gsap" tabindex="-1"><a class="header-anchor" href="#动画库-gsap" aria-hidden="true">#</a> 动画库：gsap</h2>\n<p><strong>gsap</strong> 是一个<strong>JavaScript</strong> 动画库，可以帮助我们实现各种动画效果，下面是案例，详细信息查看<a href="https://greensock.com/gsap/" target="_blank" rel="noopener noreferrer">官方文档<ExternalLinkIcon/></a></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token number">1.</span>安装\nnpm i gsap\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 案例</span>\n<span class="token comment">// 导入动画库</span>\n<span class="token keyword">import</span> gsap <span class="token keyword">from</span> <span class="token string">"gsap"</span><span class="token punctuation">;</span>\n<span class="token comment">// 第一个参数是要动的元素，这里是物体的位移，第二个参数是个对象</span>\ngsap<span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>cube<span class="token punctuation">.</span>position<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">duration</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token comment">// 一共需要多少时间，这里是5秒</span>\n  <span class="token literal-property property">ease</span><span class="token operator">:</span> <span class="token string">"power1.inOut"</span><span class="token punctuation">,</span> <span class="token comment">// 运动的类型</span>\n  <span class="token comment">//   设置重复的次数，无限次循环-1</span>\n  <span class="token literal-property property">repeat</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>\n  <span class="token comment">//   往返运动</span>\n  <span class="token literal-property property">yoyo</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token comment">//   delay，延迟2秒运动</span>\n  <span class="token literal-property property">delay</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">onComplete</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"动画完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">onStart</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"动画开始"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// gsap.to也会返回一个对象，当你想做一些操作时，可以用一个变量接收</span>\n<span class="token comment">// 例如双击事件，animate1是返回的对象</span>\nwindow<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"dblclick"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token comment">// 当在运动时</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>animate1<span class="token punctuation">.</span><span class="token function">isActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//   暂停</span>\n    animate1<span class="token punctuation">.</span><span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token comment">//   恢复</span>\n    animate1<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><h2 id="应用图形用户界面" tabindex="-1"><a class="header-anchor" href="#应用图形用户界面" aria-hidden="true">#</a> 应用图形用户界面</h2>\n<p>可以实现通过可视化界面操作图形变化，例如下面案例</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 安装</span>\nnpm install <span class="token operator">--</span>save dat<span class="token punctuation">.</span>gui\n<span class="token comment">// 导入dat.gui</span>\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> dat <span class="token keyword">from</span> <span class="token string">"dat.gui"</span><span class="token punctuation">;</span>\n<span class="token comment">// 创建可视化窗口</span>\n<span class="token keyword">const</span> gui <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">dat<span class="token punctuation">.</span>GUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 添加选项，移动x轴，最小值，最大值，步骤间距单位</span>\ngui\n  <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cube<span class="token punctuation">.</span>position<span class="token punctuation">,</span> <span class="token string">"x"</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">step</span><span class="token punctuation">(</span><span class="token number">0.01</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">"移动x轴"</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">onChange</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"值被修改："</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">onFinishChange</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"完全停下来:"</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">//   修改物体的颜色</span>\n<span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">"#ffff00"</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token comment">//   让立方体运动起来</span>\n    gsap<span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>cube<span class="token punctuation">.</span>position<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token literal-property property">duration</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">yoyo</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">repeat</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\ngui<span class="token punctuation">.</span><span class="token function">addColor</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span> <span class="token string">"color"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onChange</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"值被修改："</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  cube<span class="token punctuation">.</span>material<span class="token punctuation">.</span>color<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 设置选项框</span>\ngui<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cube<span class="token punctuation">,</span> <span class="token string">"visible"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">"是否显示"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> folder <span class="token operator">=</span> gui<span class="token punctuation">.</span><span class="token function">addFolder</span><span class="token punctuation">(</span><span class="token string">"设置立方体"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nfolder<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cube<span class="token punctuation">.</span>material<span class="token punctuation">,</span> <span class="token string">"wireframe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 设置按钮点击触发某个事件</span>\nfolder<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span> <span class="token string">"fn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">"立方体运动"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div>',date:"2023-01-15",deps:[],hoistedTags:[],links:[],pathInferred:"/three/2023/20230115.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"20230115",filePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/three/2023/20230115.md",filePathRelative:"three/2023/20230115.md",componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/three/2023/20230115.html.vue",componentFilePathRelative:"pages/three/2023/20230115.html.vue",componentFileChunkName:"v-571b9622",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/three/2023/20230115.html.js",dataFilePathRelative:"pages/three/2023/20230115.html.js",dataFileChunkName:"v-571b9622",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/three/2023/20230115.html",htmlFilePathRelative:"three/2023/20230115.html"},{data:{key:"v-5012795f",path:"/%E5%B0%8F%E7%A8%8B%E5%BA%8F/2022/20220730.html",title:"解决不同设备兼容性问题",lang:"zh-CN",frontmatter:{title:"解决不同设备兼容性问题",date:"2022-07-30T00:00:00.000Z",tags:["小程序"],categories:["小程序"]},excerpt:"",headers:[],git:{updatedTime:null,contributors:[]}},key:"v-5012795f",path:"/%E5%B0%8F%E7%A8%8B%E5%BA%8F/2022/20220730.html",title:"解决不同设备兼容性问题",lang:"zh-CN",frontmatter:{title:"解决不同设备兼容性问题",date:"2022-07-30T00:00:00.000Z",tags:["小程序"],categories:["小程序"]},excerpt:"",headers:[],content:"\r\n::: tip\r\n\r\n我们在开发小程序时，很多时候需要自定义 NavBar ，那么不可避免的要处理在不同设备下，页面展示正常，功能正常，这一篇将列举一些常见的兼容性问题\r\n\r\n:::\r\n\r\n# 不同设备下的页面展示\r\n\r\n小程序在不同设备下运行，可能会造成页面样式异常，下面针对 pc 端，安卓，苹果来实现兼容\r\n\r\n```js\r\n// 首页我们在 app.js 文件中写入以下代码\r\n\r\n// app.js\r\nApp({\r\n  onLaunch(e) {\r\n    // 展示本地存储能力\r\n     \r\n  },\r\n  globalData: {\r\n    userInfo: null,\r\n    visit_history:[],//品牌浏览历史\r\n    is_iphone:'',//苹果刘海适配\r\n    statusBarHeight:wx.getSystemInfoSync()['statusBarHeight'], \r\n    base_info:'',//全局基础信息，例如联系电话等\r\n  }\r\n})\r\n\r\n// 调用 wx.getSystemInfoSync()['statusBarHeight'] 来获取当前设备的高度\r\n\r\n// 第二步，在需要兼容的页面 js 文件中\r\n// pages/addEnterprise/addEnterprise.js\r\nconst app = getApp() 引入\r\nPage({\r\n data: { // statusBarHeight 判断是安卓还是苹果，20是安卓\r\n        statusBarHeight: app.globalData.statusBarHeight,\r\n     // platform：定义一个变量，判断是否是 pc 端，pc 是 windows  \r\n     platform: '', \r\n },\r\n  onLoad(options) {\r\n      //  wx.getSystemInfo 接口获取当前设备信息\r\n        wx.getSystemInfo({\r\n            success: (res) => {\r\n                this.setData({\r\n                    platform: res.platform\r\n                })\r\n            }\r\n        })\r\n    },\r\n })\r\n\r\n\r\n// 示例使用\r\n\x3c!--pages/addEnterprise/addEnterprise.wxml--\x3e\r\n<view class=\"index\">\r\n    <view class=\"{{statusBarHeight == '20' ? 'header' : 'header-lh'}}\" wx:if=\"{{platform !== 'windows'}}\">\r\n        <van-icon name=\"arrow-left\" class=\"header-icon\" size=\"50rpx\" bindtap=\"handleback\" />\r\n        <text class=\"titles\">加企微</text>\r\n    </view>\r\n</view>\r\n\r\n\r\n```\r\n\r\n# 绝对定位\r\n\r\n- 绝对定位能不使用就尽量不要使用，因为苹果和pc端有些不支持\r\n\r\n",contentRendered:'<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>我们在开发小程序时，很多时候需要自定义 NavBar ，那么不可避免的要处理在不同设备下，页面展示正常，功能正常，这一篇将列举一些常见的兼容性问题</p>\n</div>\n<h1 id="不同设备下的页面展示" tabindex="-1"><a class="header-anchor" href="#不同设备下的页面展示" aria-hidden="true">#</a> 不同设备下的页面展示</h1>\n<p>小程序在不同设备下运行，可能会造成页面样式异常，下面针对 pc 端，安卓，苹果来实现兼容</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 首页我们在 app.js 文件中写入以下代码</span>\n\n<span class="token comment">// app.js</span>\n<span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token function">onLaunch</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 展示本地存储能力</span>\n     \n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">globalData</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">userInfo</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">visit_history</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">//品牌浏览历史</span>\n    <span class="token literal-property property">is_iphone</span><span class="token operator">:</span><span class="token string">\'\'</span><span class="token punctuation">,</span><span class="token comment">//苹果刘海适配</span>\n    <span class="token literal-property property">statusBarHeight</span><span class="token operator">:</span>wx<span class="token punctuation">.</span><span class="token function">getSystemInfoSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">\'statusBarHeight\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> \n    <span class="token literal-property property">base_info</span><span class="token operator">:</span><span class="token string">\'\'</span><span class="token punctuation">,</span><span class="token comment">//全局基础信息，例如联系电话等</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 调用 wx.getSystemInfoSync()[\'statusBarHeight\'] 来获取当前设备的高度</span>\n\n<span class="token comment">// 第二步，在需要兼容的页面 js 文件中</span>\n<span class="token comment">// pages/addEnterprise/addEnterprise.js</span>\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">getApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 引入\n<span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// statusBarHeight 判断是安卓还是苹果，20是安卓</span>\n        <span class="token literal-property property">statusBarHeight</span><span class="token operator">:</span> app<span class="token punctuation">.</span>globalData<span class="token punctuation">.</span>statusBarHeight<span class="token punctuation">,</span>\n     <span class="token comment">// platform：定义一个变量，判断是否是 pc 端，pc 是 windows  </span>\n     <span class="token literal-property property">platform</span><span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> \n <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">//  wx.getSystemInfo 接口获取当前设备信息</span>\n        wx<span class="token punctuation">.</span><span class="token function">getSystemInfo</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n            <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n                    <span class="token literal-property property">platform</span><span class="token operator">:</span> res<span class="token punctuation">.</span>platform\n                <span class="token punctuation">}</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n\n<span class="token comment">// 示例使用</span>\n<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>pages<span class="token operator">/</span>addEnterprise<span class="token operator">/</span>addEnterprise<span class="token punctuation">.</span>wxml<span class="token operator">--</span><span class="token operator">></span>\n<span class="token operator">&lt;</span>view <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"index"</span><span class="token operator">></span>\n    <span class="token operator">&lt;</span>view <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"{{statusBarHeight == \'20\' ? \'header\' : \'header-lh\'}}"</span> <span class="token literal-property property">wx</span><span class="token operator">:</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"{{platform !== \'windows\'}}"</span><span class="token operator">></span>\n        <span class="token operator">&lt;</span>van<span class="token operator">-</span>icon name<span class="token operator">=</span><span class="token string">"arrow-left"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"header-icon"</span> size<span class="token operator">=</span><span class="token string">"50rpx"</span> bindtap<span class="token operator">=</span><span class="token string">"handleback"</span> <span class="token operator">/</span><span class="token operator">></span>\n        <span class="token operator">&lt;</span>text <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"titles"</span><span class="token operator">></span>加企微<span class="token operator">&lt;</span><span class="token operator">/</span>text<span class="token operator">></span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">></span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">></span>\n\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br></div></div><h1 id="绝对定位" tabindex="-1"><a class="header-anchor" href="#绝对定位" aria-hidden="true">#</a> 绝对定位</h1>\n<ul>\n<li>绝对定位能不使用就尽量不要使用，因为苹果和pc端有些不支持</li>\n</ul>\n',date:"2022-07-30",deps:[],hoistedTags:[],links:[],pathInferred:"/小程序/2022/20220730.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"20220730",filePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/小程序/2022/20220730.md",filePathRelative:"小程序/2022/20220730.md",componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/小程序/2022/20220730.html.vue",componentFilePathRelative:"pages/小程序/2022/20220730.html.vue",componentFileChunkName:"v-5012795f",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/小程序/2022/20220730.html.js",dataFilePathRelative:"pages/小程序/2022/20220730.html.js",dataFileChunkName:"v-5012795f",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/小程序/2022/20220730.html",htmlFilePathRelative:"小程序/2022/20220730.html"},{data:{key:"v-8caf0246",path:"/%E5%B0%8F%E7%A8%8B%E5%BA%8F/2022/20220831.html",title:"微信小程序在scroll-view标签内不能正常使用超过多行显示省略号",lang:"zh-CN",frontmatter:{title:"微信小程序在scroll-view标签内不能正常使用超过多行显示省略号",date:"2022-08-31T00:00:00.000Z",tags:["小程序"],categories:["小程序"]},excerpt:"",headers:[],git:{updatedTime:null,contributors:[]}},key:"v-8caf0246",path:"/%E5%B0%8F%E7%A8%8B%E5%BA%8F/2022/20220831.html",title:"微信小程序在scroll-view标签内不能正常使用超过多行显示省略号",lang:"zh-CN",frontmatter:{title:"微信小程序在scroll-view标签内不能正常使用超过多行显示省略号",date:"2022-08-31T00:00:00.000Z",tags:["小程序"],categories:["小程序"]},excerpt:"",headers:[],content:"\r\n::: tip\r\n\r\n我们在开发小程序时，很多时候需要使用 scroll-view 标签，那么不可避免的要处理多行文本超出显示省略号\r\n\r\n:::\r\n\r\n# 代码展示\r\n\r\n原因是：scroll-view 为了能够横向滚动需要设置 white-space: nowrap (文本不会换行，文本会在在同一行上继续，直到遇到标签为止。)\r\n解决方案：给需要实现多行文本的元素设置white-space：normal\r\n\r\n```js\r\n// 实现多行文本代码\r\n    display: -webkit-box;\r\n    -webkit-box-orient: vertical;\r\n    -webkit-line-clamp:2; // 2行\r\n    overflow: hidden;\r\n    word-break: break-all;\r\n    text-overflow: ellipsis\r\n```\r\n\r\n",contentRendered:'<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>我们在开发小程序时，很多时候需要使用 scroll-view 标签，那么不可避免的要处理多行文本超出显示省略号</p>\n</div>\n<h1 id="代码展示" tabindex="-1"><a class="header-anchor" href="#代码展示" aria-hidden="true">#</a> 代码展示</h1>\n<p>原因是：scroll-view 为了能够横向滚动需要设置 white-space: nowrap (文本不会换行，文本会在在同一行上继续，直到遇到标签为止。)\n解决方案：给需要实现多行文本的元素设置white-space：normal</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 实现多行文本代码</span>\n    <span class="token literal-property property">display</span><span class="token operator">:</span> <span class="token operator">-</span>webkit<span class="token operator">-</span>box<span class="token punctuation">;</span>\n    <span class="token operator">-</span>webkit<span class="token operator">-</span>box<span class="token operator">-</span>orient<span class="token operator">:</span> vertical<span class="token punctuation">;</span>\n    <span class="token operator">-</span>webkit<span class="token operator">-</span>line<span class="token operator">-</span>clamp<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 2行</span>\n    <span class="token literal-property property">overflow</span><span class="token operator">:</span> hidden<span class="token punctuation">;</span>\n    word<span class="token operator">-</span><span class="token keyword">break</span><span class="token operator">:</span> <span class="token keyword">break</span><span class="token operator">-</span>all<span class="token punctuation">;</span>\n    text<span class="token operator">-</span>overflow<span class="token operator">:</span> ellipsis\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>',date:"2022-08-31",deps:[],hoistedTags:[],links:[],pathInferred:"/小程序/2022/20220831.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"20220831",filePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/小程序/2022/20220831.md",filePathRelative:"小程序/2022/20220831.md",componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/小程序/2022/20220831.html.vue",componentFilePathRelative:"pages/小程序/2022/20220831.html.vue",componentFileChunkName:"v-8caf0246",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/小程序/2022/20220831.html.js",dataFilePathRelative:"pages/小程序/2022/20220831.html.js",dataFileChunkName:"v-8caf0246",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/小程序/2022/20220831.html",htmlFilePathRelative:"小程序/2022/20220831.html"},{data:{key:"v-fa520c0e",path:"/%E5%B0%8F%E7%A8%8B%E5%BA%8F/2022/20220901.html",title:"在微信小程序中使用外部字体",lang:"zh-CN",frontmatter:{title:"在微信小程序中使用外部字体",date:"2022-09-01T00:00:00.000Z",tags:["小程序"],categories:["小程序"]},excerpt:"",headers:[],git:{updatedTime:null,contributors:[]}},key:"v-fa520c0e",path:"/%E5%B0%8F%E7%A8%8B%E5%BA%8F/2022/20220901.html",title:"在微信小程序中使用外部字体",lang:"zh-CN",frontmatter:{title:"在微信小程序中使用外部字体",date:"2022-09-01T00:00:00.000Z",tags:["小程序"],categories:["小程序"]},excerpt:"",headers:[],content:'\r\n::: tip\r\n\r\n我们在开发小程序时，很多时候需要使用外部字体，这一篇就来讲讲如果引入外部字体\r\n\r\n:::\r\n\r\n# 代码展示\r\n\r\n首先小程序字体文件是无法放在本地的当你尝试在css中导入本地字体文件时，\r\n\r\n会报错，我们可以将字体文件上传至服务器的 oss 上，\r\n\r\n```js\r\n// 可以在 app.wxss 文件中全局定义字体\r\n@font-face {\r\n  font-family: "kaiti"; // 定义字体名字\r\n  src: url("https://spkf-zsxn-prod.s3.cn-north-1.amazonaws.com.cn/pic/livecenter/kaiti.ttf");\r\n}\r\n// 需要使用时\r\n.test {\r\n  font-family: "kaiti"; // 使用字体\r\n}\r\n```\r\n\r\n我们除了通过 @font-face 方法引入使用，也可以通过 wx.loadFontFace 使用外部字体\r\n\r\n```js\r\nwx.loadFontFace({\r\n  family: "Bitstream", // 定义字体名字\r\n  source:\r\n    \'url("https://spkf-zsxn-prod.s3.cn-north-1.amazonaws.com.cn/pic/livecenter/kaiti.ttf")\',\r\n  success: (msg) => {\r\n    console.log(msg);\r\n  },\r\n});\r\n\r\n// 需要使用时\r\n.test {\r\n  font-family: "Bitstream"; // 使用字体\r\n}\r\n```\r\n\r\n',contentRendered:'<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>我们在开发小程序时，很多时候需要使用外部字体，这一篇就来讲讲如果引入外部字体</p>\n</div>\n<h1 id="代码展示" tabindex="-1"><a class="header-anchor" href="#代码展示" aria-hidden="true">#</a> 代码展示</h1>\n<p>首先小程序字体文件是无法放在本地的当你尝试在css中导入本地字体文件时，</p>\n<p>会报错，我们可以将字体文件上传至服务器的 oss 上，</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 可以在 app.wxss 文件中全局定义字体</span>\n@font<span class="token operator">-</span>face <span class="token punctuation">{</span>\n  font<span class="token operator">-</span>family<span class="token operator">:</span> <span class="token string">"kaiti"</span><span class="token punctuation">;</span> <span class="token comment">// 定义字体名字</span>\n  <span class="token literal-property property">src</span><span class="token operator">:</span> <span class="token function">url</span><span class="token punctuation">(</span><span class="token string">"https://spkf-zsxn-prod.s3.cn-north-1.amazonaws.com.cn/pic/livecenter/kaiti.ttf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 需要使用时</span>\n<span class="token punctuation">.</span>test <span class="token punctuation">{</span>\n  font<span class="token operator">-</span>family<span class="token operator">:</span> <span class="token string">"kaiti"</span><span class="token punctuation">;</span> <span class="token comment">// 使用字体</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>我们除了通过 @font-face 方法引入使用，也可以通过 wx.loadFontFace 使用外部字体</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>wx<span class="token punctuation">.</span><span class="token function">loadFontFace</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">family</span><span class="token operator">:</span> <span class="token string">"Bitstream"</span><span class="token punctuation">,</span> <span class="token comment">// 定义字体名字</span>\n  <span class="token literal-property property">source</span><span class="token operator">:</span>\n    <span class="token string">\'url("https://spkf-zsxn-prod.s3.cn-north-1.amazonaws.com.cn/pic/livecenter/kaiti.ttf")\'</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 需要使用时</span>\n<span class="token punctuation">.</span>test <span class="token punctuation">{</span>\n  font<span class="token operator">-</span>family<span class="token operator">:</span> <span class="token string">"Bitstream"</span><span class="token punctuation">;</span> <span class="token comment">// 使用字体</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div>',date:"2022-09-01",deps:[],hoistedTags:[],links:[],pathInferred:"/小程序/2022/20220901.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"20220901",filePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/小程序/2022/20220901.md",filePathRelative:"小程序/2022/20220901.md",componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/小程序/2022/20220901.html.vue",componentFilePathRelative:"pages/小程序/2022/20220901.html.vue",componentFileChunkName:"v-fa520c0e",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/小程序/2022/20220901.html.js",dataFilePathRelative:"pages/小程序/2022/20220901.html.js",dataFileChunkName:"v-fa520c0e",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/小程序/2022/20220901.html",htmlFilePathRelative:"小程序/2022/20220901.html"},{data:{key:"v-f48d527e",path:"/%E5%9F%BA%E7%A1%80/2022/20220612.html",title:"vscode 调式",lang:"zh-CN",frontmatter:{title:"vscode 调式",date:"2022-06-12T00:00:00.000Z",tags:["基础"],categories:["基础"]},excerpt:"",headers:[],git:{updatedTime:null,contributors:[]}},key:"v-f48d527e",path:"/%E5%9F%BA%E7%A1%80/2022/20220612.html",title:"vscode 调式",lang:"zh-CN",frontmatter:{title:"vscode 调式",date:"2022-06-12T00:00:00.000Z",tags:["基础"],categories:["基础"]},excerpt:"",headers:[],content:"\r\n::: tip\r\n\r\n代码调式对于开发者来说必不可少的，这一篇简单讲如何调式\r\n\r\n:::\r\n\r\n# 配置auto-attach\r\n\r\n- VSCode 调试 JS 的方法有很多，目前比较推荐的就是无需配置的 auto-attach。\r\n- 按 ctrl + shift + p，打开输入 >auto attach。默认是智能（smart）。如果不是，可以查看设置成智能，或者根据场景自行设置成其他的。\r\n\r\n# 调试操作方式\r\n\r\n- 方式一：在 package.json 找到相应的 scripts。鼠标悬浮在相应的命令上，会出现运行命令和调试命令两个选项，选择调试命令即可进入调试模式。或者点击 scripts 上方的 调试，再选择相应的命令。也可以进入调试模式。\r\n\r\n- 方式二：通过快捷键 ctrl + 反引号 打开终端。或者通过查看 —— 终端打开 VSCode 终端。\r\n\r\n  在终端进入到目录。执行相应的脚本。\r\n\r\n# 调试按钮介绍\r\n\r\n1. 继续（F5）: 点击后代码会直接执行到下一个断点所在位置，如果没有下一个断点，则认为本次代码执行完成。\r\n2. 单步跳过（F10）：点击后会跳到当前代码下一行继续执行，不会进入到函数内部。\r\n3. 单步调试（F11）：点击后进入到当前函数的内部调试，比如在 fn 这一行中执行单步调试，会进入到 fn 函数内部进行调试。\r\n4. 单步跳出（Shift + F11）：点击后跳出当前调试的函数，与单步调试对应。\r\n5. 重启（Ctrl + Shift + F5）：顾名思义。\r\n6. 断开链接（Shift + F5）：顾名思义。\r\n\r\n# 其他调试\r\n\r\n- 由于很多项目都配置了代码压缩，难于调试。所以开发环境下，一般通过配置生成 sourcemap 来调试代码。大部分开源项目（比如vue、vue-next源码）也会在贡献指南中说明如何开启 sourcemap。\r\n\r\n  1. 普通 webpack 配置\r\n\r\n     ```js\r\n     devtool: 'source-map'\r\n     ```\r\n\r\n  2. 调试 vue-cli 3+ 生成的项目\r\n\r\n     ```js\r\n     // vue-cli 3+\r\n     module.exports = {\r\n       configureWebpack: {\r\n         devtool: 'source-map'\r\n       }\r\n     }\r\n     ```\r\n\r\n     ",contentRendered:'<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>代码调式对于开发者来说必不可少的，这一篇简单讲如何调式</p>\n</div>\n<h1 id="配置auto-attach" tabindex="-1"><a class="header-anchor" href="#配置auto-attach" aria-hidden="true">#</a> 配置auto-attach</h1>\n<ul>\n<li>VSCode 调试 JS 的方法有很多，目前比较推荐的就是无需配置的 auto-attach。</li>\n<li>按 ctrl + shift + p，打开输入 &gt;auto attach。默认是智能（smart）。如果不是，可以查看设置成智能，或者根据场景自行设置成其他的。</li>\n</ul>\n<h1 id="调试操作方式" tabindex="-1"><a class="header-anchor" href="#调试操作方式" aria-hidden="true">#</a> 调试操作方式</h1>\n<ul>\n<li>\n<p>方式一：在 package.json 找到相应的 scripts。鼠标悬浮在相应的命令上，会出现运行命令和调试命令两个选项，选择调试命令即可进入调试模式。或者点击 scripts 上方的 调试，再选择相应的命令。也可以进入调试模式。</p>\n</li>\n<li>\n<p>方式二：通过快捷键 ctrl + 反引号 打开终端。或者通过查看 —— 终端打开 VSCode 终端。</p>\n<p>在终端进入到目录。执行相应的脚本。</p>\n</li>\n</ul>\n<h1 id="调试按钮介绍" tabindex="-1"><a class="header-anchor" href="#调试按钮介绍" aria-hidden="true">#</a> 调试按钮介绍</h1>\n<ol>\n<li>继续（F5）: 点击后代码会直接执行到下一个断点所在位置，如果没有下一个断点，则认为本次代码执行完成。</li>\n<li>单步跳过（F10）：点击后会跳到当前代码下一行继续执行，不会进入到函数内部。</li>\n<li>单步调试（F11）：点击后进入到当前函数的内部调试，比如在 fn 这一行中执行单步调试，会进入到 fn 函数内部进行调试。</li>\n<li>单步跳出（Shift + F11）：点击后跳出当前调试的函数，与单步调试对应。</li>\n<li>重启（Ctrl + Shift + F5）：顾名思义。</li>\n<li>断开链接（Shift + F5）：顾名思义。</li>\n</ol>\n<h1 id="其他调试" tabindex="-1"><a class="header-anchor" href="#其他调试" aria-hidden="true">#</a> 其他调试</h1>\n<ul>\n<li>\n<p>由于很多项目都配置了代码压缩，难于调试。所以开发环境下，一般通过配置生成 sourcemap 来调试代码。大部分开源项目（比如vue、vue-next源码）也会在贡献指南中说明如何开启 sourcemap。</p>\n<ol>\n<li>\n<p>普通 webpack 配置</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token literal-property property">devtool</span><span class="token operator">:</span> <span class="token string">\'source-map\'</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li>\n<li>\n<p>调试 vue-cli 3+ 生成的项目</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// vue-cli 3+</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">configureWebpack</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">devtool</span><span class="token operator">:</span> <span class="token string">\'source-map\'</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li>\n</ol>\n</li>\n</ul>\n',date:"2022-06-12",deps:[],hoistedTags:[],links:[],pathInferred:"/基础/2022/20220612.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"20220612",filePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/基础/2022/20220612.md",filePathRelative:"基础/2022/20220612.md",componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/基础/2022/20220612.html.vue",componentFilePathRelative:"pages/基础/2022/20220612.html.vue",componentFileChunkName:"v-f48d527e",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/基础/2022/20220612.html.js",dataFilePathRelative:"pages/基础/2022/20220612.html.js",dataFileChunkName:"v-f48d527e",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/基础/2022/20220612.html",htmlFilePathRelative:"基础/2022/20220612.html"},{data:{key:"v-00a6fdbc",path:"/%E5%B0%8F%E7%A8%8B%E5%BA%8F/2023/20230205.html",title:"分包异步化",lang:"zh-CN",frontmatter:{title:"分包异步化",date:"2023-02-05T00:00:00.000Z",tags:["小程序"],categories:["小程序"]},excerpt:"",headers:[{level:2,title:"性能优化方案",slug:"性能优化方案",children:[]},{level:2,title:"分析",slug:"分析",children:[]},{level:2,title:"解决方案",slug:"解决方案",children:[{level:3,title:"方案 1：分包异步化",slug:"方案-1-分包异步化",children:[]},{level:3,title:"方案 2：分包插件异步化",slug:"方案-2-分包插件异步化",children:[]},{level:3,title:"顶层 await",slug:"顶层-await",children:[]},{level:3,title:"基础库兼容性",slug:"基础库兼容性",children:[]}]},{level:2,title:"总结",slug:"总结",children:[]}],git:{updatedTime:null,contributors:[]}},key:"v-00a6fdbc",path:"/%E5%B0%8F%E7%A8%8B%E5%BA%8F/2023/20230205.html",title:"分包异步化",lang:"zh-CN",frontmatter:{title:"分包异步化",date:"2023-02-05T00:00:00.000Z",tags:["小程序"],categories:["小程序"]},excerpt:"",headers:[{level:2,title:"性能优化方案",slug:"性能优化方案",children:[]},{level:2,title:"分析",slug:"分析",children:[]},{level:2,title:"解决方案",slug:"解决方案",children:[{level:3,title:"方案 1：分包异步化",slug:"方案-1-分包异步化",children:[]},{level:3,title:"方案 2：分包插件异步化",slug:"方案-2-分包插件异步化",children:[]},{level:3,title:"顶层 await",slug:"顶层-await",children:[]},{level:3,title:"基础库兼容性",slug:"基础库兼容性",children:[]}]},{level:2,title:"总结",slug:"总结",children:[]}],content:"\r\n::: tip\r\n\r\n我们在开发小程序中，经过不断迭代，代码包会越来越大，就有可能超过大小限制，无法上传代码，本文摘自 货拉拉技术 公众号，学习分包异步化\r\n\r\n:::\r\n\r\n## 性能优化方案\r\n\r\n微信官方建议性能优化中关于代码体积优化[1]有以下 4 个方向：\r\n\r\n1.**合理使用分包加载**\r\n\r\n非主包资源都可以放到分包中，保证主包资源最快时间让用户可以访问，分包的资源可以按照重要性开启分包预下载[2]。\r\n\r\n2.**避免非必要的全局自定义组件和插件**\r\n\r\n如题，非必要（组件功能单一、只有 1 个页面引入等）就不要把组件写在主包，拆进分包。多个分包都同时引用的资源，放在分包里则不合适，分包没法直接访问另一个分包的资源，除非两个分包都已经加载过了。这个问题可以使用「分包异步化[3]」解决，这是本文重点，下文再表。\r\n\r\n3.**控制代码包内的资源文件**\r\n\r\n图片、字体文件建议尽量都走 CDN，小程序的 WXSS 中图片资源没法访问本地路径，也是建议把图片资源放在 CDN 上，这些就是替换路径的工作，很简单。\r\n\r\n4.**及时清理无用代码和资源**\r\n\r\n删代码，还有比这更开心的事情吗。\r\n\r\n## 分析\r\n\r\n货拉拉小程序在迭代中有持续优化的动作，页面和组件能分包的基本都拆出去了，剩下都是一些拆不动的。\r\n\r\n![图片](https://mmbiz.qpic.cn/mmbiz_png/MdDic47keiar4gusuD6cf5He2t2xr9vI7MlCCMKiaJ134zj3FET9uocdIzIVVqUEnulu1FO2P6iaGXIzqO1X7ASjXg/640?wx_fmt=png&tp=wxpic&wxfrom=5&wx_lazy=1&wx_co=1)主包依赖分析\r\n\r\n**信息点：**\r\n\r\n1.  图片资源可以迁 CDN，预计可以 -178KB。\r\n2. `vendor.js` 大，主要包含全局函数库 JS 以及主包用到的 JS 资源。\r\n\r\n![图片](https://mmbiz.qpic.cn/mmbiz_png/MdDic47keiar4gusuD6cf5He2t2xr9vI7M0XOoAoZ0Akbq7ePgx4JLA3o6J6yeofZicKu1LH4OxmMRVzJC0TWqaOw/640?wx_fmt=png&tp=wxpic&wxfrom=5&wx_lazy=1&wx_co=1)vendor.js webpack analyze\r\n\r\n由上图简单分析可以得出，需要移除 `tim-wx.js`，这是腾讯 IMSDK，主包依赖，需要在主包进行 SDK 初始化登录，无法拆进分包。\r\n\r\n## 解决方案\r\n\r\n基于以上分析，2 个关键信息：\r\n\r\n1. \\1. 为使用 IMSDK 提供的登录 API，**腾讯 IMSDK 必须在小程序主包初始化**。\r\n2. \\2. IMSDK 大小是 420KB，代码已经是压缩过的，无法 Tree Shaking。\r\n\r\n### 方案 1：分包异步化\r\n\r\n> 在小程序中，不同的分包对应不同的下载单元；因此，除了非独立分包可以依赖主包外，分包之间不能互相使用自定义组件或进行 `require`。「分包异步化」特性将允许通过一些配置和新的接口，使部分跨分包的内容可以等待下载后异步使用，从而一定程度上解决这个限制。\r\n\r\n如果小程序使用的是原生语法，可以使用「方案 1 」。如使用三方框架构建，例如：Uniapp、Taro 等，暂无法直接使用「方案 1」 ，或者说使用方式太过繁琐，不建议在生产使用。\r\n\r\n跟着微信官方文档[4]编写`Demo`:\r\n\r\n1. \\1. 首先把 `tim-wx-sdk` 放进分包里面\r\n\r\n```\r\n// subPackageA/index.jsimport TIM from 'tim-wx-sdk';export default TIM;\r\n```\r\n\r\n2.封装一下 utils，在主包使用\r\n\r\n```\r\n// utils/im.jslet TIM = {};require  .async('subPackageA/index')  .then((mod) => {    TIM = mod;  })  .catch(({ mod, errMsg }) => {    console.error(`subPackageA path: ${mod}, ${errMsg}`);  });// 导出该 SDKexport { TIM };\r\n```\r\n\r\n3.在主包使用，因为 `require.async` 是异步函数，要注意使用 `TIM` 的时机，必须是异步回调之后才能执行，运行 Demo 的时候可以先延时用来验证。\r\n\r\n```\r\n// app.jsimport { TIM } from '@/utils/im';// 先延时等待 require.async 运行结束setTimeout(() => {  TIM.login({    userID: 'xxxxx',    userSig: 'userSig',  });}, 3000);\r\n```\r\n\r\n4.运行，毫无意外，它报错了。\r\n\r\n![图片](https://mmbiz.qpic.cn/mmbiz_png/MdDic47keiar4gusuD6cf5He2t2xr9vI7MVTuLjvOictcYbAySVXtBb9cS3EbnXgVhNyEOXYNiaZib5ibRL6QBaxoSZw/640?wx_fmt=png&tp=wxpic&wxfrom=5&wx_lazy=1&wx_co=1)运行错误\r\n\r\n**根本原因：** `module.exports、require` 属于 `CommonJS` 语法，`CommonJS` 是 `Node.js` 采用的模块化规范，而浏览器环境下不支持该语法，所以没有这些变量。所以，Uniapp 编译打包的时候会把 `require` 编译成 `__webpack_require__`，而微信小程序运行宿主环境并没有 `__webpack_require__` 这个方法，所以报错。\r\n\r\n而 `require` 微信小程序环境是支持直接运行的，不需要经过编译，我们只需要让 Uniapp 框架不编译 `require.async` 这个函数即可，经过编写各种 demo 和 Issues[5] 查询，得出以下结论：\r\n\r\n1. \\1. Uniapp 官方编译脚本还未计划支持该小程序特性。\r\n2. \\2. `non_webpack_require` 方案也涉及到打包脚本的一些改动，理解起来也很复杂，不适宜在生产环境中大改特改。\r\n\r\n**三方框架无法直接使用分包异步化，微信原生语法无影响。如一定要在第三方框架中使用「异步化」这个特性，可以使用「方案 2」。**\r\n\r\n### 方案 2：分包插件异步化\r\n\r\n> 微信小程序提供插件能力，具体功能可以参考官方文档[6]。`requirePlugin` 是微信官方提供给插件之间互相调用的一个方法。\r\n\r\n`requirePlugin` 官方用法示例：\r\n\r\n```\r\n// 使用回调函数风格的调用requirePlugin(  'live-player-plugin',  (livePlayer) => {    console.log(livePlayer.getPluginVersion());  },  ({ mod, errMsg }) => {    console.error(`path: ${mod}, ${errMsg}`);  },);// 或者使用 Promise 风格的调用requirePlugin  .async('live-player-plugin')  .then((livePlayer) => {    console.log(livePlayer.getPluginVersion());  })  .catch(({ mod, errMsg }) => {    console.error(`path: ${mod}, ${errMsg}`);  });\r\n```\r\n\r\n如上，加载插件用的是 `requirePlugin`，`Webpack` 打包不会编译这个方法。\r\n\r\n回溯一下「方案一」中遇到的问题是：`require` 会被 `Webpack` 打包，编译成 `__webpack_require__`，所以造成小程序宿主环境没有 `require` 分包的能力。\r\n\r\n「方案二」的解决思路：微信官方提供的 `requirePlugin`，`Webpack` 不会进行编译，则可以正常访问小程序宿主环境的的 `requirePlugin` API，从而达成异步加载异步的目的。\r\n\r\n1. \\1. 既然要插件，先去微信官方注册一个插件，这部分可以搜官方文档，主要代码如下：\r\n\r\n```\r\n// xxx-plugin/index.js// 插件代码只是加载 SDK，并且导出import TIM from 'tim-wx-sdk';module.exports = {  TIM,};\r\n```\r\n\r\n2.在分包页面中引入插件。\r\n\r\n```\r\n{  \"plugins\": {    \"xxx-plugin\": {      \"version\": \"dev-01055b63731de071ffb850464bd5c7b1\",      \"provider\": \"xxx-plugin appid\"    }  }}\r\n```\r\n\r\n3.上面的 utils 封装改一下。\r\n\r\n```\r\n// utils/im.jslet TIM = null;requirePlugin  .async('xxx-plugin')  .then(({ TIM: modTIM }) => {    TIM = modTIM;  })  .catch(({ mod, errMsg }) => {    console.error(`direct-service-plugin path: ${mod}, ${errMsg}`);  });// 暴露出去export { TIM };\r\n```\r\n\r\n4.完事，好起来了。\r\n\r\n### 顶层 await\r\n\r\n> 这篇文章[7]写得很清楚了，就不搬了。\r\n\r\n「方案 2」确实是能够正常解决加载问题，但是引入了新的问题，上面的写法 `requirePlugin.async` 是个异步函数，调用 `TIM` 时机不同获取到的值不一样，使用 `utils/im` 的时候，还需要判断一下是否存在，还需要等待它加载。\r\n\r\n```\r\nimport { TIM } from '@/uitls/im';// 用的时候TIM && TIM.login();\r\n```\r\n\r\n那比较好一点的方法是加 `Promise`，每个使用的地方等待一下\r\n\r\n1.加载插件的封装\r\n\r\n```\r\n// @/utils/async-load.ts/** * 加载插件的方法 * @param pluginName * @returns Promise<any> */export async function loadPluginPackage(pluginName: string): Promise<any> {  try {    // @ts-ignore    const mod = await requirePlugin.async(pluginName);    return mod;  } catch ({ mod, errMsg }) {    console.error(      `loadPluginPackage '${pluginName}' errpr path: ${mod}, ${errMsg}`,    );    return {};  }}\r\n```\r\n\r\n2.使用的时候\r\n\r\n```\r\n// app.js;(async init() {  const { TIM } = await loadPluginPackage('xxx-plugin')  TIM.login({    userID: 'xxxxx',    userSig: 'userSig',  })})()\r\n```\r\n\r\n这样还是有问题，如果有多个地方都是用这个 JS，每个地方都要写一下加载插件的方法，可以在小程序启动的时候做一次加载就可以，后面所有用到的地方都用同一个 Promise 就行。\r\n\r\n3.更建议的方式\r\n\r\n```\r\n// utils/im.jslet TIM = {};import { loadPluginPackage } from '@/utils/async-load';const TIMSdk = loadPluginPackage('xxx-plugin');TIMSdk.then((mod) => {  TIM = mod.TIM;});// 导出出去export { TIM, TIMSdk };\r\n```\r\n\r\nTIMSdk，是一个默认执行一次的 Promise，加载过一次之后，后续调用 TIMSdk 拿到的都是同一个结果。\r\n\r\n使用方式\r\n\r\n```\r\n// app.jsimport { TIM, TIMSdk } from '@/utils/im';/** * * IM初始化 */const init = async () => {  // 要用的时候 await 一下即可  await TIMSdk;  const tim = TIM.create({    SDKAppID: config.SDKAppID,  });};init();\r\n```\r\n\r\n这样用起来很不方便，而且如果使用的地方如果二次封装，也很麻烦，目前没有很好的方法，顶层 await 是为了解决这个问题的，这个提案目前我们还用不上。\r\n\r\n4.完美方式，顶部直接`await`，暂时用不上\r\n\r\n```\r\n// app.jsconst { TIM } = await loadPluginPackage('xxx-plugin');\r\n```\r\n\r\n### 基础库兼容性\r\n\r\n![图片](https://mmbiz.qpic.cn/mmbiz_png/MdDic47keiar4gusuD6cf5He2t2xr9vI7M3hq3FhjNcFgjSCNTo0WDavROWsQlh81Jw5wv0a0foDmQW7b4syNJRw/640?wx_fmt=png&tp=wxpic&wxfrom=5&wx_lazy=1&wx_co=1)微信官方文档描述\r\n\r\n「分包异步化」这个功能需要小程序基础库 2.11.2 及以上才支持，可以按照官方推荐，设置最低基础库。\r\n\r\n如果目前线上基础库设置比这个低，需要拉一下现在线上的基础库分布，看一下提高基础库会影响多少人，**如果比例很小，可以强行设置，提升用户体验**。\r\n\r\n## 总结\r\n\r\n小程序此次优化结果：\r\n\r\n![图片](https://mmbiz.qpic.cn/mmbiz_png/MdDic47keiar4gusuD6cf5He2t2xr9vI7ME0yLbncCHMWj1DyibpibMCFFn7Zhtt4Y0DW8BQNWXYVjap8oicAJ1gezQ/640?wx_fmt=png&tp=wxpic&wxfrom=5&wx_lazy=1&wx_co=1)货拉拉微信小程序 4330 版本代码依赖分析\r\n\r\n**主包大小从 1.83M 降到 1.36M，大小减少 25%。**\r\n\r\n> **一定要注意基础库的依赖，要用这个方案，必须要把最低基础库限制拉到 2.11.2**。\r\n\r\n**控制小程序代码包大小主要几个手段：**\r\n\r\n1. \\1. 静态资源，能走 CDN 的，全部走 CDN。\r\n\r\n2. \\2. 能分包的页面或者组件，全部放到分包里面去，主包只留不能拆分的，提升分包加载速度可以使用开启分包预下载[8]。\r\n\r\n3. \\3. 如果资源一定要在主包引用且大小不可控，那就使用「分包异步化」或者「分包插件异步化」来处理。「分包异步化」和「分包插件异步化」两者的选择建议：\r\n\r\n4. - 如果用的是第三方编译的小程序框架，例如： Uniapp，用不上「分包异步化」，等三方官方支持\r\n   - 分包插件异步化和分包异步化写法差不多，坏处是需要发一个微信小程序插件，好处是小程序是跨端编译到其它端也可以走插件这一套逻辑。\r\n\r\n#### 引用链接\r\n\r\n`[1]` 代码体积优化: *https://developers.weixin.qq.com/miniprogram/dev/framework/performance/tips/start_optimizeA.html*\r\n`[2]` 开启分包预下载: *https://developers.weixin.qq.com/miniprogram/dev/framework/subpackages/preload.html*\r\n`[3]` 分包异步化: *https://developers.weixin.qq.com/miniprogram/dev/framework/subpackages/async.html*\r\n`[4]` 微信官方文档: *https://developers.weixin.qq.com/miniprogram/dev/framework/subpackages/async.html*\r\n`[5]` Issues: *https://github.com/dcloudio/uni-app/issues/2934*\r\n`[6]` 官方文档: *https://developers.weixin.qq.com/miniprogram/dev/framework/plugin/*\r\n`[7]` 这篇文章: *https://www.bookstack.cn/read/es6-3rd/spilt.7.docs-async.md*\r\n`[8]` 开启分包预下载: *https://developers.weixin.qq.com/miniprogram/dev/framework/subpackages/preload.html*",contentRendered:'<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>我们在开发小程序中，经过不断迭代，代码包会越来越大，就有可能超过大小限制，无法上传代码，本文摘自 货拉拉技术 公众号，学习分包异步化</p>\n</div>\n<h2 id="性能优化方案" tabindex="-1"><a class="header-anchor" href="#性能优化方案" aria-hidden="true">#</a> 性能优化方案</h2>\n<p>微信官方建议性能优化中关于代码体积优化[1]有以下 4 个方向：</p>\n<p>1.<strong>合理使用分包加载</strong></p>\n<p>非主包资源都可以放到分包中，保证主包资源最快时间让用户可以访问，分包的资源可以按照重要性开启分包预下载[2]。</p>\n<p>2.<strong>避免非必要的全局自定义组件和插件</strong></p>\n<p>如题，非必要（组件功能单一、只有 1 个页面引入等）就不要把组件写在主包，拆进分包。多个分包都同时引用的资源，放在分包里则不合适，分包没法直接访问另一个分包的资源，除非两个分包都已经加载过了。这个问题可以使用「分包异步化[3]」解决，这是本文重点，下文再表。</p>\n<p>3.<strong>控制代码包内的资源文件</strong></p>\n<p>图片、字体文件建议尽量都走 CDN，小程序的 WXSS 中图片资源没法访问本地路径，也是建议把图片资源放在 CDN 上，这些就是替换路径的工作，很简单。</p>\n<p>4.<strong>及时清理无用代码和资源</strong></p>\n<p>删代码，还有比这更开心的事情吗。</p>\n<h2 id="分析" tabindex="-1"><a class="header-anchor" href="#分析" aria-hidden="true">#</a> 分析</h2>\n<p>货拉拉小程序在迭代中有持续优化的动作，页面和组件能分包的基本都拆出去了，剩下都是一些拆不动的。</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="图片" originSrc="https://mmbiz.qpic.cn/mmbiz_png/MdDic47keiar4gusuD6cf5He2t2xr9vI7MlCCMKiaJ134zj3FET9uocdIzIVVqUEnulu1FO2P6iaGXIzqO1X7ASjXg/640?wx_fmt=png&amp;tp=wxpic&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" data="aurora">主包依赖分析</p>\n<p><strong>信息点：</strong></p>\n<ol>\n<li>图片资源可以迁 CDN，预计可以 -178KB。</li>\n<li><code>vendor.js</code> 大，主要包含全局函数库 JS 以及主包用到的 JS 资源。</li>\n</ol>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="图片" originSrc="https://mmbiz.qpic.cn/mmbiz_png/MdDic47keiar4gusuD6cf5He2t2xr9vI7M0XOoAoZ0Akbq7ePgx4JLA3o6J6yeofZicKu1LH4OxmMRVzJC0TWqaOw/640?wx_fmt=png&amp;tp=wxpic&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" data="aurora">vendor.js webpack analyze</p>\n<p>由上图简单分析可以得出，需要移除 <code>tim-wx.js</code>，这是腾讯 IMSDK，主包依赖，需要在主包进行 SDK 初始化登录，无法拆进分包。</p>\n<h2 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案" aria-hidden="true">#</a> 解决方案</h2>\n<p>基于以上分析，2 个关键信息：</p>\n<ol>\n<li>\\1. 为使用 IMSDK 提供的登录 API，<strong>腾讯 IMSDK 必须在小程序主包初始化</strong>。</li>\n<li>\\2. IMSDK 大小是 420KB，代码已经是压缩过的，无法 Tree Shaking。</li>\n</ol>\n<h3 id="方案-1-分包异步化" tabindex="-1"><a class="header-anchor" href="#方案-1-分包异步化" aria-hidden="true">#</a> 方案 1：分包异步化</h3>\n<blockquote>\n<p>在小程序中，不同的分包对应不同的下载单元；因此，除了非独立分包可以依赖主包外，分包之间不能互相使用自定义组件或进行 <code>require</code>。「分包异步化」特性将允许通过一些配置和新的接口，使部分跨分包的内容可以等待下载后异步使用，从而一定程度上解决这个限制。</p>\n</blockquote>\n<p>如果小程序使用的是原生语法，可以使用「方案 1 」。如使用三方框架构建，例如：Uniapp、Taro 等，暂无法直接使用「方案 1」 ，或者说使用方式太过繁琐，不建议在生产使用。</p>\n<p>跟着微信官方文档[4]编写<code>Demo</code>:</p>\n<ol>\n<li>\\1. 首先把 <code>tim-wx-sdk</code> 放进分包里面</li>\n</ol>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>// subPackageA/index.jsimport TIM from \'tim-wx-sdk\';export default TIM;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>2.封装一下 utils，在主包使用</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>// utils/im.jslet TIM = {};require  .async(\'subPackageA/index\')  .then((mod) => {    TIM = mod;  })  .catch(({ mod, errMsg }) => {    console.error(`subPackageA path: ${mod}, ${errMsg}`);  });// 导出该 SDKexport { TIM };\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>3.在主包使用，因为 <code>require.async</code> 是异步函数，要注意使用 <code>TIM</code> 的时机，必须是异步回调之后才能执行，运行 Demo 的时候可以先延时用来验证。</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>// app.jsimport { TIM } from \'@/utils/im\';// 先延时等待 require.async 运行结束setTimeout(() => {  TIM.login({    userID: \'xxxxx\',    userSig: \'userSig\',  });}, 3000);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>4.运行，毫无意外，它报错了。</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="图片" originSrc="https://mmbiz.qpic.cn/mmbiz_png/MdDic47keiar4gusuD6cf5He2t2xr9vI7MVTuLjvOictcYbAySVXtBb9cS3EbnXgVhNyEOXYNiaZib5ibRL6QBaxoSZw/640?wx_fmt=png&amp;tp=wxpic&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" data="aurora">运行错误</p>\n<p><strong>根本原因：</strong> <code>module.exports、require</code> 属于 <code>CommonJS</code> 语法，<code>CommonJS</code> 是 <code>Node.js</code> 采用的模块化规范，而浏览器环境下不支持该语法，所以没有这些变量。所以，Uniapp 编译打包的时候会把 <code>require</code> 编译成 <code>__webpack_require__</code>，而微信小程序运行宿主环境并没有 <code>__webpack_require__</code> 这个方法，所以报错。</p>\n<p>而 <code>require</code> 微信小程序环境是支持直接运行的，不需要经过编译，我们只需要让 Uniapp 框架不编译 <code>require.async</code> 这个函数即可，经过编写各种 demo 和 Issues[5] 查询，得出以下结论：</p>\n<ol>\n<li>\\1. Uniapp 官方编译脚本还未计划支持该小程序特性。</li>\n<li>\\2. <code>non_webpack_require</code> 方案也涉及到打包脚本的一些改动，理解起来也很复杂，不适宜在生产环境中大改特改。</li>\n</ol>\n<p><strong>三方框架无法直接使用分包异步化，微信原生语法无影响。如一定要在第三方框架中使用「异步化」这个特性，可以使用「方案 2」。</strong></p>\n<h3 id="方案-2-分包插件异步化" tabindex="-1"><a class="header-anchor" href="#方案-2-分包插件异步化" aria-hidden="true">#</a> 方案 2：分包插件异步化</h3>\n<blockquote>\n<p>微信小程序提供插件能力，具体功能可以参考官方文档[6]。<code>requirePlugin</code> 是微信官方提供给插件之间互相调用的一个方法。</p>\n</blockquote>\n<p><code>requirePlugin</code> 官方用法示例：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>// 使用回调函数风格的调用requirePlugin(  \'live-player-plugin\',  (livePlayer) => {    console.log(livePlayer.getPluginVersion());  },  ({ mod, errMsg }) => {    console.error(`path: ${mod}, ${errMsg}`);  },);// 或者使用 Promise 风格的调用requirePlugin  .async(\'live-player-plugin\')  .then((livePlayer) => {    console.log(livePlayer.getPluginVersion());  })  .catch(({ mod, errMsg }) => {    console.error(`path: ${mod}, ${errMsg}`);  });\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>如上，加载插件用的是 <code>requirePlugin</code>，<code>Webpack</code> 打包不会编译这个方法。</p>\n<p>回溯一下「方案一」中遇到的问题是：<code>require</code> 会被 <code>Webpack</code> 打包，编译成 <code>__webpack_require__</code>，所以造成小程序宿主环境没有 <code>require</code> 分包的能力。</p>\n<p>「方案二」的解决思路：微信官方提供的 <code>requirePlugin</code>，<code>Webpack</code> 不会进行编译，则可以正常访问小程序宿主环境的的 <code>requirePlugin</code> API，从而达成异步加载异步的目的。</p>\n<ol>\n<li>\\1. 既然要插件，先去微信官方注册一个插件，这部分可以搜官方文档，主要代码如下：</li>\n</ol>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>// xxx-plugin/index.js// 插件代码只是加载 SDK，并且导出import TIM from \'tim-wx-sdk\';module.exports = {  TIM,};\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>2.在分包页面中引入插件。</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>{  "plugins": {    "xxx-plugin": {      "version": "dev-01055b63731de071ffb850464bd5c7b1",      "provider": "xxx-plugin appid"    }  }}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>3.上面的 utils 封装改一下。</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>// utils/im.jslet TIM = null;requirePlugin  .async(\'xxx-plugin\')  .then(({ TIM: modTIM }) => {    TIM = modTIM;  })  .catch(({ mod, errMsg }) => {    console.error(`direct-service-plugin path: ${mod}, ${errMsg}`);  });// 暴露出去export { TIM };\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>4.完事，好起来了。</p>\n<h3 id="顶层-await" tabindex="-1"><a class="header-anchor" href="#顶层-await" aria-hidden="true">#</a> 顶层 await</h3>\n<blockquote>\n<p>这篇文章[7]写得很清楚了，就不搬了。</p>\n</blockquote>\n<p>「方案 2」确实是能够正常解决加载问题，但是引入了新的问题，上面的写法 <code>requirePlugin.async</code> 是个异步函数，调用 <code>TIM</code> 时机不同获取到的值不一样，使用 <code>utils/im</code> 的时候，还需要判断一下是否存在，还需要等待它加载。</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>import { TIM } from \'@/uitls/im\';// 用的时候TIM &amp;&amp; TIM.login();\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>那比较好一点的方法是加 <code>Promise</code>，每个使用的地方等待一下</p>\n<p>1.加载插件的封装</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>// @/utils/async-load.ts/** * 加载插件的方法 * @param pluginName * @returns Promise&lt;any> */export async function loadPluginPackage(pluginName: string): Promise&lt;any> {  try {    // @ts-ignore    const mod = await requirePlugin.async(pluginName);    return mod;  } catch ({ mod, errMsg }) {    console.error(      `loadPluginPackage \'${pluginName}\' errpr path: ${mod}, ${errMsg}`,    );    return {};  }}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>2.使用的时候</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>// app.js;(async init() {  const { TIM } = await loadPluginPackage(\'xxx-plugin\')  TIM.login({    userID: \'xxxxx\',    userSig: \'userSig\',  })})()\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>这样还是有问题，如果有多个地方都是用这个 JS，每个地方都要写一下加载插件的方法，可以在小程序启动的时候做一次加载就可以，后面所有用到的地方都用同一个 Promise 就行。</p>\n<p>3.更建议的方式</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>// utils/im.jslet TIM = {};import { loadPluginPackage } from \'@/utils/async-load\';const TIMSdk = loadPluginPackage(\'xxx-plugin\');TIMSdk.then((mod) => {  TIM = mod.TIM;});// 导出出去export { TIM, TIMSdk };\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>TIMSdk，是一个默认执行一次的 Promise，加载过一次之后，后续调用 TIMSdk 拿到的都是同一个结果。</p>\n<p>使用方式</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>// app.jsimport { TIM, TIMSdk } from \'@/utils/im\';/** * * IM初始化 */const init = async () => {  // 要用的时候 await 一下即可  await TIMSdk;  const tim = TIM.create({    SDKAppID: config.SDKAppID,  });};init();\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>这样用起来很不方便，而且如果使用的地方如果二次封装，也很麻烦，目前没有很好的方法，顶层 await 是为了解决这个问题的，这个提案目前我们还用不上。</p>\n<p>4.完美方式，顶部直接<code>await</code>，暂时用不上</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>// app.jsconst { TIM } = await loadPluginPackage(\'xxx-plugin\');\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="基础库兼容性" tabindex="-1"><a class="header-anchor" href="#基础库兼容性" aria-hidden="true">#</a> 基础库兼容性</h3>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="图片" originSrc="https://mmbiz.qpic.cn/mmbiz_png/MdDic47keiar4gusuD6cf5He2t2xr9vI7M3hq3FhjNcFgjSCNTo0WDavROWsQlh81Jw5wv0a0foDmQW7b4syNJRw/640?wx_fmt=png&amp;tp=wxpic&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" data="aurora">微信官方文档描述</p>\n<p>「分包异步化」这个功能需要小程序基础库 2.11.2 及以上才支持，可以按照官方推荐，设置最低基础库。</p>\n<p>如果目前线上基础库设置比这个低，需要拉一下现在线上的基础库分布，看一下提高基础库会影响多少人，<strong>如果比例很小，可以强行设置，提升用户体验</strong>。</p>\n<h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2>\n<p>小程序此次优化结果：</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="图片" originSrc="https://mmbiz.qpic.cn/mmbiz_png/MdDic47keiar4gusuD6cf5He2t2xr9vI7ME0yLbncCHMWj1DyibpibMCFFn7Zhtt4Y0DW8BQNWXYVjap8oicAJ1gezQ/640?wx_fmt=png&amp;tp=wxpic&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" data="aurora">货拉拉微信小程序 4330 版本代码依赖分析</p>\n<p><strong>主包大小从 1.83M 降到 1.36M，大小减少 25%。</strong></p>\n<blockquote>\n<p><strong>一定要注意基础库的依赖，要用这个方案，必须要把最低基础库限制拉到 2.11.2</strong>。</p>\n</blockquote>\n<p><strong>控制小程序代码包大小主要几个手段：</strong></p>\n<ol>\n<li>\n<p>\\1. 静态资源，能走 CDN 的，全部走 CDN。</p>\n</li>\n<li>\n<p>\\2. 能分包的页面或者组件，全部放到分包里面去，主包只留不能拆分的，提升分包加载速度可以使用开启分包预下载[8]。</p>\n</li>\n<li>\n<p>\\3. 如果资源一定要在主包引用且大小不可控，那就使用「分包异步化」或者「分包插件异步化」来处理。「分包异步化」和「分包插件异步化」两者的选择建议：</p>\n</li>\n<li>\n<ul>\n<li>如果用的是第三方编译的小程序框架，例如： Uniapp，用不上「分包异步化」，等三方官方支持</li>\n<li>分包插件异步化和分包异步化写法差不多，坏处是需要发一个微信小程序插件，好处是小程序是跨端编译到其它端也可以走插件这一套逻辑。</li>\n</ul>\n</li>\n</ol>\n<h4 id="引用链接" tabindex="-1"><a class="header-anchor" href="#引用链接" aria-hidden="true">#</a> 引用链接</h4>\n<p><code>[1]</code> 代码体积优化: <em>https://developers.weixin.qq.com/miniprogram/dev/framework/performance/tips/start_optimizeA.html</em>\n<code>[2]</code> 开启分包预下载: <em>https://developers.weixin.qq.com/miniprogram/dev/framework/subpackages/preload.html</em>\n<code>[3]</code> 分包异步化: <em>https://developers.weixin.qq.com/miniprogram/dev/framework/subpackages/async.html</em>\n<code>[4]</code> 微信官方文档: <em>https://developers.weixin.qq.com/miniprogram/dev/framework/subpackages/async.html</em>\n<code>[5]</code> Issues: <em>https://github.com/dcloudio/uni-app/issues/2934</em>\n<code>[6]</code> 官方文档: <em>https://developers.weixin.qq.com/miniprogram/dev/framework/plugin/</em>\n<code>[7]</code> 这篇文章: <em>https://www.bookstack.cn/read/es6-3rd/spilt.7.docs-async.md</em>\n<code>[8]</code> 开启分包预下载: <em>https://developers.weixin.qq.com/miniprogram/dev/framework/subpackages/preload.html</em></p>\n',date:"2023-02-05",deps:[],hoistedTags:[],links:[],pathInferred:"/小程序/2023/20230205.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"20230205",filePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/小程序/2023/20230205.md",filePathRelative:"小程序/2023/20230205.md",componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/小程序/2023/20230205.html.vue",componentFilePathRelative:"pages/小程序/2023/20230205.html.vue",componentFileChunkName:"v-00a6fdbc",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/小程序/2023/20230205.html.js",dataFilePathRelative:"pages/小程序/2023/20230205.html.js",dataFileChunkName:"v-00a6fdbc",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/小程序/2023/20230205.html",htmlFilePathRelative:"小程序/2023/20230205.html"},{data:{key:"v-7ade95ec",path:"/%E9%9D%A2%E8%AF%95/2022/20221016.html",title:"JavaScript 面试知识点总结",lang:"zh-CN",frontmatter:{title:"JavaScript 面试知识点总结",date:"2022-10-16T00:00:00.000Z",tags:["js"],categories:["面试"]},excerpt:"",headers:[{level:2,title:"1. 介绍 js 的基本数据类型。",slug:"_1-介绍-js-的基本数据类型。",children:[]},{level:2,title:"2. JavaScript 有几种类型的值？你能画一下他们的内存图吗？",slug:"_2-javascript-有几种类型的值-你能画一下他们的内存图吗",children:[]},{level:2,title:"3. 什么是堆？什么是栈？它们之间有什么区别和联系？",slug:"_3-什么是堆-什么是栈-它们之间有什么区别和联系",children:[]},{level:2,title:"4. 内部属性 [[Class]] 是什么？",slug:"_4-内部属性-class-是什么",children:[]},{level:2,title:"5. 介绍 js 有哪些内置对象？",slug:"_5-介绍-js-有哪些内置对象",children:[]},{level:2,title:"6. undefined 与 undeclared 的区别？",slug:"_6-undefined-与-undeclared-的区别",children:[]},{level:2,title:"7. null 和 undefined 的区别？",slug:"_7-null-和-undefined-的区别",children:[]},{level:2,title:"8. 如何获取安全的 undefined 值？",slug:"_8-如何获取安全的-undefined-值",children:[]},{level:2,title:"9. 说几条写 JavaScript 的基本规范？",slug:"_9-说几条写-javascript-的基本规范",children:[]},{level:2,title:"10. JavaScript 原型，原型链？ 有什么特点？",slug:"_10-javascript-原型-原型链-有什么特点",children:[]},{level:2,title:"11. js 获取原型的方法？",slug:"_11-js-获取原型的方法",children:[]},{level:2,title:"12. 在 js 中不同进制数字的表示方式",slug:"_12-在-js-中不同进制数字的表示方式",children:[]},{level:2,title:"13. js 中整数的安全范围是多少？",slug:"_13-js-中整数的安全范围是多少",children:[]},{level:2,title:"14. typeof NaN 的结果是什么？",slug:"_14-typeof-nan-的结果是什么",children:[]},{level:2,title:"15. isNaN 和 Number.isNaN 函数的区别？",slug:"_15-isnan-和-number-isnan-函数的区别",children:[]},{level:2,title:"16. Array 构造函数只有一个参数值时的表现？",slug:"_16-array-构造函数只有一个参数值时的表现",children:[]},{level:2,title:"17. 其他值到字符串的转换规则？",slug:"_17-其他值到字符串的转换规则",children:[]},{level:2,title:"18. 其他值到数字值的转换规则？",slug:"_18-其他值到数字值的转换规则",children:[]},{level:2,title:"19. 其他值到布尔类型的值的转换规则？",slug:"_19-其他值到布尔类型的值的转换规则",children:[]},{level:2,title:"20. {} 和 [] 的 valueOf 和 toString 的结果是什么？",slug:"_20-和-的-valueof-和-tostring-的结果是什么",children:[]},{level:2,title:"21. 什么是假值对象？",slug:"_21-什么是假值对象",children:[]},{level:2,title:"22. ~ 操作符的作用？",slug:"_22-操作符的作用",children:[]},{level:2,title:"23. 解析字符串中的数字和将字符串强制类型转换为数字的返回结果都是数字，它们之间的区别是什么？",slug:"_23-解析字符串中的数字和将字符串强制类型转换为数字的返回结果都是数字-它们之间的区别是什么",children:[]},{level:2,title:"24. + 操作符什么时候用于字符串的拼接？",slug:"_24-操作符什么时候用于字符串的拼接",children:[]},{level:2,title:"25. 什么情况下会发生布尔值的隐式强制类型转换？",slug:"_25-什么情况下会发生布尔值的隐式强制类型转换",children:[]},{level:2,title:"26. || 和 && 操作符的返回值？",slug:"_26-和-操作符的返回值",children:[]},{level:2,title:"27. Symbol 值的强制类型转换？",slug:"_27-symbol-值的强制类型转换",children:[]},{level:2,title:"28. 操作符的强制类型转换规则？",slug:"_28-操作符的强制类型转换规则",children:[]},{level:2,title:"29. 如何将字符串转化为数字，例如 '12.3b'?",slug:"_29-如何将字符串转化为数字-例如-12-3b",children:[]},{level:2,title:"30. 如何将浮点数点左边的数每三位添加一个逗号，如 12000000.11 转化为『12,000,000.11』?",slug:"_30-如何将浮点数点左边的数每三位添加一个逗号-如-12000000-11-转化为『12-000-000-11』",children:[]},{level:2,title:"31. 常用正则表达式",slug:"_31-常用正则表达式",children:[]},{level:2,title:"32. 生成随机数的各种方法？",slug:"_32-生成随机数的各种方法",children:[]},{level:2,title:"33. 如何实现数组的随机排序？",slug:"_33-如何实现数组的随机排序",children:[]},{level:2,title:"34. javascript 创建对象的几种方式？",slug:"_34-javascript-创建对象的几种方式",children:[]},{level:2,title:"35. JavaScript 继承的几种实现方式？",slug:"_35-javascript-继承的几种实现方式",children:[]},{level:2,title:"36. 寄生式组合继承的实现？",slug:"_36-寄生式组合继承的实现",children:[]},{level:2,title:"37. Javascript 的作用域链？",slug:"_37-javascript-的作用域链",children:[]},{level:2,title:"38. 谈谈 This 对象的理解。",slug:"_38-谈谈-this-对象的理解。",children:[]},{level:2,title:"39. eval 是做什么的？",slug:"_39-eval-是做什么的",children:[]},{level:2,title:"40. 什么是 DOM 和 BOM？",slug:"_40-什么是-dom-和-bom",children:[]},{level:2,title:"41. 写一个通用的事件侦听器函数。",slug:"_41-写一个通用的事件侦听器函数。",children:[]},{level:2,title:"42. 事件是什么？IE 与火狐的事件机制有什么区别？ 如何阻止冒泡？",slug:"_42-事件是什么-ie-与火狐的事件机制有什么区别-如何阻止冒泡",children:[]},{level:2,title:"43. 三种事件模型是什么？",slug:"_43-三种事件模型是什么",children:[]},{level:2,title:"44. 事件委托是什么？",slug:"_44-事件委托是什么",children:[]},{level:2,title:'45. ["1", "2", "3"].map(parseInt) 答案是多少？',slug:"_45-1-2-3-map-parseint-答案是多少",children:[]},{level:2,title:"46. 什么是闭包，为什么要用它？",slug:"_46-什么是闭包-为什么要用它",children:[]},{level:2,title:'47. javascript 代码中的 "use strict"; 是什么意思 ? 使用它区别是什么？',slug:"_47-javascript-代码中的-use-strict-是什么意思-使用它区别是什么",children:[]},{level:2,title:"48. 如何判断一个对象是否属于某个类？",slug:"_48-如何判断一个对象是否属于某个类",children:[]},{level:2,title:"49. instanceof 的作用？",slug:"_49-instanceof-的作用",children:[]},{level:2,title:"50. new 操作符具体干了什么呢？如何实现？",slug:"_50-new-操作符具体干了什么呢-如何实现",children:[]},{level:2,title:"51. Javascript 中，有一个函数，执行时对象查找时，永远不会去查找原型，这个函数是？",slug:"_51-javascript-中-有一个函数-执行时对象查找时-永远不会去查找原型-这个函数是",children:[]},{level:2,title:"52. 对于 JSON 的了解？",slug:"_52-对于-json-的了解",children:[]},{level:2,title:'53. [].forEach.call($$(""),function(a){a.style.outline="1px solid #"+((Math.random()(1<<24))).toString(16)}) 能解释一下这段代码的意思吗？',slug:"_53-foreach-call-function-a-a-style-outline-1px-solid-math-random-1-24-tostring-16-能解释一下这段代码的意思吗",children:[]},{level:2,title:"54. js 延迟加载的方式有哪些？",slug:"_54-js-延迟加载的方式有哪些",children:[]},{level:2,title:"55. Ajax 是什么? 如何创建一个 Ajax？",slug:"_55-ajax-是什么-如何创建一个-ajax",children:[]},{level:2,title:"56. 谈一谈浏览器的缓存机制？",slug:"_56-谈一谈浏览器的缓存机制",children:[]},{level:2,title:"57. Ajax 解决浏览器缓存问题？",slug:"_57-ajax-解决浏览器缓存问题",children:[]},{level:2,title:"58. 同步和异步的区别？",slug:"_58-同步和异步的区别",children:[]},{level:2,title:"59. 什么是浏览器的同源政策？",slug:"_59-什么是浏览器的同源政策",children:[]},{level:2,title:"60. 如何解决跨域问题？",slug:"_60-如何解决跨域问题",children:[]},{level:2,title:"61. 服务器代理转发时，该如何处理 cookie？",slug:"_61-服务器代理转发时-该如何处理-cookie",children:[]},{level:2,title:"62. 简单谈一下 cookie ？",slug:"_62-简单谈一下-cookie",children:[]},{level:2,title:"63. 模块化开发怎么做？",slug:"_63-模块化开发怎么做",children:[]},{level:2,title:"64. js 的几种模块规范？",slug:"_64-js-的几种模块规范",children:[]},{level:2,title:"65. AMD 和 CMD 规范的区别？",slug:"_65-amd-和-cmd-规范的区别",children:[]},{level:2,title:"66. ES6 模块与 CommonJS 模块、AMD、CMD 的差异。",slug:"_66-es6-模块与-commonjs-模块、amd、cmd-的差异。",children:[]},{level:2,title:"67. requireJS 的核心原理是什么？（如何动态加载的？如何避免多次加载的？如何 缓存的？）",slug:"_67-requirejs-的核心原理是什么-如何动态加载的-如何避免多次加载的-如何-缓存的",children:[]},{level:2,title:"68. JS 模块加载器的轮子怎么造，也就是如何实现一个模块加载器？",slug:"_68-js-模块加载器的轮子怎么造-也就是如何实现一个模块加载器",children:[]},{level:2,title:"69. ECMAScript6 怎么写 class，为什么会出现 class 这种东西?",slug:"_69-ecmascript6-怎么写-class-为什么会出现-class-这种东西",children:[]},{level:2,title:"70. documen.write 和 innerHTML 的区别？",slug:"_70-documen-write-和-innerhtml-的区别",children:[]},{level:2,title:"71. DOM 操作——怎样添加、移除、移动、复制、创建和查找节点？",slug:"_71-dom-操作——怎样添加、移除、移动、复制、创建和查找节点",children:[]},{level:2,title:"72. innerHTML 与 outerHTML 的区别？",slug:"_72-innerhtml-与-outerhtml-的区别",children:[]},{level:2,title:"73. .call() 和 .apply() 的区别？",slug:"_73-call-和-apply-的区别",children:[]},{level:2,title:"74. JavaScript 类数组对象的定义？",slug:"_74-javascript-类数组对象的定义",children:[]},{level:2,title:"75. 数组和对象有哪些原生方法，列举一下？",slug:"_75-数组和对象有哪些原生方法-列举一下",children:[]},{level:2,title:"76. 数组的 fill 方法？",slug:"_76-数组的-fill-方法",children:[]},{level:2,title:"77. [,,,] 的长度？",slug:"_77-的长度",children:[]},{level:2,title:"78. JavaScript 中的作用域与变量声明提升？",slug:"_78-javascript-中的作用域与变量声明提升",children:[]},{level:2,title:"79. 如何编写高性能的 Javascript ？",slug:"_79-如何编写高性能的-javascript",children:[]},{level:2,title:"80. 简单介绍一下 V8 引擎的垃圾回收机制",slug:"_80-简单介绍一下-v8-引擎的垃圾回收机制",children:[]},{level:2,title:"81. 哪些操作会造成内存泄漏？",slug:"_81-哪些操作会造成内存泄漏",children:[]},{level:2,title:"82. 需求：实现一个页面操作不会整页刷新的网站，并且能在浏览器前进、后退时正确响应。给出你的技术实现方案？",slug:"_82-需求-实现一个页面操作不会整页刷新的网站-并且能在浏览器前进、后退时正确响应。给出你的技术实现方案",children:[]},{level:2,title:"83. 如何判断当前脚本运行在浏览器还是 node 环境中？（阿里）",slug:"_83-如何判断当前脚本运行在浏览器还是-node-环境中-阿里",children:[]},{level:2,title:"84. 把 script 标签放在页面的最底部的 body 封闭之前和封闭之后有什么区别？浏览器会如何解析它们？",slug:"_84-把-script-标签放在页面的最底部的-body-封闭之前和封闭之后有什么区别-浏览器会如何解析它们",children:[]},{level:2,title:"85. 移动端的点击事件的有延迟，时间是多久，为什么会有？ 怎么解决这个延时？",slug:"_85-移动端的点击事件的有延迟-时间是多久-为什么会有-怎么解决这个延时",children:[]},{level:2,title:"86. 什么是“前端路由”？什么时候适合使用“前端路由”？“前端路由”有哪些优点和缺点？",slug:"_86-什么是-前端路由-什么时候适合使用-前端路由-前端路由-有哪些优点和缺点",children:[]},{level:2,title:"87. 如何测试前端代码么？ 知道 BDD, TDD, Unit Test 么？ 知道怎么测试你的前端工程么(mocha, sinon, jasmin, qUnit..)？",slug:"_87-如何测试前端代码么-知道-bdd-tdd-unit-test-么-知道怎么测试你的前端工程么-mocha-sinon-jasmin-qunit",children:[]},{level:2,title:"88. 检测浏览器版本版本有哪些方式？",slug:"_88-检测浏览器版本版本有哪些方式",children:[]},{level:2,title:"89. 什么是 Polyfill ？",slug:"_89-什么是-polyfill",children:[]},{level:2,title:"90. 使用 JS 实现获取文件扩展名？",slug:"_90-使用-js-实现获取文件扩展名",children:[]},{level:2,title:"91. 介绍一下 js 的节流与防抖？",slug:"_91-介绍一下-js-的节流与防抖",children:[]},{level:2,title:"92. Object.is() 与原来的比较操作符 “=”、“” 的区别？",slug:"_92-object-is-与原来的比较操作符-、-的区别",children:[]},{level:2,title:"93. escape,encodeURI,encodeURIComponent 有什么区别？",slug:"_93-escape-encodeuri-encodeuricomponent-有什么区别",children:[]},{level:2,title:"94. Unicode 和 UTF-8 之间的关系？",slug:"_94-unicode-和-utf-8-之间的关系",children:[]},{level:2,title:"95. js 的事件循环是什么？",slug:"_95-js-的事件循环是什么",children:[]},{level:2,title:"96. js 中的深浅拷贝实现？",slug:"_96-js-中的深浅拷贝实现",children:[]},{level:2,title:"97. 手写 call、apply 及 bind 函数",slug:"_97-手写-call、apply-及-bind-函数",children:[]},{level:2,title:"98. 函数柯里化的实现",slug:"_98-函数柯里化的实现",children:[]},{level:2,title:"99. 为什么 0.1 + 0.2 != 0.3？如何解决这个问题？",slug:"_99-为什么-0-1-0-2-0-3-如何解决这个问题",children:[]},{level:2,title:"100. 原码、反码和补码的介绍",slug:"_100-原码、反码和补码的介绍",children:[]},{level:2,title:"101. toPrecision 和 toFixed 和 Math.round 的区别？",slug:"_101-toprecision-和-tofixed-和-math-round-的区别",children:[]},{level:2,title:"102. 什么是 XSS 攻击？如何防范 XSS 攻击？",slug:"_102-什么是-xss-攻击-如何防范-xss-攻击",children:[]},{level:2,title:"103. 什么是 CSP？",slug:"_103-什么是-csp",children:[]},{level:2,title:"104. 什么是 CSRF 攻击？如何防范 CSRF 攻击？",slug:"_104-什么是-csrf-攻击-如何防范-csrf-攻击",children:[]},{level:2,title:"105. 什么是 Samesite Cookie 属性？",slug:"_105-什么是-samesite-cookie-属性",children:[]},{level:2,title:"106. 什么是点击劫持？如何防范点击劫持？",slug:"_106-什么是点击劫持-如何防范点击劫持",children:[]},{level:2,title:"107. SQL 注入攻击？",slug:"_107-sql-注入攻击",children:[]},{level:2,title:"108. 什么是 MVVM？比之 MVC 有什么区别？什么又是 MVP ？",slug:"_108-什么是-mvvm-比之-mvc-有什么区别-什么又是-mvp",children:[]},{level:2,title:"109. vue 双向数据绑定原理？",slug:"_109-vue-双向数据绑定原理",children:[]},{level:2,title:"110. Object.defineProperty 介绍？",slug:"_110-object-defineproperty-介绍",children:[]},{level:2,title:"111. 使用 Object.defineProperty() 来进行数据劫持有什么缺点？",slug:"_111-使用-object-defineproperty-来进行数据劫持有什么缺点",children:[]},{level:2,title:"112. 什么是 Virtual DOM？为什么 Virtual DOM 比原生 DOM 快？",slug:"_112-什么是-virtual-dom-为什么-virtual-dom-比原生-dom-快",children:[]},{level:2,title:"113. 如何比较两个 DOM 树的差异？",slug:"_113-如何比较两个-dom-树的差异",children:[]},{level:2,title:"114. 什么是 requestAnimationFrame ？",slug:"_114-什么是-requestanimationframe",children:[]},{level:2,title:"115. 谈谈你对 webpack 的看法",slug:"_115-谈谈你对-webpack-的看法",children:[]},{level:2,title:"116. offsetWidth/offsetHeight,clientWidth/clientHeight 与 scrollWidth/scrollHeight 的区别？",slug:"_116-offsetwidth-offsetheight-clientwidth-clientheight-与-scrollwidth-scrollheight-的区别",children:[]},{level:2,title:"117. 谈一谈你理解的函数式编程？",slug:"_117-谈一谈你理解的函数式编程",children:[]},{level:2,title:"118. 异步编程的实现方式？",slug:"_118-异步编程的实现方式",children:[]},{level:2,title:"119. Js 动画与 CSS 动画区别及相应实现",slug:"_119-js-动画与-css-动画区别及相应实现",children:[]},{level:2,title:"120. get 请求传参长度的误区",slug:"_120-get-请求传参长度的误区",children:[]},{level:2,title:"121. URL 和 URI 的区别？",slug:"_121-url-和-uri-的区别",children:[]},{level:2,title:"122. get 和 post 请求在缓存方面的区别",slug:"_122-get-和-post-请求在缓存方面的区别",children:[]},{level:2,title:"123. 图片的懒加载和预加载",slug:"_123-图片的懒加载和预加载",children:[]},{level:2,title:"124. mouseover 和 mouseenter 的区别？",slug:"_124-mouseover-和-mouseenter-的区别",children:[]},{level:2,title:"125. js 拖拽功能的实现",slug:"_125-js-拖拽功能的实现",children:[]},{level:2,title:"126. 为什么使用 setTimeout 实现 setInterval？怎么模拟？",slug:"_126-为什么使用-settimeout-实现-setinterval-怎么模拟",children:[]},{level:2,title:"127. let 和 const 的注意点？",slug:"_127-let-和-const-的注意点",children:[]},{level:2,title:"128. 什么是 rest 参数？",slug:"_128-什么是-rest-参数",children:[]},{level:2,title:"129. 什么是尾调用，使用尾调用有什么好处？",slug:"_129-什么是尾调用-使用尾调用有什么好处",children:[]},{level:2,title:"130. Symbol 类型的注意点？",slug:"_130-symbol-类型的注意点",children:[]},{level:2,title:"131. Set 和 WeakSet 结构？",slug:"_131-set-和-weakset-结构",children:[]},{level:2,title:"132. Map 和 WeakMap 结构？",slug:"_132-map-和-weakmap-结构",children:[]},{level:2,title:"133. 什么是 Proxy ？",slug:"_133-什么是-proxy",children:[]},{level:2,title:"134. Reflect 对象创建目的？",slug:"_134-reflect-对象创建目的",children:[]},{level:2,title:"135. require 模块引入的查找方式？",slug:"_135-require-模块引入的查找方式",children:[]},{level:2,title:"136. 什么是 Promise 对象，什么是 Promises/A+ 规范？",slug:"_136-什么是-promise-对象-什么是-promises-a-规范",children:[]},{level:2,title:"137. 手写一个 Promise",slug:"_137-手写一个-promise",children:[]},{level:2,title:"138. 如何检测浏览器所支持的最小字体大小？",slug:"_138-如何检测浏览器所支持的最小字体大小",children:[]},{level:2,title:"139. 怎么做 JS 代码 Error 统计？",slug:"_139-怎么做-js-代码-error-统计",children:[]},{level:2,title:"140. 单例模式模式是什么？",slug:"_140-单例模式模式是什么",children:[]},{level:2,title:"141. 策略模式是什么？",slug:"_141-策略模式是什么",children:[]},{level:2,title:"142. 代理模式是什么？",slug:"_142-代理模式是什么",children:[]},{level:2,title:"143. 中介者模式是什么？",slug:"_143-中介者模式是什么",children:[]},{level:2,title:"144. 适配器模式是什么？",slug:"_144-适配器模式是什么",children:[]},{level:2,title:"145. 观察者模式和发布订阅模式有什么不同？",slug:"_145-观察者模式和发布订阅模式有什么不同",children:[]},{level:2,title:"146. Vue 的生命周期是什么？",slug:"_146-vue-的生命周期是什么",children:[]},{level:2,title:"147. Vue 的各个生命阶段是什么？",slug:"_147-vue-的各个生命阶段是什么",children:[]},{level:2,title:"148. Vue 组件间的参数传递方式？",slug:"_148-vue-组件间的参数传递方式",children:[]},{level:2,title:"149. computed 和 watch 的差异？",slug:"_149-computed-和-watch-的差异",children:[]},{level:2,title:"150. vue-router 中的导航钩子函数",slug:"_150-vue-router-中的导航钩子函数",children:[]},{level:2,title:"151. $route 和 $router 的区别？",slug:"_151-route-和-router-的区别",children:[]},{level:2,title:"152. vue 常用的修饰符？",slug:"_152-vue-常用的修饰符",children:[]},{level:2,title:"153. vue 中 key 值的作用？",slug:"_153-vue-中-key-值的作用",children:[]},{level:2,title:"154. computed 和 watch 区别？",slug:"_154-computed-和-watch-区别",children:[]},{level:2,title:"155. keep-alive 组件有什么作用？",slug:"_155-keep-alive-组件有什么作用",children:[]},{level:2,title:"156. vue 中 mixin 和 mixins 区别？",slug:"_156-vue-中-mixin-和-mixins-区别",children:[]},{level:2,title:"157. 开发中常用的几种 Content-Type ？",slug:"_157-开发中常用的几种-content-type",children:[]},{level:2,title:"158. 如何封装一个 javascript 的类型判断函数？",slug:"_158-如何封装一个-javascript-的类型判断函数",children:[]},{level:2,title:"159. 如何判断一个对象是否为空对象？",slug:"_159-如何判断一个对象是否为空对象",children:[]},{level:2,title:"160. 使用闭包实现每隔一秒打印 1,2,3,4",slug:"_160-使用闭包实现每隔一秒打印-1-2-3-4",children:[]},{level:2,title:"161. 手写一个 jsonp",slug:"_161-手写一个-jsonp",children:[]},{level:2,title:"162. 手写一个观察者模式？",slug:"_162-手写一个观察者模式",children:[]},{level:2,title:"163. EventEmitter 实现",slug:"_163-eventemitter-实现",children:[]},{level:2,title:"164. 一道常被人轻视的前端 JS 面试题",slug:"_164-一道常被人轻视的前端-js-面试题",children:[]},{level:2,title:"165. 如何确定页面的可用性时间，什么是 Performance API？",slug:"_165-如何确定页面的可用性时间-什么是-performance-api",children:[]},{level:2,title:"166. js 中的命名规则",slug:"_166-js-中的命名规则",children:[]},{level:2,title:"167. js 语句末尾分号是否可以省略？",slug:"_167-js-语句末尾分号是否可以省略",children:[]},{level:2,title:"168. Object.assign()",slug:"_168-object-assign",children:[]},{level:2,title:"169. Math.ceil 和 Math.floor",slug:"_169-math-ceil-和-math-floor",children:[]},{level:2,title:"170. js for 循环注意点",slug:"_170-js-for-循环注意点",children:[]}],git:{updatedTime:null,contributors:[]}},key:"v-7ade95ec",path:"/%E9%9D%A2%E8%AF%95/2022/20221016.html",title:"JavaScript 面试知识点总结",lang:"zh-CN",frontmatter:{title:"JavaScript 面试知识点总结",date:"2022-10-16T00:00:00.000Z",tags:["js"],categories:["面试"]},excerpt:"",headers:[{level:2,title:"1. 介绍 js 的基本数据类型。",slug:"_1-介绍-js-的基本数据类型。",children:[]},{level:2,title:"2. JavaScript 有几种类型的值？你能画一下他们的内存图吗？",slug:"_2-javascript-有几种类型的值-你能画一下他们的内存图吗",children:[]},{level:2,title:"3. 什么是堆？什么是栈？它们之间有什么区别和联系？",slug:"_3-什么是堆-什么是栈-它们之间有什么区别和联系",children:[]},{level:2,title:"4. 内部属性 [[Class]] 是什么？",slug:"_4-内部属性-class-是什么",children:[]},{level:2,title:"5. 介绍 js 有哪些内置对象？",slug:"_5-介绍-js-有哪些内置对象",children:[]},{level:2,title:"6. undefined 与 undeclared 的区别？",slug:"_6-undefined-与-undeclared-的区别",children:[]},{level:2,title:"7. null 和 undefined 的区别？",slug:"_7-null-和-undefined-的区别",children:[]},{level:2,title:"8. 如何获取安全的 undefined 值？",slug:"_8-如何获取安全的-undefined-值",children:[]},{level:2,title:"9. 说几条写 JavaScript 的基本规范？",slug:"_9-说几条写-javascript-的基本规范",children:[]},{level:2,title:"10. JavaScript 原型，原型链？ 有什么特点？",slug:"_10-javascript-原型-原型链-有什么特点",children:[]},{level:2,title:"11. js 获取原型的方法？",slug:"_11-js-获取原型的方法",children:[]},{level:2,title:"12. 在 js 中不同进制数字的表示方式",slug:"_12-在-js-中不同进制数字的表示方式",children:[]},{level:2,title:"13. js 中整数的安全范围是多少？",slug:"_13-js-中整数的安全范围是多少",children:[]},{level:2,title:"14. typeof NaN 的结果是什么？",slug:"_14-typeof-nan-的结果是什么",children:[]},{level:2,title:"15. isNaN 和 Number.isNaN 函数的区别？",slug:"_15-isnan-和-number-isnan-函数的区别",children:[]},{level:2,title:"16. Array 构造函数只有一个参数值时的表现？",slug:"_16-array-构造函数只有一个参数值时的表现",children:[]},{level:2,title:"17. 其他值到字符串的转换规则？",slug:"_17-其他值到字符串的转换规则",children:[]},{level:2,title:"18. 其他值到数字值的转换规则？",slug:"_18-其他值到数字值的转换规则",children:[]},{level:2,title:"19. 其他值到布尔类型的值的转换规则？",slug:"_19-其他值到布尔类型的值的转换规则",children:[]},{level:2,title:"20. {} 和 [] 的 valueOf 和 toString 的结果是什么？",slug:"_20-和-的-valueof-和-tostring-的结果是什么",children:[]},{level:2,title:"21. 什么是假值对象？",slug:"_21-什么是假值对象",children:[]},{level:2,title:"22. ~ 操作符的作用？",slug:"_22-操作符的作用",children:[]},{level:2,title:"23. 解析字符串中的数字和将字符串强制类型转换为数字的返回结果都是数字，它们之间的区别是什么？",slug:"_23-解析字符串中的数字和将字符串强制类型转换为数字的返回结果都是数字-它们之间的区别是什么",children:[]},{level:2,title:"24. + 操作符什么时候用于字符串的拼接？",slug:"_24-操作符什么时候用于字符串的拼接",children:[]},{level:2,title:"25. 什么情况下会发生布尔值的隐式强制类型转换？",slug:"_25-什么情况下会发生布尔值的隐式强制类型转换",children:[]},{level:2,title:"26. || 和 && 操作符的返回值？",slug:"_26-和-操作符的返回值",children:[]},{level:2,title:"27. Symbol 值的强制类型转换？",slug:"_27-symbol-值的强制类型转换",children:[]},{level:2,title:"28. 操作符的强制类型转换规则？",slug:"_28-操作符的强制类型转换规则",children:[]},{level:2,title:"29. 如何将字符串转化为数字，例如 '12.3b'?",slug:"_29-如何将字符串转化为数字-例如-12-3b",children:[]},{level:2,title:"30. 如何将浮点数点左边的数每三位添加一个逗号，如 12000000.11 转化为『12,000,000.11』?",slug:"_30-如何将浮点数点左边的数每三位添加一个逗号-如-12000000-11-转化为『12-000-000-11』",children:[]},{level:2,title:"31. 常用正则表达式",slug:"_31-常用正则表达式",children:[]},{level:2,title:"32. 生成随机数的各种方法？",slug:"_32-生成随机数的各种方法",children:[]},{level:2,title:"33. 如何实现数组的随机排序？",slug:"_33-如何实现数组的随机排序",children:[]},{level:2,title:"34. javascript 创建对象的几种方式？",slug:"_34-javascript-创建对象的几种方式",children:[]},{level:2,title:"35. JavaScript 继承的几种实现方式？",slug:"_35-javascript-继承的几种实现方式",children:[]},{level:2,title:"36. 寄生式组合继承的实现？",slug:"_36-寄生式组合继承的实现",children:[]},{level:2,title:"37. Javascript 的作用域链？",slug:"_37-javascript-的作用域链",children:[]},{level:2,title:"38. 谈谈 This 对象的理解。",slug:"_38-谈谈-this-对象的理解。",children:[]},{level:2,title:"39. eval 是做什么的？",slug:"_39-eval-是做什么的",children:[]},{level:2,title:"40. 什么是 DOM 和 BOM？",slug:"_40-什么是-dom-和-bom",children:[]},{level:2,title:"41. 写一个通用的事件侦听器函数。",slug:"_41-写一个通用的事件侦听器函数。",children:[]},{level:2,title:"42. 事件是什么？IE 与火狐的事件机制有什么区别？ 如何阻止冒泡？",slug:"_42-事件是什么-ie-与火狐的事件机制有什么区别-如何阻止冒泡",children:[]},{level:2,title:"43. 三种事件模型是什么？",slug:"_43-三种事件模型是什么",children:[]},{level:2,title:"44. 事件委托是什么？",slug:"_44-事件委托是什么",children:[]},{level:2,title:'45. ["1", "2", "3"].map(parseInt) 答案是多少？',slug:"_45-1-2-3-map-parseint-答案是多少",children:[]},{level:2,title:"46. 什么是闭包，为什么要用它？",slug:"_46-什么是闭包-为什么要用它",children:[]},{level:2,title:'47. javascript 代码中的 "use strict"; 是什么意思 ? 使用它区别是什么？',slug:"_47-javascript-代码中的-use-strict-是什么意思-使用它区别是什么",children:[]},{level:2,title:"48. 如何判断一个对象是否属于某个类？",slug:"_48-如何判断一个对象是否属于某个类",children:[]},{level:2,title:"49. instanceof 的作用？",slug:"_49-instanceof-的作用",children:[]},{level:2,title:"50. new 操作符具体干了什么呢？如何实现？",slug:"_50-new-操作符具体干了什么呢-如何实现",children:[]},{level:2,title:"51. Javascript 中，有一个函数，执行时对象查找时，永远不会去查找原型，这个函数是？",slug:"_51-javascript-中-有一个函数-执行时对象查找时-永远不会去查找原型-这个函数是",children:[]},{level:2,title:"52. 对于 JSON 的了解？",slug:"_52-对于-json-的了解",children:[]},{level:2,title:'53. [].forEach.call($$(""),function(a){a.style.outline="1px solid #"+((Math.random()(1<<24))).toString(16)}) 能解释一下这段代码的意思吗？',slug:"_53-foreach-call-function-a-a-style-outline-1px-solid-math-random-1-24-tostring-16-能解释一下这段代码的意思吗",children:[]},{level:2,title:"54. js 延迟加载的方式有哪些？",slug:"_54-js-延迟加载的方式有哪些",children:[]},{level:2,title:"55. Ajax 是什么? 如何创建一个 Ajax？",slug:"_55-ajax-是什么-如何创建一个-ajax",children:[]},{level:2,title:"56. 谈一谈浏览器的缓存机制？",slug:"_56-谈一谈浏览器的缓存机制",children:[]},{level:2,title:"57. Ajax 解决浏览器缓存问题？",slug:"_57-ajax-解决浏览器缓存问题",children:[]},{level:2,title:"58. 同步和异步的区别？",slug:"_58-同步和异步的区别",children:[]},{level:2,title:"59. 什么是浏览器的同源政策？",slug:"_59-什么是浏览器的同源政策",children:[]},{level:2,title:"60. 如何解决跨域问题？",slug:"_60-如何解决跨域问题",children:[]},{level:2,title:"61. 服务器代理转发时，该如何处理 cookie？",slug:"_61-服务器代理转发时-该如何处理-cookie",children:[]},{level:2,title:"62. 简单谈一下 cookie ？",slug:"_62-简单谈一下-cookie",children:[]},{level:2,title:"63. 模块化开发怎么做？",slug:"_63-模块化开发怎么做",children:[]},{level:2,title:"64. js 的几种模块规范？",slug:"_64-js-的几种模块规范",children:[]},{level:2,title:"65. AMD 和 CMD 规范的区别？",slug:"_65-amd-和-cmd-规范的区别",children:[]},{level:2,title:"66. ES6 模块与 CommonJS 模块、AMD、CMD 的差异。",slug:"_66-es6-模块与-commonjs-模块、amd、cmd-的差异。",children:[]},{level:2,title:"67. requireJS 的核心原理是什么？（如何动态加载的？如何避免多次加载的？如何 缓存的？）",slug:"_67-requirejs-的核心原理是什么-如何动态加载的-如何避免多次加载的-如何-缓存的",children:[]},{level:2,title:"68. JS 模块加载器的轮子怎么造，也就是如何实现一个模块加载器？",slug:"_68-js-模块加载器的轮子怎么造-也就是如何实现一个模块加载器",children:[]},{level:2,title:"69. ECMAScript6 怎么写 class，为什么会出现 class 这种东西?",slug:"_69-ecmascript6-怎么写-class-为什么会出现-class-这种东西",children:[]},{level:2,title:"70. documen.write 和 innerHTML 的区别？",slug:"_70-documen-write-和-innerhtml-的区别",children:[]},{level:2,title:"71. DOM 操作——怎样添加、移除、移动、复制、创建和查找节点？",slug:"_71-dom-操作——怎样添加、移除、移动、复制、创建和查找节点",children:[]},{level:2,title:"72. innerHTML 与 outerHTML 的区别？",slug:"_72-innerhtml-与-outerhtml-的区别",children:[]},{level:2,title:"73. .call() 和 .apply() 的区别？",slug:"_73-call-和-apply-的区别",children:[]},{level:2,title:"74. JavaScript 类数组对象的定义？",slug:"_74-javascript-类数组对象的定义",children:[]},{level:2,title:"75. 数组和对象有哪些原生方法，列举一下？",slug:"_75-数组和对象有哪些原生方法-列举一下",children:[]},{level:2,title:"76. 数组的 fill 方法？",slug:"_76-数组的-fill-方法",children:[]},{level:2,title:"77. [,,,] 的长度？",slug:"_77-的长度",children:[]},{level:2,title:"78. JavaScript 中的作用域与变量声明提升？",slug:"_78-javascript-中的作用域与变量声明提升",children:[]},{level:2,title:"79. 如何编写高性能的 Javascript ？",slug:"_79-如何编写高性能的-javascript",children:[]},{level:2,title:"80. 简单介绍一下 V8 引擎的垃圾回收机制",slug:"_80-简单介绍一下-v8-引擎的垃圾回收机制",children:[]},{level:2,title:"81. 哪些操作会造成内存泄漏？",slug:"_81-哪些操作会造成内存泄漏",children:[]},{level:2,title:"82. 需求：实现一个页面操作不会整页刷新的网站，并且能在浏览器前进、后退时正确响应。给出你的技术实现方案？",slug:"_82-需求-实现一个页面操作不会整页刷新的网站-并且能在浏览器前进、后退时正确响应。给出你的技术实现方案",children:[]},{level:2,title:"83. 如何判断当前脚本运行在浏览器还是 node 环境中？（阿里）",slug:"_83-如何判断当前脚本运行在浏览器还是-node-环境中-阿里",children:[]},{level:2,title:"84. 把 script 标签放在页面的最底部的 body 封闭之前和封闭之后有什么区别？浏览器会如何解析它们？",slug:"_84-把-script-标签放在页面的最底部的-body-封闭之前和封闭之后有什么区别-浏览器会如何解析它们",children:[]},{level:2,title:"85. 移动端的点击事件的有延迟，时间是多久，为什么会有？ 怎么解决这个延时？",slug:"_85-移动端的点击事件的有延迟-时间是多久-为什么会有-怎么解决这个延时",children:[]},{level:2,title:"86. 什么是“前端路由”？什么时候适合使用“前端路由”？“前端路由”有哪些优点和缺点？",slug:"_86-什么是-前端路由-什么时候适合使用-前端路由-前端路由-有哪些优点和缺点",children:[]},{level:2,title:"87. 如何测试前端代码么？ 知道 BDD, TDD, Unit Test 么？ 知道怎么测试你的前端工程么(mocha, sinon, jasmin, qUnit..)？",slug:"_87-如何测试前端代码么-知道-bdd-tdd-unit-test-么-知道怎么测试你的前端工程么-mocha-sinon-jasmin-qunit",children:[]},{level:2,title:"88. 检测浏览器版本版本有哪些方式？",slug:"_88-检测浏览器版本版本有哪些方式",children:[]},{level:2,title:"89. 什么是 Polyfill ？",slug:"_89-什么是-polyfill",children:[]},{level:2,title:"90. 使用 JS 实现获取文件扩展名？",slug:"_90-使用-js-实现获取文件扩展名",children:[]},{level:2,title:"91. 介绍一下 js 的节流与防抖？",slug:"_91-介绍一下-js-的节流与防抖",children:[]},{level:2,title:"92. Object.is() 与原来的比较操作符 “=”、“” 的区别？",slug:"_92-object-is-与原来的比较操作符-、-的区别",children:[]},{level:2,title:"93. escape,encodeURI,encodeURIComponent 有什么区别？",slug:"_93-escape-encodeuri-encodeuricomponent-有什么区别",children:[]},{level:2,title:"94. Unicode 和 UTF-8 之间的关系？",slug:"_94-unicode-和-utf-8-之间的关系",children:[]},{level:2,title:"95. js 的事件循环是什么？",slug:"_95-js-的事件循环是什么",children:[]},{level:2,title:"96. js 中的深浅拷贝实现？",slug:"_96-js-中的深浅拷贝实现",children:[]},{level:2,title:"97. 手写 call、apply 及 bind 函数",slug:"_97-手写-call、apply-及-bind-函数",children:[]},{level:2,title:"98. 函数柯里化的实现",slug:"_98-函数柯里化的实现",children:[]},{level:2,title:"99. 为什么 0.1 + 0.2 != 0.3？如何解决这个问题？",slug:"_99-为什么-0-1-0-2-0-3-如何解决这个问题",children:[]},{level:2,title:"100. 原码、反码和补码的介绍",slug:"_100-原码、反码和补码的介绍",children:[]},{level:2,title:"101. toPrecision 和 toFixed 和 Math.round 的区别？",slug:"_101-toprecision-和-tofixed-和-math-round-的区别",children:[]},{level:2,title:"102. 什么是 XSS 攻击？如何防范 XSS 攻击？",slug:"_102-什么是-xss-攻击-如何防范-xss-攻击",children:[]},{level:2,title:"103. 什么是 CSP？",slug:"_103-什么是-csp",children:[]},{level:2,title:"104. 什么是 CSRF 攻击？如何防范 CSRF 攻击？",slug:"_104-什么是-csrf-攻击-如何防范-csrf-攻击",children:[]},{level:2,title:"105. 什么是 Samesite Cookie 属性？",slug:"_105-什么是-samesite-cookie-属性",children:[]},{level:2,title:"106. 什么是点击劫持？如何防范点击劫持？",slug:"_106-什么是点击劫持-如何防范点击劫持",children:[]},{level:2,title:"107. SQL 注入攻击？",slug:"_107-sql-注入攻击",children:[]},{level:2,title:"108. 什么是 MVVM？比之 MVC 有什么区别？什么又是 MVP ？",slug:"_108-什么是-mvvm-比之-mvc-有什么区别-什么又是-mvp",children:[]},{level:2,title:"109. vue 双向数据绑定原理？",slug:"_109-vue-双向数据绑定原理",children:[]},{level:2,title:"110. Object.defineProperty 介绍？",slug:"_110-object-defineproperty-介绍",children:[]},{level:2,title:"111. 使用 Object.defineProperty() 来进行数据劫持有什么缺点？",slug:"_111-使用-object-defineproperty-来进行数据劫持有什么缺点",children:[]},{level:2,title:"112. 什么是 Virtual DOM？为什么 Virtual DOM 比原生 DOM 快？",slug:"_112-什么是-virtual-dom-为什么-virtual-dom-比原生-dom-快",children:[]},{level:2,title:"113. 如何比较两个 DOM 树的差异？",slug:"_113-如何比较两个-dom-树的差异",children:[]},{level:2,title:"114. 什么是 requestAnimationFrame ？",slug:"_114-什么是-requestanimationframe",children:[]},{level:2,title:"115. 谈谈你对 webpack 的看法",slug:"_115-谈谈你对-webpack-的看法",children:[]},{level:2,title:"116. offsetWidth/offsetHeight,clientWidth/clientHeight 与 scrollWidth/scrollHeight 的区别？",slug:"_116-offsetwidth-offsetheight-clientwidth-clientheight-与-scrollwidth-scrollheight-的区别",children:[]},{level:2,title:"117. 谈一谈你理解的函数式编程？",slug:"_117-谈一谈你理解的函数式编程",children:[]},{level:2,title:"118. 异步编程的实现方式？",slug:"_118-异步编程的实现方式",children:[]},{level:2,title:"119. Js 动画与 CSS 动画区别及相应实现",slug:"_119-js-动画与-css-动画区别及相应实现",children:[]},{level:2,title:"120. get 请求传参长度的误区",slug:"_120-get-请求传参长度的误区",children:[]},{level:2,title:"121. URL 和 URI 的区别？",slug:"_121-url-和-uri-的区别",children:[]},{level:2,title:"122. get 和 post 请求在缓存方面的区别",slug:"_122-get-和-post-请求在缓存方面的区别",children:[]},{level:2,title:"123. 图片的懒加载和预加载",slug:"_123-图片的懒加载和预加载",children:[]},{level:2,title:"124. mouseover 和 mouseenter 的区别？",slug:"_124-mouseover-和-mouseenter-的区别",children:[]},{level:2,title:"125. js 拖拽功能的实现",slug:"_125-js-拖拽功能的实现",children:[]},{level:2,title:"126. 为什么使用 setTimeout 实现 setInterval？怎么模拟？",slug:"_126-为什么使用-settimeout-实现-setinterval-怎么模拟",children:[]},{level:2,title:"127. let 和 const 的注意点？",slug:"_127-let-和-const-的注意点",children:[]},{level:2,title:"128. 什么是 rest 参数？",slug:"_128-什么是-rest-参数",children:[]},{level:2,title:"129. 什么是尾调用，使用尾调用有什么好处？",slug:"_129-什么是尾调用-使用尾调用有什么好处",children:[]},{level:2,title:"130. Symbol 类型的注意点？",slug:"_130-symbol-类型的注意点",children:[]},{level:2,title:"131. Set 和 WeakSet 结构？",slug:"_131-set-和-weakset-结构",children:[]},{level:2,title:"132. Map 和 WeakMap 结构？",slug:"_132-map-和-weakmap-结构",children:[]},{level:2,title:"133. 什么是 Proxy ？",slug:"_133-什么是-proxy",children:[]},{level:2,title:"134. Reflect 对象创建目的？",slug:"_134-reflect-对象创建目的",children:[]},{level:2,title:"135. require 模块引入的查找方式？",slug:"_135-require-模块引入的查找方式",children:[]},{level:2,title:"136. 什么是 Promise 对象，什么是 Promises/A+ 规范？",slug:"_136-什么是-promise-对象-什么是-promises-a-规范",children:[]},{level:2,title:"137. 手写一个 Promise",slug:"_137-手写一个-promise",children:[]},{level:2,title:"138. 如何检测浏览器所支持的最小字体大小？",slug:"_138-如何检测浏览器所支持的最小字体大小",children:[]},{level:2,title:"139. 怎么做 JS 代码 Error 统计？",slug:"_139-怎么做-js-代码-error-统计",children:[]},{level:2,title:"140. 单例模式模式是什么？",slug:"_140-单例模式模式是什么",children:[]},{level:2,title:"141. 策略模式是什么？",slug:"_141-策略模式是什么",children:[]},{level:2,title:"142. 代理模式是什么？",slug:"_142-代理模式是什么",children:[]},{level:2,title:"143. 中介者模式是什么？",slug:"_143-中介者模式是什么",children:[]},{level:2,title:"144. 适配器模式是什么？",slug:"_144-适配器模式是什么",children:[]},{level:2,title:"145. 观察者模式和发布订阅模式有什么不同？",slug:"_145-观察者模式和发布订阅模式有什么不同",children:[]},{level:2,title:"146. Vue 的生命周期是什么？",slug:"_146-vue-的生命周期是什么",children:[]},{level:2,title:"147. Vue 的各个生命阶段是什么？",slug:"_147-vue-的各个生命阶段是什么",children:[]},{level:2,title:"148. Vue 组件间的参数传递方式？",slug:"_148-vue-组件间的参数传递方式",children:[]},{level:2,title:"149. computed 和 watch 的差异？",slug:"_149-computed-和-watch-的差异",children:[]},{level:2,title:"150. vue-router 中的导航钩子函数",slug:"_150-vue-router-中的导航钩子函数",children:[]},{level:2,title:"151. $route 和 $router 的区别？",slug:"_151-route-和-router-的区别",children:[]},{level:2,title:"152. vue 常用的修饰符？",slug:"_152-vue-常用的修饰符",children:[]},{level:2,title:"153. vue 中 key 值的作用？",slug:"_153-vue-中-key-值的作用",children:[]},{level:2,title:"154. computed 和 watch 区别？",slug:"_154-computed-和-watch-区别",children:[]},{level:2,title:"155. keep-alive 组件有什么作用？",slug:"_155-keep-alive-组件有什么作用",children:[]},{level:2,title:"156. vue 中 mixin 和 mixins 区别？",slug:"_156-vue-中-mixin-和-mixins-区别",children:[]},{level:2,title:"157. 开发中常用的几种 Content-Type ？",slug:"_157-开发中常用的几种-content-type",children:[]},{level:2,title:"158. 如何封装一个 javascript 的类型判断函数？",slug:"_158-如何封装一个-javascript-的类型判断函数",children:[]},{level:2,title:"159. 如何判断一个对象是否为空对象？",slug:"_159-如何判断一个对象是否为空对象",children:[]},{level:2,title:"160. 使用闭包实现每隔一秒打印 1,2,3,4",slug:"_160-使用闭包实现每隔一秒打印-1-2-3-4",children:[]},{level:2,title:"161. 手写一个 jsonp",slug:"_161-手写一个-jsonp",children:[]},{level:2,title:"162. 手写一个观察者模式？",slug:"_162-手写一个观察者模式",children:[]},{level:2,title:"163. EventEmitter 实现",slug:"_163-eventemitter-实现",children:[]},{level:2,title:"164. 一道常被人轻视的前端 JS 面试题",slug:"_164-一道常被人轻视的前端-js-面试题",children:[]},{level:2,title:"165. 如何确定页面的可用性时间，什么是 Performance API？",slug:"_165-如何确定页面的可用性时间-什么是-performance-api",children:[]},{level:2,title:"166. js 中的命名规则",slug:"_166-js-中的命名规则",children:[]},{level:2,title:"167. js 语句末尾分号是否可以省略？",slug:"_167-js-语句末尾分号是否可以省略",children:[]},{level:2,title:"168. Object.assign()",slug:"_168-object-assign",children:[]},{level:2,title:"169. Math.ceil 和 Math.floor",slug:"_169-math-ceil-和-math-floor",children:[]},{level:2,title:"170. js for 循环注意点",slug:"_170-js-for-循环注意点",children:[]}],content:'\r\n::: tip\r\n\r\n本篇主要是笔者在复习 JavaScript 相关知识和一些相关面试题时所做的笔记，如果出现错误，希望大家指出！\r\n\r\n:::\r\n\r\n## 1. 介绍 js 的基本数据类型。\r\n\r\n```js\r\njs 一共有六种基本数据类型，分别是 Undefined、Null、Boolean、Number、String，还有在 ES6 中新增的 Symbol 类型，\r\n代表创建后独一无二且不可变的数据类型，它的出现我认为主要是为了解决可能出现的全局变量冲突的问题。\r\n```\r\n\r\n## 2. JavaScript 有几种类型的值？你能画一下他们的内存图吗？\r\n\r\n涉及知识点：\r\n\r\n- 栈：原始数据类型（Undefined、Null、Boolean、Number、String）\r\n- 堆：引用数据类型（对象、数组和函数）\r\n\r\n```\r\n两种类型的区别是：存储位置不同。\r\n原始数据类型直接存储在栈（stack）中的简单数据段，占据空间小、大小固定，属于被频繁使用数据，所以放入栈中存储。\r\n \r\n引用数据类型存储在堆（heap）中的对象，占据空间大、大小不固定。如果存储在栈中，将会影响程序运行的性能；引用数据类型在\r\n栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实\r\n体。\r\n```\r\n\r\n回答：\r\n\r\n```\r\njs 可以分为两种类型的值，一种是基本数据类型，一种是复杂数据类型。\r\n \r\n基本数据类型....（参考1）\r\n \r\n复杂数据类型指的是 Object 类型，所有其他的如 Array、Date 等数据类型都可以理解为 Object 类型的子类。\r\n \r\n两种类型间的主要区别是它们的存储位置不同，基本数据类型的值直接保存在栈中，而复杂数据类型的值保存在堆中，通过使用在栈中\r\n保存对应的指针来获取堆中的值。\r\n```\r\n\r\n详细资料可以参考：\r\n[《JavaScript 有几种类型的值？》](https://blog.csdn.net/lxcao/article/details/52749421)\r\n[《JavaScript 有几种类型的值？能否画一下它们的内存图；》](https://blog.csdn.net/jiangjuanjaun/article/details/80327342)\r\n\r\n## 3. 什么是堆？什么是栈？它们之间有什么区别和联系？\r\n\r\n```\r\n堆和栈的概念存在于数据结构中和操作系统内存中。\r\n \r\n在数据结构中，栈中数据的存取方式为先进后出。而堆是一个优先队列，是按优先级来进行排序的，优先级可以按照大小来规定。完全\r\n二叉树是堆的一种实现方式。\r\n \r\n在操作系统中，内存被分为栈区和堆区。\r\n \r\n栈区内存由编译器自动分配释放，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。\r\n \r\n堆区内存一般由程序员分配释放，若程序员不释放，程序结束时可能由垃圾回收机制回收。\r\n```\r\n\r\n详细资料可以参考：\r\n[《什么是堆？什么是栈？他们之间有什么区别和联系？》](https://www.zhihu.com/question/19729973)\r\n\r\n## 4. 内部属性 [[Class]] 是什么？\r\n\r\n```\r\n所有 typeof 返回值为 "object" 的对象（如数组）都包含一个内部属性 [[Class]]（我们可以把它看作一个内部的分类，而非\r\n传统的面向对象意义上的类）。这个属性无法直接访问，一般通过 Object.prototype.toString(..) 来查看。例如：\r\n \r\nObject.prototype.toString.call( [1,2,3] );\r\n// "[object Array]"\r\n \r\nObject.prototype.toString.call( /regex-literal/i );\r\n// "[object RegExp]"\r\n```\r\n\r\n## 5. 介绍 js 有哪些内置对象？\r\n\r\n涉及知识点：\r\n\r\n```\r\n全局的对象（ global objects ）或称标准内置对象，不要和 "全局对象（global object）" 混淆。这里说的全局的对象是说在\r\n全局作用域里的对象。全局作用域中的其他对象可以由用户的脚本创建或由宿主程序提供。\r\n \r\n标准内置对象的分类\r\n \r\n（1）值属性，这些全局属性返回一个简单值，这些值没有自己的属性和方法。\r\n \r\n例如 Infinity、NaN、undefined、null 字面量\r\n \r\n（2）函数属性，全局函数可以直接调用，不需要在调用时指定所属对象，执行结束后会将结果直接返回给调用者。\r\n \r\n例如 eval()、parseFloat()、parseInt() 等\r\n \r\n（3）基本对象，基本对象是定义或使用其他对象的基础。基本对象包括一般对象、函数对象和错误对象。\r\n \r\n例如 Object、Function、Boolean、Symbol、Error 等\r\n \r\n（4）数字和日期对象，用来表示数字、日期和执行数学计算的对象。\r\n \r\n例如 Number、Math、Date\r\n \r\n（5）字符串，用来表示和操作字符串的对象。\r\n \r\n例如 String、RegExp\r\n \r\n（6）可索引的集合对象，这些对象表示按照索引值来排序的数据集合，包括数组和类型数组，以及类数组结构的对象。例如 Array\r\n \r\n（7）使用键的集合对象，这些集合对象在存储数据时会使用到键，支持按照插入顺序来迭代元素。\r\n \r\n例如 Map、Set、WeakMap、WeakSet\r\n \r\n（8）矢量集合，SIMD 矢量集合中的数据会被组织为一个数据序列。\r\n \r\n例如 SIMD 等\r\n \r\n（9）结构化数据，这些对象用来表示和操作结构化的缓冲区数据，或使用 JSON 编码的数据。\r\n \r\n例如 JSON 等\r\n \r\n（10）控制抽象对象\r\n \r\n例如 Promise、Generator 等\r\n \r\n（11）反射\r\n \r\n例如 Reflect、Proxy\r\n \r\n（12）国际化，为了支持多语言处理而加入 ECMAScript 的对象。\r\n \r\n例如 Intl、Intl.Collator 等\r\n \r\n（13）WebAssembly\r\n \r\n（14）其他\r\n \r\n例如 arguments\r\n```\r\n\r\n回答：\r\n\r\n```\r\njs 中的内置对象主要指的是在程序执行前存在全局作用域里的由 js 定义的一些全局值属性、函数和用来实例化其他对象的构造函\r\n数对象。一般我们经常用到的如全局变量值 NaN、undefined，全局函数如 parseInt()、parseFloat() 用来实例化对象的构\r\n造函数如 Date、Object 等，还有提供数学计算的单体内置对象如 Math 对象。\r\n```\r\n\r\n详细资料可以参考：\r\n[《标准内置对象的分类》](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects)\r\n[《JS 所有内置对象属性和方法汇总》](https://segmentfault.com/a/1190000011467723#articleHeader24)\r\n\r\n## 6. undefined 与 undeclared 的区别？\r\n\r\n```\r\n已在作用域中声明但还没有赋值的变量，是 undefined 的。相反，还没有在作用域中声明过的变量，是 undeclared 的。\r\n \r\n对于 undeclared 变量的引用，浏览器会报引用错误，如 ReferenceError: b is not defined 。但是我们可以使用 typ\r\neof 的安全防范机制来避免报错，因为对于 undeclared（或者 not defined ）变量，typeof 会返回 "undefined"。\r\n```\r\n\r\n## 7. null 和 undefined 的区别？\r\n\r\n```\r\n首先 Undefined 和 Null 都是基本数据类型，这两个基本数据类型分别都只有一个值，就是 undefined 和 null。\r\n \r\nundefined 代表的含义是未定义，null 代表的含义是空对象。一般变量声明了但还没有定义的时候会返回 undefined，null\r\n主要用于赋值给一些可能会返回对象的变量，作为初始化。\r\n \r\nundefined 在 js 中不是一个保留字，这意味着我们可以使用 undefined 来作为一个变量名，这样的做法是非常危险的，它\r\n会影响我们对 undefined 值的判断。但是我们可以通过一些方法获得安全的 undefined 值，比如说 void 0。\r\n \r\n当我们对两种类型使用 typeof 进行判断的时候，Null 类型化会返回 “object”，这是一个历史遗留的问题。当我们使用双等\r\n号对两种类型的值进行比较时会返回 true，使用三个等号时会返回 false。\r\n```\r\n\r\n详细资料可以参考：\r\n[《JavaScript 深入理解之 undefined 与 null》](http://cavszhouyou.top/JavaScript深入理解之undefined与null.html)\r\n\r\n## 8. 如何获取安全的 undefined 值？\r\n\r\n```\r\n因为 undefined 是一个标识符，所以可以被当作变量来使用和赋值，但是这样会影响 undefined 的正常判断。\r\n \r\n表达式 void ___ 没有返回值，因此返回结果是 undefined。void 并不改变表达式的结果，只是让表达式不返回值。\r\n \r\n按惯例我们用 void 0 来获得 undefined。\r\n```\r\n\r\n## 9. 说几条写 JavaScript 的基本规范？\r\n\r\n```\r\n在平常项目开发中，我们遵守一些这样的基本规范，比如说：\r\n \r\n（1）一个函数作用域中所有的变量声明应该尽量提到函数首部，用一个 var 声明，不允许出现两个连续的 var 声明，声明时\r\n    如果变量没有值，应该给该变量赋值对应类型的初始值，便于他人阅读代码时，能够一目了然的知道变量对应的类型值。\r\n \r\n（2）代码中出现地址、时间等字符串时需要使用常量代替。\r\n \r\n（3）在进行比较的时候吧，尽量使用\'===\', \'!==\'代替\'==\', \'!=\'。\r\n \r\n（4）不要在内置对象的原型上添加方法，如 Array, Date。\r\n \r\n（5）switch 语句必须带有 default 分支。\r\n \r\n（6）for 循环必须使用大括号。\r\n \r\n（7）if 语句必须使用大括号。\r\n```\r\n\r\n## 10. JavaScript 原型，原型链？ 有什么特点？\r\n\r\n```\r\n在 js 中我们是使用构造函数来新建一个对象的，每一个构造函数的内部都有一个 prototype 属性值，这个属性值是一个对\r\n象，这个对象包含了可以由该构造函数的所有实例共享的属性和方法。当我们使用构造函数新建一个对象后，在这个对象的内部\r\n将包含一个指针，这个指针指向构造函数的 prototype 属性对应的值，在 ES5 中这个指针被称为对象的原型。一般来说我们\r\n是不应该能够获取到这个值的，但是现在浏览器中都实现了 __proto__ 属性来让我们访问这个属性，但是我们最好不要使用这\r\n个属性，因为它不是规范中规定的。ES5 中新增了一个 Object.getPrototypeOf() 方法，我们可以通过这个方法来获取对\r\n象的原型。\r\n \r\n当我们访问一个对象的属性时，如果这个对象内部不存在这个属性，那么它就会去它的原型对象里找这个属性，这个原型对象又\r\n会有自己的原型，于是就这样一直找下去，也就是原型链的概念。原型链的尽头一般来说都是 Object.prototype 所以这就\r\n是我们新建的对象为什么能够使用 toString() 等方法的原因。\r\n \r\n特点：\r\n \r\nJavaScript 对象是通过引用来传递的，我们创建的每个新对象实体中并没有一份属于自己的原型副本。当我们修改原型时，与\r\n之相关的对象也会继承这一改变。\r\n```\r\n\r\n详细资料可以参考：\r\n[《JavaScript 深入理解之原型与原型链》](http://cavszhouyou.top/JavaScript深入理解之原型与原型链.html)\r\n\r\n## 11. js 获取原型的方法？\r\n\r\n- p.**proto**\r\n- p.constructor.prototype\r\n- Object.getPrototypeOf(p)\r\n\r\n## 12. 在 js 中不同进制数字的表示方式\r\n\r\n- 以 0X、0x 开头的表示为十六进制。\r\n\r\n  \r\n\r\n- 以 0、0O、0o 开头的表示为八进制。\r\n\r\n- 以 0B、0b 开头的表示为二进制格式。\r\n\r\n## 13. js 中整数的安全范围是多少？\r\n\r\n```\r\n安全整数指的是，在这个范围内的整数转化为二进制存储的时候不会出现精度丢失，能够被“安全”呈现的最大整数是 2^53 - 1，\r\n即9007199254740991，在 ES6 中被定义为 Number.MAX_SAFE_INTEGER。最小整数是-9007199254740991，在 ES6 中\r\n被定义为 Number.MIN_SAFE_INTEGER。\r\n \r\n如果某次计算的结果得到了一个超过 JavaScript 数值范围的值，那么这个值会被自动转换为特殊的 Infinity 值。如果某次\r\n计算返回了正或负的 Infinity 值，那么该值将无法参与下一次的计算。判断一个数是不是有穷的，可以使用 isFinite 函数\r\n来判断。\r\n```\r\n\r\n## 14. typeof NaN 的结果是什么？\r\n\r\n```\r\nNaN 意指“不是一个数字”（not a number），NaN 是一个“警戒值”（sentinel value，有特殊用途的常规值），用于指出\r\n数字类型中的错误情况，即“执行数学运算没有成功，这是失败后返回的结果”。\r\n \r\ntypeof NaN; // "number"\r\n \r\nNaN 是一个特殊值，它和自身不相等，是唯一一个非自反（自反，reflexive，即 x === x 不成立）的值。而 NaN != NaN\r\n为 true。\r\n```\r\n\r\n## 15. isNaN 和 Number.isNaN 函数的区别？\r\n\r\n```\r\n函数 isNaN 接收参数后，会尝试将这个参数转换为数值，任何不能被转换为数值的的值都会返回 true，因此非数字值传入也会\r\n返回 true ，会影响 NaN 的判断。\r\n \r\n函数 Number.isNaN 会首先判断传入参数是否为数字，如果是数字再继续判断是否为 NaN ，这种方法对于 NaN 的判断更为\r\n准确。\r\n```\r\n\r\n## 16. Array 构造函数只有一个参数值时的表现？\r\n\r\n```\r\nArray 构造函数只带一个数字参数的时候，该参数会被作为数组的预设长度（length），而非只充当数组中的一个元素。这样\r\n创建出来的只是一个空数组，只不过它的 length 属性被设置成了指定的值。\r\n \r\n构造函数 Array(..) 不要求必须带 new 关键字。不带时，它会被自动补上。\r\n```\r\n\r\n## 17. 其他值到字符串的转换规则？\r\n\r\n```\r\n规范的 9.8 节中定义了抽象操作 ToString ，它负责处理非字符串到字符串的强制类型转换。\r\n \r\n（1）Null 和 Undefined 类型 ，null 转换为 "null"，undefined 转换为 "undefined"，\r\n \r\n（2）Boolean 类型，true 转换为 "true"，false 转换为 "false"。\r\n \r\n（3）Number 类型的值直接转换，不过那些极小和极大的数字会使用指数形式。\r\n \r\n（4）Symbol 类型的值直接转换，但是只允许显式强制类型转换，使用隐式强制类型转换会产生错误。\r\n \r\n（3）对普通对象来说，除非自行定义 toString() 方法，否则会调用 toString()（Object.prototype.toString()）\r\n    来返回内部属性 [[Class]] 的值，如"[object Object]"。如果对象有自己的 toString() 方法，字符串化时就会\r\n    调用该方法并使用其返回值。\r\n```\r\n\r\n## 18. 其他值到数字值的转换规则？\r\n\r\n```\r\n有时我们需要将非数字值当作数字来使用，比如数学运算。为此 ES5 规范在 9.3 节定义了抽象操作 ToNumber。\r\n \r\n（1）Undefined 类型的值转换为 NaN。\r\n \r\n（2）Null 类型的值转换为 0。\r\n \r\n（3）Boolean 类型的值，true 转换为 1，false 转换为 0。\r\n \r\n（4）String 类型的值转换如同使用 Number() 函数进行转换，如果包含非数字值则转换为 NaN，空字符串为 0。\r\n \r\n（5）Symbol 类型的值不能转换为数字，会报错。\r\n \r\n（6）对象（包括数组）会首先被转换为相应的基本类型值，如果返回的是非数字的基本类型值，则再遵循以上规则将其强制转换为数字。\r\n \r\n为了将值转换为相应的基本类型值，抽象操作 ToPrimitive 会首先（通过内部操作 DefaultValue）检查该值是否有valueOf() 方法。如果有并且返回基本类型值，就使用该值进行强制类型转换。如果没有就使用 toString() 的返回值（如果存在）来进行强制类型转换。\r\n \r\n如果 valueOf() 和 toString() 均不返回基本类型值，会产生 TypeError 错误。\r\n```\r\n\r\n## 19. 其他值到布尔类型的值的转换规则？\r\n\r\n```\r\nES5 规范 9.2 节中定义了抽象操作 ToBoolean，列举了布尔强制类型转换所有可能出现的结果。\r\n \r\n以下这些是假值：\r\n• undefined\r\n• null\r\n• false\r\n• +0、-0 和 NaN\r\n• ""\r\n \r\n假值的布尔强制类型转换结果为 false。从逻辑上说，假值列表以外的都应该是真值。\r\n```\r\n\r\n## 20. {} 和 [] 的 valueOf 和 toString 的结果是什么？\r\n\r\n```\r\n{} 的 valueOf 结果为 {} ，toString 的结果为 "[object Object]"\r\n \r\n[] 的 valueOf 结果为 [] ，toString 的结果为 ""\r\n```\r\n\r\n## 21. 什么是假值对象？\r\n\r\n```\r\n浏览器在某些特定情况下，在常规 JavaScript 语法基础上自己创建了一些外来值，这些就是“假值对象”。假值对象看起来和\r\n普通对象并无二致（都有属性，等等），但将它们强制类型转换为布尔值时结果为 false 最常见的例子是 document.all，它\r\n是一个类数组对象，包含了页面上的所有元素，由 DOM（而不是 JavaScript 引擎）提供给 JavaScript 程序使用。\r\n```\r\n\r\n## 22. ~ 操作符的作用？\r\n\r\n```\r\n~ 返回 2 的补码，并且 ~ 会将数字转换为 32 位整数，因此我们可以使用 ~ 来进行取整操作。\r\n \r\n~x 大致等同于 -(x+1)。\r\n```\r\n\r\n## 23. 解析字符串中的数字和将字符串强制类型转换为数字的返回结果都是数字，它们之间的区别是什么？\r\n\r\n```\r\n解析允许字符串（如 parseInt() ）中含有非数字字符，解析按从左到右的顺序，如果遇到非数字字符就停止。而转换（如 Nu\r\nmber ()）不允许出现非数字字符，否则会失败并返回 NaN。\r\n```\r\n\r\n## 24. + 操作符什么时候用于字符串的拼接？\r\n\r\n```\r\n根据 ES5 规范 11.6.1 节，如果某个操作数是字符串或者能够通过以下步骤转换为字符串的话，+ 将进行拼接操作。如果其\r\n中一个操作数是对象（包括数组），则首先对其调用 ToPrimitive 抽象操作，该抽象操作再调用 [[DefaultValue]]，以\r\n数字作为上下文。如果不能转换为字符串，则会将其转换为数字类型来进行计算。\r\n \r\n简单来说就是，如果 + 的其中一个操作数是字符串（或者通过以上步骤最终得到字符串），则执行字符串拼接，否则执行数字\r\n加法。\r\n \r\n那么对于除了加法的运算符来说，只要其中一方是数字，那么另一方就会被转为数字。\r\n```\r\n\r\n## 25. 什么情况下会发生布尔值的隐式强制类型转换？\r\n\r\n```\r\n（1） if (..) 语句中的条件判断表达式。\r\n（2） for ( .. ; .. ; .. ) 语句中的条件判断表达式（第二个）。\r\n（3） while (..) 和 do..while(..) 循环中的条件判断表达式。\r\n（4） ? : 中的条件判断表达式。\r\n（5） 逻辑运算符 ||（逻辑或）和 &&（逻辑与）左边的操作数（作为条件判断表达式）。\r\n```\r\n\r\n## 26. || 和 && 操作符的返回值？\r\n\r\n```\r\n 和 && 首先会对第一个操作数执行条件判断，如果其不是布尔值就先进行 ToBoolean 强制类型转换，然后再执行条件\r\n判断。\r\n \r\n对于 || 来说，如果条件判断结果为 true 就返回第一个操作数的值，如果为 false 就返回第二个操作数的值。\r\n \r\n&& 则相反，如果条件判断结果为 true 就返回第二个操作数的值，如果为 false 就返回第一个操作数的值。\r\n \r\n|| 和 && 返回它们其中一个操作数的值，而非条件判断的结果\r\n```\r\n\r\n## 27. Symbol 值的强制类型转换？\r\n\r\n```\r\nES6 允许从符号到字符串的显式强制类型转换，然而隐式强制类型转换会产生错误。\r\n \r\nSymbol 值不能够被强制类型转换为数字（显式和隐式都会产生错误），但可以被强制类型转换为布尔值（显式和隐式结果\r\n都是 true ）。\r\n```\r\n\r\n## 28. 操作符的强制类型转换规则？\r\n\r\n```\r\n（1）字符串和数字之间的相等比较，将字符串转换为数字之后再进行比较。\r\n \r\n（2）其他类型和布尔类型之间的相等比较，先将布尔值转换为数字后，再应用其他规则进行比较。\r\n \r\n（3）null 和 undefined 之间的相等比较，结果为真。其他值和它们进行比较都返回假值。\r\n \r\n（4）对象和非对象之间的相等比较，对象先调用 ToPrimitive 抽象操作后，再进行比较。\r\n \r\n（5）如果一个操作值为 NaN ，则相等比较返回 false（ NaN 本身也不等于 NaN ）。\r\n \r\n（6）如果两个操作值都是对象，则比较它们是不是指向同一个对象。如果两个操作数都指向同一个对象，则相等操作符返回 true，否则，返回 false。\r\n```\r\n\r\n详细资料可以参考：\r\n[《JavaScript 字符串间的比较》](https://www.jeffjade.com/2015/08/28/2015-09-02-js-string-compare/)\r\n\r\n## 29. 如何将字符串转化为数字，例如 \'12.3b\'?\r\n\r\n```\r\n（1）使用 Number() 方法，前提是所包含的字符串不包含不合法字符。\r\n \r\n（2）使用 parseInt() 方法，parseInt() 函数可解析一个字符串，并返回一个整数。还可以设置要解析的数字的基数。当基数的值为 0，或没有设置该参数时，parseInt() 会根据 string 来判断数字的基数。\r\n \r\n（3）使用 parseFloat() 方法，该函数解析一个字符串参数并返回一个浮点数。\r\n \r\n（4）使用 + 操作符的隐式转换。\r\n```\r\n\r\n详细资料可以参考：\r\n[《详解 JS 中 Number()、parseInt() 和 parseFloat() 的区别》](https://blog.csdn.net/m0_38099607/article/details/72638678)\r\n\r\n## 30. 如何将浮点数点左边的数每三位添加一个逗号，如 12000000.11 转化为『12,000,000.11』?\r\n\r\n```\r\nfunction format(number) {\r\n  return number && number.replace(/(?!^)(?=(\\d{3})+\\.)/g, ",");\r\n}\r\n```\r\n\r\n## 31. 常用正则表达式\r\n\r\n```\r\n// （1）匹配 16 进制颜色值\r\nvar regex = /#([0-9a-fA-F]{6}|[0-9a-fA-F]{3})/g;\r\n \r\n// （2）匹配日期，如 yyyy-mm-dd 格式\r\nvar regex = /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/;\r\n \r\n// （3）匹配 qq 号\r\nvar regex = /^[1-9][0-9]{4,10}$/g;\r\n \r\n// （4）手机号码正则\r\nvar regex = /^1[34578]\\d{9}$/g;\r\n \r\n// （5）用户名正则\r\nvar regex = /^[a-zA-Z\\$][a-zA-Z0-9_\\$]{4,16}$/;\r\n```\r\n\r\n详细资料可以参考：\r\n[《前端表单验证常用的 15 个 JS 正则表达式》](http://caibaojian.com/form-regexp.html)\r\n[《JS 常用正则汇总》](https://www.jianshu.com/p/1cb5229325a7)\r\n\r\n## 32. 生成随机数的各种方法？\r\n\r\n[《JS - 生成随机数的方法汇总（不同范围、类型的随机数）》](http://www.hangge.com/blog/cache/detail_1872.html)\r\n\r\n## 33. 如何实现数组的随机排序？\r\n\r\n```\r\n// （1）使用数组 sort 方法对数组元素随机排序，让 Math.random() 出来的数与 0.5 比较，如果大于就返回 1 交换位置，如果小于就返回 -1，不交换位置。\r\n \r\nfunction randomSort(a, b) {\r\n  return Math.random() > 0.5 ? -1 : 1;\r\n}\r\n \r\n//  缺点：每个元素被派到新数组的位置不是随机的，原因是 sort() 方法是依次比较的。\r\n \r\n// （2）随机从原数组抽取一个元素，加入到新数组\r\n \r\nfunction randomSort(arr) {\r\n  var result = [];\r\n \r\n  while (arr.length > 0) {\r\n    var randomIndex = Math.floor(Math.random() * arr.length);\r\n    result.push(arr[randomIndex]);\r\n    arr.splice(randomIndex, 1);\r\n  }\r\n \r\n  return result;\r\n}\r\n \r\n// （3）随机交换数组内的元素（洗牌算法类似）\r\n \r\nfunction randomSort(arr) {\r\n  var index,\r\n    randomIndex,\r\n    temp,\r\n    len = arr.length;\r\n \r\n  for (index = 0; index < len; index++) {\r\n    randomIndex = Math.floor(Math.random() * (len - index)) + index;\r\n \r\n    temp = arr[index];\r\n    arr[index] = arr[randomIndex];\r\n    arr[randomIndex] = temp;\r\n  }\r\n \r\n  return arr;\r\n}\r\n \r\n// es6\r\nfunction randomSort(array) {\r\n  let length = array.length;\r\n \r\n  if (!Array.isArray(array) || length <= 1) return;\r\n \r\n  for (let index = 0; index < length - 1; index++) {\r\n    let randomIndex = Math.floor(Math.random() * (length - index)) + index;\r\n \r\n    [array[index], array[randomIndex]] = [array[randomIndex], array[index]];\r\n  }\r\n \r\n  return array;\r\n}\r\n```\r\n\r\n详细资料可以参考：\r\n[《Fisher and Yates 的原始版》](https://gaohaoyang.github.io/2016/10/16/shuffle-algorithm/#top)\r\n[《javascript 实现数组随机排序?》](https://www.zhihu.com/question/32303195)\r\n[《JavaScript 学习笔记：数组随机排序》](https://www.w3cplus.com/javascript/how-to-randomize-shuffle-a-javascript-array.html)\r\n\r\n## 34. javascript 创建对象的几种方式？\r\n\r\n```\r\n我们一般使用字面量的形式直接创建对象，但是这种创建方式对于创建大量相似对象的时候，会产生大量的重复代码。但 js\r\n和一般的面向对象的语言不同，在 ES6 之前它没有类的概念。但是我们可以使用函数来进行模拟，从而产生出可复用的对象\r\n创建方式，我了解到的方式有这么几种：\r\n \r\n（1）第一种是工厂模式，工厂模式的主要工作原理是用函数来封装创建对象的细节，从而通过调用函数来达到复用的目的。但是它有一个很大的问题就是创建出来的对象无法和某个类型联系起来，它只是简单的封装了复用代码，而没有建立起对象和类型间的关系。\r\n \r\n（2）第二种是构造函数模式。js 中每一个函数都可以作为构造函数，只要一个函数是通过 new 来调用的，那么我们就可以把它称为构造函数。执行构造函数首先会创建一个对象，然后将对象的原型指向构造函数的 prototype 属性，然后将执行上下文中的 this 指向这个对象，最后再执行整个函数，如果返回值不是对象，则返回新建的对象。因为 this 的值指向了新建的对象，因此我们可以使用 this 给对象赋值。构造函数模式相对于工厂模式的优点是，所创建的对象和构造函数建立起了联系，因此我们可以通过原型来识别对象的类型。但是构造函数存在一个缺点就是，造成了不必要的函数对象的创建，因为在 js 中函数也是一个对象，因此如果对象属性中如果包含函数的话，那么每次我们都会新建一个函数对象，浪费了不必要的内存空间，因为函数是所有的实例都可以通用的。\r\n \r\n（3）第三种模式是原型模式，因为每一个函数都有一个 prototype 属性，这个属性是一个对象，它包含了通过构造函数创建的所有实例都能共享的属性和方法。因此我们可以使用原型对象来添加公用属性和方法，从而实现代码的复用。这种方式相对于构造函数模式来说，解决了函数对象的复用问题。但是这种模式也存在一些问题，一个是没有办法通过传入参数来初始化值，另一个是如果存在一个引用类型如 Array 这样的值，那么所有的实例将共享一个对象，一个实例对引用类型值的改变会影响所有的实例。\r\n \r\n（4）第四种模式是组合使用构造函数模式和原型模式，这是创建自定义类型的最常见方式。因为构造函数模式和原型模式分开使用都存在一些问题，因此我们可以组合使用这两种模式，通过构造函数来初始化对象的属性，通过原型对象来实现函数方法的复用。这种方法很好的解决了两种模式单独使用时的缺点，但是有一点不足的就是，因为使用了两种不同的模式，所以对于代码的封装性不够好。\r\n \r\n（5）第五种模式是动态原型模式，这一种模式将原型方法赋值的创建过程移动到了构造函数的内部，通过对属性是否存在的判断，可以实现仅在第一次调用函数时对原型对象赋值一次的效果。这一种方式很好地对上面的混合模式进行了封装。\r\n \r\n（6）第六种模式是寄生构造函数模式，这一种模式和工厂模式的实现基本相同，我对这个模式的理解是，它主要是基于一个已有的类型，在实例化时对实例化的对象进行扩展。这样既不用修改原来的构造函数，也达到了扩展对象的目的。它的一个缺点和工厂模式一样，无法实现对象的识别。\r\n \r\n嗯我目前了解到的就是这么几种方式。\r\n```\r\n\r\n详细资料可以参考：\r\n[《JavaScript 深入理解之对象创建》](http://cavszhouyou.top/JavaScript深入理解之对象创建.html)\r\n\r\n## 35. JavaScript 继承的几种实现方式？\r\n\r\n```\r\n我了解的 js 中实现继承的几种方式有：\r\n \r\n（1）第一种是以原型链的方式来实现继承，但是这种实现方式存在的缺点是，在包含有引用类型的数据时，会被所有的实例对象所共享，容易造成修改的混乱。还有就是在创建子类型的时候不能向超类型传递参数。\r\n \r\n（2）第二种方式是使用借用构造函数的方式，这种方式是通过在子类型的函数中调用超类型的构造函数来实现的，这一种方法解决了不能向超类型传递参数的缺点，但是它存在的一个问题就是无法实现函数方法的复用，并且超类型原型定义的方法子类型也没有办法访问到。\r\n \r\n（3）第三种方式是组合继承，组合继承是将原型链和借用构造函数组合起来使用的一种方式。通过借用构造函数的方式来实现类型的属性的继承，通过将子类型的原型设置为超类型的实例来实现方法的继承。这种方式解决了上面的两种模式单独使用时的问题，但是由于我们是以超类型的实例来作为子类型的原型，所以调用了两次超类的构造函数，造成了子类型的原型中多了很多不必要的属性。\r\n \r\n（4）第四种方式是原型式继承，原型式继承的主要思路就是基于已有的对象来创建新的对象，实现的原理是，向函数中传入一个对象，然后返回一个以这个对象为原型的对象。这种继承的思路主要不是为了实现创造一种新的类型，只是对某个对象实现一种简单继承，ES5 中定义的 Object.create() 方法就是原型式继承的实现。缺点与原型链方式相同。\r\n \r\n（5）第五种方式是寄生式继承，寄生式继承的思路是创建一个用于封装继承过程的函数，通过传入一个对象，然后复制一个对象的副本，然后对象进行扩展，最后返回这个对象。这个扩展的过程就可以理解是一种继承。这种继承的优点就是对一个简单对象实现继承，如果这个对象不是我们的自定义类型时。缺点是没有办法实现函数的复用。\r\n \r\n（6）第六种方式是寄生式组合继承，组合继承的缺点就是使用超类型的实例做为子类型的原型，导致添加了不必要的原型属性。寄生式组合继承的方式是使用超类型的原型的副本来作为子类型的原型，这样就避免了创建不必要的属性。\r\n```\r\n\r\n详细资料可以参考：\r\n[《JavaScript 深入理解之继承》](http://cavszhouyou.top/JavaScript深入理解之继承.html)\r\n\r\n## 36. 寄生式组合继承的实现？\r\n\r\n```\r\nfunction Person(name) {\r\n  this.name = name;\r\n}\r\n \r\nPerson.prototype.sayName = function() {\r\n  console.log("My name is " + this.name + ".");\r\n};\r\n \r\nfunction Student(name, grade) {\r\n  Person.call(this, name);\r\n  this.grade = grade;\r\n}\r\n \r\nStudent.prototype = Object.create(Person.prototype);\r\nStudent.prototype.constructor = Student;\r\n \r\nStudent.prototype.sayMyGrade = function() {\r\n  console.log("My grade is " + this.grade + ".");\r\n};\r\n```\r\n\r\n## 37. Javascript 的作用域链？\r\n\r\n```\r\n作用域链的作用是保证对执行环境有权访问的所有变量和函数的有序访问，通过作用域链，我们可以访问到外层环境的变量和\r\n函数。\r\n \r\n作用域链的本质上是一个指向变量对象的指针列表。变量对象是一个包含了执行环境中所有变量和函数的对象。作用域链的前\r\n端始终都是当前执行上下文的变量对象。全局执行上下文的变量对象（也就是全局对象）始终是作用域链的最后一个对象。\r\n \r\n当我们查找一个变量时，如果当前执行环境中没有找到，我们可以沿着作用域链向后查找。\r\n \r\n作用域链的创建过程跟执行上下文的建立有关....\r\n```\r\n\r\n详细资料可以参考：\r\n[《JavaScript 深入理解之作用域链》](http://cavszhouyou.top/JavaScript深入理解之作用域链.html)\r\n\r\n## 38. 谈谈 This 对象的理解。\r\n\r\n```\r\nthis 是执行上下文中的一个属性，它指向最后一次调用这个方法的对象。在实际开发中，this 的指向可以通过四种调用模\r\n式来判断。\r\n```\r\n\r\n- 1.第一种是函数调用模式，当一个函数不是一个对象的属性时，直接作为函数来调用时，this 指向全局对象。\r\n\r\n  \r\n\r\n- 2.第二种是方法调用模式，如果一个函数作为一个对象的方法来调用时，this 指向这个对象。\r\n\r\n- 3.第三种是构造器调用模式，如果一个函数用 new 调用时，函数执行前会新创建一个对象，this 指向这个新创建的对象。\r\n\r\n- 4.第四种是 apply 、 call 和 bind 调用模式，这三个方法都可以显示的指定调用函数的 this 指向。其中 apply 方法接收两个参数：一个是 this 绑定的对象，一个是参数数组。call 方法接收的参数，第一个是 this 绑定的对象，后面的其余参数是传入函数执行的参数。也就是说，在使用 call() 方法时，传递给函数的参数必须逐个列举出来。bind 方法通过传入一个对象，返回一个 this 绑定了传入对象的新函数。这个函数的 this 指向除了使用 new 时会被改变，其他情况下都不会改变。\r\n\r\n```\r\n这四种方式，使用构造器调用模式的优先级最高，然后是 apply 、 call 和 bind 调用模式，然后是方法调用模式，然后\r\n是函数调用模式。\r\n```\r\n\r\n[《JavaScript 深入理解之 this 详解》](http://cavszhouyou.top/JavaScript深入理解之this详解.html)\r\n\r\n## 39. eval 是做什么的？\r\n\r\n```\r\n它的功能是把对应的字符串解析成 JS 代码并运行。\r\n \r\n应该避免使用 eval，不安全，非常耗性能（2次，一次解析成 js 语句，一次执行）。\r\n```\r\n\r\n详细资料可以参考：\r\n[《eval()》](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/eval)\r\n\r\n## 40. 什么是 DOM 和 BOM？\r\n\r\n```\r\nDOM 指的是文档对象模型，它指的是把文档当做一个对象来对待，这个对象主要定义了处理网页内容的方法和接口。\r\n \r\nBOM 指的是浏览器对象模型，它指的是把浏览器当做一个对象来对待，这个对象主要定义了与浏览器进行交互的法和接口。BOM\r\n的核心是 window，而 window 对象具有双重角色，它既是通过 js 访问浏览器窗口的一个接口，又是一个 Global（全局）\r\n对象。这意味着在网页中定义的任何对象，变量和函数，都作为全局对象的一个属性或者方法存在。window 对象含有 locati\r\non 对象、navigator 对象、screen 对象等子对象，并且 DOM 的最根本的对象 document 对象也是 BOM 的 window 对\r\n象的子对象。\r\n```\r\n\r\n详细资料可以参考：\r\n[《DOM, DOCUMENT, BOM, WINDOW 有什么区别?》](https://www.zhihu.com/question/33453164)\r\n[《Window 对象》](http://www.w3school.com.cn/jsref/dom_obj_window.asp)\r\n[《DOM 与 BOM 分别是什么，有何关联？》](https://www.zhihu.com/question/20724662)\r\n[《JavaScript 学习总结（三）BOM 和 DOM 详解》](https://segmentfault.com/a/1190000000654274#articleHeader21)\r\n\r\n## 41. 写一个通用的事件侦听器函数。\r\n\r\n```\r\nconst EventUtils = {\r\n  // 视能力分别使用dom0||dom2||IE方式 来绑定事件\r\n  // 添加事件\r\n  addEvent: function(element, type, handler) {\r\n    if (element.addEventListener) {\r\n      element.addEventListener(type, handler, false);\r\n    } else if (element.attachEvent) {\r\n      element.attachEvent("on" + type, handler);\r\n    } else {\r\n      element["on" + type] = handler;\r\n    }\r\n  },\r\n \r\n  // 移除事件\r\n  removeEvent: function(element, type, handler) {\r\n    if (element.removeEventListener) {\r\n      element.removeEventListener(type, handler, false);\r\n    } else if (element.detachEvent) {\r\n      element.detachEvent("on" + type, handler);\r\n    } else {\r\n      element["on" + type] = null;\r\n    }\r\n  },\r\n \r\n  // 获取事件目标\r\n  getTarget: function(event) {\r\n    return event.target || event.srcElement;\r\n  },\r\n \r\n  // 获取 event 对象的引用，取到事件的所有信息，确保随时能使用 event\r\n  getEvent: function(event) {\r\n    return event || window.event;\r\n  },\r\n \r\n  // 阻止事件（主要是事件冒泡，因为 IE 不支持事件捕获）\r\n  stopPropagation: function(event) {\r\n    if (event.stopPropagation) {\r\n      event.stopPropagation();\r\n    } else {\r\n      event.cancelBubble = true;\r\n    }\r\n  },\r\n \r\n  // 取消事件的默认行为\r\n  preventDefault: function(event) {\r\n    if (event.preventDefault) {\r\n      event.preventDefault();\r\n    } else {\r\n      event.returnValue = false;\r\n    }\r\n  }\r\n};\r\n```\r\n\r\n详细资料可以参考：\r\n[《JS 事件模型》](https://segmentfault.com/a/1190000006934031#articleHeader6)\r\n\r\n## 42. 事件是什么？IE 与火狐的事件机制有什么区别？ 如何阻止冒泡？\r\n\r\n- 1.事件是用户操作网页时发生的交互动作，比如 click/move， 事件除了用户触发的动作外，还可以是文档加载，窗口滚动和大小调整。事件被封装成一个 event 对象，包含了该事件发生时的所有相关信息（ event 的属性）以及可以对事件进行的操作（ event 的方法）。\r\n\r\n  \r\n\r\n- 2.事件处理机制：IE 支持事件冒泡、Firefox 同时支持两种事件模型，也就是：事件冒泡和事件捕获。\r\n\r\n- 3.event.stopPropagation() 或者 ie 下的方法 event.cancelBubble = true;\r\n\r\n详细资料可以参考：\r\n[《Javascript 事件模型系列（一）事件及事件的三种模型》](https://www.cnblogs.com/lvdabao/p/3265870.html)\r\n[《Javascript 事件模型：事件捕获和事件冒泡》](https://blog.csdn.net/wuseyukui/article/details/13771493)\r\n\r\n## 43. 三种事件模型是什么？\r\n\r\n```\r\n事件是用户操作网页时发生的交互动作或者网页本身的一些操作，现代浏览器一共有三种事件模型。\r\n \r\n第一种事件模型是最早的 DOM0 级模型，这种模型不会传播，所以没有事件流的概念，但是现在有的浏览器支持以冒泡的方式实\r\n现，它可以在网页中直接定义监听函数，也可以通过 js 属性来指定监听函数。这种方式是所有浏览器都兼容的。\r\n \r\n第二种事件模型是 IE 事件模型，在该事件模型中，一次事件共有两个过程，事件处理阶段，和事件冒泡阶段。事件处理阶段会首先执行目标元素绑定的监听事件。然后是事件冒泡阶段，冒泡指的是事件从目标元素冒泡到 document，依次检查经过的节点是否绑定了事件监听函数，如果有则执行。这种模型通过 attachEvent 来添加监听函数，可以添加多个监听函数，会按顺序依次执行。\r\n \r\n第三种是 DOM2 级事件模型，在该事件模型中，一次事件共有三个过程，第一个过程是事件捕获阶段。捕获指的是事件从 document 一直向下传播到目标元素，依次检查经过的节点是否绑定了事件监听函数，如果有则执行。后面两个阶段和 IE 事件模型的两个阶段相同。这种事件模型，事件绑定的函数是 addEventListener，其中第三个参数可以指定事件是否在捕获阶段执行。\r\n```\r\n\r\n详细资料可以参考：\r\n[《一个 DOM 元素绑定多个事件时，先执行冒泡还是捕获》](https://blog.csdn.net/u013217071/article/details/77613706)\r\n\r\n## 44. 事件委托是什么？\r\n\r\n```\r\n事件委托本质上是利用了浏览器事件冒泡的机制。因为事件在冒泡过程中会上传到父节点，并且父节点可以通过事件对象获取到\r\n目标节点，因此可以把子节点的监听函数定义在父节点上，由父节点的监听函数统一处理多个子元素的事件，这种方式称为事件代理。\r\n \r\n使用事件代理我们可以不必要为每一个子元素都绑定一个监听事件，这样减少了内存上的消耗。并且使用事件代理我们还可以实现事件的动态绑定，比如说新增了一个子节点，我们并不需要单独地为它添加一个监听事件，它所发生的事件会交给父元素中的监听函数来处理。\r\n```\r\n\r\n详细资料可以参考：\r\n[《JavaScript 事件委托详解》](https://zhuanlan.zhihu.com/p/26536815)\r\n\r\n## 45. ["1", "2", "3"].map(parseInt) 答案是多少？\r\n\r\n```\r\nparseInt() 函数能解析一个字符串，并返回一个整数，需要两个参数 (val, radix)，其中 radix 表示要解析的数字的基数。（该值介于 2 ~ 36 之间，并且字符串中的数字不能大于 radix 才能正确返回数字结果值）。\r\n \r\n \r\n此处 map 传了 3 个参数 (element, index, array)，默认第三个参数被忽略掉，因此三次传入的参数分别为 "1-0", "2-1", "3-2"\r\n \r\n因为字符串的值不能大于基数，因此后面两次调用均失败，返回 NaN ，第一次基数为 0 ，按十进制解析返回 1。\r\n```\r\n\r\n详细资料可以参考：\r\n[《为什么 ["1", "2", "3"\\].map(parseInt) 返回 [1,NaN,NaN]？》](https://blog.csdn.net/justjavac/article/details/19473199)\r\n\r\n## 46. 什么是闭包，为什么要用它？\r\n\r\n```\r\n闭包是指有权访问另一个函数作用域中变量的函数，创建闭包的最常见的方式就是在一个函数内创建另一个函数，创建的函数可以\r\n访问到当前函数的局部变量。\r\n \r\n闭包有两个常用的用途。\r\n \r\n闭包的第一个用途是使我们在函数外部能够访问到函数内部的变量。通过使用闭包，我们可以通过在外部调用闭包函数，从而在外\r\n部访问到函数内部的变量，可以使用这种方法来创建私有变量。\r\n \r\n函数的另一个用途是使已经运行结束的函数上下文中的变量对象继续留在内存中，因为闭包函数保留了这个变量对象的引用，所以\r\n这个变量对象不会被回收。\r\n \r\n其实闭包的本质就是作用域链的一个特殊的应用，只要了解了作用域链的创建过程，就能够理解闭包的实现原理。\r\n```\r\n\r\n详细资料可以参考：\r\n[《JavaScript 深入理解之闭包》](http://cavszhouyou.top/JavaScript深入理解之闭包.html)\r\n\r\n## 47. javascript 代码中的 "use strict"; 是什么意思 ? 使用它区别是什么？\r\n\r\n相关知识点：\r\n\r\n```\r\nuse strict 是一种 ECMAscript5 添加的（严格）运行模式，这种模式使得 Javascript 在更严格的条件下运行。\r\n \r\n设立"严格模式"的目的，主要有以下几个：\r\n```\r\n\r\n- 消除 Javascript 语法的一些不合理、不严谨之处，减少一些怪异行为;\r\n- 消除代码运行的一些不安全之处，保证代码运行的安全；\r\n- 提高编译器效率，增加运行速度；\r\n- 为未来新版本的 Javascript 做好铺垫。\r\n\r\n区别：\r\n\r\n- 1.禁止使用 with 语句。\r\n- 2.禁止 this 关键字指向全局对象。\r\n- 3.对象不能有重名的属性。\r\n\r\n回答：\r\n\r\n```\r\nuse strict 指的是严格运行模式，在这种模式对 js 的使用添加了一些限制。比如说禁止 this 指向全局对象，还有禁止使\r\n用 with 语句等。设立严格模式的目的，主要是为了消除代码使用中的一些不安全的使用方式，也是为了消除 js 语法本身的一\r\n些不合理的地方，以此来减少一些运行时的怪异的行为。同时使用严格运行模式也能够提高编译的效率，从而提高代码的运行速度。\r\n我认为严格模式代表了 js 一种更合理、更安全、更严谨的发展方向。\r\n```\r\n\r\n详细资料可以参考：\r\n[《Javascript 严格模式详解》](http://www.ruanyifeng.com/blog/2013/01/javascript_strict_mode.html)\r\n\r\n## 48. 如何判断一个对象是否属于某个类？\r\n\r\n```\r\n第一种方式是使用 instanceof 运算符来判断构造函数的 prototype 属性是否出现在对象的原型链中的任何位置。\r\n \r\n第二种方式可以通过对象的 constructor 属性来判断，对象的 constructor 属性指向该对象的构造函数，但是这种方式不是很安全，因为 constructor 属性可以被改写。\r\n \r\n第三种方式，如果需要判断的是某个内置的引用类型的话，可以使用 Object.prototype.toString() 方法来打印对象的\r\n[[Class]] 属性来进行判断。\r\n```\r\n\r\n详细资料可以参考：\r\n[《js 判断一个对象是否属于某一类》](https://blog.csdn.net/haitunmin/article/details/78418522)\r\n\r\n## 49. instanceof 的作用？\r\n\r\n```\r\n// instanceof 运算符用于判断构造函数的 prototype 属性是否出现在对象的原型链中的任何位置。\r\n// 实现：\r\n \r\nfunction myInstanceof(left, right) {\r\n  let proto = Object.getPrototypeOf(left), // 获取对象的原型\r\n    prototype = right.prototype; // 获取构造函数的 prototype 对象\r\n \r\n  // 判断构造函数的 prototype 对象是否在对象的原型链上\r\n  while (true) {\r\n    if (!proto) return false;\r\n    if (proto === prototype) return true;\r\n \r\n    proto = Object.getPrototypeOf(proto);\r\n  }\r\n}\r\n```\r\n\r\n详细资料可以参考：\r\n[《instanceof》](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/instanceof)\r\n\r\n## 50. new 操作符具体干了什么呢？如何实现？\r\n\r\n```\r\n// （1）首先创建了一个新的空对象\r\n// （2）设置原型，将对象的原型设置为函数的 prototype 对象。\r\n// （3）让函数的 this 指向这个对象，执行构造函数的代码（为这个新对象添加属性）\r\n// （4）判断函数的返回值类型，如果是值类型，返回创建的对象。如果是引用类型，就返回这个引用类型的对象。\r\n \r\n// 实现:\r\n \r\nfunction objectFactory() {\r\n  let newObject = null,\r\n    constructor = Array.prototype.shift.call(arguments),\r\n    result = null;\r\n \r\n  // 参数判断\r\n  if (typeof constructor !== "function") {\r\n    console.error("type error");\r\n    return;\r\n  }\r\n \r\n  // 新建一个空对象，对象的原型为构造函数的 prototype 对象\r\n  newObject = Object.create(constructor.prototype);\r\n \r\n  // 将 this 指向新建对象，并执行函数\r\n  result = constructor.apply(newObject, arguments);\r\n \r\n  // 判断返回对象\r\n  let flag =\r\n    result && (typeof result === "object" || typeof result === "function");\r\n \r\n  // 判断返回结果\r\n  return flag ? result : newObject;\r\n}\r\n \r\n// 使用方法\r\n// objectFactory(构造函数, 初始化参数);\r\n```\r\n\r\n详细资料可以参考：\r\n[《new 操作符具体干了什么？》](https://segmentfault.com/a/1190000008576048)\r\n[《JavaScript 深入之 new 的模拟实现》](https://github.com/mqyqingfeng/Blog/issues/13)\r\n\r\n## 51. Javascript 中，有一个函数，执行时对象查找时，永远不会去查找原型，这个函数是？\r\n\r\n```\r\nhasOwnProperty\r\n \r\n所有继承了 Object 的对象都会继承到 hasOwnProperty 方法。这个方法可以用来检测一个对象是否含有特定的自身属性，和\r\nin 运算符不同，该方法会忽略掉那些从原型链上继承到的属性。\r\n```\r\n\r\n详细资料可以参考：\r\n[《Object.prototype.hasOwnProperty()》](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty)\r\n\r\n## 52. 对于 JSON 的了解？\r\n\r\n相关知识点：\r\n\r\n```\r\nJSON 是一种数据交换格式，基于文本，优于轻量，用于交换数据。\r\n \r\nJSON 可以表示数字、布尔值、字符串、null、数组（值的有序序列），以及由这些值（或数组、对象）所组成的对象（字符串与\r\n值的映射）。\r\n \r\nJSON 使用 JavaScript 语法，但是 JSON 格式仅仅是一个文本。文本可以被任何编程语言读取及作为数据格式传递。\r\n```\r\n\r\n回答：\r\n\r\n```\r\nJSON 是一种基于文本的轻量级的数据交换格式。它可以被任何的编程语言读取和作为数据格式来传递。\r\n \r\n在项目开发中，我们使用 JSON 作为前后端数据交换的方式。在前端我们通过将一个符合 JSON 格式的数据结构序列化为 JSON 字符串，然后将它传递到后端，后端通过 JSON 格式的字符串解析后生成对应的数据结构，以此来实现前后端数据的一个传递。\r\n \r\n因为 JSON 的语法是基于 js 的，因此很容易将 JSON 和 js 中的对象弄混，但是我们应该注意的是 JSON 和 js 中的对象不是一回事，JSON 中对象格式更加严格，比如说在 JSON 中属性值不能为函数，不能出现 NaN 这样的属性值等，因此大多数的 js 对象是不符合 JSON 对象的格式的。\r\n \r\n在 js 中提供了两个函数来实现 js 数据结构和 JSON 格式的转换处理，一个是 JSON.stringify 函数，通过传入一个符合 JSON 格式的数据结构，将其转换为一个 JSON 字符串。如果传入的数据结构不符合 JSON 格式，那么在序列化的时候会对这些值进行对应的特殊处理，使其符合规范。在前端向后端发送数据时，我们可以调用这个函数将数据对象转化为 JSON 格式的字符串。\r\n \r\n另一个函数 JSON.parse() 函数，这个函数用来将 JSON 格式的字符串转换为一个 js 数据结构，如果传入的字符串不是标准的 JSON 格式的字符串的话，将会抛出错误。当我们从后端接收到 JSON 格式的字符串时，我们可以通过这个方法来将其解析为一个 js 数据结构，以此来进行数据的访问。\r\n```\r\n\r\n详细资料可以参考：\r\n[《深入了解 JavaScript 中的 JSON 》](https://my.oschina.net/u/3284240/blog/874368)\r\n\r\n## 53. [].forEach.call(\\$\\$("*"),function(a){a.style.outline="1px solid #"+(~~(Math.random()~~*(1<<24))).toString(16)}) 能解释一下这段代码的意思吗？\r\n\r\n```\r\n（1）选取页面所有 DOM 元素。在浏览器的控制台中可以使用$$()方法来获取页面中相应的元素，这是现代浏览器提供的一个命令行 API 相当于 document.querySelectorAll 方法。\r\n \r\n（2）循环遍历 DOM 元素\r\n \r\n（3）给元素添加 outline 。由于渲染的 outline 是不在 CSS 盒模型中的，所以为元素添加 outline 并不会影响元素的大小和页面的布局。\r\n \r\n（4）生成随机颜色函数。Math.random()*(1<<24) 可以得到 0~2^24 - 1 之间的随机数，因为得到的是一个浮点数，但我们只需要整数部分，使用取反操作符 ~ 连续两次取反获得整数部分，然后再用 toString(16) 的方式，转换为一个十六进制的字符串。\r\n```\r\n\r\n详细资料可以参考：\r\n[《通过一行代码学 JavaScript》](https://2008winstar.iteye.com/blog/2128290)\r\n\r\n## 54. js 延迟加载的方式有哪些？\r\n\r\n相关知识点：\r\n\r\n```\r\njs 延迟加载，也就是等页面加载完成之后再加载 JavaScript 文件。 js 延迟加载有助于提高页面加载速度。\r\n```\r\n\r\n一般有以下几种方式：\r\n\r\n- defer 属性\r\n- async 属性\r\n- 动态创建 DOM 方式\r\n- 使用 setTimeout 延迟方法\r\n- 让 JS 最后加载\r\n\r\n回答：\r\n\r\n```\r\njs 的加载、解析和执行会阻塞页面的渲染过程，因此我们希望 js 脚本能够尽可能的延迟加载，提高页面的渲染速度。\r\n \r\n我了解到的几种方式是：\r\n \r\n第一种方式是我们一般采用的是将 js 脚本放在文档的底部，来使 js 脚本尽可能的在最后来加载执行。\r\n \r\n第二种方式是给 js 脚本添加 defer 属性，这个属性会让脚本的加载与文档的解析同步解析，然后在文档解析完成后再执行这个脚本文件，这样的话就能使页面的渲染不被阻塞。多个设置了 defer 属性的脚本按规范来说最后是顺序执行的，但是在一些浏览器中可能不是这样。\r\n \r\n第三种方式是给 js 脚本添加 async 属性，这个属性会使脚本异步加载，不会阻塞页面的解析过程，但是当脚本加载完成后立即执行 js 脚本，这个时候如果文档没有解析完成的话同样会阻塞。多个 async 属性的脚本的执行顺序是不可预测的，一般不会按照代码的顺序依次执行。\r\n \r\n第四种方式是动态创建 DOM 标签的方式，我们可以对文档的加载事件进行监听，当文档加载完成后再动态的创建 script 标签来引入 js 脚本。\r\n```\r\n\r\n详细资料可以参考：\r\n[《JS 延迟加载的几种方式》](https://blog.csdn.net/meijory/article/details/76389762)\r\n[《HTML 5  async 属性》](http://www.w3school.com.cn/html5/att_script_async.asp)\r\n\r\n## 55. Ajax 是什么? 如何创建一个 Ajax？\r\n\r\n相关知识点：\r\n\r\n2005 年 2 月，AJAX 这个词第一次正式提出，它是 Asynchronous JavaScript and XML 的缩写，指的是通过 JavaScript 的\r\n异步通信，从服务器获取 XML 文档从中提取数据，再更新当前网页的对应部分，而不用刷新整个网页。\r\n\r\n具体来说，AJAX 包括以下几个步骤。\r\n\r\n- 1.创建 XMLHttpRequest 对象，也就是创建一个异步调用对象\r\n- 2.创建一个新的 HTTP 请求，并指定该 HTTP 请求的方法、URL 及验证信息\r\n- 3.设置响应 HTTP 请求状态变化的函数\r\n- 4.发送 HTTP 请求\r\n- 5.获取异步调用返回的数据\r\n- 6.使用 JavaScript 和 DOM 实现局部刷新\r\n\r\n一般实现：\r\n\r\n```\r\nconst SERVER_URL = "/server";\r\n \r\nlet xhr = new XMLHttpRequest();\r\n \r\n// 创建 Http 请求\r\nxhr.open("GET", SERVER_URL, true);\r\n \r\n// 设置状态监听函数\r\nxhr.onreadystatechange = function() {\r\n  if (this.readyState !== 4) return;\r\n \r\n  // 当请求成功时\r\n  if (this.status === 200) {\r\n    handle(this.response);\r\n  } else {\r\n    console.error(this.statusText);\r\n  }\r\n};\r\n \r\n// 设置请求失败时的监听函数\r\nxhr.onerror = function() {\r\n  console.error(this.statusText);\r\n};\r\n \r\n// 设置请求头信息\r\nxhr.responseType = "json";\r\nxhr.setRequestHeader("Accept", "application/json");\r\n \r\n// 发送 Http 请求\r\nxhr.send(null);\r\n \r\n// promise 封装实现：\r\n \r\nfunction getJSON(url) {\r\n  // 创建一个 promise 对象\r\n  let promise = new Promise(function(resolve, reject) {\r\n    let xhr = new XMLHttpRequest();\r\n \r\n    // 新建一个 http 请求\r\n    xhr.open("GET", url, true);\r\n \r\n    // 设置状态的监听函数\r\n    xhr.onreadystatechange = function() {\r\n      if (this.readyState !== 4) return;\r\n \r\n      // 当请求成功或失败时，改变 promise 的状态\r\n      if (this.status === 200) {\r\n        resolve(this.response);\r\n      } else {\r\n        reject(new Error(this.statusText));\r\n      }\r\n    };\r\n \r\n    // 设置错误监听函数\r\n    xhr.onerror = function() {\r\n      reject(new Error(this.statusText));\r\n    };\r\n \r\n    // 设置响应的数据类型\r\n    xhr.responseType = "json";\r\n \r\n    // 设置请求头信息\r\n    xhr.setRequestHeader("Accept", "application/json");\r\n \r\n    // 发送 http 请求\r\n    xhr.send(null);\r\n  });\r\n \r\n  return promise;\r\n}\r\n```\r\n\r\n回答：\r\n\r\n```\r\n我对 ajax 的理解是，它是一种异步通信的方法，通过直接由 js 脚本向服务器发起 http 通信，然后根据服务器返回的数据，更新网页的相应部分，而不用刷新整个页面的一种方法。\r\n \r\n创建一个 ajax 有这样几个步骤\r\n \r\n首先是创建一个 XMLHttpRequest 对象。\r\n \r\n然后在这个对象上使用 open 方法创建一个 http 请求，open 方法所需要的参数是请求的方法、请求的地址、是否异步和用户的认证信息。\r\n \r\n在发起请求前，我们可以为这个对象添加一些信息和监听函数。比如说我们可以通过 setRequestHeader 方法来为请求添加头信息。我们还可以为这个对象添加一个状态监听函数。一个 XMLHttpRequest 对象一共有 5 个状态，当它的状态变化时会触发onreadystatechange 事件，我们可以通过设置监听函数，来处理请求成功后的结果。当对象的 readyState 变为 4 的时候，代表服务器返回的数据接收完成，这个时候我们可以通过判断请求的状态，如果状态是 2xx 或者 304 的话则代表返回正常。这个时候我们就可以通过 response 中的数据来对页面进行更新了。\r\n \r\n当对象的属性和监听函数设置完成后，最后我们调用 sent 方法来向服务器发起请求，可以传入参数作为发送的数据体。\r\n```\r\n\r\n详细资料可以参考：\r\n[《XMLHttpRequest 对象》](https://wangdoc.com/javascript/bom/xmlhttprequest.html)\r\n[《从 ajax 到 fetch、axios》](https://juejin.im/post/5acde23c5188255cb32e7e76)\r\n[《Fetch 入门》](https://juejin.im/post/5c160937f265da61180199b2)\r\n[《传统 Ajax 已死，Fetch 永生》](https://segmentfault.com/a/1190000003810652)\r\n\r\n## 56. 谈一谈浏览器的缓存机制？\r\n\r\n```\r\n浏览器的缓存机制指的是通过在一段时间内保留已接收到的 web 资源的一个副本，如果在资源的有效时间内，发起了对这个资源的再一次请求，那么浏览器会直接使用缓存的副本，而不是向服务器发起请求。使用 web 缓存可以有效地提高页面的打开速度，减少不必要的网络带宽的消耗。\r\n \r\nweb 资源的缓存策略一般由服务器来指定，可以分为两种，分别是强缓存策略和协商缓存策略。\r\n \r\n使用强缓存策略时，如果缓存资源有效，则直接使用缓存资源，不必再向服务器发起请求。强缓存策略可以通过两种方式来设置，分别是 http 头信息中的 Expires 属性和 Cache-Control 属性。\r\n \r\n服务器通过在响应头中添加 Expires 属性，来指定资源的过期时间。在过期时间以内，该资源可以被缓存使用，不必再向服务器发送请求。这个时间是一个绝对时间，它是服务器的时间，因此可能存在这样的问题，就是客户端的时间和服务器端的时间不一致，或者用户可以对客户端时间进行修改的情况，这样就可能会影响缓存命中的结果。\r\n \r\nExpires 是 http1.0 中的方式，因为它的一些缺点，在 http 1.1 中提出了一个新的头部属性就是 Cache-Control 属性，\r\n它提供了对资源的缓存的更精确的控制。它有很多不同的值，常用的比如我们可以通过设置 max-age 来指定资源能够被缓存的时间\r\n的大小，这是一个相对的时间，它会根据这个时间的大小和资源第一次请求时的时间来计算出资源过期的时间，因此相对于 Expires\r\n来说，这种方式更加有效一些。常用的还有比如 private ，用来规定资源只能被客户端缓存，不能够代理服务器所缓存。还有如 n\r\no-store ，用来指定资源不能够被缓存，no-cache 代表该资源能够被缓存，但是立即失效，每次都需要向服务器发起请求。\r\n \r\n一般来说只需要设置其中一种方式就可以实现强缓存策略，当两种方式一起使用时，Cache-Control 的优先级要高于 Expires 。\r\n \r\n使用协商缓存策略时，会先向服务器发送一个请求，如果资源没有发生修改，则返回一个 304 状态，让浏览器使用本地的缓存副本。\r\n如果资源发生了修改，则返回修改后的资源。协商缓存也可以通过两种方式来设置，分别是 http 头信息中的 Etag 和 Last-Modified 属性。\r\n \r\n服务器通过在响应头中添加 Last-Modified 属性来指出资源最后一次修改的时间，当浏览器下一次发起请求时，会在请求头中添加一个 If-Modified-Since 的属性，属性值为上一次资源返回时的 Last-Modified 的值。当请求发送到服务器后服务器会通过这个属性来和资源的最后一次的修改时间来进行比较，以此来判断资源是否做了修改。如果资源没有修改，那么返回 304 状态，让客户端使用本地的缓存。如果资源已经被修改了，则返回修改后的资源。使用这种方法有一个缺点，就是 Last-Modified 标注的最后修改时间只能精确到秒级，如果某些文件在1秒钟以内，被修改多次的话，那么文件已将改变了但是 Last-Modified 却没有改变，\r\n这样会造成缓存命中的不准确。\r\n \r\n因为 Last-Modified 的这种可能发生的不准确性，http 中提供了另外一种方式，那就是 Etag 属性。服务器在返回资源的时候，在头信息中添加了 Etag 属性，这个属性是资源生成的唯一标识符，当资源发生改变的时候，这个值也会发生改变。在下一次资源请求时，浏览器会在请求头中添加一个 If-None-Match 属性，这个属性的值就是上次返回的资源的 Etag 的值。服务接收到请求后会根据这个值来和资源当前的 Etag 的值来进行比较，以此来判断资源是否发生改变，是否需要返回资源。通过这种方式，比 Last-Modified 的方式更加精确。\r\n \r\n当 Last-Modified 和 Etag 属性同时出现的时候，Etag 的优先级更高。使用协商缓存的时候，服务器需要考虑负载平衡的问题，因此多个服务器上资源的 Last-Modified 应该保持一致，因为每个服务器上 Etag 的值都不一样，因此在考虑负载平衡时，最好不要设置 Etag 属性。\r\n \r\n强缓存策略和协商缓存策略在缓存命中时都会直接使用本地的缓存副本，区别只在于协商缓存会向服务器发送一次请求。它们缓存不命中时，都会向服务器发送请求来获取资源。在实际的缓存机制中，强缓存策略和协商缓存策略是一起合作使用的。浏览器首先会根据请求的信息判断，强缓存是否命中，如果命中则直接使用资源。如果不命中则根据头信息向服务器发起请求，使用协商缓存，如果协商缓存命中的话，则服务器不返回资源，浏览器直接使用本地资源的副本，如果协商缓存不命中，则浏览器返回最新的资源给浏览器。\r\n```\r\n\r\n详细资料可以参考：\r\n[《浅谈浏览器缓存》](https://segmentfault.com/a/1190000012573337)\r\n[《前端优化：浏览器缓存技术介绍》](https://juejin.im/post/5b9346dcf265da0aac6fbe57#heading-3)\r\n[《请求头中的 Cache-Control》](https://www.web-tinker.com/article/21221.html)\r\n[《Cache-Control 字段值详解》](https://juejin.im/post/5c2d6c9ae51d450cf4195a08)\r\n\r\n## 57. Ajax 解决浏览器缓存问题？\r\n\r\n- 1.在 ajax 发送请求前加上 anyAjaxObj.setRequestHeader("If-Modified-Since","0")。\r\n\r\n  \r\n\r\n- 2.在 ajax 发送请求前加上 anyAjaxObj.setRequestHeader("Cache-Control","no-cache")。\r\n\r\n- 3.在 URL 后面加上一个随机数： "fresh=" + Math.random();。\r\n\r\n- 4.在 URL 后面加上时间戳："nowtime=" + new Date().getTime();。\r\n\r\n- 5.如果是使用 jQuery，直接这样就可以了\\$.ajaxSetup({cache:false})。这样页面的所有 ajax 都会执行这条语句就是不需要保存缓存记录。\r\n\r\n详细资料可以参考：\r\n[《Ajax 中浏览器的缓存问题解决方法》](https://www.cnblogs.com/cwzqianduan/p/8632009.html)\r\n[《浅谈浏览器缓存》](https://segmentfault.com/a/1190000012573337)\r\n\r\n## 58. 同步和异步的区别？\r\n\r\n相关知识点：\r\n\r\n```\r\n同步，可以理解为在执行完一个函数或方法之后，一直等待系统返回值或消息，这时程序是处于阻塞的，只有接收到返回的值或消息后才往下执行其他的命令。  \r\n \r\n异步，执行完函数或方法后，不必阻塞性地等待返回值或消息，只需要向系统委托一个异步过程，那么当系统接收到返回值或消息时，系统会自动触发委托的异步过程，从而完成一个完整的流程。 \r\n```\r\n\r\n回答：\r\n\r\n```\r\n同步指的是当一个进程在执行某个请求的时候，如果这个请求需要等待一段时间才能返回，那么这个进程会一直等待下去，直到消息返\r\n回为止再继续向下执行。\r\n \r\n异步指的是当一个进程在执行某个请求的时候，如果这个请求需要等待一段时间才能返回，这个时候进程会继续往下执行，不会阻塞等\r\n待消息的返回，当消息返回时系统再通知进程进行处理。\r\n```\r\n\r\n详细资料可以参考：\r\n[《同步和异步的区别》](https://blog.csdn.net/tennysonsky/article/details/45111623)\r\n\r\n## 59. 什么是浏览器的同源政策？\r\n\r\n```\r\n我对浏览器的同源政策的理解是，一个域下的 js 脚本在未经允许的情况下，不能够访问另一个域的内容。这里的同源的指的是两个\r\n域的协议、域名、端口号必须相同，否则则不属于同一个域。\r\n \r\n同源政策主要限制了三个方面\r\n \r\n第一个是当前域下的 js 脚本不能够访问其他域下的 cookie、localStorage 和 indexDB。\r\n \r\n第二个是当前域下的 js 脚本不能够操作访问操作其他域下的 DOM。\r\n \r\n第三个是当前域下 ajax 无法发送跨域请求。\r\n \r\n同源政策的目的主要是为了保证用户的信息安全，它只是对 js 脚本的一种限制，并不是对浏览器的限制，对于一般的 img、或者\r\nscript 脚本请求都不会有跨域的限制，这是因为这些操作都不会通过响应结果来进行可能出现安全问题的操作。\r\n```\r\n\r\n## 60. 如何解决跨域问题？\r\n\r\n相关知识点：\r\n\r\n- 1. 通过 jsonp 跨域\r\n- 1. document.domain + iframe 跨域\r\n- 1. location.hash + iframe\r\n- 1. window.name + iframe 跨域\r\n- 1. postMessage 跨域\r\n- 1. 跨域资源共享（CORS)\r\n- 1. nginx 代理跨域\r\n- 1. nodejs 中间件代理跨域\r\n- 1. WebSocket 协议跨域\r\n\r\n回答：\r\n\r\n```\r\n解决跨域的方法我们可以根据我们想要实现的目的来划分。\r\n \r\n首先我们如果只是想要实现主域名下的不同子域名的跨域操作，我们可以使用设置 document.domain 来解决。\r\n \r\n（1）将 document.domain 设置为主域名，来实现相同子域名的跨域操作，这个时候主域名下的 cookie 就能够被子域名所访问。同时如果文档中含有主域名相同，子域名不同的 iframe 的话，我们也可以对这个 iframe 进行操作。\r\n \r\n如果是想要解决不同跨域窗口间的通信问题，比如说一个页面想要和页面的中的不同源的 iframe 进行通信的问题，我们可以使用 location.hash 或者 window.name 或者 postMessage 来解决。\r\n \r\n（2）使用 location.hash 的方法，我们可以在主页面动态的修改 iframe 窗口的 hash 值，然后在 iframe 窗口里实现监听函数来实现这样一个单向的通信。因为在 iframe 是没有办法访问到不同源的父级窗口的，所以我们不能直接修改父级窗口的 hash 值来实现通信，我们可以在 iframe 中再加入一个 iframe ，这个 iframe 的内容是和父级页面同源的，所以我们可以 window.parent.parent 来修改最顶级页面的 src，以此来实现双向通信。\r\n \r\n（3）使用 window.name 的方法，主要是基于同一个窗口中设置了 window.name 后不同源的页面也可以访问，所以不同源的子页面可以首先在 window.name 中写入数据，然后跳转到一个和父级同源的页面。这个时候级页面就可以访问同源的子页面中 window.name 中的数据了，这种方式的好处是可以传输的数据量大。\r\n \r\n（4）使用 postMessage 来解决的方法，这是一个 h5 中新增的一个 api。通过它我们可以实现多窗口间的信息传递，通过获取到指定窗口的引用，然后调用 postMessage 来发送信息，在窗口中我们通过对 message 信息的监听来接收信息，以此来实现不同源间的信息交换。\r\n \r\n如果是像解决 ajax 无法提交跨域请求的问题，我们可以使用 jsonp、cors、websocket 协议、服务器代理来解决问题。\r\n \r\n（5）使用 jsonp 来实现跨域请求，它的主要原理是通过动态构建 script  标签来实现跨域请求，因为浏览器对 script 标签的引入没有跨域的访问限制 。通过在请求的 url 后指定一个回调函数，然后服务器在返回数据的时候，构建一个 json 数据的包装，这个包装就是回调函数，然后返回给前端，前端接收到数据后，因为请求的是脚本文件，所以会直接执行，这样我们先前定义好的回调函数就可以被调用，从而实现了跨域请求的处理。这种方式只能用于 get 请求。\r\n \r\n（6）使用 CORS 的方式，CORS 是一个 W3C 标准，全称是"跨域资源共享"。CORS 需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，因此我们只需要在服务器端配置就行。浏览器将 CORS 请求分成两类：简单请求和非简单请求。对于简单请求，浏览器直接发出 CORS 请求。具体来说，就是会在头信息之中，增加一个 Origin 字段。Origin 字段用来说明本次请求来自哪个源。服务器根据这个值，决定是否同意这次请求。对于如果 Origin 指定的源，不在许可范围内，服务器会返回一个正常的 HTTP 回应。浏览器发现，这个回应的头信息没有包含 Access-Control-Allow-Origin 字段，就知道出错了，从而抛出一个错误，ajax 不会收到响应信息。如果成功的话会包含一些以 Access-Control- 开头的字段。\r\n \r\n非简单请求，浏览器会先发出一次预检请求，来判断该域名是否在服务器的白名单中，如果收到肯定回复后才会发起请求。\r\n \r\n（7）使用 websocket 协议，这个协议没有同源限制。\r\n \r\n（8）使用服务器来代理跨域的访问请求，就是有跨域的请求操作时发送请求给后端，让后端代为请求，然后最后将获取的结果发返回。\r\n```\r\n\r\n详细资料可以参考：\r\n[《前端常见跨域解决方案（全）》](https://segmentfault.com/a/1190000011145364)\r\n[《浏览器同源政策及其规避方法》](http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html)\r\n[《跨域，你需要知道的全在这里》](https://juejin.im/entry/59feae9df265da43094488f6)\r\n[《为什么 form 表单提交没有跨域问题，但 ajax 提交有跨域问题？》](https://www.zhihu.com/question/31592553)\r\n\r\n## 61. 服务器代理转发时，该如何处理 cookie？\r\n\r\n详细资料可以参考：\r\n[《深入浅出 Nginx》](https://www.jianshu.com/p/5eab0f83e3b4)\r\n\r\n## 62. 简单谈一下 cookie ？\r\n\r\n```\r\n我的理解是 cookie 是服务器提供的一种用于维护会话状态信息的数据，通过服务器发送到浏览器，浏览器保存在本地，当下一次有同源的请求时，将保存的 cookie 值添加到请求头部，发送给服务端。这可以用来实现记录用户登录状态等功能。cookie 一般可以存储 4k 大小的数据，并且只能够被同源的网页所共享访问。\r\n \r\n服务器端可以使用 Set-Cookie 的响应头部来配置 cookie 信息。一条cookie 包括了5个属性值 expires、domain、path、secure、HttpOnly。其中 expires 指定了 cookie 失效的时间，domain 是域名、path是路径，domain 和 path 一起限制了 cookie 能够被哪些 url 访问。secure 规定了 cookie 只能在确保安全的情况下传输，HttpOnly 规定了这个 cookie 只能被服务器访问，不能使用 js 脚本访问。\r\n \r\n在发生 xhr 的跨域请求的时候，即使是同源下的 cookie，也不会被自动添加到请求头部，除非显示地规定。\r\n```\r\n\r\n详细资料可以参考：\r\n[《HTTP cookies》](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Cookies)\r\n[《聊一聊 cookie》](https://segmentfault.com/a/1190000004556040)\r\n\r\n## 63. 模块化开发怎么做？\r\n\r\n```\r\n我对模块的理解是，一个模块是实现一个特定功能的一组方法。在最开始的时候，js 只实现一些简单的功能，所以并没有模块的概念\r\n，但随着程序越来越复杂，代码的模块化开发变得越来越重要。\r\n \r\n由于函数具有独立作用域的特点，最原始的写法是使用函数来作为模块，几个函数作为一个模块，但是这种方式容易造成全局变量的污\r\n染，并且模块间没有联系。\r\n \r\n后面提出了对象写法，通过将函数作为一个对象的方法来实现，这样解决了直接使用函数作为模块的一些缺点，但是这种办法会暴露所\r\n有的所有的模块成员，外部代码可以修改内部属性的值。\r\n \r\n现在最常用的是立即执行函数的写法，通过利用闭包来实现模块私有作用域的建立，同时不会对全局作用域造成污染。\r\n```\r\n\r\n详细资料可以参考：\r\n[《浅谈模块化开发》](https://juejin.im/post/5ab378c46fb9a028ce7b824f)\r\n[《Javascript 模块化编程（一）：模块的写法》](http://www.ruanyifeng.com/blog/2012/10/javascript_module.html)\r\n[《前端模块化：CommonJS，AMD，CMD，ES6》](https://juejin.im/post/5aaa37c8f265da23945f365c)\r\n[《Module 的语法》](http://es6.ruanyifeng.com/#docs/module)\r\n\r\n## 64. js 的几种模块规范？\r\n\r\n```\r\njs 中现在比较成熟的有四种模块加载方案。\r\n \r\n第一种是 CommonJS 方案，它通过 require 来引入模块，通过 module.exports 定义模块的输出接口。这种模块加载方案是\r\n服务器端的解决方案，它是以同步的方式来引入模块的，因为在服务端文件都存储在本地磁盘，所以读取非常快，所以以同步的方式\r\n加载没有问题。但如果是在浏览器端，由于模块的加载是使用网络请求，因此使用异步加载的方式更加合适。\r\n \r\n第二种是 AMD 方案，这种方案采用异步加载的方式来加载模块，模块的加载不影响后面语句的执行，所有依赖这个模块的语句都定\r\n义在一个回调函数里，等到加载完成后再执行回调函数。require.js 实现了 AMD 规范。\r\n \r\n第三种是 CMD 方案，这种方案和 AMD 方案都是为了解决异步模块加载的问题，sea.js 实现了 CMD 规范。它和 require.js\r\n的区别在于模块定义时对依赖的处理不同和对依赖模块的执行时机的处理不同。参考60\r\n \r\n第四种方案是 ES6 提出的方案，使用 import 和 export 的形式来导入导出模块。这种方案和上面三种方案都不同。参考 61。\r\n```\r\n\r\n## 65. AMD 和 CMD 规范的区别？\r\n\r\n它们之间的主要区别有两个方面。\r\n\r\n（1）第一个方面是在模块定义时对依赖的处理不同。AMD 推崇依赖前置，在定义模块的时候就要声明其依赖的模块。而 CMD 推崇\r\n就近依赖，只有在用到某个模块的时候再去 require。\r\n\r\n（2）第二个方面是对依赖模块的执行时机处理不同。首先 AMD 和 CMD 对于模块的加载方式都是异步加载，不过它们的区别在于\r\n模块的执行时机，AMD 在依赖模块加载完成后就直接执行依赖模块，依赖模块的执行顺序和我们书写的顺序不一定一致。而 CMD\r\n在依赖模块加载完成后并不执行，只是下载而已，等到所有的依赖模块都加载好后，进入回调函数逻辑，遇到 require 语句\r\n的时候才执行对应的模块，这样模块的执行顺序就和我们书写的顺序保持一致了。\r\n\r\n```\r\n// CMD\r\ndefine(function(require, exports, module) {\r\n  var a = require("./a");\r\n  a.doSomething();\r\n  // 此处略去 100 行\r\n  var b = require("./b"); // 依赖可以就近书写\r\n  b.doSomething();\r\n  // ...\r\n});\r\n \r\n// AMD 默认推荐\r\ndefine(["./a", "./b"], function(a, b) {\r\n  // 依赖必须一开始就写好\r\n  a.doSomething();\r\n  // 此处略去 100 行\r\n  b.doSomething();\r\n  // ...\r\n});\r\n```\r\n\r\n详细资料可以参考：\r\n[《前端模块化，AMD 与 CMD 的区别》](https://juejin.im/post/5a422b036fb9a045211ef789)\r\n\r\n## 66. ES6 模块与 CommonJS 模块、AMD、CMD 的差异。\r\n\r\n- 1.CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。CommonJS 模块输出的是值的拷贝，也就是说，一旦输出一个值，模块内部的变化就影响不到这个值。ES6 模块的运行机制与 CommonJS 不一样。JS 引擎对脚本静态分析的时候，遇到模块加载命令 import，就会生成一个只读引用。等到脚本真正执行时，再根据这个只读引用，到被加载的那个模块里面去取值。\r\n\r\n  \r\n\r\n- 2.CommonJS 模块是运行时加载，ES6 模块是编译时输出接口。CommonJS 模块就是对象，即在输入时是先加载整个模块，生成一个对象，然后再从这个对象上面读取方法，这种加载称为“运行时加载”。而 ES6 模块不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成。\r\n\r\n## 67. requireJS 的核心原理是什么？（如何动态加载的？如何避免多次加载的？如何 缓存的？）\r\n\r\n```\r\nrequire.js 的核心原理是通过动态创建 script 脚本来异步引入模块，然后对每个脚本的 load 事件进行监听，如果每个脚本都加载完成了，再调用回调函数。\r\n```\r\n\r\n详细资料可以参考：\r\n[《requireJS 的用法和原理分析》](https://github.com/HRFE/blog/issues/10)\r\n[《requireJS 的核心原理是什么？》](https://zhuanlan.zhihu.com/p/55039478)\r\n[《从 RequireJs 源码剖析脚本加载原理》](https://www.cnblogs.com/dong-xu/p/7160919.html)\r\n[《requireJS 原理分析》](https://www.jianshu.com/p/5a39535909e4)\r\n\r\n## 68. JS 模块加载器的轮子怎么造，也就是如何实现一个模块加载器？\r\n\r\n详细资料可以参考：\r\n[《JS 模块加载器加载原理是怎么样的？》](https://www.zhihu.com/question/21157540)\r\n\r\n## 69. ECMAScript6 怎么写 class，为什么会出现 class 这种东西?\r\n\r\n```\r\n在我看来 ES6 新添加的 class 只是为了补充 js 中缺少的一些面向对象语言的特性，但本质上来说它只是一种语法糖，不是一个新的东西，其背后还是原型继承的思想。通过加入 class 可以有利于我们更好的组织代码。\r\n \r\n在 class 中添加的方法，其实是添加在类的原型上的。\r\n```\r\n\r\n详细资料可以参考：\r\n[《ECMAScript 6 实现了 class，对 JavaScript 前端开发有什么意义？》](https://www.zhihu.com/question/29789315)\r\n[《Class 的基本语法》](http://es6.ruanyifeng.com/#docs/class)\r\n\r\n## 70. documen.write 和 innerHTML 的区别？\r\n\r\n```\r\ndocument.write 的内容会代替整个文档内容，会重写整个页面。\r\n \r\ninnerHTML 的内容只是替代指定元素的内容，只会重写页面中的部分内容。\r\n```\r\n\r\n详细资料可以参考：\r\n[《简述 document.write 和 innerHTML 的区别。》](https://www.nowcoder.com/questionTerminal/2c5d8105b2694d85b06eff85e871cf50)\r\n\r\n## 71. DOM 操作——怎样添加、移除、移动、复制、创建和查找节点？\r\n\r\n（1）创建新节点\r\n\r\n```\r\ncreateDocumentFragment(node);\r\ncreateElement(node);\r\ncreateTextNode(text);\r\n```\r\n\r\n（2）添加、移除、替换、插入\r\n\r\n```\r\nappendChild(node)\r\nremoveChild(node)\r\nreplaceChild(new,old)\r\ninsertBefore(new,old)\r\n```\r\n\r\n（3）查找\r\n\r\n```\r\ngetElementById();\r\ngetElementsByName();\r\ngetElementsByTagName();\r\ngetElementsByClassName();\r\nquerySelector();\r\nquerySelectorAll();\r\n```\r\n\r\n（4）属性操作\r\n\r\n```\r\ngetAttribute(key);\r\nsetAttribute(key, value);\r\nhasAttribute(key);\r\nremoveAttribute(key);\r\n```\r\n\r\n详细资料可以参考：\r\n[《DOM 概述》](https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model/Introduction#DOM_interfaces)\r\n[《原生 JavaScript 的 DOM 操作汇总》](https://harttle.land/2015/10/01/javascript-dom-api.html)\r\n[《原生 JS 中 DOM 节点相关 API 合集》](https://microzz.com/2017/04/06/jsdom/)\r\n\r\n## 72. innerHTML 与 outerHTML 的区别？\r\n\r\n```\r\n对于这样一个 HTML 元素：<div>content<br/></div>。\r\n \r\ninnerHTML：内部 HTML，content<br/>；\r\nouterHTML：外部 HTML，<div>content<br/></div>；\r\ninnerText：内部文本，content ；\r\nouterText：内部文本，content ；\r\n```\r\n\r\n## 73. .call() 和 .apply() 的区别？\r\n\r\n```\r\n它们的作用一模一样，区别仅在于传入参数的形式的不同。\r\n \r\napply 接受两个参数，第一个参数指定了函数体内 this 对象的指向，第二个参数为一个带下标的集合，这个集合可以为数组，也可以为类数组，apply 方法把这个集合中的元素作为参数传递给被调用的函数。\r\n \r\ncall 传入的参数数量不固定，跟 apply 相同的是，第一个参数也是代表函数体内的 this 指向，从第二个参数开始往后，每个参数被依次传入函数。\r\n```\r\n\r\n详细资料可以参考：\r\n[《apply、call 的区别和用途》](https://juejin.im/entry/58d0a7b22f301e007e5a15ae)\r\n\r\n## 74. JavaScript 类数组对象的定义？\r\n\r\n```\r\n一个拥有 length 属性和若干索引属性的对象就可以被称为类数组对象，类数组对象和数组类似，但是不能调用数组的方法。\r\n \r\n常见的类数组对象有 arguments 和 DOM 方法的返回结果，还有一个函数也可以被看作是类数组对象，因为它含有 length\r\n属性值，代表可接收的参数个数。\r\n```\r\n\r\n常见的类数组转换为数组的方法有这样几种：\r\n\r\n（1）通过 call 调用数组的 slice 方法来实现转换\r\n\r\n```\r\nArray.prototype.slice.call(arrayLike);\r\n```\r\n\r\n（2）通过 call 调用数组的 splice 方法来实现转换\r\n\r\n```\r\nArray.prototype.splice.call(arrayLike, 0);\r\n```\r\n\r\n（3）通过 apply 调用数组的 concat 方法来实现转换\r\n\r\n```\r\nArray.prototype.concat.apply([], arrayLike);\r\n```\r\n\r\n（4）通过 Array.from 方法来实现转换\r\n\r\n```\r\nArray.from(arrayLike);\r\n```\r\n\r\n详细的资料可以参考：\r\n[《JavaScript 深入之类数组对象与 arguments》](https://github.com/mqyqingfeng/Blog/issues/14)\r\n[《javascript 类数组》](https://segmentfault.com/a/1190000000415572)\r\n[《深入理解 JavaScript 类数组》](https://blog.lxxyx.cn/2016/05/07/深入理解JavaScript类数组/)\r\n\r\n## 75. 数组和对象有哪些原生方法，列举一下？\r\n\r\n```\r\n数组和字符串的转换方法：toString()、toLocalString()、join() 其中 join() 方法可以指定转换为字符串时的分隔符。\r\n \r\n数组尾部操作的方法 pop() 和 push()，push 方法可以传入多个参数。\r\n \r\n数组首部操作的方法 shift() 和 unshift() 重排序的方法 reverse() 和 sort()，sort() 方法可以传入一个函数来进行比较，传入前后两个值，如果返回值为正数，则交换两个参数的位置。\r\n \r\n数组连接的方法 concat() ，返回的是拼接好的数组，不影响原数组。\r\n \r\n数组截取办法 slice()，用于截取数组中的一部分返回，不影响原数组。\r\n \r\n数组插入方法 splice()，影响原数组查找特定项的索引的方法，indexOf() 和 lastIndexOf() 迭代方法 every()、some()、filter()、map() 和 forEach() 方法\r\n \r\n数组归并方法 reduce() 和 reduceRight() 方法\r\n```\r\n\r\n详细资料可以参考：\r\n[《JavaScript 深入理解之 Array 类型详解》](http://cavszhouyou.top/JavaScript深入理解之Array详解.html)\r\n\r\n## 76. 数组的 fill 方法？\r\n\r\n```\r\nfill() 方法用一个固定值填充一个数组中从起始索引到终止索引内的全部元素。不包括终止索引。\r\nfill 方法接受三个参数 value，start 以及 end，start 和 end 参数是可选的，其默认值分别为 0 和 this 对象的 length 属性值。\r\n```\r\n\r\n详细资料可以参考：\r\n[《Array.prototype.fill()》](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/fill)\r\n\r\n## 77. [,,,] 的长度？\r\n\r\n```\r\n尾后逗号 （有时叫做“终止逗号”）在向 JavaScript 代码添加元素、参数、属性时十分有用。如果你想要添加新的属性，并且上一行已经使用了尾后逗号，你可以仅仅添加新的一行，而不需要修改上一行。这使得版本控制更加清晰，以及代码维护麻烦更少。\r\n \r\nJavaScript 一开始就支持数组字面值中的尾后逗号，随后向对象字面值（ECMAScript 5）中添加了尾后逗号。最近（ECMAS\r\ncript 2017），又将其添加到函数参数中。但是 JSON 不支持尾后逗号。\r\n \r\n如果使用了多于一个尾后逗号，会产生间隙。 带有间隙的数组叫做稀疏数组（密致数组没有间隙）。稀疏数组的长度为逗号的数\r\n量。\r\n```\r\n\r\n详细资料可以参考：\r\n[《尾后逗号》](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Trailing_commas)\r\n\r\n## 78. JavaScript 中的作用域与变量声明提升？\r\n\r\n```\r\n变量提升的表现是，无论我们在函数中何处位置声明的变量，好像都被提升到了函数的首部，我们可以在变量声明前访问到而不会报错。\r\n \r\n造成变量声明提升的本质原因是 js 引擎在代码执行前有一个解析的过程，创建了执行上下文，初始化了一些代码执行时需要用到的对象。当我们访问一个变量时，我们会到当前执行上下文中的作用域链中去查找，而作用域链的首端指向的是当前执行上下文的变量对象，这个变量对象是执行上下文的一个属性，它包含了函数的形参、所有的函数和变量声明，这个对象的是在代码解析的时候创建的。这就是会出现变量声明提升的根本原因。\r\n```\r\n\r\n详细资料可以参考：\r\n[《JavaScript 深入理解之变量对象》](http://cavszhouyou.top/JavaScript深入理解之变量对象.html)\r\n\r\n## 79. 如何编写高性能的 Javascript ？\r\n\r\n- 1.使用位运算代替一些简单的四则运算。\r\n- 2.避免使用过深的嵌套循环。\r\n- 3.不要使用未定义的变量。\r\n- 4.当需要多次访问数组长度时，可以用变量保存起来，避免每次都会去进行属性查找。\r\n\r\n详细资料可以参考：\r\n[《如何编写高性能的 Javascript？》](https://zhuanlan.zhihu.com/p/34780474)\r\n\r\n## 80. 简单介绍一下 V8 引擎的垃圾回收机制\r\n\r\n```\r\nv8 的垃圾回收机制基于分代回收机制，这个机制又基于世代假说，这个假说有两个特点，一是新生的对象容易早死，另一个是不死的对象会活得更久。基于这个假说，v8 引擎将内存分为了新生代和老生代。\r\n \r\n新创建的对象或者只经历过一次的垃圾回收的对象被称为新生代。经历过多次垃圾回收的对象被称为老生代。\r\n \r\n新生代被分为 From 和 To 两个空间，To 一般是闲置的。当 From 空间满了的时候会执行 Scavenge 算法进行垃圾回收。当我们执行垃圾回收算法的时候应用逻辑将会停止，等垃圾回收结束后再继续执行。这个算法分为三步：\r\n \r\n（1）首先检查 From 空间的存活对象，如果对象存活则判断对象是否满足晋升到老生代的条件，如果满足条件则晋升到老生代。如果不满足条件则移动 To 空间。\r\n \r\n（2）如果对象不存活，则释放对象的空间。\r\n \r\n（3）最后将 From 空间和 To 空间角色进行交换。\r\n \r\n新生代对象晋升到老生代有两个条件：\r\n \r\n（1）第一个是判断是对象否已经经过一次 Scavenge 回收。若经历过，则将对象从 From 空间复制到老生代中；若没有经历，则复制到 To 空间。\r\n \r\n（2）第二个是 To 空间的内存使用占比是否超过限制。当对象从 From 空间复制到 To 空间时，若 To 空间使用超过 25%，则对象直接晋升到老生代中。设置 25% 的原因主要是因为算法结束后，两个空间结束后会交换位置，如果 To 空间的内存太小，会影响后续的内存分配。\r\n \r\n老生代采用了标记清除法和标记压缩法。标记清除法首先会对内存中存活的对象进行标记，标记结束后清除掉那些没有标记的对象。由于标记清除后会造成很多的内存碎片，不便于后面的内存分配。所以了解决内存碎片的问题引入了标记压缩法。\r\n \r\n由于在进行垃圾回收的时候会暂停应用的逻辑，对于新生代方法由于内存小，每次停顿的时间不会太长，但对于老生代来说每次垃圾回收的时间长，停顿会造成很大的影响。 为了解决这个问题 V8 引入了增量标记的方法，将一次停顿进行的过程分为了多步，每次执行完一小步就让运行逻辑执行一会，就这样交替运行。\r\n```\r\n\r\n详细资料可以参考：\r\n[《深入理解 V8 的垃圾回收原理》](https://www.jianshu.com/p/b8ed21e8a4fb)\r\n[《JavaScript 中的垃圾回收》](https://zhuanlan.zhihu.com/p/23992332)\r\n\r\n## 81. 哪些操作会造成内存泄漏？\r\n\r\n相关知识点：\r\n\r\n- 1.意外的全局变量\r\n- 2.被遗忘的计时器或回调函数\r\n- 3.脱离 DOM 的引用\r\n- 4.闭包\r\n\r\n回答：\r\n\r\n```\r\n第一种情况是我们由于使用未声明的变量，而意外的创建了一个全局变量，而使这个变量一直留在内存中无法被回收。\r\n \r\n第二种情况是我们设置了 setInterval 定时器，而忘记取消它，如果循环函数有对外部变量的引用的话，那么这个变量会被一直留\r\n在内存中，而无法被回收。\r\n \r\n第三种情况是我们获取一个 DOM 元素的引用，而后面这个元素被删除，由于我们一直保留了对这个元素的引用，所以它也无法被回\r\n收。\r\n \r\n第四种情况是不合理的使用闭包，从而导致某些变量一直被留在内存当中。\r\n```\r\n\r\n详细资料可以参考：\r\n[《JavaScript 内存泄漏教程》](http://www.ruanyifeng.com/blog/2017/04/memory-leak.html)\r\n[《4 类 JavaScript 内存泄漏及如何避免》](https://jinlong.github.io/2016/05/01/4-Types-of-Memory-Leaks-in-JavaScript-and-How-to-Get-Rid-Of-Them/)\r\n[《杜绝 js 中四种内存泄漏类型的发生》](https://juejin.im/entry/5a64366c6fb9a01c9332c706)\r\n[《javascript 典型内存泄漏及 chrome 的排查方法》](https://segmentfault.com/a/1190000008901861)\r\n\r\n## 82. 需求：实现一个页面操作不会整页刷新的网站，并且能在浏览器前进、后退时正确响应。给出你的技术实现方案？\r\n\r\n```\r\n通过使用 pushState + ajax 实现浏览器无刷新前进后退，当一次 ajax 调用成功后我们将一条 state 记录加入到 history\r\n对象中。一条 state 记录包含了 url、title 和 content 属性，在 popstate 事件中可以获取到这个 state 对象，我们可\r\n以使用 content 来传递数据。最后我们通过对 window.onpopstate 事件监听来响应浏览器的前进后退操作。\r\n \r\n使用 pushState 来实现有两个问题，一个是打开首页时没有记录，我们可以使用 replaceState 来将首页的记录替换，另一个问\r\n题是当一个页面刷新的时候，仍然会向服务器端请求数据，因此如果请求的 url 需要后端的配合将其重定向到一个页面。\r\n```\r\n\r\n详细资料可以参考：\r\n[《pushState + ajax 实现浏览器无刷新前进后退》](http://blog.chenxu.me/post/detail?id=ed4f0732-897f-48e4-9d4f-821e82f17fad)\r\n[《Manipulating the browser history》](https://developer.mozilla.org/zh-CN/docs/Web/API/History_API)\r\n\r\n## 83. 如何判断当前脚本运行在浏览器还是 node 环境中？（阿里）\r\n\r\n```\r\nthis === window ? \'browser\' : \'node\';\r\n \r\n通过判断 Global 对象是否为 window，如果不为 window，当前脚本没有运行在浏览器中。\r\n```\r\n\r\n## 84. 把 script 标签放在页面的最底部的 body 封闭之前和封闭之后有什么区别？浏览器会如何解析它们？\r\n\r\n详细资料可以参考：\r\n[《为什么把 script 标签放在 body 结束标签之后 html 结束标签之前？》](https://www.zhihu.com/question/20027966)\r\n[《从 Chrome 源码看浏览器如何加载资源》](https://zhuanlan.zhihu.com/p/30558018)\r\n\r\n## 85. 移动端的点击事件的有延迟，时间是多久，为什么会有？ 怎么解决这个延时？\r\n\r\n```\r\n移动端点击有 300ms 的延迟是因为移动端会有双击缩放的这个操作，因此浏览器在 click 之后要等待 300ms，看用户有没有下一次点击，来判断这次操作是不是双击。\r\n```\r\n\r\n有三种办法来解决这个问题：\r\n\r\n- 1.通过 meta 标签禁用网页的缩放。\r\n- 2.通过 meta 标签将网页的 viewport 设置为 ideal viewport。\r\n- 3.调用一些 js 库，比如 FastClick\r\n\r\n```\r\nclick 延时问题还可能引起点击穿透的问题，就是如果我们在一个元素上注册了 touchStart 的监听事件，这个事件会将这个元素隐藏掉，我们发现当这个元素隐藏后，触发了这个元素下的一个元素的点击事件，这就是点击穿透。\r\n```\r\n\r\n详细资料可以参考：\r\n[《移动端 300ms 点击延迟和点击穿透》](https://juejin.im/post/5b3cc9836fb9a04f9a5cb0e0)\r\n\r\n## 86. 什么是“前端路由”？什么时候适合使用“前端路由”？“前端路由”有哪些优点和缺点？\r\n\r\n```\r\n（1）什么是前端路由？\r\n \r\n前端路由就是把不同路由对应不同的内容或页面的任务交给前端来做，之前是通过服务端根据 url 的不同返回不同的页面实现的。\r\n \r\n（2）什么时候使用前端路由？\r\n \r\n在单页面应用，大部分页面结构不变，只改变部分内容的使用\r\n \r\n（3）前端路由有什么优点和缺点？\r\n \r\n优点：用户体验好，不需要每次都从服务器全部获取，快速展现给用户\r\n \r\n缺点：单页面无法记住之前滚动的位置，无法在前进，后退的时候记住滚动的位置\r\n \r\n前端路由一共有两种实现方式，一种是通过 hash 的方式，一种是通过使用 pushState 的方式。\r\n```\r\n\r\n详细资料可以参考：\r\n[《什么是“前端路由”》](https://segmentfault.com/q/1010000005336260)\r\n[《浅谈前端路由》](https://github.com/kaola-fed/blog/issues/137)\r\n[《前端路由是什么东西？》](https://www.zhihu.com/question/53064386)\r\n\r\n## 87. 如何测试前端代码么？ 知道 BDD, TDD, Unit Test 么？ 知道怎么测试你的前端工程么(mocha, sinon, jasmin, qUnit..)？\r\n\r\n详细资料可以参考：\r\n[《浅谈前端单元测试》](https://juejin.im/post/5b2da89cf265da597f1c7cab)\r\n\r\n## 88. 检测浏览器版本版本有哪些方式？\r\n\r\n```\r\n检测浏览器版本一共有两种方式：\r\n \r\n一种是检测 window.navigator.userAgent 的值，但这种方式很不可靠，因为 userAgent 可以被改写，并且早期的浏览器如 ie，会通过伪装自己的 userAgent 的值为 Mozilla 来躲过服务器的检测。\r\n \r\n第二种方式是功能检测，根据每个浏览器独有的特性来进行判断，如 ie 下独有的 ActiveXObject。\r\n```\r\n\r\n详细资料可以参考：\r\n[《JavaScript 判断浏览器类型》](https://www.jianshu.com/p/d99f4ca385ac)\r\n\r\n## 89. 什么是 Polyfill ？\r\n\r\n```\r\nPolyfill 指的是用于实现浏览器并不支持的原生 API 的代码。\r\n \r\n比如说 querySelectorAll 是很多现代浏览器都支持的原生 Web API，但是有些古老的浏览器并不支持，那么假设有人写了一段代码来实现这个功能使这些浏览器也支持了这个功能，那么这就可以成为一个 Polyfill。\r\n \r\n一个 shim 是一个库，有自己的 API，而不是单纯实现原生不支持的 API。\r\n```\r\n\r\n详细资料可以参考：\r\n[《Web 开发中的“黑话”》](https://segmentfault.com/a/1190000002593432)\r\n[《Polyfill 为何物》](https://juejin.im/post/5a579bc7f265da3e38496ba1)\r\n\r\n## 90. 使用 JS 实现获取文件扩展名？\r\n\r\n```\r\n// String.lastIndexOf() 方法返回指定值（本例中的\'.\'）在调用该方法的字符串中最后出现的位置，如果没找到则返回 -1。\r\n \r\n// 对于 \'filename\' 和 \'.hiddenfile\' ，lastIndexOf 的返回值分别为 0 和 -1 无符号右移操作符(>>>) 将 -1 转换为 4294967295 ，将 -2 转换为 4294967294 ，这个方法可以保证边缘情况时文件名不变。\r\n \r\n// String.prototype.slice() 从上面计算的索引处提取文件的扩展名。如果索引比文件名的长度大，结果为""。\r\nfunction getFileExtension(filename) {\r\n  return filename.slice(((filename.lastIndexOf(".") - 1) >>> 0) + 2);\r\n}\r\n```\r\n\r\n详细资料可以参考：\r\n[《如何更有效的获取文件扩展名》](https://segmentfault.com/a/1190000004993946)\r\n\r\n## 91. 介绍一下 js 的节流与防抖？\r\n\r\n相关知识点：\r\n\r\n```\r\n// 函数防抖： 在事件被触发 n 秒后再执行回调，如果在这 n 秒内事件又被触发，则重新计时。\r\n \r\n// 函数节流： 规定一个单位时间，在这个单位时间内，只能有一次触发事件的回调函数执行，如果在同一个单位时间内某事件被触发多次，只有一次能生效。\r\n \r\n// 函数防抖的实现\r\nfunction debounce(fn, wait) {\r\n  var timer = null;\r\n \r\n  return function() {\r\n    var context = this,\r\n      args = arguments;\r\n \r\n    // 如果此时存在定时器的话，则取消之前的定时器重新记时\r\n    if (timer) {\r\n      clearTimeout(timer);\r\n      timer = null;\r\n    }\r\n \r\n    // 设置定时器，使事件间隔指定事件后执行\r\n    timer = setTimeout(() => {\r\n      fn.apply(context, args);\r\n    }, wait);\r\n  };\r\n}\r\n \r\n// 函数节流的实现;\r\nfunction throttle(fn, delay) {\r\n  var preTime = Date.now();\r\n \r\n  return function() {\r\n    var context = this,\r\n      args = arguments,\r\n      nowTime = Date.now();\r\n \r\n    // 如果两次时间间隔超过了指定时间，则执行函数。\r\n    if (nowTime - preTime >= delay) {\r\n      preTime = Date.now();\r\n      return fn.apply(context, args);\r\n    }\r\n  };\r\n}\r\n```\r\n\r\n回答：\r\n\r\n```\r\n函数防抖是指在事件被触发 n 秒后再执行回调，如果在这 n 秒内事件又被触发，则重新计时。这可以使用在一些点击请求的事件上，避免因为用户的多次点击向后端发送多次请求。\r\n \r\n函数节流是指规定一个单位时间，在这个单位时间内，只能有一次触发事件的回调函数执行，如果在同一个单位时间内某事件被触发多次，只有一次能生效。节流可以使用在 scroll 函数的事件监听上，通过事件节流来降低事件调用的频率。\r\n```\r\n\r\n详细资料可以参考：\r\n[《轻松理解 JS 函数节流和函数防抖》](https://juejin.im/post/5a35ed25f265da431d3cc1b1)\r\n[《JavaScript 事件节流和事件防抖》](https://juejin.im/post/5aa60b0e518825556b6c6d1a)\r\n[《JS 的防抖与节流》](https://juejin.im/entry/5b1d2d54f265da6e2545bfa4)\r\n\r\n## 92. Object.is() 与原来的比较操作符 “=”、“” 的区别？\r\n\r\n相关知识点：\r\n\r\n```\r\n两等号判等，会在比较时进行类型转换。\r\n三等号判等（判断严格），比较时不进行隐式类型转换，（类型不同则会返回false）。\r\n \r\nObject.is 在三等号判等的基础上特别处理了 NaN 、-0 和 +0 ，保证 -0 和 +0 不再相同，但 Object.is(NaN, NaN) 会返回 true.\r\n \r\nObject.is 应被认为有其特殊的用途，而不能用它认为它比其它的相等对比更宽松或严格。\r\n```\r\n\r\n回答：\r\n\r\n```\r\n使用双等号进行相等判断时，如果两边的类型不一致，则会进行强制类型转化后再进行比较。\r\n \r\n使用三等号进行相等判断时，如果两边的类型不一致时，不会做强制类型准换，直接返回 false。\r\n \r\n使用 Object.is 来进行相等判断时，一般情况下和三等号的判断相同，它处理了一些特殊的情况，比如 -0 和 +0 不再相等，两个 NaN 认定为是相等的。\r\n```\r\n\r\n## 93. escape,encodeURI,encodeURIComponent 有什么区别？\r\n\r\n相关知识点：\r\n\r\n```\r\nescape 和 encodeURI 都属于 Percent-encoding，基本功能都是把 URI 非法字符转化成合法字符，转化后形式类似「%*」。\r\n它们的根本区别在于，escape 在处理 0xff 之外字符的时候，是直接使用字符的 unicode 在前面加上一个「%u」，而 encode URI 则是先进行 UTF-8，再在 UTF-8 的每个字节码前加上一个「%」；在处理 0xff 以内字符时，编码方式是一样的（都是「%XX」，XX 为字符的 16 进制 unicode，同时也是字符的 UTF-8），只是范围（即哪些字符编码哪些字符不编码）不一样。\r\n```\r\n\r\n回答：\r\n\r\n```\r\nencodeURI 是对整个 URI 进行转义，将 URI 中的非法字符转换为合法字符，所以对于一些在 URI 中有特殊意义的字符不会进行转义。\r\n \r\nencodeURIComponent 是对 URI 的组成部分进行转义，所以一些特殊字符也会得到转义。\r\n \r\nescape 和 encodeURI 的作用相同，不过它们对于 unicode 编码为 0xff 之外字符的时候会有区别，escape 是直接在字符的 unicode 编码前加上 %u，而 encodeURI 首先会将字符转换为 UTF-8 的格式，再在每个字节前加上 %。\r\n```\r\n\r\n详细资料可以参考：\r\n[《escape,encodeURI,encodeURIComponent 有什么区别?》](https://www.zhihu.com/question/21861899)\r\n\r\n## 94. Unicode 和 UTF-8 之间的关系？\r\n\r\n```\r\nUnicode 是一种字符集合，现在可容纳 100 多万个字符。每个字符对应一个不同的 Unicode 编码，它只规定了符号的二进制代码，却没有规定这个二进制代码在计算机中如何编码传输。\r\n \r\nUTF-8 是一种对 Unicode 的编码方式，它是一种变长的编码方式，可以用 1~4 个字节来表示一个字符。\r\n```\r\n\r\n详细资料可以参考：\r\n[《字符编码详解》](https://blog.51cto.com/polaris/377468)\r\n[《字符编码笔记：ASCII，Unicode 和 UTF-8》](http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html)\r\n\r\n## 95. js 的事件循环是什么？\r\n\r\n相关知识点：\r\n\r\n```\r\n事件队列是一个存储着待执行任务的队列，其中的任务严格按照时间先后顺序执行，排在队头的任务将会率先执行，而排在队尾的任务会最后执行。事件队列每次仅执行一个任务，在该任务执行完毕之后，再执行下一个任务。执行栈则是一个类似于函数调用栈的运行容器，当执行栈为空时，JS 引擎便检查事件队列，如果不为空的话，事件队列便将第一个任务压入执行栈中运行。\r\n```\r\n\r\n回答：\r\n\r\n```\r\n因为 js 是单线程运行的，在代码执行的时候，通过将不同函数的执行上下文压入执行栈中来保证代码的有序执行。在执行同步代码的时候，如果遇到了异步事件，js 引擎并不会一直等待其返回结果，而是会将这个事件挂起，继续执行执行栈中的其他任务。当异步事件执行完毕后，再将异步事件对应的回调加入到与当前执行栈中不同的另一个任务队列中等待执行。任务队列可以分为宏任务对列和微任务对列，当当前执行栈中的事件执行完毕后，js 引擎首先会判断微任务对列中是否有任务可以执行，如果有就将微任务队首的事件压入栈中执行。当微任务对列中的任务都执行完成后再去判断宏任务对列中的任务。\r\n \r\n微任务包括了 promise 的回调、node 中的 process.nextTick 、对 Dom 变化监听的 MutationObserver。\r\n \r\n宏任务包括了 script 脚本的执行、setTimeout ，setInterval ，setImmediate 一类的定时事件，还有如 I/O 操作、UI 渲\r\n染等。\r\n```\r\n\r\n详细资料可以参考：\r\n[《浏览器事件循环机制（event loop）》](https://juejin.im/post/5afbc62151882542af04112d)\r\n[《详解 JavaScript 中的 Event Loop（事件循环）机制》](https://zhuanlan.zhihu.com/p/33058983)\r\n[《什么是 Event Loop？》](http://www.ruanyifeng.com/blog/2013/10/event_loop.html)\r\n[《这一次，彻底弄懂 JavaScript 执行机制》](https://juejin.im/post/59e85eebf265da430d571f89)\r\n\r\n## 96. js 中的深浅拷贝实现？\r\n\r\n相关资料：\r\n\r\n```\r\n// 浅拷贝的实现;\r\n \r\nfunction shallowCopy(object) {\r\n  // 只拷贝对象\r\n  if (!object || typeof object !== "object") return;\r\n \r\n  // 根据 object 的类型判断是新建一个数组还是对象\r\n  let newObject = Array.isArray(object) ? [] : {};\r\n \r\n  // 遍历 object，并且判断是 object 的属性才拷贝\r\n  for (let key in object) {\r\n    if (object.hasOwnProperty(key)) {\r\n      newObject[key] = object[key];\r\n    }\r\n  }\r\n \r\n  return newObject;\r\n}\r\n \r\n// 深拷贝的实现;\r\n \r\nfunction deepCopy(object) {\r\n  if (!object || typeof object !== "object") return;\r\n \r\n  let newObject = Array.isArray(object) ? [] : {};\r\n \r\n  for (let key in object) {\r\n    if (object.hasOwnProperty(key)) {\r\n      newObject[key] =\r\n        typeof object[key] === "object" ? deepCopy(object[key]) : object[key];\r\n    }\r\n  }\r\n \r\n  return newObject;\r\n}\r\n```\r\n\r\n回答：\r\n\r\n```\r\n浅拷贝指的是将一个对象的属性值复制到另一个对象，如果有的属性的值为引用类型的话，那么会将这个引用的地址复制给对象，因此两个对象会有同一个引用类型的引用。浅拷贝可以使用  Object.assign 和展开运算符来实现。\r\n \r\n深拷贝相对浅拷贝而言，如果遇到属性值为引用类型的时候，它新建一个引用类型并将对应的值复制给它，因此对象获得的一个新的引用类型而不是一个原有类型的引用。深拷贝对于一些对象可以使用 JSON 的两个函数来实现，但是由于 JSON 的对象格式比 js 的对象格式更加严格，所以如果属性值里边出现函数或者 Symbol 类型的值时，会转换失败。\r\n```\r\n\r\n详细资料可以参考：\r\n[《JavaScript 专题之深浅拷贝》](https://github.com/mqyqingfeng/Blog/issues/32)\r\n[《前端面试之道》](https://juejin.im/book/5bdc715fe51d454e755f75ef/section/5bed40d951882545f73004f6)\r\n\r\n## 97. 手写 call、apply 及 bind 函数\r\n\r\n相关资料：\r\n\r\n```\r\n// call函数实现\r\nFunction.prototype.myCall = function(context) {\r\n  // 判断调用对象\r\n  if (typeof this !== "function") {\r\n    console.error("type error");\r\n  }\r\n \r\n  // 获取参数\r\n  let args = [...arguments].slice(1),\r\n    result = null;\r\n \r\n  // 判断 context 是否传入，如果未传入则设置为 window\r\n  context = context || window;\r\n \r\n  // 将调用函数设为对象的方法\r\n  context.fn = this;\r\n \r\n  // 调用函数\r\n  result = context.fn(...args);\r\n \r\n  // 将属性删除\r\n  delete context.fn;\r\n \r\n  return result;\r\n};\r\n \r\n// apply 函数实现\r\n \r\nFunction.prototype.myApply = function(context) {\r\n  // 判断调用对象是否为函数\r\n  if (typeof this !== "function") {\r\n    throw new TypeError("Error");\r\n  }\r\n \r\n  let result = null;\r\n \r\n  // 判断 context 是否存在，如果未传入则为 window\r\n  context = context || window;\r\n \r\n  // 将函数设为对象的方法\r\n  context.fn = this;\r\n \r\n  // 调用方法\r\n  if (arguments[1]) {\r\n    result = context.fn(...arguments[1]);\r\n  } else {\r\n    result = context.fn();\r\n  }\r\n \r\n  // 将属性删除\r\n  delete context.fn;\r\n \r\n  return result;\r\n};\r\n \r\n// bind 函数实现\r\nFunction.prototype.myBind = function(context) {\r\n  // 判断调用对象是否为函数\r\n  if (typeof this !== "function") {\r\n    throw new TypeError("Error");\r\n  }\r\n \r\n  // 获取参数\r\n  var args = [...arguments].slice(1),\r\n    fn = this;\r\n \r\n  return function Fn() {\r\n    // 根据调用方式，传入不同绑定值\r\n    return fn.apply(\r\n      this instanceof Fn ? this : context,\r\n      args.concat(...arguments)\r\n    );\r\n  };\r\n};\r\n```\r\n\r\n回答：\r\n\r\ncall 函数的实现步骤：\r\n\r\n- 1.判断调用对象是否为函数，即使我们是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。\r\n- 2.判断传入上下文对象是否存在，如果不存在，则设置为 window 。\r\n- 3.处理传入的参数，截取第一个参数后的所有参数。\r\n- 4.将函数作为上下文对象的一个属性。\r\n- 5.使用上下文对象来调用这个方法，并保存返回结果。\r\n- 6.删除刚才新增的属性。\r\n- 7.返回结果。\r\n\r\napply 函数的实现步骤：\r\n\r\n- 1.判断调用对象是否为函数，即使我们是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。\r\n- 2.判断传入上下文对象是否存在，如果不存在，则设置为 window 。\r\n- 3.将函数作为上下文对象的一个属性。\r\n- 4.判断参数值是否传入\r\n- 4.使用上下文对象来调用这个方法，并保存返回结果。\r\n- 5.删除刚才新增的属性\r\n- 6.返回结果\r\n\r\nbind 函数的实现步骤：\r\n\r\n- 1.判断调用对象是否为函数，即使我们是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。\r\n- 2.保存当前函数的引用，获取其余传入参数值。\r\n- 3.创建一个函数返回\r\n- 4.函数内部使用 apply 来绑定函数调用，需要判断函数作为构造函数的情况，这个时候需要传入当前函数的 this 给 apply 调用，其余情况都传入指定的上下文对象。\r\n\r\n详细资料可以参考：\r\n[《手写 call、apply 及 bind 函数》](https://juejin.im/book/5bdc715fe51d454e755f75ef/section/5bdd0d8e6fb9a04a044073fe)\r\n[《JavaScript 深入之 call 和 apply 的模拟实现》](https://github.com/mqyqingfeng/Blog/issues/11)\r\n\r\n## 98. 函数柯里化的实现\r\n\r\n```\r\n// 函数柯里化指的是一种将使用多个参数的一个函数转换成一系列使用一个参数的函数的技术。\r\n \r\nfunction curry(fn, args) {\r\n  // 获取函数需要的参数长度\r\n  let length = fn.length;\r\n \r\n  args = args || [];\r\n \r\n  return function() {\r\n    let subArgs = args.slice(0);\r\n \r\n    // 拼接得到现有的所有参数\r\n    for (let i = 0; i < arguments.length; i++) {\r\n      subArgs.push(arguments[i]);\r\n    }\r\n \r\n    // 判断参数的长度是否已经满足函数所需参数的长度\r\n    if (subArgs.length >= length) {\r\n      // 如果满足，执行函数\r\n      return fn.apply(this, subArgs);\r\n    } else {\r\n      // 如果不满足，递归返回科里化的函数，等待参数的传入\r\n      return curry.call(this, fn, subArgs);\r\n    }\r\n  };\r\n}\r\n \r\n// es6 实现\r\nfunction curry(fn, ...args) {\r\n  return fn.length <= args.length ? fn(...args) : curry.bind(null, fn, ...args);\r\n}\r\n```\r\n\r\n详细资料可以参考：\r\n[《JavaScript 专题之函数柯里化》](https://github.com/mqyqingfeng/Blog/issues/42)\r\n\r\n## 99. 为什么 0.1 + 0.2 != 0.3？如何解决这个问题？\r\n\r\n```\r\n当计算机计算 0.1+0.2 的时候，实际上计算的是这两个数字在计算机里所存储的二进制，0.1 和 0.2 在转换为二进制表示的时候会出现位数无限循环的情况。js 中是以 64 位双精度格式来存储数字的，只有 53 位的有效数字，超过这个长度的位数会被截取掉这样就造成了精度丢失的问题。这是第一个会造成精度丢失的地方。在对两个以 64 位双精度格式的数据进行计算的时候，首先会进行对阶的处理，对阶指的是将阶码对齐，也就是将小数点的位置对齐后，再进行计算，一般是小阶向大阶对齐，因此小阶的数在对齐的过程中，有效数字会向右移动，移动后超过有效位数的位会被截取掉，这是第二个可能会出现精度丢失的地方。当两个数据阶码对齐后，进行相加运算后，得到的结果可能会超过 53 位有效数字，因此超过的位数也会被截取掉，这是可能发生精度丢失的第三个地方。\r\n \r\n对于这样的情况，我们可以将其转换为整数后再进行运算，运算后再转换为对应的小数，以这种方式来解决这个问题。\r\n \r\n我们还可以将两个数相加的结果和右边相减，如果相减的结果小于一个极小数，那么我们就可以认定结果是相等的，这个极小数可以\r\n使用 es6 的 Number.EPSILON\r\n```\r\n\r\n详细资料可以参考：\r\n[《十进制的 0.1 为什么不能用二进制很好的表示？》](https://blog.csdn.net/Lixuanshengchao/article/details/82049191)\r\n[《十进制浮点数转成二进制》](https://blog.csdn.net/zhengyanan815/article/details/78550073)\r\n[《浮点数的二进制表示》](http://www.ruanyifeng.com/blog/2010/06/ieee_floating-point_representation.html)\r\n[《js 浮点数存储精度丢失原理》](https://juejin.im/post/5b372f106fb9a00e6714aa21)\r\n[《浮点数精度之谜》](https://juejin.im/post/594a31d0a0bb9f006b0b2624)\r\n[《JavaScript 浮点数陷阱及解法》](https://github.com/camsong/blog/issues/9)\r\n[《0.1+0.2 ! 0.3？》](https://juejin.im/post/5bd2f10a51882555e072d0c4)\r\n[《JavaScript 中奇特的~运算符》](https://juejin.im/entry/59cdd7fb6fb9a00a600f8eef)\r\n\r\n## 100. 原码、反码和补码的介绍\r\n\r\n```\r\n原码是计算机中对数字的二进制的定点表示方法，最高位表示符号位，其余位表示数值位。优点是易于分辨，缺点是不能够直接参与运算。\r\n \r\n正数的反码和其原码一样；负数的反码，符号位为1，数值部分按原码取反。\r\n如 [+7]原 = 00000111，[+7]反 = 00000111； [-7]原 = 10000111，[-7]反 = 11111000。\r\n \r\n正数的补码和其原码一样；负数的补码为其反码加1。\r\n \r\n例如 [+7]原 = 00000111，[+7]反 = 00000111，[+7]补 = 00000111；\r\n[-7]原 = 10000111，[-7]反 = 11111000，[-7]补 = 11111001\r\n \r\n之所以在计算机中使用补码来表示负数的原因是，这样可以将加法运算扩展到所有的数值计算上，因此在数字电路中我们只需要考虑加法器的设计就行了，而不用再为减法设置新的数字电路。\r\n```\r\n\r\n详细资料可以参考：\r\n[《关于 2 的补码》](http://www.ruanyifeng.com/blog/2009/08/twos_complement.html)\r\n\r\n## 101. toPrecision 和 toFixed 和 Math.round 的区别？\r\n\r\n```\r\ntoPrecision 用于处理精度，精度是从左至右第一个不为 0 的数开始数起。\r\ntoFixed 是对小数点后指定位数取整，从小数点开始数起。\r\nMath.round 是将一个数字四舍五入到一个整数。\r\n```\r\n\r\n## 102. 什么是 XSS 攻击？如何防范 XSS 攻击？\r\n\r\n```\r\nXSS 攻击指的是跨站脚本攻击，是一种代码注入攻击。攻击者通过在网站注入恶意脚本，使之在用户的浏览器上运行，从而盗取用户的信息如 cookie 等。\r\n \r\nXSS 的本质是因为网站没有对恶意代码进行过滤，与正常的代码混合在一起了，浏览器没有办法分辨哪些脚本是可信的，从而导致了恶意代码的执行。\r\n \r\nXSS 一般分为存储型、反射型和 DOM 型。\r\n \r\n存储型指的是恶意代码提交到了网站的数据库中，当用户请求数据的时候，服务器将其拼接为 HTML 后返回给了用户，从而导致了恶意代码的执行。\r\n \r\n反射型指的是攻击者构建了特殊的 URL，当服务器接收到请求后，从 URL 中获取数据，拼接到 HTML 后返回，从而导致了恶意代码的执行。\r\n \r\nDOM 型指的是攻击者构建了特殊的 URL，用户打开网站后，js 脚本从 URL 中获取数据，从而导致了恶意代码的执行。\r\n \r\nXSS 攻击的预防可以从两个方面入手，一个是恶意代码提交的时候，一个是浏览器执行恶意代码的时候。\r\n \r\n对于第一个方面，如果我们对存入数据库的数据都进行的转义处理，但是一个数据可能在多个地方使用，有的地方可能不需要转义，由于我们没有办法判断数据最后的使用场景，所以直接在输入端进行恶意代码的处理，其实是不太可靠的。\r\n \r\n因此我们可以从浏览器的执行来进行预防，一种是使用纯前端的方式，不用服务器端拼接后返回。另一种是对需要插入到 HTML 中的代码做好充分的转义。对于 DOM 型的攻击，主要是前端脚本的不可靠而造成的，我们对于数据获取渲染和字符串拼接的时候应该对可能出现的恶意代码情况进行判断。\r\n \r\n还有一些方式，比如使用 CSP ，CSP 的本质是建立一个白名单，告诉浏览器哪些外部资源可以加载和执行，从而防止恶意代码的注入攻击。\r\n \r\n还可以对一些敏感信息进行保护，比如 cookie 使用 http-only ，使得脚本无法获取。也可以使用验证码，避免脚本伪装成用户执行一些操作。\r\n```\r\n\r\n详细资料可以参考：\r\n[《前端安全系列（一）：如何防止 XSS 攻击？》](https://juejin.im/post/5bad9140e51d450e935c6d64)\r\n\r\n## 103. 什么是 CSP？\r\n\r\n```\r\nCSP 指的是内容安全策略，它的本质是建立一个白名单，告诉浏览器哪些外部资源可以加载和执行。我们只需要配置规则，如何拦截由浏览器自己来实现。\r\n \r\n通常有两种方式来开启 CSP，一种是设置 HTTP 首部中的 Content-Security-Policy，一种是设置 meta 标签的方式 <meta\r\nhttp-equiv="Content-Security-Policy">\r\n```\r\n\r\n详细资料可以参考：\r\n[《内容安全策略（CSP）》](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CSP)\r\n[《前端面试之道》](https://juejin.im/book/5bdc715fe51d454e755f75ef/section/5bdc721851882516c33430a2)\r\n\r\n## 104. 什么是 CSRF 攻击？如何防范 CSRF 攻击？\r\n\r\n```\r\nCSRF 攻击指的是跨站请求伪造攻击，攻击者诱导用户进入一个第三方网站，然后该网站向被攻击网站发送跨站请求。如果用户在被\r\n攻击网站中保存了登录状态，那么攻击者就可以利用这个登录状态，绕过后台的用户验证，冒充用户向服务器执行一些操作。\r\n \r\nCSRF 攻击的本质是利用了 cookie 会在同源请求中携带发送给服务器的特点，以此来实现用户的冒充。\r\n \r\n一般的 CSRF 攻击类型有三种：\r\n \r\n第一种是 GET 类型的 CSRF 攻击，比如在网站中的一个 img 标签里构建一个请求，当用户打开这个网站的时候就会自动发起提\r\n交。\r\n \r\n第二种是 POST 类型的 CSRF 攻击，比如说构建一个表单，然后隐藏它，当用户进入页面时，自动提交这个表单。\r\n \r\n第三种是链接类型的 CSRF 攻击，比如说在 a 标签的 href 属性里构建一个请求，然后诱导用户去点击。\r\n \r\nCSRF 可以用下面几种方法来防护：\r\n \r\n第一种是同源检测的方法，服务器根据 http 请求头中 origin 或者 referer 信息来判断请求是否为允许访问的站点，从而对请求进行过滤。当 origin 或者 referer 信息都不存在的时候，直接阻止。这种方式的缺点是有些情况下 referer 可以被伪造。还有就是我们这种方法同时把搜索引擎的链接也给屏蔽了，所以一般网站会允许搜索引擎的页面请求，但是相应的页面请求这种请求方式也可能被攻击者给利用。\r\n \r\n第二种方法是使用 CSRF Token 来进行验证，服务器向用户返回一个随机数 Token ，当网站再次发起请求时，在请求参数中加入服务器端返回的 token ，然后服务器对这个 token 进行验证。这种方法解决了使用 cookie 单一验证方式时，可能会被冒用的问题，但是这种方法存在一个缺点就是，我们需要给网站中的所有请求都添加上这个 token，操作比较繁琐。还有一个问题是一般不会只有一台网站服务器，如果我们的请求经过负载平衡转移到了其他的服务器，但是这个服务器的 session 中没有保留这个 token 的话，就没有办法验证了。这种情况我们可以通过改变 token 的构建方式来解决。\r\n \r\n第三种方式使用双重 Cookie 验证的办法，服务器在用户访问网站页面时，向请求域名注入一个Cookie，内容为随机字符串，然后当用户再次向服务器发送请求的时候，从 cookie 中取出这个字符串，添加到 URL 参数中，然后服务器通过对 cookie 中的数据和参数中的数据进行比较，来进行验证。使用这种方式是利用了攻击者只能利用 cookie，但是不能访问获取 cookie 的特点。并且这种方法比 CSRF Token 的方法更加方便，并且不涉及到分布式访问的问题。这种方法的缺点是如果网站存在 XSS 漏洞的，那么这种方式会失效。同时这种方式不能做到子域名的隔离。\r\n \r\n第四种方式是使用在设置 cookie 属性的时候设置 Samesite ，限制 cookie 不能作为被第三方使用，从而可以避免被攻击者利用。Samesite 一共有两种模式，一种是严格模式，在严格模式下 cookie 在任何情况下都不可能作为第三方 Cookie 使用，在宽松模式下，cookie 可以被请求是 GET 请求，且会发生页面跳转的请求所使用。\r\n```\r\n\r\n详细资料可以参考：\r\n[《前端安全系列之二：如何防止 CSRF 攻击？》](https://juejin.im/post/5bc009996fb9a05d0a055192)\r\n[《[ HTTP 趣谈\\] origin, referer 和 host 区别》](https://www.jianshu.com/p/1f9c71850299)\r\n\r\n## 105. 什么是 Samesite Cookie 属性？\r\n\r\n```\r\nSamesite Cookie 表示同站 cookie，避免 cookie 被第三方所利用。\r\n \r\n将 Samesite 设为 strict ，这种称为严格模式，表示这个 cookie 在任何情况下都不可能作为第三方 cookie。\r\n \r\n将 Samesite 设为 Lax ，这种模式称为宽松模式，如果这个请求是个 GET 请求，并且这个请求改变了当前页面或者打开了新的页面，那么这个 cookie 可以作为第三方 cookie，其余情况下都不能作为第三方 cookie。\r\n \r\n使用这种方法的缺点是，因为它不支持子域，所以子域没有办法与主域共享登录信息，每次转入子域的网站，都回重新登录。还有一个问题就是它的兼容性不够好。\r\n```\r\n\r\n## 106. 什么是点击劫持？如何防范点击劫持？\r\n\r\n```\r\n点击劫持是一种视觉欺骗的攻击手段，攻击者将需要攻击的网站通过 iframe 嵌套的方式嵌入自己的网页中，并将 iframe 设置为透明，在页面中透出一个按钮诱导用户点击。\r\n \r\n我们可以在 http 相应头中设置 X-FRAME-OPTIONS 来防御用 iframe 嵌套的点击劫持攻击。通过不同的值，可以规定页面在特\r\n定的一些情况才能作为 iframe 来使用。\r\n```\r\n\r\n详细资料可以参考：\r\n[《web 安全之--点击劫持攻击与防御技术简介》](https://www.jianshu.com/p/251704d8ff18)\r\n\r\n## 107. SQL 注入攻击？\r\n\r\n```\r\nSQL 注入攻击指的是攻击者在 HTTP 请求中注入恶意的 SQL 代码，服务器使用参数构建数据库 SQL 命令时，恶意 SQL 被一起构\r\n造，破坏原有 SQL 结构，并在数据库中执行，达到编写程序时意料之外结果的攻击行为。\r\n```\r\n\r\n详细资料可以参考：\r\n[《Web 安全漏洞之 SQL 注入》](https://juejin.im/post/5bd5b820e51d456f72531fa8)\r\n[《如何防范常见的 Web 攻击》](http://blog.720ui.com/2016/security_web/#SQL注入攻击)\r\n\r\n## 108. 什么是 MVVM？比之 MVC 有什么区别？什么又是 MVP ？\r\n\r\n```\r\nMVC、MVP 和 MVVM 是三种常见的软件架构设计模式，主要通过分离关注点的方式来组织代码结构，优化我们的开发效率。\r\n \r\n比如说我们实验室在以前项目开发的时候，使用单页应用时，往往一个路由页面对应了一个脚本文件，所有的页面逻辑都在一个脚本文件里。页面的渲染、数据的获取，对用户事件的响应所有的应用逻辑都混合在一起，这样在开发简单项目时，可能看不出什么问题，当时一旦项目变得复杂，那么整个文件就会变得冗长，混乱，这样对我们的项目开发和后期的项目维护是非常不利的。\r\n \r\nMVC 通过分离 Model、View 和 Controller 的方式来组织代码结构。其中 View 负责页面的显示逻辑，Model 负责存储页面的业务数据，以及对相应数据的操作。并且 View 和 Model 应用了观察者模式，当 Model 层发生改变的时候它会通知有关 View 层更新页面。Controller 层是 View 层和 Model 层的纽带，它主要负责用户与应用的响应操作，当用户与页面产生交互的时候，Co\r\nntroller 中的事件触发器就开始工作了，通过调用 Model 层，来完成对 Model 的修改，然后 Model 层再去通知 View 层更新。\r\n \r\nMVP 模式与 MVC 唯一不同的在于 Presenter 和 Controller。在 MVC 模式中我们使用观察者模式，来实现当 Model 层数据发生变化的时候，通知 View 层的更新。这样 View 层和 Model 层耦合在一起，当项目逻辑变得复杂的时候，可能会造成代码的混乱，并且可能会对代码的复用性造成一些问题。MVP 的模式通过使用 Presenter 来实现对 View 层和 Model 层的解耦。MVC 中的\r\nController 只知道 Model 的接口，因此它没有办法控制 View 层的更新，MVP 模式中，View 层的接口暴露给了 Presenter 因此我们可以在 Presenter 中将 Model 的变化和 View 的变化绑定在一起，以此来实现 View 和 Model 的同步更新。这样就实现了对 View 和 Model 的解耦，Presenter 还包含了其他的响应逻辑。\r\n \r\nMVVM 模式中的 VM，指的是 ViewModel，它和 MVP 的思想其实是相同的，不过它通过双向的数据绑定，将 View 和 Model 的同步更新给自动化了。当 Model 发生变化的时候，ViewModel 就会自动更新；ViewModel 变化了，View 也会更新。这样就将 Presenter 中的工作给自动化了。我了解过一点双向数据绑定的原理，比如 vue 是通过使用数据劫持和发布订阅者模式来实现的这一功\r\n能。\r\n```\r\n\r\n详细资料可以参考：\r\n[《浅析前端开发中的 MVC/MVP/MVVM 模式》](https://juejin.im/post/593021272f301e0058273468)\r\n[《MVC，MVP 和 MVVM 的图示》](http://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html)\r\n[《MVVM》](https://juejin.im/book/5bdc715fe51d454e755f75ef/section/5bdc72e6e51d45054f664dbf)\r\n[《一篇文章了解架构模式：MVC/MVP/MVVM》](https://segmentfault.com/a/1190000015310674)\r\n\r\n## 109. vue 双向数据绑定原理？\r\n\r\n```\r\nvue 通过使用双向数据绑定，来实现了 View 和 Model 的同步更新。vue 的双向数据绑定主要是通过使用数据劫持和发布订阅者模式来实现的。\r\n \r\n首先我们通过 Object.defineProperty() 方法来对 Model 数据各个属性添加访问器属性，以此来实现数据的劫持，因此当 Model 中的数据发生变化的时候，我们可以通过配置的 setter 和 getter 方法来实现对 View 层数据更新的通知。\r\n \r\n数据在 html 模板中一共有两种绑定情况，一种是使用 v-model 来对 value 值进行绑定，一种是作为文本绑定，在对模板引擎进行解析的过程中。\r\n \r\n如果遇到元素节点，并且属性值包含 v-model 的话，我们就从 Model 中去获取 v-model 所对应的属性的值，并赋值给元素的 value 值。然后给这个元素设置一个监听事件，当 View 中元素的数据发生变化的时候触发该事件，通知 Model 中的对应的属性的值进行更新。\r\n \r\n如果遇到了绑定的文本节点，我们使用 Model 中对应的属性的值来替换这个文本。对于文本节点的更新，我们使用了发布订阅者模式，属性作为一个主题，我们为这个节点设置一个订阅者对象，将这个订阅者对象加入这个属性主题的订阅者列表中。当 Model 层数据发生改变的时候，Model 作为发布者向主题发出通知，主题收到通知再向它的所有订阅者推送，订阅者收到通知后更改自己的数\r\n据。\r\n```\r\n\r\n详细资料可以参考：\r\n[《Vue.js 双向绑定的实现原理》](http://www.cnblogs.com/kidney/p/6052935.html?utm_source=gold_browser_extension)\r\n\r\n## 110. Object.defineProperty 介绍？\r\n\r\n```\r\nObject.defineProperty 函数一共有三个参数，第一个参数是需要定义属性的对象，第二个参数是需要定义的属性，第三个是该属性描述符。\r\n \r\n一个属性的描述符有四个属性，分别是 value 属性的值，writable 属性是否可写，enumerable 属性是否可枚举，configurable 属性是否可配置修改。\r\n```\r\n\r\n详细资料可以参考：\r\n[《Object.defineProperty()》](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty)\r\n\r\n## 111. 使用 Object.defineProperty() 来进行数据劫持有什么缺点？\r\n\r\n```\r\n有一些对属性的操作，使用这种方法无法拦截，比如说通过下标方式修改数组数据或者给对象新增属性，vue 内部通过重写函数解决了这个问题。在 Vue3.0 中已经不使用这种方式了，而是通过使用 Proxy 对对象进行代理，从而实现数据劫持。使用 Proxy 的好处是它可以完美的监听到任何方式的数据改变，唯一的缺点是兼容性的问题，因为这是 ES6 的语法。\r\n```\r\n\r\n## 112. 什么是 Virtual DOM？为什么 Virtual DOM 比原生 DOM 快？\r\n\r\n```\r\n我对 Virtual DOM 的理解是，\r\n \r\n首先对我们将要插入到文档中的 DOM 树结构进行分析，使用 js 对象将其表示出来，比如一个元素对象，包含 TagName、props 和 Children 这些属性。然后我们将这个 js 对象树给保存下来，最后再将 DOM 片段插入到文档中。\r\n \r\n当页面的状态发生改变，我们需要对页面的 DOM 的结构进行调整的时候，我们首先根据变更的状态，重新构建起一棵对象树，然后将这棵新的对象树和旧的对象树进行比较，记录下两棵树的的差异。\r\n \r\n最后将记录的有差异的地方应用到真正的 DOM 树中去，这样视图就更新了。\r\n \r\n我认为 Virtual DOM 这种方法对于我们需要有大量的 DOM 操作的时候，能够很好的提高我们的操作效率，通过在操作前确定需要做的最小修改，尽可能的减少 DOM 操作带来的重流和重绘的影响。其实 Virtual DOM 并不一定比我们真实的操作 DOM 要快，这种方法的目的是为了提高我们开发时的可维护性，在任意的情况下，都能保证一个尽量小的性能消耗去进行操作。\r\n```\r\n\r\n详细资料可以参考：\r\n[《Virtual DOM》](https://juejin.im/book/5bdc715fe51d454e755f75ef/section/5bdc72e6e51d45054f664dbf)\r\n[《理解 Virtual DOM》](https://github.com/y8n/blog/issues/5)\r\n[《深度剖析：如何实现一个 Virtual DOM 算法》](https://github.com/livoras/blog/issues/13)\r\n[《网上都说操作真实 DOM 慢，但测试结果却比 React 更快，为什么？》](https://www.zhihu.com/question/31809713/answer/53544875)\r\n\r\n## 113. 如何比较两个 DOM 树的差异？\r\n\r\n```\r\n两个树的完全 diff 算法的时间复杂度为 O(n^3) ，但是在前端中，我们很少会跨层级的移动元素，所以我们只需要比较同一层级的元素进行比较，这样就可以将算法的时间复杂度降低为 O(n)。\r\n \r\n算法首先会对新旧两棵树进行一个深度优先的遍历，这样每个节点都会有一个序号。在深度遍历的时候，每遍历到一个节点，我们就将这个节点和新的树中的节点进行比较，如果有差异，则将这个差异记录到一个对象中。\r\n \r\n在对列表元素进行对比的时候，由于 TagName 是重复的，所以我们不能使用这个来对比。我们需要给每一个子节点加上一个 key，列表对比的时候使用 key 来进行比较，这样我们才能够复用老的 DOM 树上的节点。\r\n```\r\n\r\n## 114. 什么是 requestAnimationFrame ？\r\n\r\n详细资料可以参考：\r\n[《你需要知道的 requestAnimationFrame》](https://juejin.im/post/5a82f0626fb9a06358657c9c)\r\n[《CSS3 动画那么强，requestAnimationFrame 还有毛线用？》](https://www.zhangxinxu.com/wordpress/2013/09/css3-animation-requestanimationframe-tween-动画算法/)\r\n\r\n## 115. 谈谈你对 webpack 的看法\r\n\r\n```\r\n我当时使用 webpack 的一个最主要原因是为了简化页面依赖的管理，并且通过将其打包为一个文件来降低页面加载时请求的资源\r\n数。\r\n \r\n我认为 webpack 的主要原理是，它将所有的资源都看成是一个模块，并且把页面逻辑当作一个整体，通过一个给定的入口文件，webpack 从这个文件开始，找到所有的依赖文件，将各个依赖文件模块通过 loader 和 plugins 处理后，然后打包在一起，最后输出一个浏览器可识别的 JS 文件。\r\n \r\nWebpack 具有四个核心的概念，分别是 Entry（入口）、Output（输出）、loader 和 Plugins（插件）。\r\n \r\nEntry 是 webpack 的入口起点，它指示 webpack 应该从哪个模块开始着手，来作为其构建内部依赖图的开始。\r\n \r\nOutput 属性告诉 webpack 在哪里输出它所创建的打包文件，也可指定打包文件的名称，默认位置为 ./dist。\r\n \r\nloader 可以理解为 webpack 的编译器，它使得 webpack 可以处理一些非 JavaScript 文件。在对 loader 进行配置的时候，test 属性，标志有哪些后缀的文件应该被处理，是一个正则表达式。use 属性，指定 test 类型的文件应该使用哪个 loader 进行预处理。常用的 loader 有 css-loader、style-loader 等。\r\n \r\n插件可以用于执行范围更广的任务，包括打包、优化、压缩、搭建服务器等等，要使用一个插件，一般是先使用 npm 包管理器进行安装，然后在配置文件中引入，最后将其实例化后传递给 plugins 数组属性。\r\n \r\n使用 webpack 的确能够提供我们对于项目的管理，但是它的缺点就是调试和配置起来太麻烦了。但现在 webpack4.0 的免配置一定程度上解决了这个问题。但是我感觉就是对我来说，就是一个黑盒，很多时候出现了问题，没有办法很好的定位。\r\n```\r\n\r\n详细资料可以参考：\r\n[《不聊 webpack 配置，来说说它的原理》](https://juejin.im/post/5b38d27451882574d87aa5d5#heading-0)\r\n[《前端工程化——构建工具选型：grunt、gulp、webpack》](https://juejin.im/entry/5b5724d05188251aa01647fd)\r\n[《浅入浅出 webpack》](https://juejin.im/post/5afa9cd0f265da0b981b9af9#heading-0)\r\n[《前端构建工具发展及其比较》](https://juejin.im/entry/5ae5c8c9f265da0b9f400d8e)\r\n\r\n## 116. offsetWidth/offsetHeight,clientWidth/clientHeight 与 scrollWidth/scrollHeight 的区别？\r\n\r\n```\r\nclientWidth/clientHeight 返回的是元素的内部宽度，它的值只包含 content + padding，如果有滚动条，不包含滚动条。\r\nclientTop 返回的是上边框的宽度。\r\nclientLeft 返回的左边框的宽度。\r\n \r\noffsetWidth/offsetHeight 返回的是元素的布局宽度，它的值包含 content + padding + border 包含了滚动条。\r\noffsetTop 返回的是当前元素相对于其 offsetParent 元素的顶部的距离。\r\noffsetLeft 返回的是当前元素相对于其 offsetParent 元素的左部的距离。\r\n \r\nscrollWidth/scrollHeight 返回值包含 content + padding + 溢出内容的尺寸。\r\nscrollTop 属性返回的是一个元素的内容垂直滚动的像素数。\r\nscrollLeft 属性返回的是元素滚动条到元素左边的距离。\r\n```\r\n\r\n详细资料可以参考：\r\n[《最全的获取元素宽高及位置的方法》](https://juejin.im/post/5bc9366d5188255c4834e75a)\r\n[《用 Javascript 获取页面元素的位置》](http://www.ruanyifeng.com/blog/2009/09/find_element_s_position_using_javascript.html)\r\n\r\n## 117. 谈一谈你理解的函数式编程？\r\n\r\n```\r\n简单说，"函数式编程"是一种"编程范式"（programming paradigm），也就是如何编写程序的方法论。\r\n \r\n它具有以下特性：闭包和高阶函数、惰性计算、递归、函数是"第一等公民"、只用"表达式"。\r\n```\r\n\r\n详细资料可以参考：\r\n[《函数式编程初探》](http://www.ruanyifeng.com/blog/2012/04/functional_programming.html)\r\n\r\n## 118. 异步编程的实现方式？\r\n\r\n相关资料：\r\n\r\n```\r\n回调函数\r\n优点：简单、容易理解\r\n缺点：不利于维护，代码耦合高\r\n \r\n事件监听（采用时间驱动模式，取决于某个事件是否发生）：\r\n优点：容易理解，可以绑定多个事件，每个事件可以指定多个回调函数\r\n缺点：事件驱动型，流程不够清晰\r\n \r\n发布/订阅（观察者模式）\r\n类似于事件监听，但是可以通过‘消息中心’，了解现在有多少发布者，多少订阅者\r\n \r\nPromise 对象\r\n优点：可以利用 then 方法，进行链式写法；可以书写错误时的回调函数；\r\n缺点：编写和理解，相对比较难\r\n \r\nGenerator 函数\r\n优点：函数体内外的数据交换、错误处理机制\r\n缺点：流程管理不方便\r\n \r\nasync 函数\r\n优点：内置执行器、更好的语义、更广的适用性、返回的是 Promise、结构清晰。\r\n缺点：错误处理机制\r\n```\r\n\r\n回答：\r\n\r\n```\r\njs 中的异步机制可以分为以下几种：\r\n \r\n第一种最常见的是使用回调函数的方式，使用回调函数的方式有一个缺点是，多个回调函数嵌套的时候会造成回调函数地狱，上下两层的回调函数间的代码耦合度太高，不利于代码的可维护。\r\n \r\n第二种是 Promise 的方式，使用 Promise 的方式可以将嵌套的回调函数作为链式调用。但是使用这种方法，有时会造成多个 then 的链式调用，可能会造成代码的语义不够明确。\r\n \r\n第三种是使用 generator 的方式，它可以在函数的执行过程中，将函数的执行权转移出去，在函数外部我们还可以将执行权转移回来。当我们遇到异步函数执行的时候，将函数执行权转移出去，当异步函数执行完毕的时候我们再将执行权给转移回来。因此我们在 generator 内部对于异步操作的方式，可以以同步的顺序来书写。使用这种方式我们需要考虑的问题是何时将函数的控制权转移回来，因此我们需要有一个自动执行 generator 的机制，比如说 co 模块等方式来实现 generator 的自动执行。\r\n \r\n第四种是使用 async 函数的形式，async 函数是 generator 和 promise 实现的一个自动执行的语法糖，它内部自带执行器，当函数内部执行到一个 await 语句的时候，如果语句返回一个 promise 对象，那么函数将会等待 promise 对象的状态变为 resolve 后再继续向下执行。因此我们可以将异步逻辑，转化为同步的顺序来书写，并且这个函数可以自动执行。\r\n```\r\n\r\n## 119. Js 动画与 CSS 动画区别及相应实现\r\n\r\n```\r\nCSS3 的动画的优点\r\n \r\n在性能上会稍微好一些，浏览器会对 CSS3 的动画做一些优化\r\n代码相对简单\r\n \r\n缺点\r\n \r\n在动画控制上不够灵活\r\n兼容性不好\r\n \r\nJavaScript 的动画正好弥补了这两个缺点，控制能力很强，可以单帧的控制、变换，同时写得好完全可以兼容 IE6，并且功能强大。对于一些复杂控制的动画，使用 javascript 会比较靠谱。而在实现一些小的交互动效的时候，就多考虑考虑 CSS 吧\r\n```\r\n\r\n## 120. get 请求传参长度的误区\r\n\r\n```\r\n误区：我们经常说 get 请求参数的大小存在限制，而 post 请求的参数大小是无限制的。\r\n \r\n实际上 HTTP 协议从未规定 GET/POST 的请求长度限制是多少。对 get 请求参数的限制是来源与浏览器或web 服务器，浏览器或 web 服务器限制了 url 的长度。为了明确这个概念，我们必须再次强调下面几点:\r\n```\r\n\r\n- 1.HTTP 协议未规定 GET 和 POST 的长度限制\r\n- 2.GET 的最大长度显示是因为浏览器和 web 服务器限制了 URI 的长度\r\n- 3.不同的浏览器和 WEB 服务器，限制的最大长度不一样\r\n- 4.要支持 IE，则最大长度为 2083byte，若只支持 Chrome，则最大长度 8182byte\r\n\r\n## 121. URL 和 URI 的区别？\r\n\r\n```\r\nURI: Uniform Resource Identifier      指的是统一资源标识符\r\nURL: Uniform Resource Location        指的是统一资源定位符\r\nURN: Universal Resource Name          指的是统一资源名称\r\n \r\nURI 指的是统一资源标识符，用唯一的标识来确定一个资源，它是一种抽象的定义，也就是说，不管使用什么方法来定义，只要能唯一的标识一个资源，就可以称为 URI。\r\n \r\nURL 指的是统一资源定位符，URN 指的是统一资源名称。URL 和 URN 是 URI 的子集，URL 可以理解为使用地址来标识资源，URN 可以理解为使用名称来标识资源。\r\n```\r\n\r\n详细资料可以参考：\r\n[《HTTP 协议中 URI 和 URL 有什么区别？》](https://www.zhihu.com/question/21950864)\r\n[《你知道 URL、URI 和 URN 三者之间的区别吗？》](http://web.jobbole.com/83452/)\r\n[《URI、URL 和 URN 的区别》](https://segmentfault.com/a/1190000006081973)\r\n\r\n## 122. get 和 post 请求在缓存方面的区别\r\n\r\n相关知识点：\r\n\r\n```\r\nget 请求类似于查找的过程，用户获取数据，可以不用每次都与数据库连接，所以可以使用缓存。\r\n \r\npost 不同，post 做的一般是修改和删除的工作，所以必须与数据库交互，所以不能使用缓存。因此 get 请求适合于请求缓存。\r\n```\r\n\r\n回答：\r\n\r\n```\r\n缓存一般只适用于那些不会更新服务端数据的请求。一般 get 请求都是查找请求，不会对服务器资源数据造成修改，而 post 请求一般都会对服务器数据造成修改，所以，一般会对 get 请求进行缓存，很少会对 post 请求进行缓存。\r\n```\r\n\r\n详细资料可以参考：\r\n[《HTML 关于 post 和 get 的区别以及缓存问题的理解》](https://blog.csdn.net/qq_27093465/article/details/50479289)\r\n\r\n## 123. 图片的懒加载和预加载\r\n\r\n相关知识点：\r\n\r\n```\r\n预加载：提前加载图片，当用户需要查看时可直接从本地缓存中渲染。\r\n \r\n懒加载：懒加载的主要目的是作为服务器前端的优化，减少请求数或延迟请求数。\r\n \r\n两种技术的本质：两者的行为是相反的，一个是提前加载，一个是迟缓甚至不加载。 懒加载对服务器前端有一定的缓解压力作用，预加载则会增加服务器前端压力。\r\n```\r\n\r\n回答：\r\n\r\n```\r\n懒加载也叫延迟加载，指的是在长网页中延迟加载图片的时机，当用户需要访问时，再去加载，这样可以提高网站的首屏加载速度，提升用户的体验，并且可以减少服务器的压力。它适用于图片很多，页面很长的电商网站的场景。懒加载的实现原理是，将页面上的图片的 src 属性设置为空字符串，将图片的真实路径保存在一个自定义属性中，当页面滚动的时候，进行判断，如果图片进入页面可视区域内，则从自定义属性中取出真实路径赋值给图片的 src 属性，以此来实现图片的延迟加载。\r\n \r\n预加载指的是将所需的资源提前请求加载到本地，这样后面在需要用到时就直接从缓存取资源。通过预加载能够减少用户的等待时间，提高用户的体验。我了解的预加载的最常用的方式是使用 js 中的 image 对象，通过为 image 对象来设置 scr 属性，来实现图片的预加载。\r\n \r\n这两种方式都是提高网页性能的方式，两者主要区别是一个是提前加载，一个是迟缓甚至不加载。懒加载对服务器前端有一定的缓解压力作用，预加载则会增加服务器前端压力。\r\n```\r\n\r\n详细资料可以参考：\r\n[《懒加载和预加载》](https://juejin.im/post/5b0c3b53f265da09253cbed0)\r\n[《网页图片加载优化方案》](https://juejin.im/entry/5a73f38cf265da4e99575be3)\r\n[《基于用户行为的图片等资源预加载》](https://www.zhangxinxu.com/wordpress/2016/06/image-preload-based-on-user-behavior/)\r\n\r\n## 124. mouseover 和 mouseenter 的区别？\r\n\r\n```\r\n当鼠标移动到元素上时就会触发 mouseenter 事件，类似 mouseover，它们两者之间的差别是 mouseenter 不会冒泡。\r\n \r\n由于 mouseenter 不支持事件冒泡，导致在一个元素的子元素上进入或离开的时候会触发其 mouseover 和 mouseout 事件，但是却不会触发 mouseenter 和 mouseleave 事件。\r\n```\r\n\r\n详细资料可以参考：\r\n[《mouseenter 与 mouseover 为何这般纠缠不清？》](https://github.com/qianlongo/zepto-analysis/issues/1)\r\n\r\n## 125. js 拖拽功能的实现\r\n\r\n相关知识点：\r\n\r\n```\r\n首先是三个事件，分别是 mousedown，mousemove，mouseup\r\n当鼠标点击按下的时候，需要一个 tag 标识此时已经按下，可以执行 mousemove 里面的具体方法。\r\nclientX，clientY 标识的是鼠标的坐标，分别标识横坐标和纵坐标，并且我们用 offsetX 和 offsetY 来表示\r\n元素的元素的初始坐标，移动的举例应该是：\r\n鼠标移动时候的坐标-鼠标按下去时候的坐标。\r\n也就是说定位信息为：\r\n鼠标移动时候的坐标-鼠标按下去时候的坐标+元素初始情况下的 offetLeft.\r\n```\r\n\r\n回答：\r\n\r\n```\r\n一个元素的拖拽过程，我们可以分为三个步骤，第一步是鼠标按下目标元素，第二步是鼠标保持按下的状态移动鼠标，第三步是鼠\r\n标抬起，拖拽过程结束。\r\n \r\n这三步分别对应了三个事件，mousedown 事件，mousemove 事件和 mouseup 事件。只有在鼠标按下的状态移动鼠标我们才会\r\n执行拖拽事件，因此我们需要在 mousedown 事件中设置一个状态来标识鼠标已经按下，然后在 mouseup 事件中再取消这个状\r\n态。在 mousedown 事件中我们首先应该判断，目标元素是否为拖拽元素，如果是拖拽元素，我们就设置状态并且保存这个时候鼠\r\n标的位置。然后在 mousemove 事件中，我们通过判断鼠标现在的位置和以前位置的相对移动，来确定拖拽元素在移动中的坐标。\r\n最后 mouseup 事件触发后，清除状态，结束拖拽事件。\r\n```\r\n\r\n详细资料可以参考：\r\n[《原生 js 实现拖拽功能基本思路》](https://blog.csdn.net/LZGS_4/article/details/43523465)\r\n\r\n## 126. 为什么使用 setTimeout 实现 setInterval？怎么模拟？\r\n\r\n相关知识点：\r\n\r\n```\r\n// 思路是使用递归函数，不断地去执行 setTimeout 从而达到 setInterval 的效果\r\n \r\nfunction mySetInterval(fn, timeout) {\r\n  // 控制器，控制定时器是否继续执行\r\n  var timer = {\r\n    flag: true\r\n  };\r\n \r\n  // 设置递归函数，模拟定时器执行。\r\n  function interval() {\r\n    if (timer.flag) {\r\n      fn();\r\n      setTimeout(interval, timeout);\r\n    }\r\n  }\r\n \r\n  // 启动定时器\r\n  setTimeout(interval, timeout);\r\n \r\n  // 返回控制器\r\n  return timer;\r\n}\r\n```\r\n\r\n回答：\r\n\r\n```\r\nsetInterval 的作用是每隔一段指定时间执行一个函数，但是这个执行不是真的到了时间立即执行，它真正的作用是每隔一段时间将事件加入事件队列中去，只有当当前的执行栈为空的时候，才能去从事件队列中取出事件执行。所以可能会出现这样的情况，就是当前执行栈执行的时间很长，导致事件队列里边积累多个定时器加入的事件，当执行栈结束的时候，这些事件会依次执行，因此就不能到间隔一段时间执行的效果。\r\n \r\n针对 setInterval 的这个缺点，我们可以使用 setTimeout 递归调用来模拟 setInterval，这样我们就确保了只有一个事件结束了，我们才会触发下一个定时器事件，这样解决了 setInterval 的问题。\r\n```\r\n\r\n详细资料可以参考：\r\n[《用 setTimeout 实现 setInterval》](https://www.jianshu.com/p/32479bdfd851)\r\n[《setInterval 有什么缺点？》](https://zhuanlan.zhihu.com/p/51995737)\r\n\r\n## 127. let 和 const 的注意点？\r\n\r\n- 1.声明的变量只在声明时的代码块内有效\r\n- 2.不存在声明提升\r\n- 3.存在暂时性死区，如果在变量声明前使用，会报错\r\n- 4.不允许重复声明，重复声明会报错\r\n\r\n## 128. 什么是 rest 参数？\r\n\r\n```\r\nrest 参数（形式为...变量名），用于获取函数的多余参数。\r\n```\r\n\r\n## 129. 什么是尾调用，使用尾调用有什么好处？\r\n\r\n```\r\n尾调用指的是函数的最后一步调用另一个函数。我们代码执行是基于执行栈的，所以当我们在一个函数里调用另一个函数时，我们会保留当前的执行上下文，然后再新建另外一个执行上下文加入栈中。使用尾调用的话，因为已经是函数的最后一步，所以这个时候我们可以不必再保留当前的执行上下文，从而节省了内存，这就是尾调用优化。但是 ES6 的尾调用优化只在严格模式下开启，正常模式是无效的。\r\n```\r\n\r\n## 130. Symbol 类型的注意点？\r\n\r\n- 1.Symbol 函数前不能使用 new 命令，否则会报错。\r\n- 2.Symbol 函数可以接受一个字符串作为参数，表示对 Symbol 实例的描述，主要是为了在控制台显示，或者转为字符串时，比较容易区分。\r\n- 3.Symbol 作为属性名，该属性不会出现在 for...in、for...of 循环中，也不会被 Object.keys()、Object.getOwnPropertyNames()、JSON.stringify() 返回。\r\n- 4.Object.getOwnPropertySymbols 方法返回一个数组，成员是当前对象的所有用作属性名的 Symbol 值。\r\n- 5.Symbol.for 接受一个字符串作为参数，然后搜索有没有以该参数作为名称的 Symbol 值。如果有，就返回这个 Symbol 值，否则就新建并返回一个以该字符串为名称的 Symbol 值。\r\n- 6.Symbol.keyFor 方法返回一个已登记的 Symbol 类型值的 key。\r\n\r\n## 131. Set 和 WeakSet 结构？\r\n\r\n- 1.ES6 提供了新的数据结构 Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。\r\n- 2.WeakSet 结构与 Set 类似，也是不重复的值的集合。但是 WeakSet 的成员只能是对象，而不能是其他类型的值。WeakSet 中的对象都是弱引用，即垃圾回收机制不考虑 WeakSet 对该对象的引用，\r\n\r\n## 132. Map 和 WeakMap 结构？\r\n\r\n- 1.Map 数据结构。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。\r\n- 2.WeakMap 结构与 Map 结构类似，也是用于生成键值对的集合。但是 WeakMap 只接受对象作为键名（ null 除外），不接受其他类型的值作为键名。而且 WeakMap 的键名所指向的对象，不计入垃圾回收机制。\r\n\r\n## 133. 什么是 Proxy ？\r\n\r\n```\r\nProxy 用于修改某些操作的默认行为，等同于在语言层面做出修改，所以属于一种“元编程”，即对编程语言进行编程。\r\n \r\nProxy 可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。Proxy 这个词的原意是代理，用在这里表示由它来“代理”某些操作，可以译为“代理器”。\r\n```\r\n\r\n## 134. Reflect 对象创建目的？\r\n\r\n- 1.将 Object 对象的一些明显属于语言内部的方法（比如 Object.defineProperty，放到 Reflect 对象上。\r\n- 2.修改某些 Object 方法的返回结果，让其变得更合理。\r\n- 3.让 Object 操作都变成函数行为。\r\n- 4.Reflect 对象的方法与 Proxy 对象的方法一一对应，只要是 Proxy 对象的方法，就能在 Reflect 对象上找到对应的方法。这就让 Proxy 对象可以方便地调用对应的 Reflect 方法，完成默认行为，作为修改行为的基础。也就是说，不管 Proxy 怎么修改默认行为，你总可以在 Reflect 上获取默认行为。\r\n\r\n## 135. require 模块引入的查找方式？\r\n\r\n```\r\n当 Node 遇到 require(X) 时，按下面的顺序处理。\r\n \r\n（1）如果 X 是内置模块（比如 require(\'http\')）\r\n　　a. 返回该模块。\r\n　　b. 不再继续执行。\r\n \r\n（2）如果 X 以 "./" 或者 "/" 或者 "../" 开头\r\n　　a. 根据 X 所在的父模块，确定 X 的绝对路径。\r\n　　b. 将 X 当成文件，依次查找下面文件，只要其中有一个存在，就返回该文件，不再继续执行。\r\n    X\r\n    X.js\r\n    X.json\r\n    X.node\r\n \r\n　　c. 将 X 当成目录，依次查找下面文件，只要其中有一个存在，就返回该文件，不再继续执行。\r\n    X/package.json（main字段）\r\n    X/index.js\r\n    X/index.json\r\n    X/index.node\r\n \r\n（3）如果 X 不带路径\r\n　　a. 根据 X 所在的父模块，确定 X 可能的安装目录。\r\n　　b. 依次在每个目录中，将 X 当成文件名或目录名加载。\r\n \r\n（4）抛出 "not found"\r\n```\r\n\r\n详细资料可以参考：\r\n[《require() 源码解读》](http://www.ruanyifeng.com/blog/2015/05/require.html)\r\n\r\n## 136. 什么是 Promise 对象，什么是 Promises/A+ 规范？\r\n\r\n```\r\nPromise 对象是异步编程的一种解决方案，最早由社区提出。Promises/A+ 规范是 JavaScript Promise 的标准，规定了一个 Promise 所必须具有的特性。\r\n \r\nPromise 是一个构造函数，接收一个函数作为参数，返回一个 Promise 实例。一个 Promise 实例有三种状态，分别是 pending、resolved 和 rejected，分别代表了进行中、已成功和已失败。实例的状态只能由 pending 转变 resolved 或者 rejected 状态，并且状态一经改变，就凝固了，无法再被改变了。状态的改变是通过 resolve() 和 reject() 函数来实现的，我们\r\n可以在异步操作结束后调用这两个函数改变 Promise 实例的状态，它的原型上定义了一个 then 方法，使用这个 then 方法可以为两个状态的改变注册回调函数。这个回调函数属于微任务，会在本轮事件循环的末尾执行。\r\n```\r\n\r\n详细资料可以参考：\r\n[《Promises/A+ 规范》](http://www.ituring.com.cn/article/66566)\r\n[《Promise》](http://es6.ruanyifeng.com/#docs/promise#Promise-resolve)\r\n\r\n## 137. 手写一个 Promise\r\n\r\n```\r\nconst PENDING = "pending";\r\nconst RESOLVED = "resolved";\r\nconst REJECTED = "rejected";\r\n \r\nfunction MyPromise(fn) {\r\n  // 保存初始化状态\r\n  var self = this;\r\n \r\n  // 初始化状态\r\n  this.state = PENDING;\r\n \r\n  // 用于保存 resolve 或者 rejected 传入的值\r\n  this.value = null;\r\n \r\n  // 用于保存 resolve 的回调函数\r\n  this.resolvedCallbacks = [];\r\n \r\n  // 用于保存 reject 的回调函数\r\n  this.rejectedCallbacks = [];\r\n \r\n  // 状态转变为 resolved 方法\r\n  function resolve(value) {\r\n    // 判断传入元素是否为 Promise 值，如果是，则状态改变必须等待前一个状态改变后再进行改变\r\n    if (value instanceof MyPromise) {\r\n      return value.then(resolve, reject);\r\n    }\r\n \r\n    // 保证代码的执行顺序为本轮事件循环的末尾\r\n    setTimeout(() => {\r\n      // 只有状态为 pending 时才能转变，\r\n      if (self.state === PENDING) {\r\n        // 修改状态\r\n        self.state = RESOLVED;\r\n \r\n        // 设置传入的值\r\n        self.value = value;\r\n \r\n        // 执行回调函数\r\n        self.resolvedCallbacks.forEach(callback => {\r\n          callback(value);\r\n        });\r\n      }\r\n    }, 0);\r\n  }\r\n \r\n  // 状态转变为 rejected 方法\r\n  function reject(value) {\r\n    // 保证代码的执行顺序为本轮事件循环的末尾\r\n    setTimeout(() => {\r\n      // 只有状态为 pending 时才能转变\r\n      if (self.state === PENDING) {\r\n        // 修改状态\r\n        self.state = REJECTED;\r\n \r\n        // 设置传入的值\r\n        self.value = value;\r\n \r\n        // 执行回调函数\r\n        self.rejectedCallbacks.forEach(callback => {\r\n          callback(value);\r\n        });\r\n      }\r\n    }, 0);\r\n  }\r\n \r\n  // 将两个方法传入函数执行\r\n  try {\r\n    fn(resolve, reject);\r\n  } catch (e) {\r\n    // 遇到错误时，捕获错误，执行 reject 函数\r\n    reject(e);\r\n  }\r\n}\r\n \r\nMyPromise.prototype.then = function(onResolved, onRejected) {\r\n  // 首先判断两个参数是否为函数类型，因为这两个参数是可选参数\r\n  onResolved =\r\n    typeof onResolved === "function"\r\n      ? onResolved\r\n      : function(value) {\r\n          return value;\r\n        };\r\n \r\n  onRejected =\r\n    typeof onRejected === "function"\r\n      ? onRejected\r\n      : function(error) {\r\n          throw error;\r\n        };\r\n \r\n  // 如果是等待状态，则将函数加入对应列表中\r\n  if (this.state === PENDING) {\r\n    this.resolvedCallbacks.push(onResolved);\r\n    this.rejectedCallbacks.push(onRejected);\r\n  }\r\n \r\n  // 如果状态已经凝固，则直接执行对应状态的函数\r\n \r\n  if (this.state === RESOLVED) {\r\n    onResolved(this.value);\r\n  }\r\n \r\n  if (this.state === REJECTED) {\r\n    onRejected(this.value);\r\n  }\r\n};\r\n```\r\n\r\n## 138. 如何检测浏览器所支持的最小字体大小？\r\n\r\n```\r\n用 JS 设置 DOM 的字体为某一个值，然后再取出来，如果值设置成功，就说明支持。\r\n```\r\n\r\n## 139. 怎么做 JS 代码 Error 统计？\r\n\r\n```\r\nerror 统计使用浏览器的 window.error 事件。\r\n```\r\n\r\n## 140. 单例模式模式是什么？\r\n\r\n```\r\n单例模式保证了全局只有一个实例来被访问。比如说常用的如弹框组件的实现和全局状态的实现。\r\n```\r\n\r\n## 141. 策略模式是什么？\r\n\r\n```\r\n策略模式主要是用来将方法的实现和方法的调用分离开，外部通过不同的参数可以调用不同的策略。我主要在 MVP 模式解耦的时候\r\n用来将视图层的方法定义和方法调用分离。\r\n```\r\n\r\n## 142. 代理模式是什么？\r\n\r\n```\r\n 代理模式是为一个对象提供一个代用品或占位符，以便控制对它的访问。比如说常见的事件代理。\r\n```\r\n\r\n## 143. 中介者模式是什么？\r\n\r\n```\r\n中介者模式指的是，多个对象通过一个中介者进行交流，而不是直接进行交流，这样能够将通信的各个对象解耦。\r\n```\r\n\r\n## 144. 适配器模式是什么？\r\n\r\n```\r\n适配器用来解决两个接口不兼容的情况，不需要改变已有的接口，通过包装一层的方式实现两个接口的正常协作。假如我们需要一种\r\n新的接口返回方式，但是老的接口由于在太多地方已经使用了，不能随意更改，这个时候就可以使用适配器模式。比如我们需要一种\r\n自定义的时间返回格式，但是我们又不能对 js 时间格式化的接口进行修改，这个时候就可以使用适配器模式。\r\n```\r\n\r\n更多关于设计模式的资料可以参考：\r\n[《前端面试之道》](https://juejin.im/book/5bdc715fe51d454e755f75ef/section/5bdc74186fb9a049ab0d0b6b)\r\n[《JavaScript 设计模式》](https://juejin.im/post/59df4f74f265da430f311909#heading-3)\r\n[《JavaScript 中常见设计模式整理》](https://juejin.im/post/5afe6430518825428630bc4d)\r\n\r\n## 145. 观察者模式和发布订阅模式有什么不同？\r\n\r\n```\r\n发布订阅模式其实属于广义上的观察者模式\r\n \r\n在观察者模式中，观察者需要直接订阅目标事件。在目标发出内容改变的事件后，直接接收事件并作出响应。\r\n \r\n而在发布订阅模式中，发布者和订阅者之间多了一个调度中心。调度中心一方面从发布者接收事件，另一方面向订阅者发布事件，订阅者需要在调度中心中订阅事件。通过调度中心实现了发布者和订阅者关系的解耦。使用发布订阅者模式更利于我们代码的可维护性。\r\n```\r\n\r\n详细资料可以参考：\r\n[《观察者模式和发布订阅模式有什么不同？》](https://www.zhihu.com/question/23486749)\r\n\r\n## 146. Vue 的生命周期是什么？\r\n\r\n```\r\nVue 的生命周期指的是组件从创建到销毁的一系列的过程，被称为 Vue 的生命周期。通过提供的 Vue 在生命周期各个阶段的钩子函数，我们可以很好的在 Vue 的各个生命阶段实现一些操作。\r\n```\r\n\r\n## 147. Vue 的各个生命阶段是什么？\r\n\r\n```\r\nVue 一共有8个生命阶段，分别是创建前、创建后、加载前、加载后、更新前、更新后、销毁前和销毁后，每个阶段对应了一个生命周期的钩子函数。\r\n \r\n（1）beforeCreate 钩子函数，在实例初始化之后，在数据监听和事件配置之前触发。因此在这个事件中我们是获取不到 data 数据的。\r\n \r\n（2）created 钩子函数，在实例创建完成后触发，此时可以访问 data、methods 等属性。但这个时候组件还没有被挂载到页面中去，所以这个时候访问不到 $el 属性。一般我们可以在这个函数中进行一些页面初始化的工作，比如通过 ajax 请求数据来对页面进行初始化。\r\n \r\n（3）beforeMount 钩子函数，在组件被挂载到页面之前触发。在 beforeMount 之前，会找到对应的 template，并编译成 render 函数。\r\n \r\n（4）mounted 钩子函数，在组件挂载到页面之后触发。此时可以通过 DOM API 获取到页面中的 DOM 元素。\r\n \r\n（5）beforeUpdate 钩子函数，在响应式数据更新时触发，发生在虚拟 DOM 重新渲染和打补丁之前，这个时候我们可以对可能会被移除的元素做一些操作，比如移除事件监听器。\r\n \r\n（6）updated 钩子函数，虚拟 DOM 重新渲染和打补丁之后调用。\r\n \r\n（7）beforeDestroy 钩子函数，在实例销毁之前调用。一般在这一步我们可以销毁定时器、解绑全局事件等。\r\n \r\n（8）destroyed 钩子函数，在实例销毁之后调用，调用后，Vue 实例中的所有东西都会解除绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。\r\n \r\n当我们使用 keep-alive 的时候，还有两个钩子函数，分别是 activated 和 deactivated 。用 keep-alive 包裹的组件在切换时不会进行销毁，而是缓存到内存中并执行 deactivated 钩子函数，命中缓存渲染后会执行 actived 钩子函数。\r\n```\r\n\r\n详细资料可以参考：\r\n[《vue 生命周期深入》](https://juejin.im/entry/5aee8fbb518825671952308c)\r\n[《Vue 实例》](https://cn.vuejs.org/v2/guide/instance.html)\r\n\r\n## 148. Vue 组件间的参数传递方式？\r\n\r\n```\r\n（1）父子组件间通信\r\n \r\n第一种方法是子组件通过 props 属性来接受父组件的数据，然后父组件在子组件上注册监听事件，子组件通过 emit 触发事\r\n件来向父组件发送数据。\r\n \r\n第二种是通过 ref 属性给子组件设置一个名字。父组件通过 $refs 组件名来获得子组件，子组件通过 $parent 获得父组\r\n件，这样也可以实现通信。\r\n \r\n第三种是使用 provider/inject，在父组件中通过 provider 提供变量，在子组件中通过 inject 来将变量注入到组件\r\n中。不论子组件有多深，只要调用了 inject 那么就可以注入 provider 中的数据。\r\n \r\n（2）兄弟组件间通信\r\n \r\n第一种是使用 eventBus 的方法，它的本质是通过创建一个空的 Vue 实例来作为消息传递的对象，通信的组件引入这个实\r\n例，通信的组件通过在这个实例上监听和触发事件，来实现消息的传递。\r\n \r\n第二种是通过 $parent.$refs 来获取到兄弟组件，也可以进行通信。\r\n \r\n（3）任意组件之间\r\n \r\n使用 eventBus ，其实就是创建一个事件中心，相当于中转站，可以用它来传递事件和接收事件。\r\n \r\n \r\n如果业务逻辑复杂，很多组件之间需要同时处理一些公共的数据，这个时候采用上面这一些方法可能不利于项目的维护。这个时候\r\n可以使用 vuex ，vuex 的思想就是将这一些公共的数据抽离出来，将它作为一个全局的变量来管理，然后其他组件就可以对这个\r\n公共数据进行读写操作，这样达到了解耦的目的。\r\n```\r\n\r\n详细资料可以参考：\r\n[《VUE 组件之间数据传递全集》](https://juejin.im/entry/5ba215ac5188255c6d0d8345)\r\n\r\n## 149. computed 和 watch 的差异？\r\n\r\n```\r\n（1）computed 是计算一个新的属性，并将该属性挂载到 Vue 实例上，而 watch 是监听已经存在且已挂载到 Vue 实例上的数据，所以用 watch 同样可以监听 computed 计算属性的变化。\r\n \r\n（2）computed 本质是一个惰性求值的观察者，具有缓存性，只有当依赖变化后，第一次访问 computed 属性，才会计算新的值。而 watch 则是当数据发生变化便会调用执行函数。\r\n \r\n（3）从使用场景上说，computed 适用一个数据被多个数据影响，而 watch 适用一个数据影响多个数据。\r\n```\r\n\r\n详细资料可以参考：\r\n[《做面试的不倒翁：浅谈 Vue 中 computed 实现原理》](https://juejin.im/post/5b98c4da6fb9a05d353c5fd7)\r\n[《深入理解 Vue 的 watch 实现原理及其实现方式》](https://juejin.im/post/5af908ea5188254265399009)\r\n\r\n## 150. vue-router 中的导航钩子函数\r\n\r\n```\r\n（1）全局的钩子函数 beforeEach 和 afterEach\r\n \r\nbeforeEach 有三个参数，to 代表要进入的路由对象，from 代表离开的路由对象。next 是一个必须要执行的函数，如果不传参数，那就执行下一个钩子函数，如果传入 false，则终止跳转，如果传入一个路径，则导航到对应的路由，如果传入 error ，则导航终止，error 传入错误的监听函数。\r\n \r\n（2）单个路由独享的钩子函数 beforeEnter，它是在路由配置上直接进行定义的。\r\n \r\n（3）组件内的导航钩子主要有这三种：beforeRouteEnter、beforeRouteUpdate、beforeRouteLeave。它们是直接在路由组\r\n件内部直接进行定义的。\r\n```\r\n\r\n详细资料可以参考：\r\n[《导航守卫》](https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#全局前置守卫)\r\n\r\n## 151. $route 和 $router 的区别？\r\n\r\n```\r\n$route 是“路由信息对象”，包括 path，params，hash，query，fullPath，matched，name 等路由信息参数。而 $router 是“路由实例”对象包括了路由的跳转方法，钩子函数等。\r\n```\r\n\r\n## 152. vue 常用的修饰符？\r\n\r\n```\r\n.prevent: 提交事件不再重载页面；.stop: 阻止单击事件冒泡；.self: 当事件发生在该元素本身而不是子元素的时候会触发；\r\n```\r\n\r\n## 153. vue 中 key 值的作用？\r\n\r\n```\r\nvue 中 key 值的作用可以分为两种情况来考虑。\r\n \r\n第一种情况是 v-if 中使用 key。由于 Vue 会尽可能高效地渲染元素，通常会复用已有元素而不是从头开始渲染。因此当我们使用 v-if 来实现元素切换的时候，如果切换前后含有相同类型的元素，那么这个元素就会被复用。如果是相同的 input 元素，那么切换前后用户的输入不会被清除掉，这样是不符合需求的。因此我们可以通过使用 key 来唯一的标识一个元素，这个情况下，使用 key 的元素不会被复用。这个时候 key 的作用是用来标识一个独立的元素。\r\n \r\n第二种情况是 v-for 中使用 key。用 v-for 更新已渲染过的元素列表时，它默认使用“就地复用”的策略。如果数据项的顺序发生了改变，Vue 不会移动 DOM 元素来匹配数据项的顺序，而是简单复用此处的每个元素。因此通过为每个列表项提供一个 key 值，来以便 Vue 跟踪元素的身份，从而高效的实现复用。这个时候 key 的作用是为了高效的更新渲染虚拟 DOM。\r\n```\r\n\r\n详细资料可以参考：\r\n[《Vue 面试中，经常会被问到的面试题 Vue 知识点整理》](https://segmentfault.com/a/1190000016344599)\r\n[《Vue2.0 v-for 中 :key 到底有什么用？》](https://www.zhihu.com/question/61064119)\r\n[《vue 中 key 的作用》](https://www.cnblogs.com/RainyBear/p/8563101.html)\r\n\r\n## 154. computed 和 watch 区别？\r\n\r\n```\r\ncomputed 是计算属性，依赖其他属性计算值，并且 computed 的值有缓存，只有当计算值变化才会返回内容。\r\n \r\nwatch 监听到值的变化就会执行回调，在回调中可以进行一些逻辑操作。\r\n```\r\n\r\n## 155. keep-alive 组件有什么作用？\r\n\r\n```\r\n如果你需要在组件切换的时候，保存一些组件的状态防止多次渲染，就可以使用 keep-alive 组件包裹需要保存的组件。\r\n```\r\n\r\n## 156. vue 中 mixin 和 mixins 区别？\r\n\r\n```\r\nmixin 用于全局混入，会影响到每个组件实例。\r\n \r\nmixins 应该是我们最常使用的扩展组件的方式了。如果多个组件中有相同的业务逻辑，就可以将这些逻辑剥离出来，通过 mixins 混入代码，比如上拉下拉加载数据这种逻辑等等。另外需要注意的是 mixins 混入的钩子函数会先于组件内的钩子函数执行，并且在遇到同名选项的时候也会有选择性的进行合并\r\n```\r\n\r\n详细资料可以参考：\r\n[《前端面试之道》](https://juejin.im/book/5bdc715fe51d454e755f75ef/section/5bdc731b51882516c56ced6f)\r\n[《混入》](https://cn.vuejs.org/v2/guide/mixins.html)\r\n\r\n## 157. 开发中常用的几种 Content-Type ？\r\n\r\n```\r\n（1）application/x-www-form-urlencoded\r\n \r\n浏览器的原生 form 表单，如果不设置 enctype 属性，那么最终就会以 application/x-www-form-urlencoded 方式提交数据。该种方式提交的数据放在 body 里面，数据按照 key1=val1&key2=val2 的方式进行编码，key 和 val 都进行了 URL\r\n转码。\r\n \r\n（2）multipart/form-data\r\n \r\n该种方式也是一个常见的 POST 提交方式，通常表单上传文件时使用该种方式。\r\n \r\n（3）application/json\r\n \r\n告诉服务器消息主体是序列化后的 JSON 字符串。\r\n \r\n（4）text/xml\r\n \r\n该种方式主要用来提交 XML 格式的数据。\r\n```\r\n\r\n详细资料可以参考：\r\n[《常用的几种 Content-Type》](https://honglu.me/2015/07/13/常用的几种Content-Type/)\r\n\r\n## 158. 如何封装一个 javascript 的类型判断函数？\r\n\r\n```\r\nfunction getType(value) {\r\n  // 判断数据是 null 的情况\r\n  if (value === null) {\r\n    return value + "";\r\n  }\r\n \r\n  // 判断数据是引用类型的情况\r\n  if (typeof value === "object") {\r\n    let valueClass = Object.prototype.toString.call(value),\r\n      type = valueClass.split(" ")[1].split("");\r\n \r\n    type.pop();\r\n \r\n    return type.join("").toLowerCase();\r\n  } else {\r\n    // 判断数据是基本数据类型的情况和函数的情况\r\n    return typeof value;\r\n  }\r\n}\r\n```\r\n\r\n详细资料可以参考：\r\n[《JavaScript 专题之类型判断(上)》](https://github.com/mqyqingfeng/Blog/issues/28)\r\n\r\n## 159. 如何判断一个对象是否为空对象？\r\n\r\n```\r\nfunction checkNullObj(obj) {\r\n  return Object.keys(obj).length === 0;\r\n}\r\n```\r\n\r\n详细资料可以参考：\r\n[《js 判断一个 object 对象是否为空》](https://blog.csdn.net/FungLeo/article/details/78113661)\r\n\r\n## 160. 使用闭包实现每隔一秒打印 1,2,3,4\r\n\r\n```\r\n// 使用闭包实现\r\nfor (var i = 0; i < 5; i++) {\r\n  (function(i) {\r\n    setTimeout(function() {\r\n      console.log(i);\r\n    }, i * 1000);\r\n  })(i);\r\n}\r\n \r\n// 使用 let 块级作用域\r\n \r\nfor (let i = 0; i < 5; i++) {\r\n  setTimeout(function() {\r\n    console.log(i);\r\n  }, i * 1000);\r\n}\r\n```\r\n\r\n## 161. 手写一个 jsonp\r\n\r\n```\r\nfunction jsonp(url, params, callback) {\r\n  // 判断是否含有参数\r\n  let queryString = url.indexOf("?") === "-1" ? "?" : "&";\r\n \r\n  // 添加参数\r\n  for (var k in params) {\r\n    if (params.hasOwnProperty(k)) {\r\n      queryString += k + "=" + params[k] + "&";\r\n    }\r\n  }\r\n \r\n  // 处理回调函数名\r\n  let random = Math.random()\r\n      .toString()\r\n      .replace(".", ""),\r\n    callbackName = "myJsonp" + random;\r\n \r\n  // 添加回调函数\r\n  queryString += "callback=" + callbackName;\r\n \r\n  // 构建请求\r\n  let scriptNode = document.createElement("script");\r\n  scriptNode.src = url + queryString;\r\n \r\n  window[callbackName] = function() {\r\n    // 调用回调函数\r\n    callback(...arguments);\r\n \r\n    // 删除这个引入的脚本\r\n    document.getElementsByTagName("head")[0].removeChild(scriptNode);\r\n  };\r\n \r\n  // 发起请求\r\n  document.getElementsByTagName("head")[0].appendChild(scriptNode);\r\n}\r\n```\r\n\r\n详细资料可以参考：\r\n[《原生 jsonp 具体实现》](https://www.cnblogs.com/zzc5464/p/jsonp.html)\r\n[《jsonp 的原理与实现》](https://segmentfault.com/a/1190000007665361#articleHeader1)\r\n\r\n## 162. 手写一个观察者模式？\r\n\r\n```\r\nvar events = (function() {\r\n  var topics = {};\r\n \r\n  return {\r\n    // 注册监听函数\r\n    subscribe: function(topic, handler) {\r\n      if (!topics.hasOwnProperty(topic)) {\r\n        topics[topic] = [];\r\n      }\r\n      topics[topic].push(handler);\r\n    },\r\n \r\n    // 发布事件，触发观察者回调事件\r\n    publish: function(topic, info) {\r\n      if (topics.hasOwnProperty(topic)) {\r\n        topics[topic].forEach(function(handler) {\r\n          handler(info);\r\n        });\r\n      }\r\n    },\r\n \r\n    // 移除主题的一个观察者的回调事件\r\n    remove: function(topic, handler) {\r\n      if (!topics.hasOwnProperty(topic)) return;\r\n \r\n      var handlerIndex = -1;\r\n      topics[topic].forEach(function(item, index) {\r\n        if (item === handler) {\r\n          handlerIndex = index;\r\n        }\r\n      });\r\n \r\n      if (handlerIndex >= 0) {\r\n        topics[topic].splice(handlerIndex, 1);\r\n      }\r\n    },\r\n \r\n    // 移除主题的所有观察者的回调事件\r\n    removeAll: function(topic) {\r\n      if (topics.hasOwnProperty(topic)) {\r\n        topics[topic] = [];\r\n      }\r\n    }\r\n  };\r\n})();\r\n```\r\n\r\n详细资料可以参考：\r\n[《JS 事件模型》](https://segmentfault.com/a/1190000006934031#articleHeader1)\r\n\r\n## 163. EventEmitter 实现\r\n\r\n```\r\nclass EventEmitter {\r\n  constructor() {\r\n    this.events = {};\r\n  }\r\n \r\n  on(event, callback) {\r\n    let callbacks = this.events[event] || [];\r\n    callbacks.push(callback);\r\n    this.events[event] = callbacks;\r\n \r\n    return this;\r\n  }\r\n \r\n  off(event, callback) {\r\n    let callbacks = this.events[event];\r\n    this.events[event] = callbacks && callbacks.filter(fn => fn !== callback);\r\n \r\n    return this;\r\n  }\r\n \r\n  emit(event, ...args) {\r\n    let callbacks = this.events[event];\r\n    callbacks.forEach(fn => {\r\n      fn(...args);\r\n    });\r\n \r\n    return this;\r\n  }\r\n \r\n  once(event, callback) {\r\n    let wrapFun = function(...args) {\r\n      callback(...args);\r\n \r\n      this.off(event, wrapFun);\r\n    };\r\n    this.on(event, wrapFun);\r\n \r\n    return this;\r\n  }\r\n}\r\n```\r\n\r\n## 164. 一道常被人轻视的前端 JS 面试题\r\n\r\n```\r\nfunction Foo() {\r\n  getName = function() {\r\n    alert(1);\r\n  };\r\n  return this;\r\n}\r\nFoo.getName = function() {\r\n  alert(2);\r\n};\r\nFoo.prototype.getName = function() {\r\n  alert(3);\r\n};\r\nvar getName = function() {\r\n  alert(4);\r\n};\r\nfunction getName() {\r\n  alert(5);\r\n}\r\n \r\n//请写出以下输出结果：\r\nFoo.getName(); // 2\r\ngetName(); // 4\r\nFoo().getName(); // 1\r\ngetName(); // 1\r\nnew Foo.getName(); // 2\r\nnew Foo().getName(); // 3\r\nnew new Foo().getName(); // 3\r\n```\r\n\r\n详细资料可以参考：\r\n[《前端程序员经常忽视的一个 JavaScript 面试题》](https://github.com/Wscats/Good-text-Share/issues/85)\r\n[《一道考察运算符优先级的 JavaScript 面试题》](https://segmentfault.com/q/1010000008430170)\r\n[《一道常被人轻视的前端 JS 面试题》](https://www.cnblogs.com/xxcanghai/p/5189353.html)\r\n\r\n## 165. 如何确定页面的可用性时间，什么是 Performance API？\r\n\r\n```\r\nPerformance API 用于精确度量、控制、增强浏览器的性能表现。这个 API 为测量网站性能，提供以前没有办法做到的精度。\r\n \r\n使用 getTime 来计算脚本耗时的缺点，首先，getTime方法（以及 Date 对象的其他方法）都只能精确到毫秒级别（一秒的千分之一），想要得到更小的时间差别就无能为力了。其次，这种写法只能获取代码运行过程中的时间进度，无法知道一些后台事件的时间进度，比如浏览器用了多少时间从服务器加载网页。\r\n \r\n为了解决这两个不足之处，ECMAScript 5引入“高精度时间戳”这个 API，部署在 performance 对象上。它的精度可以达到1毫秒\r\n的千分之一（1秒的百万分之一）。\r\n \r\nnavigationStart：当前浏览器窗口的前一个网页关闭，发生 unload 事件时的 Unix 毫秒时间戳。如果没有前一个网页，则等于 fetchStart 属性。\r\n \r\nloadEventEnd：返回当前网页 load 事件的回调函数运行结束时的 Unix 毫秒时间戳。如果该事件还没有发生，返回 0。\r\n```\r\n\r\n根据上面这些属性，可以计算出网页加载各个阶段的耗时。比如，网页加载整个过程的耗时的计算方法如下：\r\n\r\n```\r\nvar t = performance.timing;\r\nvar pageLoadTime = t.loadEventEnd - t.navigationStart;\r\n```\r\n\r\n详细资料可以参考：\r\n[《Performance API》](http://javascript.ruanyifeng.com/bom/performance.html)\r\n\r\n## 166. js 中的命名规则\r\n\r\n```\r\n（1）第一个字符必须是字母、下划线（_）或美元符号（$）\r\n（2）余下的字符可以是下划线、美元符号或任何字母或数字字符\r\n \r\n一般我们推荐使用驼峰法来对变量名进行命名，因为这样可以与 ECMAScript 内置的函数和对象命名格式保持一致。\r\n```\r\n\r\n详细资料可以参考：\r\n[《ECMAScript 变量》](http://www.w3school.com.cn/js/pro_js_variables.asp)\r\n\r\n## 167. js 语句末尾分号是否可以省略？\r\n\r\n```\r\n在 ECMAScript 规范中，语句结尾的分号并不是必需的。但是我们一般最好不要省略分号，因为加上分号一方面有\r\n利于我们代码的可维护性，另一方面也可以避免我们在对代码进行压缩时出现错误。\r\n```\r\n\r\n## 168. Object.assign()\r\n\r\n```\r\nObject.assign() 方法用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象。\r\n```\r\n\r\n## 169. Math.ceil 和 Math.floor\r\n\r\n```js\r\nMath.ceil() === 向上取整，函数返回一个大于或等于给定数字的最小整数。\r\n \r\nMath.floor() === 向下取整，函数返回一个小于或等于给定数字的最大整数。\r\n```\r\n\r\n## 170. js for 循环注意点\r\n\r\n```js\r\nfor (var i = 0, j = 0; i < 5, j < 9; i++, j++) {\r\n  console.log(i, j);\r\n}\r\n \r\n// 当判断语句含有多个语句时，以最后一个判断语句的值为准，因此上面的代码会执行 10 次。\r\n// 当判断语句为空时，循环会一直进行。\r\n```',contentRendered:'<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>本篇主要是笔者在复习 JavaScript 相关知识和一些相关面试题时所做的笔记，如果出现错误，希望大家指出！</p>\n</div>\n<h2 id="_1-介绍-js-的基本数据类型。" tabindex="-1"><a class="header-anchor" href="#_1-介绍-js-的基本数据类型。" aria-hidden="true">#</a> 1. 介绍 js 的基本数据类型。</h2>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>js 一共有六种基本数据类型，分别是 Undefined、Null、Boolean、Number、String，还有在 <span class="token constant">ES6</span> 中新增的 Symbol 类型，\n代表创建后独一无二且不可变的数据类型，它的出现我认为主要是为了解决可能出现的全局变量冲突的问题。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="_2-javascript-有几种类型的值-你能画一下他们的内存图吗" tabindex="-1"><a class="header-anchor" href="#_2-javascript-有几种类型的值-你能画一下他们的内存图吗" aria-hidden="true">#</a> 2. JavaScript 有几种类型的值？你能画一下他们的内存图吗？</h2>\n<p>涉及知识点：</p>\n<ul>\n<li>栈：原始数据类型（Undefined、Null、Boolean、Number、String）</li>\n<li>堆：引用数据类型（对象、数组和函数）</li>\n</ul>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>两种类型的区别是：存储位置不同。\n原始数据类型直接存储在栈（stack）中的简单数据段，占据空间小、大小固定，属于被频繁使用数据，所以放入栈中存储。\n \n引用数据类型存储在堆（heap）中的对象，占据空间大、大小不固定。如果存储在栈中，将会影响程序运行的性能；引用数据类型在\n栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实\n体。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>回答：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>js 可以分为两种类型的值，一种是基本数据类型，一种是复杂数据类型。\n \n基本数据类型....（参考1）\n \n复杂数据类型指的是 Object 类型，所有其他的如 Array、Date 等数据类型都可以理解为 Object 类型的子类。\n \n两种类型间的主要区别是它们的存储位置不同，基本数据类型的值直接保存在栈中，而复杂数据类型的值保存在堆中，通过使用在栈中\n保存对应的指针来获取堆中的值。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>详细资料可以参考：\n<a href="https://blog.csdn.net/lxcao/article/details/52749421" target="_blank" rel="noopener noreferrer">《JavaScript 有几种类型的值？》<ExternalLinkIcon/></a>\n<a href="https://blog.csdn.net/jiangjuanjaun/article/details/80327342" target="_blank" rel="noopener noreferrer">《JavaScript 有几种类型的值？能否画一下它们的内存图；》<ExternalLinkIcon/></a></p>\n<h2 id="_3-什么是堆-什么是栈-它们之间有什么区别和联系" tabindex="-1"><a class="header-anchor" href="#_3-什么是堆-什么是栈-它们之间有什么区别和联系" aria-hidden="true">#</a> 3. 什么是堆？什么是栈？它们之间有什么区别和联系？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>堆和栈的概念存在于数据结构中和操作系统内存中。\n \n在数据结构中，栈中数据的存取方式为先进后出。而堆是一个优先队列，是按优先级来进行排序的，优先级可以按照大小来规定。完全\n二叉树是堆的一种实现方式。\n \n在操作系统中，内存被分为栈区和堆区。\n \n栈区内存由编译器自动分配释放，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。\n \n堆区内存一般由程序员分配释放，若程序员不释放，程序结束时可能由垃圾回收机制回收。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>详细资料可以参考：\n<a href="https://www.zhihu.com/question/19729973" target="_blank" rel="noopener noreferrer">《什么是堆？什么是栈？他们之间有什么区别和联系？》<ExternalLinkIcon/></a></p>\n<h2 id="_4-内部属性-class-是什么" tabindex="-1"><a class="header-anchor" href="#_4-内部属性-class-是什么" aria-hidden="true">#</a> 4. 内部属性 [[Class]] 是什么？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>所有 typeof 返回值为 "object" 的对象（如数组）都包含一个内部属性 [[Class]]（我们可以把它看作一个内部的分类，而非\n传统的面向对象意义上的类）。这个属性无法直接访问，一般通过 Object.prototype.toString(..) 来查看。例如：\n \nObject.prototype.toString.call( [1,2,3] );\n// "[object Array]"\n \nObject.prototype.toString.call( /regex-literal/i );\n// "[object RegExp]"\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="_5-介绍-js-有哪些内置对象" tabindex="-1"><a class="header-anchor" href="#_5-介绍-js-有哪些内置对象" aria-hidden="true">#</a> 5. 介绍 js 有哪些内置对象？</h2>\n<p>涉及知识点：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>全局的对象（ global objects ）或称标准内置对象，不要和 "全局对象（global object）" 混淆。这里说的全局的对象是说在\n全局作用域里的对象。全局作用域中的其他对象可以由用户的脚本创建或由宿主程序提供。\n \n标准内置对象的分类\n \n（1）值属性，这些全局属性返回一个简单值，这些值没有自己的属性和方法。\n \n例如 Infinity、NaN、undefined、null 字面量\n \n（2）函数属性，全局函数可以直接调用，不需要在调用时指定所属对象，执行结束后会将结果直接返回给调用者。\n \n例如 eval()、parseFloat()、parseInt() 等\n \n（3）基本对象，基本对象是定义或使用其他对象的基础。基本对象包括一般对象、函数对象和错误对象。\n \n例如 Object、Function、Boolean、Symbol、Error 等\n \n（4）数字和日期对象，用来表示数字、日期和执行数学计算的对象。\n \n例如 Number、Math、Date\n \n（5）字符串，用来表示和操作字符串的对象。\n \n例如 String、RegExp\n \n（6）可索引的集合对象，这些对象表示按照索引值来排序的数据集合，包括数组和类型数组，以及类数组结构的对象。例如 Array\n \n（7）使用键的集合对象，这些集合对象在存储数据时会使用到键，支持按照插入顺序来迭代元素。\n \n例如 Map、Set、WeakMap、WeakSet\n \n（8）矢量集合，SIMD 矢量集合中的数据会被组织为一个数据序列。\n \n例如 SIMD 等\n \n（9）结构化数据，这些对象用来表示和操作结构化的缓冲区数据，或使用 JSON 编码的数据。\n \n例如 JSON 等\n \n（10）控制抽象对象\n \n例如 Promise、Generator 等\n \n（11）反射\n \n例如 Reflect、Proxy\n \n（12）国际化，为了支持多语言处理而加入 ECMAScript 的对象。\n \n例如 Intl、Intl.Collator 等\n \n（13）WebAssembly\n \n（14）其他\n \n例如 arguments\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br></div></div><p>回答：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>js 中的内置对象主要指的是在程序执行前存在全局作用域里的由 js 定义的一些全局值属性、函数和用来实例化其他对象的构造函\n数对象。一般我们经常用到的如全局变量值 NaN、undefined，全局函数如 parseInt()、parseFloat() 用来实例化对象的构\n造函数如 Date、Object 等，还有提供数学计算的单体内置对象如 Math 对象。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>详细资料可以参考：\n<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects" target="_blank" rel="noopener noreferrer">《标准内置对象的分类》<ExternalLinkIcon/></a>\n<a href="https://segmentfault.com/a/1190000011467723#articleHeader24" target="_blank" rel="noopener noreferrer">《JS 所有内置对象属性和方法汇总》<ExternalLinkIcon/></a></p>\n<h2 id="_6-undefined-与-undeclared-的区别" tabindex="-1"><a class="header-anchor" href="#_6-undefined-与-undeclared-的区别" aria-hidden="true">#</a> 6. undefined 与 undeclared 的区别？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>已在作用域中声明但还没有赋值的变量，是 undefined 的。相反，还没有在作用域中声明过的变量，是 undeclared 的。\n \n对于 undeclared 变量的引用，浏览器会报引用错误，如 ReferenceError: b is not defined 。但是我们可以使用 typ\neof 的安全防范机制来避免报错，因为对于 undeclared（或者 not defined ）变量，typeof 会返回 "undefined"。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="_7-null-和-undefined-的区别" tabindex="-1"><a class="header-anchor" href="#_7-null-和-undefined-的区别" aria-hidden="true">#</a> 7. null 和 undefined 的区别？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>首先 Undefined 和 Null 都是基本数据类型，这两个基本数据类型分别都只有一个值，就是 undefined 和 null。\n \nundefined 代表的含义是未定义，null 代表的含义是空对象。一般变量声明了但还没有定义的时候会返回 undefined，null\n主要用于赋值给一些可能会返回对象的变量，作为初始化。\n \nundefined 在 js 中不是一个保留字，这意味着我们可以使用 undefined 来作为一个变量名，这样的做法是非常危险的，它\n会影响我们对 undefined 值的判断。但是我们可以通过一些方法获得安全的 undefined 值，比如说 void 0。\n \n当我们对两种类型使用 typeof 进行判断的时候，Null 类型化会返回 “object”，这是一个历史遗留的问题。当我们使用双等\n号对两种类型的值进行比较时会返回 true，使用三个等号时会返回 false。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>详细资料可以参考：\n<a href="http://cavszhouyou.top/JavaScript%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E4%B9%8Bundefined%E4%B8%8Enull.html" target="_blank" rel="noopener noreferrer">《JavaScript 深入理解之 undefined 与 null》<ExternalLinkIcon/></a></p>\n<h2 id="_8-如何获取安全的-undefined-值" tabindex="-1"><a class="header-anchor" href="#_8-如何获取安全的-undefined-值" aria-hidden="true">#</a> 8. 如何获取安全的 undefined 值？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>因为 undefined 是一个标识符，所以可以被当作变量来使用和赋值，但是这样会影响 undefined 的正常判断。\n \n表达式 void ___ 没有返回值，因此返回结果是 undefined。void 并不改变表达式的结果，只是让表达式不返回值。\n \n按惯例我们用 void 0 来获得 undefined。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="_9-说几条写-javascript-的基本规范" tabindex="-1"><a class="header-anchor" href="#_9-说几条写-javascript-的基本规范" aria-hidden="true">#</a> 9. 说几条写 JavaScript 的基本规范？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>在平常项目开发中，我们遵守一些这样的基本规范，比如说：\n \n（1）一个函数作用域中所有的变量声明应该尽量提到函数首部，用一个 var 声明，不允许出现两个连续的 var 声明，声明时\n    如果变量没有值，应该给该变量赋值对应类型的初始值，便于他人阅读代码时，能够一目了然的知道变量对应的类型值。\n \n（2）代码中出现地址、时间等字符串时需要使用常量代替。\n \n（3）在进行比较的时候吧，尽量使用\'===\', \'!==\'代替\'==\', \'!=\'。\n \n（4）不要在内置对象的原型上添加方法，如 Array, Date。\n \n（5）switch 语句必须带有 default 分支。\n \n（6）for 循环必须使用大括号。\n \n（7）if 语句必须使用大括号。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="_10-javascript-原型-原型链-有什么特点" tabindex="-1"><a class="header-anchor" href="#_10-javascript-原型-原型链-有什么特点" aria-hidden="true">#</a> 10. JavaScript 原型，原型链？ 有什么特点？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>在 js 中我们是使用构造函数来新建一个对象的，每一个构造函数的内部都有一个 prototype 属性值，这个属性值是一个对\n象，这个对象包含了可以由该构造函数的所有实例共享的属性和方法。当我们使用构造函数新建一个对象后，在这个对象的内部\n将包含一个指针，这个指针指向构造函数的 prototype 属性对应的值，在 ES5 中这个指针被称为对象的原型。一般来说我们\n是不应该能够获取到这个值的，但是现在浏览器中都实现了 __proto__ 属性来让我们访问这个属性，但是我们最好不要使用这\n个属性，因为它不是规范中规定的。ES5 中新增了一个 Object.getPrototypeOf() 方法，我们可以通过这个方法来获取对\n象的原型。\n \n当我们访问一个对象的属性时，如果这个对象内部不存在这个属性，那么它就会去它的原型对象里找这个属性，这个原型对象又\n会有自己的原型，于是就这样一直找下去，也就是原型链的概念。原型链的尽头一般来说都是 Object.prototype 所以这就\n是我们新建的对象为什么能够使用 toString() 等方法的原因。\n \n特点：\n \nJavaScript 对象是通过引用来传递的，我们创建的每个新对象实体中并没有一份属于自己的原型副本。当我们修改原型时，与\n之相关的对象也会继承这一改变。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>详细资料可以参考：\n<a href="http://cavszhouyou.top/JavaScript%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E4%B9%8B%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE.html" target="_blank" rel="noopener noreferrer">《JavaScript 深入理解之原型与原型链》<ExternalLinkIcon/></a></p>\n<h2 id="_11-js-获取原型的方法" tabindex="-1"><a class="header-anchor" href="#_11-js-获取原型的方法" aria-hidden="true">#</a> 11. js 获取原型的方法？</h2>\n<ul>\n<li>p.<strong>proto</strong></li>\n<li>p.constructor.prototype</li>\n<li>Object.getPrototypeOf(p)</li>\n</ul>\n<h2 id="_12-在-js-中不同进制数字的表示方式" tabindex="-1"><a class="header-anchor" href="#_12-在-js-中不同进制数字的表示方式" aria-hidden="true">#</a> 12. 在 js 中不同进制数字的表示方式</h2>\n<ul>\n<li>\n<p>以 0X、0x 开头的表示为十六进制。</p>\n</li>\n<li>\n<p>以 0、0O、0o 开头的表示为八进制。</p>\n</li>\n<li>\n<p>以 0B、0b 开头的表示为二进制格式。</p>\n</li>\n</ul>\n<h2 id="_13-js-中整数的安全范围是多少" tabindex="-1"><a class="header-anchor" href="#_13-js-中整数的安全范围是多少" aria-hidden="true">#</a> 13. js 中整数的安全范围是多少？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>安全整数指的是，在这个范围内的整数转化为二进制存储的时候不会出现精度丢失，能够被“安全”呈现的最大整数是 2^53 - 1，\n即9007199254740991，在 ES6 中被定义为 Number.MAX_SAFE_INTEGER。最小整数是-9007199254740991，在 ES6 中\n被定义为 Number.MIN_SAFE_INTEGER。\n \n如果某次计算的结果得到了一个超过 JavaScript 数值范围的值，那么这个值会被自动转换为特殊的 Infinity 值。如果某次\n计算返回了正或负的 Infinity 值，那么该值将无法参与下一次的计算。判断一个数是不是有穷的，可以使用 isFinite 函数\n来判断。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="_14-typeof-nan-的结果是什么" tabindex="-1"><a class="header-anchor" href="#_14-typeof-nan-的结果是什么" aria-hidden="true">#</a> 14. typeof NaN 的结果是什么？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>NaN 意指“不是一个数字”（not a number），NaN 是一个“警戒值”（sentinel value，有特殊用途的常规值），用于指出\n数字类型中的错误情况，即“执行数学运算没有成功，这是失败后返回的结果”。\n \ntypeof NaN; // "number"\n \nNaN 是一个特殊值，它和自身不相等，是唯一一个非自反（自反，reflexive，即 x === x 不成立）的值。而 NaN != NaN\n为 true。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="_15-isnan-和-number-isnan-函数的区别" tabindex="-1"><a class="header-anchor" href="#_15-isnan-和-number-isnan-函数的区别" aria-hidden="true">#</a> 15. isNaN 和 Number.isNaN 函数的区别？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>函数 isNaN 接收参数后，会尝试将这个参数转换为数值，任何不能被转换为数值的的值都会返回 true，因此非数字值传入也会\n返回 true ，会影响 NaN 的判断。\n \n函数 Number.isNaN 会首先判断传入参数是否为数字，如果是数字再继续判断是否为 NaN ，这种方法对于 NaN 的判断更为\n准确。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="_16-array-构造函数只有一个参数值时的表现" tabindex="-1"><a class="header-anchor" href="#_16-array-构造函数只有一个参数值时的表现" aria-hidden="true">#</a> 16. Array 构造函数只有一个参数值时的表现？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>Array 构造函数只带一个数字参数的时候，该参数会被作为数组的预设长度（length），而非只充当数组中的一个元素。这样\n创建出来的只是一个空数组，只不过它的 length 属性被设置成了指定的值。\n \n构造函数 Array(..) 不要求必须带 new 关键字。不带时，它会被自动补上。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="_17-其他值到字符串的转换规则" tabindex="-1"><a class="header-anchor" href="#_17-其他值到字符串的转换规则" aria-hidden="true">#</a> 17. 其他值到字符串的转换规则？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>规范的 9.8 节中定义了抽象操作 ToString ，它负责处理非字符串到字符串的强制类型转换。\n \n（1）Null 和 Undefined 类型 ，null 转换为 "null"，undefined 转换为 "undefined"，\n \n（2）Boolean 类型，true 转换为 "true"，false 转换为 "false"。\n \n（3）Number 类型的值直接转换，不过那些极小和极大的数字会使用指数形式。\n \n（4）Symbol 类型的值直接转换，但是只允许显式强制类型转换，使用隐式强制类型转换会产生错误。\n \n（3）对普通对象来说，除非自行定义 toString() 方法，否则会调用 toString()（Object.prototype.toString()）\n    来返回内部属性 [[Class]] 的值，如"[object Object]"。如果对象有自己的 toString() 方法，字符串化时就会\n    调用该方法并使用其返回值。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="_18-其他值到数字值的转换规则" tabindex="-1"><a class="header-anchor" href="#_18-其他值到数字值的转换规则" aria-hidden="true">#</a> 18. 其他值到数字值的转换规则？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>有时我们需要将非数字值当作数字来使用，比如数学运算。为此 ES5 规范在 9.3 节定义了抽象操作 ToNumber。\n \n（1）Undefined 类型的值转换为 NaN。\n \n（2）Null 类型的值转换为 0。\n \n（3）Boolean 类型的值，true 转换为 1，false 转换为 0。\n \n（4）String 类型的值转换如同使用 Number() 函数进行转换，如果包含非数字值则转换为 NaN，空字符串为 0。\n \n（5）Symbol 类型的值不能转换为数字，会报错。\n \n（6）对象（包括数组）会首先被转换为相应的基本类型值，如果返回的是非数字的基本类型值，则再遵循以上规则将其强制转换为数字。\n \n为了将值转换为相应的基本类型值，抽象操作 ToPrimitive 会首先（通过内部操作 DefaultValue）检查该值是否有valueOf() 方法。如果有并且返回基本类型值，就使用该值进行强制类型转换。如果没有就使用 toString() 的返回值（如果存在）来进行强制类型转换。\n \n如果 valueOf() 和 toString() 均不返回基本类型值，会产生 TypeError 错误。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="_19-其他值到布尔类型的值的转换规则" tabindex="-1"><a class="header-anchor" href="#_19-其他值到布尔类型的值的转换规则" aria-hidden="true">#</a> 19. 其他值到布尔类型的值的转换规则？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>ES5 规范 9.2 节中定义了抽象操作 ToBoolean，列举了布尔强制类型转换所有可能出现的结果。\n \n以下这些是假值：\n• undefined\n• null\n• false\n• +0、-0 和 NaN\n• ""\n \n假值的布尔强制类型转换结果为 false。从逻辑上说，假值列表以外的都应该是真值。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="_20-和-的-valueof-和-tostring-的结果是什么" tabindex="-1"><a class="header-anchor" href="#_20-和-的-valueof-和-tostring-的结果是什么" aria-hidden="true">#</a> 20. {} 和 [] 的 valueOf 和 toString 的结果是什么？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>{} 的 valueOf 结果为 {} ，toString 的结果为 "[object Object]"\n \n[] 的 valueOf 结果为 [] ，toString 的结果为 ""\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="_21-什么是假值对象" tabindex="-1"><a class="header-anchor" href="#_21-什么是假值对象" aria-hidden="true">#</a> 21. 什么是假值对象？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>浏览器在某些特定情况下，在常规 JavaScript 语法基础上自己创建了一些外来值，这些就是“假值对象”。假值对象看起来和\n普通对象并无二致（都有属性，等等），但将它们强制类型转换为布尔值时结果为 false 最常见的例子是 document.all，它\n是一个类数组对象，包含了页面上的所有元素，由 DOM（而不是 JavaScript 引擎）提供给 JavaScript 程序使用。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="_22-操作符的作用" tabindex="-1"><a class="header-anchor" href="#_22-操作符的作用" aria-hidden="true">#</a> 22. ~ 操作符的作用？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>~ 返回 2 的补码，并且 ~ 会将数字转换为 32 位整数，因此我们可以使用 ~ 来进行取整操作。\n \n~x 大致等同于 -(x+1)。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="_23-解析字符串中的数字和将字符串强制类型转换为数字的返回结果都是数字-它们之间的区别是什么" tabindex="-1"><a class="header-anchor" href="#_23-解析字符串中的数字和将字符串强制类型转换为数字的返回结果都是数字-它们之间的区别是什么" aria-hidden="true">#</a> 23. 解析字符串中的数字和将字符串强制类型转换为数字的返回结果都是数字，它们之间的区别是什么？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>解析允许字符串（如 parseInt() ）中含有非数字字符，解析按从左到右的顺序，如果遇到非数字字符就停止。而转换（如 Nu\nmber ()）不允许出现非数字字符，否则会失败并返回 NaN。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="_24-操作符什么时候用于字符串的拼接" tabindex="-1"><a class="header-anchor" href="#_24-操作符什么时候用于字符串的拼接" aria-hidden="true">#</a> 24. + 操作符什么时候用于字符串的拼接？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>根据 ES5 规范 11.6.1 节，如果某个操作数是字符串或者能够通过以下步骤转换为字符串的话，+ 将进行拼接操作。如果其\n中一个操作数是对象（包括数组），则首先对其调用 ToPrimitive 抽象操作，该抽象操作再调用 [[DefaultValue]]，以\n数字作为上下文。如果不能转换为字符串，则会将其转换为数字类型来进行计算。\n \n简单来说就是，如果 + 的其中一个操作数是字符串（或者通过以上步骤最终得到字符串），则执行字符串拼接，否则执行数字\n加法。\n \n那么对于除了加法的运算符来说，只要其中一方是数字，那么另一方就会被转为数字。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="_25-什么情况下会发生布尔值的隐式强制类型转换" tabindex="-1"><a class="header-anchor" href="#_25-什么情况下会发生布尔值的隐式强制类型转换" aria-hidden="true">#</a> 25. 什么情况下会发生布尔值的隐式强制类型转换？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>（1） if (..) 语句中的条件判断表达式。\n（2） for ( .. ; .. ; .. ) 语句中的条件判断表达式（第二个）。\n（3） while (..) 和 do..while(..) 循环中的条件判断表达式。\n（4） ? : 中的条件判断表达式。\n（5） 逻辑运算符 ||（逻辑或）和 &amp;&amp;（逻辑与）左边的操作数（作为条件判断表达式）。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="_26-和-操作符的返回值" tabindex="-1"><a class="header-anchor" href="#_26-和-操作符的返回值" aria-hidden="true">#</a> 26. || 和 &amp;&amp; 操作符的返回值？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code> 和 &amp;&amp; 首先会对第一个操作数执行条件判断，如果其不是布尔值就先进行 ToBoolean 强制类型转换，然后再执行条件\n判断。\n \n对于 || 来说，如果条件判断结果为 true 就返回第一个操作数的值，如果为 false 就返回第二个操作数的值。\n \n&amp;&amp; 则相反，如果条件判断结果为 true 就返回第二个操作数的值，如果为 false 就返回第一个操作数的值。\n \n|| 和 &amp;&amp; 返回它们其中一个操作数的值，而非条件判断的结果\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="_27-symbol-值的强制类型转换" tabindex="-1"><a class="header-anchor" href="#_27-symbol-值的强制类型转换" aria-hidden="true">#</a> 27. Symbol 值的强制类型转换？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>ES6 允许从符号到字符串的显式强制类型转换，然而隐式强制类型转换会产生错误。\n \nSymbol 值不能够被强制类型转换为数字（显式和隐式都会产生错误），但可以被强制类型转换为布尔值（显式和隐式结果\n都是 true ）。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="_28-操作符的强制类型转换规则" tabindex="-1"><a class="header-anchor" href="#_28-操作符的强制类型转换规则" aria-hidden="true">#</a> 28. 操作符的强制类型转换规则？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>（1）字符串和数字之间的相等比较，将字符串转换为数字之后再进行比较。\n \n（2）其他类型和布尔类型之间的相等比较，先将布尔值转换为数字后，再应用其他规则进行比较。\n \n（3）null 和 undefined 之间的相等比较，结果为真。其他值和它们进行比较都返回假值。\n \n（4）对象和非对象之间的相等比较，对象先调用 ToPrimitive 抽象操作后，再进行比较。\n \n（5）如果一个操作值为 NaN ，则相等比较返回 false（ NaN 本身也不等于 NaN ）。\n \n（6）如果两个操作值都是对象，则比较它们是不是指向同一个对象。如果两个操作数都指向同一个对象，则相等操作符返回 true，否则，返回 false。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>详细资料可以参考：\n<a href="https://www.jeffjade.com/2015/08/28/2015-09-02-js-string-compare/" target="_blank" rel="noopener noreferrer">《JavaScript 字符串间的比较》<ExternalLinkIcon/></a></p>\n<h2 id="_29-如何将字符串转化为数字-例如-12-3b" tabindex="-1"><a class="header-anchor" href="#_29-如何将字符串转化为数字-例如-12-3b" aria-hidden="true">#</a> 29. 如何将字符串转化为数字，例如 \'12.3b\'?</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>（1）使用 Number() 方法，前提是所包含的字符串不包含不合法字符。\n \n（2）使用 parseInt() 方法，parseInt() 函数可解析一个字符串，并返回一个整数。还可以设置要解析的数字的基数。当基数的值为 0，或没有设置该参数时，parseInt() 会根据 string 来判断数字的基数。\n \n（3）使用 parseFloat() 方法，该函数解析一个字符串参数并返回一个浮点数。\n \n（4）使用 + 操作符的隐式转换。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>详细资料可以参考：\n<a href="https://blog.csdn.net/m0_38099607/article/details/72638678" target="_blank" rel="noopener noreferrer">《详解 JS 中 Number()、parseInt() 和 parseFloat() 的区别》<ExternalLinkIcon/></a></p>\n<h2 id="_30-如何将浮点数点左边的数每三位添加一个逗号-如-12000000-11-转化为『12-000-000-11』" tabindex="-1"><a class="header-anchor" href="#_30-如何将浮点数点左边的数每三位添加一个逗号-如-12000000-11-转化为『12-000-000-11』" aria-hidden="true">#</a> 30. 如何将浮点数点左边的数每三位添加一个逗号，如 12000000.11 转化为『12,000,000.11』?</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>function format(number) {\n  return number &amp;&amp; number.replace(/(?!^)(?=(\\d{3})+\\.)/g, ",");\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="_31-常用正则表达式" tabindex="-1"><a class="header-anchor" href="#_31-常用正则表达式" aria-hidden="true">#</a> 31. 常用正则表达式</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>// （1）匹配 16 进制颜色值\nvar regex = /#([0-9a-fA-F]{6}|[0-9a-fA-F]{3})/g;\n \n// （2）匹配日期，如 yyyy-mm-dd 格式\nvar regex = /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/;\n \n// （3）匹配 qq 号\nvar regex = /^[1-9][0-9]{4,10}$/g;\n \n// （4）手机号码正则\nvar regex = /^1[34578]\\d{9}$/g;\n \n// （5）用户名正则\nvar regex = /^[a-zA-Z\\$][a-zA-Z0-9_\\$]{4,16}$/;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>详细资料可以参考：\n<a href="http://caibaojian.com/form-regexp.html" target="_blank" rel="noopener noreferrer">《前端表单验证常用的 15 个 JS 正则表达式》<ExternalLinkIcon/></a>\n<a href="https://www.jianshu.com/p/1cb5229325a7" target="_blank" rel="noopener noreferrer">《JS 常用正则汇总》<ExternalLinkIcon/></a></p>\n<h2 id="_32-生成随机数的各种方法" tabindex="-1"><a class="header-anchor" href="#_32-生成随机数的各种方法" aria-hidden="true">#</a> 32. 生成随机数的各种方法？</h2>\n<p><a href="http://www.hangge.com/blog/cache/detail_1872.html" target="_blank" rel="noopener noreferrer">《JS - 生成随机数的方法汇总（不同范围、类型的随机数）》<ExternalLinkIcon/></a></p>\n<h2 id="_33-如何实现数组的随机排序" tabindex="-1"><a class="header-anchor" href="#_33-如何实现数组的随机排序" aria-hidden="true">#</a> 33. 如何实现数组的随机排序？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>// （1）使用数组 sort 方法对数组元素随机排序，让 Math.random() 出来的数与 0.5 比较，如果大于就返回 1 交换位置，如果小于就返回 -1，不交换位置。\n \nfunction randomSort(a, b) {\n  return Math.random() > 0.5 ? -1 : 1;\n}\n \n//  缺点：每个元素被派到新数组的位置不是随机的，原因是 sort() 方法是依次比较的。\n \n// （2）随机从原数组抽取一个元素，加入到新数组\n \nfunction randomSort(arr) {\n  var result = [];\n \n  while (arr.length > 0) {\n    var randomIndex = Math.floor(Math.random() * arr.length);\n    result.push(arr[randomIndex]);\n    arr.splice(randomIndex, 1);\n  }\n \n  return result;\n}\n \n// （3）随机交换数组内的元素（洗牌算法类似）\n \nfunction randomSort(arr) {\n  var index,\n    randomIndex,\n    temp,\n    len = arr.length;\n \n  for (index = 0; index &lt; len; index++) {\n    randomIndex = Math.floor(Math.random() * (len - index)) + index;\n \n    temp = arr[index];\n    arr[index] = arr[randomIndex];\n    arr[randomIndex] = temp;\n  }\n \n  return arr;\n}\n \n// es6\nfunction randomSort(array) {\n  let length = array.length;\n \n  if (!Array.isArray(array) || length &lt;= 1) return;\n \n  for (let index = 0; index &lt; length - 1; index++) {\n    let randomIndex = Math.floor(Math.random() * (length - index)) + index;\n \n    [array[index], array[randomIndex]] = [array[randomIndex], array[index]];\n  }\n \n  return array;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br></div></div><p>详细资料可以参考：\n<a href="https://gaohaoyang.github.io/2016/10/16/shuffle-algorithm/#top" target="_blank" rel="noopener noreferrer">《Fisher and Yates 的原始版》<ExternalLinkIcon/></a>\n<a href="https://www.zhihu.com/question/32303195" target="_blank" rel="noopener noreferrer">《javascript 实现数组随机排序?》<ExternalLinkIcon/></a>\n<a href="https://www.w3cplus.com/javascript/how-to-randomize-shuffle-a-javascript-array.html" target="_blank" rel="noopener noreferrer">《JavaScript 学习笔记：数组随机排序》<ExternalLinkIcon/></a></p>\n<h2 id="_34-javascript-创建对象的几种方式" tabindex="-1"><a class="header-anchor" href="#_34-javascript-创建对象的几种方式" aria-hidden="true">#</a> 34. javascript 创建对象的几种方式？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>我们一般使用字面量的形式直接创建对象，但是这种创建方式对于创建大量相似对象的时候，会产生大量的重复代码。但 js\n和一般的面向对象的语言不同，在 ES6 之前它没有类的概念。但是我们可以使用函数来进行模拟，从而产生出可复用的对象\n创建方式，我了解到的方式有这么几种：\n \n（1）第一种是工厂模式，工厂模式的主要工作原理是用函数来封装创建对象的细节，从而通过调用函数来达到复用的目的。但是它有一个很大的问题就是创建出来的对象无法和某个类型联系起来，它只是简单的封装了复用代码，而没有建立起对象和类型间的关系。\n \n（2）第二种是构造函数模式。js 中每一个函数都可以作为构造函数，只要一个函数是通过 new 来调用的，那么我们就可以把它称为构造函数。执行构造函数首先会创建一个对象，然后将对象的原型指向构造函数的 prototype 属性，然后将执行上下文中的 this 指向这个对象，最后再执行整个函数，如果返回值不是对象，则返回新建的对象。因为 this 的值指向了新建的对象，因此我们可以使用 this 给对象赋值。构造函数模式相对于工厂模式的优点是，所创建的对象和构造函数建立起了联系，因此我们可以通过原型来识别对象的类型。但是构造函数存在一个缺点就是，造成了不必要的函数对象的创建，因为在 js 中函数也是一个对象，因此如果对象属性中如果包含函数的话，那么每次我们都会新建一个函数对象，浪费了不必要的内存空间，因为函数是所有的实例都可以通用的。\n \n（3）第三种模式是原型模式，因为每一个函数都有一个 prototype 属性，这个属性是一个对象，它包含了通过构造函数创建的所有实例都能共享的属性和方法。因此我们可以使用原型对象来添加公用属性和方法，从而实现代码的复用。这种方式相对于构造函数模式来说，解决了函数对象的复用问题。但是这种模式也存在一些问题，一个是没有办法通过传入参数来初始化值，另一个是如果存在一个引用类型如 Array 这样的值，那么所有的实例将共享一个对象，一个实例对引用类型值的改变会影响所有的实例。\n \n（4）第四种模式是组合使用构造函数模式和原型模式，这是创建自定义类型的最常见方式。因为构造函数模式和原型模式分开使用都存在一些问题，因此我们可以组合使用这两种模式，通过构造函数来初始化对象的属性，通过原型对象来实现函数方法的复用。这种方法很好的解决了两种模式单独使用时的缺点，但是有一点不足的就是，因为使用了两种不同的模式，所以对于代码的封装性不够好。\n \n（5）第五种模式是动态原型模式，这一种模式将原型方法赋值的创建过程移动到了构造函数的内部，通过对属性是否存在的判断，可以实现仅在第一次调用函数时对原型对象赋值一次的效果。这一种方式很好地对上面的混合模式进行了封装。\n \n（6）第六种模式是寄生构造函数模式，这一种模式和工厂模式的实现基本相同，我对这个模式的理解是，它主要是基于一个已有的类型，在实例化时对实例化的对象进行扩展。这样既不用修改原来的构造函数，也达到了扩展对象的目的。它的一个缺点和工厂模式一样，无法实现对象的识别。\n \n嗯我目前了解到的就是这么几种方式。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>详细资料可以参考：\n<a href="http://cavszhouyou.top/JavaScript%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E4%B9%8B%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA.html" target="_blank" rel="noopener noreferrer">《JavaScript 深入理解之对象创建》<ExternalLinkIcon/></a></p>\n<h2 id="_35-javascript-继承的几种实现方式" tabindex="-1"><a class="header-anchor" href="#_35-javascript-继承的几种实现方式" aria-hidden="true">#</a> 35. JavaScript 继承的几种实现方式？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>我了解的 js 中实现继承的几种方式有：\n \n（1）第一种是以原型链的方式来实现继承，但是这种实现方式存在的缺点是，在包含有引用类型的数据时，会被所有的实例对象所共享，容易造成修改的混乱。还有就是在创建子类型的时候不能向超类型传递参数。\n \n（2）第二种方式是使用借用构造函数的方式，这种方式是通过在子类型的函数中调用超类型的构造函数来实现的，这一种方法解决了不能向超类型传递参数的缺点，但是它存在的一个问题就是无法实现函数方法的复用，并且超类型原型定义的方法子类型也没有办法访问到。\n \n（3）第三种方式是组合继承，组合继承是将原型链和借用构造函数组合起来使用的一种方式。通过借用构造函数的方式来实现类型的属性的继承，通过将子类型的原型设置为超类型的实例来实现方法的继承。这种方式解决了上面的两种模式单独使用时的问题，但是由于我们是以超类型的实例来作为子类型的原型，所以调用了两次超类的构造函数，造成了子类型的原型中多了很多不必要的属性。\n \n（4）第四种方式是原型式继承，原型式继承的主要思路就是基于已有的对象来创建新的对象，实现的原理是，向函数中传入一个对象，然后返回一个以这个对象为原型的对象。这种继承的思路主要不是为了实现创造一种新的类型，只是对某个对象实现一种简单继承，ES5 中定义的 Object.create() 方法就是原型式继承的实现。缺点与原型链方式相同。\n \n（5）第五种方式是寄生式继承，寄生式继承的思路是创建一个用于封装继承过程的函数，通过传入一个对象，然后复制一个对象的副本，然后对象进行扩展，最后返回这个对象。这个扩展的过程就可以理解是一种继承。这种继承的优点就是对一个简单对象实现继承，如果这个对象不是我们的自定义类型时。缺点是没有办法实现函数的复用。\n \n（6）第六种方式是寄生式组合继承，组合继承的缺点就是使用超类型的实例做为子类型的原型，导致添加了不必要的原型属性。寄生式组合继承的方式是使用超类型的原型的副本来作为子类型的原型，这样就避免了创建不必要的属性。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>详细资料可以参考：\n<a href="http://cavszhouyou.top/JavaScript%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E4%B9%8B%E7%BB%A7%E6%89%BF.html" target="_blank" rel="noopener noreferrer">《JavaScript 深入理解之继承》<ExternalLinkIcon/></a></p>\n<h2 id="_36-寄生式组合继承的实现" tabindex="-1"><a class="header-anchor" href="#_36-寄生式组合继承的实现" aria-hidden="true">#</a> 36. 寄生式组合继承的实现？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>function Person(name) {\n  this.name = name;\n}\n \nPerson.prototype.sayName = function() {\n  console.log("My name is " + this.name + ".");\n};\n \nfunction Student(name, grade) {\n  Person.call(this, name);\n  this.grade = grade;\n}\n \nStudent.prototype = Object.create(Person.prototype);\nStudent.prototype.constructor = Student;\n \nStudent.prototype.sayMyGrade = function() {\n  console.log("My grade is " + this.grade + ".");\n};\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h2 id="_37-javascript-的作用域链" tabindex="-1"><a class="header-anchor" href="#_37-javascript-的作用域链" aria-hidden="true">#</a> 37. Javascript 的作用域链？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>作用域链的作用是保证对执行环境有权访问的所有变量和函数的有序访问，通过作用域链，我们可以访问到外层环境的变量和\n函数。\n \n作用域链的本质上是一个指向变量对象的指针列表。变量对象是一个包含了执行环境中所有变量和函数的对象。作用域链的前\n端始终都是当前执行上下文的变量对象。全局执行上下文的变量对象（也就是全局对象）始终是作用域链的最后一个对象。\n \n当我们查找一个变量时，如果当前执行环境中没有找到，我们可以沿着作用域链向后查找。\n \n作用域链的创建过程跟执行上下文的建立有关....\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>详细资料可以参考：\n<a href="http://cavszhouyou.top/JavaScript%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E4%B9%8B%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE.html" target="_blank" rel="noopener noreferrer">《JavaScript 深入理解之作用域链》<ExternalLinkIcon/></a></p>\n<h2 id="_38-谈谈-this-对象的理解。" tabindex="-1"><a class="header-anchor" href="#_38-谈谈-this-对象的理解。" aria-hidden="true">#</a> 38. 谈谈 This 对象的理解。</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>this 是执行上下文中的一个属性，它指向最后一次调用这个方法的对象。在实际开发中，this 的指向可以通过四种调用模\n式来判断。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul>\n<li>\n<p>1.第一种是函数调用模式，当一个函数不是一个对象的属性时，直接作为函数来调用时，this 指向全局对象。</p>\n</li>\n<li>\n<p>2.第二种是方法调用模式，如果一个函数作为一个对象的方法来调用时，this 指向这个对象。</p>\n</li>\n<li>\n<p>3.第三种是构造器调用模式，如果一个函数用 new 调用时，函数执行前会新创建一个对象，this 指向这个新创建的对象。</p>\n</li>\n<li>\n<p>4.第四种是 apply 、 call 和 bind 调用模式，这三个方法都可以显示的指定调用函数的 this 指向。其中 apply 方法接收两个参数：一个是 this 绑定的对象，一个是参数数组。call 方法接收的参数，第一个是 this 绑定的对象，后面的其余参数是传入函数执行的参数。也就是说，在使用 call() 方法时，传递给函数的参数必须逐个列举出来。bind 方法通过传入一个对象，返回一个 this 绑定了传入对象的新函数。这个函数的 this 指向除了使用 new 时会被改变，其他情况下都不会改变。</p>\n</li>\n</ul>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>这四种方式，使用构造器调用模式的优先级最高，然后是 apply 、 call 和 bind 调用模式，然后是方法调用模式，然后\n是函数调用模式。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><a href="http://cavszhouyou.top/JavaScript%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E4%B9%8Bthis%E8%AF%A6%E8%A7%A3.html" target="_blank" rel="noopener noreferrer">《JavaScript 深入理解之 this 详解》<ExternalLinkIcon/></a></p>\n<h2 id="_39-eval-是做什么的" tabindex="-1"><a class="header-anchor" href="#_39-eval-是做什么的" aria-hidden="true">#</a> 39. eval 是做什么的？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>它的功能是把对应的字符串解析成 JS 代码并运行。\n \n应该避免使用 eval，不安全，非常耗性能（2次，一次解析成 js 语句，一次执行）。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>详细资料可以参考：\n<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/eval" target="_blank" rel="noopener noreferrer">《eval()》<ExternalLinkIcon/></a></p>\n<h2 id="_40-什么是-dom-和-bom" tabindex="-1"><a class="header-anchor" href="#_40-什么是-dom-和-bom" aria-hidden="true">#</a> 40. 什么是 DOM 和 BOM？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>DOM 指的是文档对象模型，它指的是把文档当做一个对象来对待，这个对象主要定义了处理网页内容的方法和接口。\n \nBOM 指的是浏览器对象模型，它指的是把浏览器当做一个对象来对待，这个对象主要定义了与浏览器进行交互的法和接口。BOM\n的核心是 window，而 window 对象具有双重角色，它既是通过 js 访问浏览器窗口的一个接口，又是一个 Global（全局）\n对象。这意味着在网页中定义的任何对象，变量和函数，都作为全局对象的一个属性或者方法存在。window 对象含有 locati\non 对象、navigator 对象、screen 对象等子对象，并且 DOM 的最根本的对象 document 对象也是 BOM 的 window 对\n象的子对象。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>详细资料可以参考：\n<a href="https://www.zhihu.com/question/33453164" target="_blank" rel="noopener noreferrer">《DOM, DOCUMENT, BOM, WINDOW 有什么区别?》<ExternalLinkIcon/></a>\n<a href="http://www.w3school.com.cn/jsref/dom_obj_window.asp" target="_blank" rel="noopener noreferrer">《Window 对象》<ExternalLinkIcon/></a>\n<a href="https://www.zhihu.com/question/20724662" target="_blank" rel="noopener noreferrer">《DOM 与 BOM 分别是什么，有何关联？》<ExternalLinkIcon/></a>\n<a href="https://segmentfault.com/a/1190000000654274#articleHeader21" target="_blank" rel="noopener noreferrer">《JavaScript 学习总结（三）BOM 和 DOM 详解》<ExternalLinkIcon/></a></p>\n<h2 id="_41-写一个通用的事件侦听器函数。" tabindex="-1"><a class="header-anchor" href="#_41-写一个通用的事件侦听器函数。" aria-hidden="true">#</a> 41. 写一个通用的事件侦听器函数。</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>const EventUtils = {\n  // 视能力分别使用dom0||dom2||IE方式 来绑定事件\n  // 添加事件\n  addEvent: function(element, type, handler) {\n    if (element.addEventListener) {\n      element.addEventListener(type, handler, false);\n    } else if (element.attachEvent) {\n      element.attachEvent("on" + type, handler);\n    } else {\n      element["on" + type] = handler;\n    }\n  },\n \n  // 移除事件\n  removeEvent: function(element, type, handler) {\n    if (element.removeEventListener) {\n      element.removeEventListener(type, handler, false);\n    } else if (element.detachEvent) {\n      element.detachEvent("on" + type, handler);\n    } else {\n      element["on" + type] = null;\n    }\n  },\n \n  // 获取事件目标\n  getTarget: function(event) {\n    return event.target || event.srcElement;\n  },\n \n  // 获取 event 对象的引用，取到事件的所有信息，确保随时能使用 event\n  getEvent: function(event) {\n    return event || window.event;\n  },\n \n  // 阻止事件（主要是事件冒泡，因为 IE 不支持事件捕获）\n  stopPropagation: function(event) {\n    if (event.stopPropagation) {\n      event.stopPropagation();\n    } else {\n      event.cancelBubble = true;\n    }\n  },\n \n  // 取消事件的默认行为\n  preventDefault: function(event) {\n    if (event.preventDefault) {\n      event.preventDefault();\n    } else {\n      event.returnValue = false;\n    }\n  }\n};\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br></div></div><p>详细资料可以参考：\n<a href="https://segmentfault.com/a/1190000006934031#articleHeader6" target="_blank" rel="noopener noreferrer">《JS 事件模型》<ExternalLinkIcon/></a></p>\n<h2 id="_42-事件是什么-ie-与火狐的事件机制有什么区别-如何阻止冒泡" tabindex="-1"><a class="header-anchor" href="#_42-事件是什么-ie-与火狐的事件机制有什么区别-如何阻止冒泡" aria-hidden="true">#</a> 42. 事件是什么？IE 与火狐的事件机制有什么区别？ 如何阻止冒泡？</h2>\n<ul>\n<li>\n<p>1.事件是用户操作网页时发生的交互动作，比如 click/move， 事件除了用户触发的动作外，还可以是文档加载，窗口滚动和大小调整。事件被封装成一个 event 对象，包含了该事件发生时的所有相关信息（ event 的属性）以及可以对事件进行的操作（ event 的方法）。</p>\n</li>\n<li>\n<p>2.事件处理机制：IE 支持事件冒泡、Firefox 同时支持两种事件模型，也就是：事件冒泡和事件捕获。</p>\n</li>\n<li>\n<p>3.event.stopPropagation() 或者 ie 下的方法 event.cancelBubble = true;</p>\n</li>\n</ul>\n<p>详细资料可以参考：\n<a href="https://www.cnblogs.com/lvdabao/p/3265870.html" target="_blank" rel="noopener noreferrer">《Javascript 事件模型系列（一）事件及事件的三种模型》<ExternalLinkIcon/></a>\n<a href="https://blog.csdn.net/wuseyukui/article/details/13771493" target="_blank" rel="noopener noreferrer">《Javascript 事件模型：事件捕获和事件冒泡》<ExternalLinkIcon/></a></p>\n<h2 id="_43-三种事件模型是什么" tabindex="-1"><a class="header-anchor" href="#_43-三种事件模型是什么" aria-hidden="true">#</a> 43. 三种事件模型是什么？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>事件是用户操作网页时发生的交互动作或者网页本身的一些操作，现代浏览器一共有三种事件模型。\n \n第一种事件模型是最早的 DOM0 级模型，这种模型不会传播，所以没有事件流的概念，但是现在有的浏览器支持以冒泡的方式实\n现，它可以在网页中直接定义监听函数，也可以通过 js 属性来指定监听函数。这种方式是所有浏览器都兼容的。\n \n第二种事件模型是 IE 事件模型，在该事件模型中，一次事件共有两个过程，事件处理阶段，和事件冒泡阶段。事件处理阶段会首先执行目标元素绑定的监听事件。然后是事件冒泡阶段，冒泡指的是事件从目标元素冒泡到 document，依次检查经过的节点是否绑定了事件监听函数，如果有则执行。这种模型通过 attachEvent 来添加监听函数，可以添加多个监听函数，会按顺序依次执行。\n \n第三种是 DOM2 级事件模型，在该事件模型中，一次事件共有三个过程，第一个过程是事件捕获阶段。捕获指的是事件从 document 一直向下传播到目标元素，依次检查经过的节点是否绑定了事件监听函数，如果有则执行。后面两个阶段和 IE 事件模型的两个阶段相同。这种事件模型，事件绑定的函数是 addEventListener，其中第三个参数可以指定事件是否在捕获阶段执行。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>详细资料可以参考：\n<a href="https://blog.csdn.net/u013217071/article/details/77613706" target="_blank" rel="noopener noreferrer">《一个 DOM 元素绑定多个事件时，先执行冒泡还是捕获》<ExternalLinkIcon/></a></p>\n<h2 id="_44-事件委托是什么" tabindex="-1"><a class="header-anchor" href="#_44-事件委托是什么" aria-hidden="true">#</a> 44. 事件委托是什么？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>事件委托本质上是利用了浏览器事件冒泡的机制。因为事件在冒泡过程中会上传到父节点，并且父节点可以通过事件对象获取到\n目标节点，因此可以把子节点的监听函数定义在父节点上，由父节点的监听函数统一处理多个子元素的事件，这种方式称为事件代理。\n \n使用事件代理我们可以不必要为每一个子元素都绑定一个监听事件，这样减少了内存上的消耗。并且使用事件代理我们还可以实现事件的动态绑定，比如说新增了一个子节点，我们并不需要单独地为它添加一个监听事件，它所发生的事件会交给父元素中的监听函数来处理。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>详细资料可以参考：\n<a href="https://zhuanlan.zhihu.com/p/26536815" target="_blank" rel="noopener noreferrer">《JavaScript 事件委托详解》<ExternalLinkIcon/></a></p>\n<h2 id="_45-1-2-3-map-parseint-答案是多少" tabindex="-1"><a class="header-anchor" href="#_45-1-2-3-map-parseint-答案是多少" aria-hidden="true">#</a> 45. [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;].map(parseInt) 答案是多少？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>parseInt() 函数能解析一个字符串，并返回一个整数，需要两个参数 (val, radix)，其中 radix 表示要解析的数字的基数。（该值介于 2 ~ 36 之间，并且字符串中的数字不能大于 radix 才能正确返回数字结果值）。\n \n \n此处 map 传了 3 个参数 (element, index, array)，默认第三个参数被忽略掉，因此三次传入的参数分别为 "1-0", "2-1", "3-2"\n \n因为字符串的值不能大于基数，因此后面两次调用均失败，返回 NaN ，第一次基数为 0 ，按十进制解析返回 1。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>详细资料可以参考：\n[《为什么 <a href="https://blog.csdn.net/justjavac/article/details/19473199" target="_blank" rel="noopener noreferrer">&quot;1&quot;, &quot;2&quot;, &quot;3&quot;].map(parseInt) 返回 [1,NaN,NaN]？》<ExternalLinkIcon/></a></p>\n<h2 id="_46-什么是闭包-为什么要用它" tabindex="-1"><a class="header-anchor" href="#_46-什么是闭包-为什么要用它" aria-hidden="true">#</a> 46. 什么是闭包，为什么要用它？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>闭包是指有权访问另一个函数作用域中变量的函数，创建闭包的最常见的方式就是在一个函数内创建另一个函数，创建的函数可以\n访问到当前函数的局部变量。\n \n闭包有两个常用的用途。\n \n闭包的第一个用途是使我们在函数外部能够访问到函数内部的变量。通过使用闭包，我们可以通过在外部调用闭包函数，从而在外\n部访问到函数内部的变量，可以使用这种方法来创建私有变量。\n \n函数的另一个用途是使已经运行结束的函数上下文中的变量对象继续留在内存中，因为闭包函数保留了这个变量对象的引用，所以\n这个变量对象不会被回收。\n \n其实闭包的本质就是作用域链的一个特殊的应用，只要了解了作用域链的创建过程，就能够理解闭包的实现原理。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>详细资料可以参考：\n<a href="http://cavszhouyou.top/JavaScript%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E4%B9%8B%E9%97%AD%E5%8C%85.html" target="_blank" rel="noopener noreferrer">《JavaScript 深入理解之闭包》<ExternalLinkIcon/></a></p>\n<h2 id="_47-javascript-代码中的-use-strict-是什么意思-使用它区别是什么" tabindex="-1"><a class="header-anchor" href="#_47-javascript-代码中的-use-strict-是什么意思-使用它区别是什么" aria-hidden="true">#</a> 47. javascript 代码中的 &quot;use strict&quot;; 是什么意思 ? 使用它区别是什么？</h2>\n<p>相关知识点：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>use strict 是一种 ECMAscript5 添加的（严格）运行模式，这种模式使得 Javascript 在更严格的条件下运行。\n \n设立"严格模式"的目的，主要有以下几个：\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul>\n<li>消除 Javascript 语法的一些不合理、不严谨之处，减少一些怪异行为;</li>\n<li>消除代码运行的一些不安全之处，保证代码运行的安全；</li>\n<li>提高编译器效率，增加运行速度；</li>\n<li>为未来新版本的 Javascript 做好铺垫。</li>\n</ul>\n<p>区别：</p>\n<ul>\n<li>1.禁止使用 with 语句。</li>\n<li>2.禁止 this 关键字指向全局对象。</li>\n<li>3.对象不能有重名的属性。</li>\n</ul>\n<p>回答：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>use strict 指的是严格运行模式，在这种模式对 js 的使用添加了一些限制。比如说禁止 this 指向全局对象，还有禁止使\n用 with 语句等。设立严格模式的目的，主要是为了消除代码使用中的一些不安全的使用方式，也是为了消除 js 语法本身的一\n些不合理的地方，以此来减少一些运行时的怪异的行为。同时使用严格运行模式也能够提高编译的效率，从而提高代码的运行速度。\n我认为严格模式代表了 js 一种更合理、更安全、更严谨的发展方向。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>详细资料可以参考：\n<a href="http://www.ruanyifeng.com/blog/2013/01/javascript_strict_mode.html" target="_blank" rel="noopener noreferrer">《Javascript 严格模式详解》<ExternalLinkIcon/></a></p>\n<h2 id="_48-如何判断一个对象是否属于某个类" tabindex="-1"><a class="header-anchor" href="#_48-如何判断一个对象是否属于某个类" aria-hidden="true">#</a> 48. 如何判断一个对象是否属于某个类？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>第一种方式是使用 instanceof 运算符来判断构造函数的 prototype 属性是否出现在对象的原型链中的任何位置。\n \n第二种方式可以通过对象的 constructor 属性来判断，对象的 constructor 属性指向该对象的构造函数，但是这种方式不是很安全，因为 constructor 属性可以被改写。\n \n第三种方式，如果需要判断的是某个内置的引用类型的话，可以使用 Object.prototype.toString() 方法来打印对象的\n[[Class]] 属性来进行判断。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>详细资料可以参考：\n<a href="https://blog.csdn.net/haitunmin/article/details/78418522" target="_blank" rel="noopener noreferrer">《js 判断一个对象是否属于某一类》<ExternalLinkIcon/></a></p>\n<h2 id="_49-instanceof-的作用" tabindex="-1"><a class="header-anchor" href="#_49-instanceof-的作用" aria-hidden="true">#</a> 49. instanceof 的作用？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>// instanceof 运算符用于判断构造函数的 prototype 属性是否出现在对象的原型链中的任何位置。\n// 实现：\n \nfunction myInstanceof(left, right) {\n  let proto = Object.getPrototypeOf(left), // 获取对象的原型\n    prototype = right.prototype; // 获取构造函数的 prototype 对象\n \n  // 判断构造函数的 prototype 对象是否在对象的原型链上\n  while (true) {\n    if (!proto) return false;\n    if (proto === prototype) return true;\n \n    proto = Object.getPrototypeOf(proto);\n  }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>详细资料可以参考：\n<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/instanceof" target="_blank" rel="noopener noreferrer">《instanceof》<ExternalLinkIcon/></a></p>\n<h2 id="_50-new-操作符具体干了什么呢-如何实现" tabindex="-1"><a class="header-anchor" href="#_50-new-操作符具体干了什么呢-如何实现" aria-hidden="true">#</a> 50. new 操作符具体干了什么呢？如何实现？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>// （1）首先创建了一个新的空对象\n// （2）设置原型，将对象的原型设置为函数的 prototype 对象。\n// （3）让函数的 this 指向这个对象，执行构造函数的代码（为这个新对象添加属性）\n// （4）判断函数的返回值类型，如果是值类型，返回创建的对象。如果是引用类型，就返回这个引用类型的对象。\n \n// 实现:\n \nfunction objectFactory() {\n  let newObject = null,\n    constructor = Array.prototype.shift.call(arguments),\n    result = null;\n \n  // 参数判断\n  if (typeof constructor !== "function") {\n    console.error("type error");\n    return;\n  }\n \n  // 新建一个空对象，对象的原型为构造函数的 prototype 对象\n  newObject = Object.create(constructor.prototype);\n \n  // 将 this 指向新建对象，并执行函数\n  result = constructor.apply(newObject, arguments);\n \n  // 判断返回对象\n  let flag =\n    result &amp;&amp; (typeof result === "object" || typeof result === "function");\n \n  // 判断返回结果\n  return flag ? result : newObject;\n}\n \n// 使用方法\n// objectFactory(构造函数, 初始化参数);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><p>详细资料可以参考：\n<a href="https://segmentfault.com/a/1190000008576048" target="_blank" rel="noopener noreferrer">《new 操作符具体干了什么？》<ExternalLinkIcon/></a>\n<a href="https://github.com/mqyqingfeng/Blog/issues/13" target="_blank" rel="noopener noreferrer">《JavaScript 深入之 new 的模拟实现》<ExternalLinkIcon/></a></p>\n<h2 id="_51-javascript-中-有一个函数-执行时对象查找时-永远不会去查找原型-这个函数是" tabindex="-1"><a class="header-anchor" href="#_51-javascript-中-有一个函数-执行时对象查找时-永远不会去查找原型-这个函数是" aria-hidden="true">#</a> 51. Javascript 中，有一个函数，执行时对象查找时，永远不会去查找原型，这个函数是？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>hasOwnProperty\n \n所有继承了 Object 的对象都会继承到 hasOwnProperty 方法。这个方法可以用来检测一个对象是否含有特定的自身属性，和\nin 运算符不同，该方法会忽略掉那些从原型链上继承到的属性。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>详细资料可以参考：\n<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty" target="_blank" rel="noopener noreferrer">《Object.prototype.hasOwnProperty()》<ExternalLinkIcon/></a></p>\n<h2 id="_52-对于-json-的了解" tabindex="-1"><a class="header-anchor" href="#_52-对于-json-的了解" aria-hidden="true">#</a> 52. 对于 JSON 的了解？</h2>\n<p>相关知识点：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>JSON 是一种数据交换格式，基于文本，优于轻量，用于交换数据。\n \nJSON 可以表示数字、布尔值、字符串、null、数组（值的有序序列），以及由这些值（或数组、对象）所组成的对象（字符串与\n值的映射）。\n \nJSON 使用 JavaScript 语法，但是 JSON 格式仅仅是一个文本。文本可以被任何编程语言读取及作为数据格式传递。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>回答：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>JSON 是一种基于文本的轻量级的数据交换格式。它可以被任何的编程语言读取和作为数据格式来传递。\n \n在项目开发中，我们使用 JSON 作为前后端数据交换的方式。在前端我们通过将一个符合 JSON 格式的数据结构序列化为 JSON 字符串，然后将它传递到后端，后端通过 JSON 格式的字符串解析后生成对应的数据结构，以此来实现前后端数据的一个传递。\n \n因为 JSON 的语法是基于 js 的，因此很容易将 JSON 和 js 中的对象弄混，但是我们应该注意的是 JSON 和 js 中的对象不是一回事，JSON 中对象格式更加严格，比如说在 JSON 中属性值不能为函数，不能出现 NaN 这样的属性值等，因此大多数的 js 对象是不符合 JSON 对象的格式的。\n \n在 js 中提供了两个函数来实现 js 数据结构和 JSON 格式的转换处理，一个是 JSON.stringify 函数，通过传入一个符合 JSON 格式的数据结构，将其转换为一个 JSON 字符串。如果传入的数据结构不符合 JSON 格式，那么在序列化的时候会对这些值进行对应的特殊处理，使其符合规范。在前端向后端发送数据时，我们可以调用这个函数将数据对象转化为 JSON 格式的字符串。\n \n另一个函数 JSON.parse() 函数，这个函数用来将 JSON 格式的字符串转换为一个 js 数据结构，如果传入的字符串不是标准的 JSON 格式的字符串的话，将会抛出错误。当我们从后端接收到 JSON 格式的字符串时，我们可以通过这个方法来将其解析为一个 js 数据结构，以此来进行数据的访问。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>详细资料可以参考：\n<a href="https://my.oschina.net/u/3284240/blog/874368" target="_blank" rel="noopener noreferrer">《深入了解 JavaScript 中的 JSON 》<ExternalLinkIcon/></a></p>\n<h2 id="_53-foreach-call-function-a-a-style-outline-1px-solid-math-random-1-24-tostring-16-能解释一下这段代码的意思吗" tabindex="-1"><a class="header-anchor" href="#_53-foreach-call-function-a-a-style-outline-1px-solid-math-random-1-24-tostring-16-能解释一下这段代码的意思吗" aria-hidden="true">#</a> 53. [].forEach.call($$(&quot;<em>&quot;),function(a){a.style.outline=&quot;1px solid #&quot;+(<s>(Math.random()</s></em>(1&lt;&lt;24))).toString(16)}) 能解释一下这段代码的意思吗？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>（1）选取页面所有 DOM 元素。在浏览器的控制台中可以使用$$()方法来获取页面中相应的元素，这是现代浏览器提供的一个命令行 API 相当于 document.querySelectorAll 方法。\n \n（2）循环遍历 DOM 元素\n \n（3）给元素添加 outline 。由于渲染的 outline 是不在 CSS 盒模型中的，所以为元素添加 outline 并不会影响元素的大小和页面的布局。\n \n（4）生成随机颜色函数。Math.random()*(1&lt;&lt;24) 可以得到 0~2^24 - 1 之间的随机数，因为得到的是一个浮点数，但我们只需要整数部分，使用取反操作符 ~ 连续两次取反获得整数部分，然后再用 toString(16) 的方式，转换为一个十六进制的字符串。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>详细资料可以参考：\n<a href="https://2008winstar.iteye.com/blog/2128290" target="_blank" rel="noopener noreferrer">《通过一行代码学 JavaScript》<ExternalLinkIcon/></a></p>\n<h2 id="_54-js-延迟加载的方式有哪些" tabindex="-1"><a class="header-anchor" href="#_54-js-延迟加载的方式有哪些" aria-hidden="true">#</a> 54. js 延迟加载的方式有哪些？</h2>\n<p>相关知识点：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>js 延迟加载，也就是等页面加载完成之后再加载 JavaScript 文件。 js 延迟加载有助于提高页面加载速度。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>一般有以下几种方式：</p>\n<ul>\n<li>defer 属性</li>\n<li>async 属性</li>\n<li>动态创建 DOM 方式</li>\n<li>使用 setTimeout 延迟方法</li>\n<li>让 JS 最后加载</li>\n</ul>\n<p>回答：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>js 的加载、解析和执行会阻塞页面的渲染过程，因此我们希望 js 脚本能够尽可能的延迟加载，提高页面的渲染速度。\n \n我了解到的几种方式是：\n \n第一种方式是我们一般采用的是将 js 脚本放在文档的底部，来使 js 脚本尽可能的在最后来加载执行。\n \n第二种方式是给 js 脚本添加 defer 属性，这个属性会让脚本的加载与文档的解析同步解析，然后在文档解析完成后再执行这个脚本文件，这样的话就能使页面的渲染不被阻塞。多个设置了 defer 属性的脚本按规范来说最后是顺序执行的，但是在一些浏览器中可能不是这样。\n \n第三种方式是给 js 脚本添加 async 属性，这个属性会使脚本异步加载，不会阻塞页面的解析过程，但是当脚本加载完成后立即执行 js 脚本，这个时候如果文档没有解析完成的话同样会阻塞。多个 async 属性的脚本的执行顺序是不可预测的，一般不会按照代码的顺序依次执行。\n \n第四种方式是动态创建 DOM 标签的方式，我们可以对文档的加载事件进行监听，当文档加载完成后再动态的创建 script 标签来引入 js 脚本。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>详细资料可以参考：\n<a href="https://blog.csdn.net/meijory/article/details/76389762" target="_blank" rel="noopener noreferrer">《JS 延迟加载的几种方式》<ExternalLinkIcon/></a>\n<a href="http://www.w3school.com.cn/html5/att_script_async.asp" target="_blank" rel="noopener noreferrer">《HTML 5  async 属性》<ExternalLinkIcon/></a></p>\n<h2 id="_55-ajax-是什么-如何创建一个-ajax" tabindex="-1"><a class="header-anchor" href="#_55-ajax-是什么-如何创建一个-ajax" aria-hidden="true">#</a> 55. Ajax 是什么? 如何创建一个 Ajax？</h2>\n<p>相关知识点：</p>\n<p>2005 年 2 月，AJAX 这个词第一次正式提出，它是 Asynchronous JavaScript and XML 的缩写，指的是通过 JavaScript 的\n异步通信，从服务器获取 XML 文档从中提取数据，再更新当前网页的对应部分，而不用刷新整个网页。</p>\n<p>具体来说，AJAX 包括以下几个步骤。</p>\n<ul>\n<li>1.创建 XMLHttpRequest 对象，也就是创建一个异步调用对象</li>\n<li>2.创建一个新的 HTTP 请求，并指定该 HTTP 请求的方法、URL 及验证信息</li>\n<li>3.设置响应 HTTP 请求状态变化的函数</li>\n<li>4.发送 HTTP 请求</li>\n<li>5.获取异步调用返回的数据</li>\n<li>6.使用 JavaScript 和 DOM 实现局部刷新</li>\n</ul>\n<p>一般实现：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>const SERVER_URL = "/server";\n \nlet xhr = new XMLHttpRequest();\n \n// 创建 Http 请求\nxhr.open("GET", SERVER_URL, true);\n \n// 设置状态监听函数\nxhr.onreadystatechange = function() {\n  if (this.readyState !== 4) return;\n \n  // 当请求成功时\n  if (this.status === 200) {\n    handle(this.response);\n  } else {\n    console.error(this.statusText);\n  }\n};\n \n// 设置请求失败时的监听函数\nxhr.onerror = function() {\n  console.error(this.statusText);\n};\n \n// 设置请求头信息\nxhr.responseType = "json";\nxhr.setRequestHeader("Accept", "application/json");\n \n// 发送 Http 请求\nxhr.send(null);\n \n// promise 封装实现：\n \nfunction getJSON(url) {\n  // 创建一个 promise 对象\n  let promise = new Promise(function(resolve, reject) {\n    let xhr = new XMLHttpRequest();\n \n    // 新建一个 http 请求\n    xhr.open("GET", url, true);\n \n    // 设置状态的监听函数\n    xhr.onreadystatechange = function() {\n      if (this.readyState !== 4) return;\n \n      // 当请求成功或失败时，改变 promise 的状态\n      if (this.status === 200) {\n        resolve(this.response);\n      } else {\n        reject(new Error(this.statusText));\n      }\n    };\n \n    // 设置错误监听函数\n    xhr.onerror = function() {\n      reject(new Error(this.statusText));\n    };\n \n    // 设置响应的数据类型\n    xhr.responseType = "json";\n \n    // 设置请求头信息\n    xhr.setRequestHeader("Accept", "application/json");\n \n    // 发送 http 请求\n    xhr.send(null);\n  });\n \n  return promise;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br></div></div><p>回答：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>我对 ajax 的理解是，它是一种异步通信的方法，通过直接由 js 脚本向服务器发起 http 通信，然后根据服务器返回的数据，更新网页的相应部分，而不用刷新整个页面的一种方法。\n \n创建一个 ajax 有这样几个步骤\n \n首先是创建一个 XMLHttpRequest 对象。\n \n然后在这个对象上使用 open 方法创建一个 http 请求，open 方法所需要的参数是请求的方法、请求的地址、是否异步和用户的认证信息。\n \n在发起请求前，我们可以为这个对象添加一些信息和监听函数。比如说我们可以通过 setRequestHeader 方法来为请求添加头信息。我们还可以为这个对象添加一个状态监听函数。一个 XMLHttpRequest 对象一共有 5 个状态，当它的状态变化时会触发onreadystatechange 事件，我们可以通过设置监听函数，来处理请求成功后的结果。当对象的 readyState 变为 4 的时候，代表服务器返回的数据接收完成，这个时候我们可以通过判断请求的状态，如果状态是 2xx 或者 304 的话则代表返回正常。这个时候我们就可以通过 response 中的数据来对页面进行更新了。\n \n当对象的属性和监听函数设置完成后，最后我们调用 sent 方法来向服务器发起请求，可以传入参数作为发送的数据体。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>详细资料可以参考：\n<a href="https://wangdoc.com/javascript/bom/xmlhttprequest.html" target="_blank" rel="noopener noreferrer">《XMLHttpRequest 对象》<ExternalLinkIcon/></a>\n<a href="https://juejin.im/post/5acde23c5188255cb32e7e76" target="_blank" rel="noopener noreferrer">《从 ajax 到 fetch、axios》<ExternalLinkIcon/></a>\n<a href="https://juejin.im/post/5c160937f265da61180199b2" target="_blank" rel="noopener noreferrer">《Fetch 入门》<ExternalLinkIcon/></a>\n<a href="https://segmentfault.com/a/1190000003810652" target="_blank" rel="noopener noreferrer">《传统 Ajax 已死，Fetch 永生》<ExternalLinkIcon/></a></p>\n<h2 id="_56-谈一谈浏览器的缓存机制" tabindex="-1"><a class="header-anchor" href="#_56-谈一谈浏览器的缓存机制" aria-hidden="true">#</a> 56. 谈一谈浏览器的缓存机制？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>浏览器的缓存机制指的是通过在一段时间内保留已接收到的 web 资源的一个副本，如果在资源的有效时间内，发起了对这个资源的再一次请求，那么浏览器会直接使用缓存的副本，而不是向服务器发起请求。使用 web 缓存可以有效地提高页面的打开速度，减少不必要的网络带宽的消耗。\n \nweb 资源的缓存策略一般由服务器来指定，可以分为两种，分别是强缓存策略和协商缓存策略。\n \n使用强缓存策略时，如果缓存资源有效，则直接使用缓存资源，不必再向服务器发起请求。强缓存策略可以通过两种方式来设置，分别是 http 头信息中的 Expires 属性和 Cache-Control 属性。\n \n服务器通过在响应头中添加 Expires 属性，来指定资源的过期时间。在过期时间以内，该资源可以被缓存使用，不必再向服务器发送请求。这个时间是一个绝对时间，它是服务器的时间，因此可能存在这样的问题，就是客户端的时间和服务器端的时间不一致，或者用户可以对客户端时间进行修改的情况，这样就可能会影响缓存命中的结果。\n \nExpires 是 http1.0 中的方式，因为它的一些缺点，在 http 1.1 中提出了一个新的头部属性就是 Cache-Control 属性，\n它提供了对资源的缓存的更精确的控制。它有很多不同的值，常用的比如我们可以通过设置 max-age 来指定资源能够被缓存的时间\n的大小，这是一个相对的时间，它会根据这个时间的大小和资源第一次请求时的时间来计算出资源过期的时间，因此相对于 Expires\n来说，这种方式更加有效一些。常用的还有比如 private ，用来规定资源只能被客户端缓存，不能够代理服务器所缓存。还有如 n\no-store ，用来指定资源不能够被缓存，no-cache 代表该资源能够被缓存，但是立即失效，每次都需要向服务器发起请求。\n \n一般来说只需要设置其中一种方式就可以实现强缓存策略，当两种方式一起使用时，Cache-Control 的优先级要高于 Expires 。\n \n使用协商缓存策略时，会先向服务器发送一个请求，如果资源没有发生修改，则返回一个 304 状态，让浏览器使用本地的缓存副本。\n如果资源发生了修改，则返回修改后的资源。协商缓存也可以通过两种方式来设置，分别是 http 头信息中的 Etag 和 Last-Modified 属性。\n \n服务器通过在响应头中添加 Last-Modified 属性来指出资源最后一次修改的时间，当浏览器下一次发起请求时，会在请求头中添加一个 If-Modified-Since 的属性，属性值为上一次资源返回时的 Last-Modified 的值。当请求发送到服务器后服务器会通过这个属性来和资源的最后一次的修改时间来进行比较，以此来判断资源是否做了修改。如果资源没有修改，那么返回 304 状态，让客户端使用本地的缓存。如果资源已经被修改了，则返回修改后的资源。使用这种方法有一个缺点，就是 Last-Modified 标注的最后修改时间只能精确到秒级，如果某些文件在1秒钟以内，被修改多次的话，那么文件已将改变了但是 Last-Modified 却没有改变，\n这样会造成缓存命中的不准确。\n \n因为 Last-Modified 的这种可能发生的不准确性，http 中提供了另外一种方式，那就是 Etag 属性。服务器在返回资源的时候，在头信息中添加了 Etag 属性，这个属性是资源生成的唯一标识符，当资源发生改变的时候，这个值也会发生改变。在下一次资源请求时，浏览器会在请求头中添加一个 If-None-Match 属性，这个属性的值就是上次返回的资源的 Etag 的值。服务接收到请求后会根据这个值来和资源当前的 Etag 的值来进行比较，以此来判断资源是否发生改变，是否需要返回资源。通过这种方式，比 Last-Modified 的方式更加精确。\n \n当 Last-Modified 和 Etag 属性同时出现的时候，Etag 的优先级更高。使用协商缓存的时候，服务器需要考虑负载平衡的问题，因此多个服务器上资源的 Last-Modified 应该保持一致，因为每个服务器上 Etag 的值都不一样，因此在考虑负载平衡时，最好不要设置 Etag 属性。\n \n强缓存策略和协商缓存策略在缓存命中时都会直接使用本地的缓存副本，区别只在于协商缓存会向服务器发送一次请求。它们缓存不命中时，都会向服务器发送请求来获取资源。在实际的缓存机制中，强缓存策略和协商缓存策略是一起合作使用的。浏览器首先会根据请求的信息判断，强缓存是否命中，如果命中则直接使用资源。如果不命中则根据头信息向服务器发起请求，使用协商缓存，如果协商缓存命中的话，则服务器不返回资源，浏览器直接使用本地资源的副本，如果协商缓存不命中，则浏览器返回最新的资源给浏览器。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><p>详细资料可以参考：\n<a href="https://segmentfault.com/a/1190000012573337" target="_blank" rel="noopener noreferrer">《浅谈浏览器缓存》<ExternalLinkIcon/></a>\n<a href="https://juejin.im/post/5b9346dcf265da0aac6fbe57#heading-3" target="_blank" rel="noopener noreferrer">《前端优化：浏览器缓存技术介绍》<ExternalLinkIcon/></a>\n<a href="https://www.web-tinker.com/article/21221.html" target="_blank" rel="noopener noreferrer">《请求头中的 Cache-Control》<ExternalLinkIcon/></a>\n<a href="https://juejin.im/post/5c2d6c9ae51d450cf4195a08" target="_blank" rel="noopener noreferrer">《Cache-Control 字段值详解》<ExternalLinkIcon/></a></p>\n<h2 id="_57-ajax-解决浏览器缓存问题" tabindex="-1"><a class="header-anchor" href="#_57-ajax-解决浏览器缓存问题" aria-hidden="true">#</a> 57. Ajax 解决浏览器缓存问题？</h2>\n<ul>\n<li>\n<p>1.在 ajax 发送请求前加上 anyAjaxObj.setRequestHeader(&quot;If-Modified-Since&quot;,&quot;0&quot;)。</p>\n</li>\n<li>\n<p>2.在 ajax 发送请求前加上 anyAjaxObj.setRequestHeader(&quot;Cache-Control&quot;,&quot;no-cache&quot;)。</p>\n</li>\n<li>\n<p>3.在 URL 后面加上一个随机数： &quot;fresh=&quot; + Math.random();。</p>\n</li>\n<li>\n<p>4.在 URL 后面加上时间戳：&quot;nowtime=&quot; + new Date().getTime();。</p>\n</li>\n<li>\n<p>5.如果是使用 jQuery，直接这样就可以了$.ajaxSetup({cache:false})。这样页面的所有 ajax 都会执行这条语句就是不需要保存缓存记录。</p>\n</li>\n</ul>\n<p>详细资料可以参考：\n<a href="https://www.cnblogs.com/cwzqianduan/p/8632009.html" target="_blank" rel="noopener noreferrer">《Ajax 中浏览器的缓存问题解决方法》<ExternalLinkIcon/></a>\n<a href="https://segmentfault.com/a/1190000012573337" target="_blank" rel="noopener noreferrer">《浅谈浏览器缓存》<ExternalLinkIcon/></a></p>\n<h2 id="_58-同步和异步的区别" tabindex="-1"><a class="header-anchor" href="#_58-同步和异步的区别" aria-hidden="true">#</a> 58. 同步和异步的区别？</h2>\n<p>相关知识点：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>同步，可以理解为在执行完一个函数或方法之后，一直等待系统返回值或消息，这时程序是处于阻塞的，只有接收到返回的值或消息后才往下执行其他的命令。  \n \n异步，执行完函数或方法后，不必阻塞性地等待返回值或消息，只需要向系统委托一个异步过程，那么当系统接收到返回值或消息时，系统会自动触发委托的异步过程，从而完成一个完整的流程。 \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>回答：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>同步指的是当一个进程在执行某个请求的时候，如果这个请求需要等待一段时间才能返回，那么这个进程会一直等待下去，直到消息返\n回为止再继续向下执行。\n \n异步指的是当一个进程在执行某个请求的时候，如果这个请求需要等待一段时间才能返回，这个时候进程会继续往下执行，不会阻塞等\n待消息的返回，当消息返回时系统再通知进程进行处理。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>详细资料可以参考：\n<a href="https://blog.csdn.net/tennysonsky/article/details/45111623" target="_blank" rel="noopener noreferrer">《同步和异步的区别》<ExternalLinkIcon/></a></p>\n<h2 id="_59-什么是浏览器的同源政策" tabindex="-1"><a class="header-anchor" href="#_59-什么是浏览器的同源政策" aria-hidden="true">#</a> 59. 什么是浏览器的同源政策？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>我对浏览器的同源政策的理解是，一个域下的 js 脚本在未经允许的情况下，不能够访问另一个域的内容。这里的同源的指的是两个\n域的协议、域名、端口号必须相同，否则则不属于同一个域。\n \n同源政策主要限制了三个方面\n \n第一个是当前域下的 js 脚本不能够访问其他域下的 cookie、localStorage 和 indexDB。\n \n第二个是当前域下的 js 脚本不能够操作访问操作其他域下的 DOM。\n \n第三个是当前域下 ajax 无法发送跨域请求。\n \n同源政策的目的主要是为了保证用户的信息安全，它只是对 js 脚本的一种限制，并不是对浏览器的限制，对于一般的 img、或者\nscript 脚本请求都不会有跨域的限制，这是因为这些操作都不会通过响应结果来进行可能出现安全问题的操作。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="_60-如何解决跨域问题" tabindex="-1"><a class="header-anchor" href="#_60-如何解决跨域问题" aria-hidden="true">#</a> 60. 如何解决跨域问题？</h2>\n<p>相关知识点：</p>\n<ul>\n<li>\n<ol>\n<li>通过 jsonp 跨域</li>\n</ol>\n</li>\n<li>\n<ol>\n<li>document.domain + iframe 跨域</li>\n</ol>\n</li>\n<li>\n<ol>\n<li>location.hash + iframe</li>\n</ol>\n</li>\n<li>\n<ol>\n<li>window.name + iframe 跨域</li>\n</ol>\n</li>\n<li>\n<ol>\n<li>postMessage 跨域</li>\n</ol>\n</li>\n<li>\n<ol>\n<li>跨域资源共享（CORS)</li>\n</ol>\n</li>\n<li>\n<ol>\n<li>nginx 代理跨域</li>\n</ol>\n</li>\n<li>\n<ol>\n<li>nodejs 中间件代理跨域</li>\n</ol>\n</li>\n<li>\n<ol>\n<li>WebSocket 协议跨域</li>\n</ol>\n</li>\n</ul>\n<p>回答：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>解决跨域的方法我们可以根据我们想要实现的目的来划分。\n \n首先我们如果只是想要实现主域名下的不同子域名的跨域操作，我们可以使用设置 document.domain 来解决。\n \n（1）将 document.domain 设置为主域名，来实现相同子域名的跨域操作，这个时候主域名下的 cookie 就能够被子域名所访问。同时如果文档中含有主域名相同，子域名不同的 iframe 的话，我们也可以对这个 iframe 进行操作。\n \n如果是想要解决不同跨域窗口间的通信问题，比如说一个页面想要和页面的中的不同源的 iframe 进行通信的问题，我们可以使用 location.hash 或者 window.name 或者 postMessage 来解决。\n \n（2）使用 location.hash 的方法，我们可以在主页面动态的修改 iframe 窗口的 hash 值，然后在 iframe 窗口里实现监听函数来实现这样一个单向的通信。因为在 iframe 是没有办法访问到不同源的父级窗口的，所以我们不能直接修改父级窗口的 hash 值来实现通信，我们可以在 iframe 中再加入一个 iframe ，这个 iframe 的内容是和父级页面同源的，所以我们可以 window.parent.parent 来修改最顶级页面的 src，以此来实现双向通信。\n \n（3）使用 window.name 的方法，主要是基于同一个窗口中设置了 window.name 后不同源的页面也可以访问，所以不同源的子页面可以首先在 window.name 中写入数据，然后跳转到一个和父级同源的页面。这个时候级页面就可以访问同源的子页面中 window.name 中的数据了，这种方式的好处是可以传输的数据量大。\n \n（4）使用 postMessage 来解决的方法，这是一个 h5 中新增的一个 api。通过它我们可以实现多窗口间的信息传递，通过获取到指定窗口的引用，然后调用 postMessage 来发送信息，在窗口中我们通过对 message 信息的监听来接收信息，以此来实现不同源间的信息交换。\n \n如果是像解决 ajax 无法提交跨域请求的问题，我们可以使用 jsonp、cors、websocket 协议、服务器代理来解决问题。\n \n（5）使用 jsonp 来实现跨域请求，它的主要原理是通过动态构建 script  标签来实现跨域请求，因为浏览器对 script 标签的引入没有跨域的访问限制 。通过在请求的 url 后指定一个回调函数，然后服务器在返回数据的时候，构建一个 json 数据的包装，这个包装就是回调函数，然后返回给前端，前端接收到数据后，因为请求的是脚本文件，所以会直接执行，这样我们先前定义好的回调函数就可以被调用，从而实现了跨域请求的处理。这种方式只能用于 get 请求。\n \n（6）使用 CORS 的方式，CORS 是一个 W3C 标准，全称是"跨域资源共享"。CORS 需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，因此我们只需要在服务器端配置就行。浏览器将 CORS 请求分成两类：简单请求和非简单请求。对于简单请求，浏览器直接发出 CORS 请求。具体来说，就是会在头信息之中，增加一个 Origin 字段。Origin 字段用来说明本次请求来自哪个源。服务器根据这个值，决定是否同意这次请求。对于如果 Origin 指定的源，不在许可范围内，服务器会返回一个正常的 HTTP 回应。浏览器发现，这个回应的头信息没有包含 Access-Control-Allow-Origin 字段，就知道出错了，从而抛出一个错误，ajax 不会收到响应信息。如果成功的话会包含一些以 Access-Control- 开头的字段。\n \n非简单请求，浏览器会先发出一次预检请求，来判断该域名是否在服务器的白名单中，如果收到肯定回复后才会发起请求。\n \n（7）使用 websocket 协议，这个协议没有同源限制。\n \n（8）使用服务器来代理跨域的访问请求，就是有跨域的请求操作时发送请求给后端，让后端代为请求，然后最后将获取的结果发返回。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>详细资料可以参考：\n<a href="https://segmentfault.com/a/1190000011145364" target="_blank" rel="noopener noreferrer">《前端常见跨域解决方案（全）》<ExternalLinkIcon/></a>\n<a href="http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html" target="_blank" rel="noopener noreferrer">《浏览器同源政策及其规避方法》<ExternalLinkIcon/></a>\n<a href="https://juejin.im/entry/59feae9df265da43094488f6" target="_blank" rel="noopener noreferrer">《跨域，你需要知道的全在这里》<ExternalLinkIcon/></a>\n<a href="https://www.zhihu.com/question/31592553" target="_blank" rel="noopener noreferrer">《为什么 form 表单提交没有跨域问题，但 ajax 提交有跨域问题？》<ExternalLinkIcon/></a></p>\n<h2 id="_61-服务器代理转发时-该如何处理-cookie" tabindex="-1"><a class="header-anchor" href="#_61-服务器代理转发时-该如何处理-cookie" aria-hidden="true">#</a> 61. 服务器代理转发时，该如何处理 cookie？</h2>\n<p>详细资料可以参考：\n<a href="https://www.jianshu.com/p/5eab0f83e3b4" target="_blank" rel="noopener noreferrer">《深入浅出 Nginx》<ExternalLinkIcon/></a></p>\n<h2 id="_62-简单谈一下-cookie" tabindex="-1"><a class="header-anchor" href="#_62-简单谈一下-cookie" aria-hidden="true">#</a> 62. 简单谈一下 cookie ？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>我的理解是 cookie 是服务器提供的一种用于维护会话状态信息的数据，通过服务器发送到浏览器，浏览器保存在本地，当下一次有同源的请求时，将保存的 cookie 值添加到请求头部，发送给服务端。这可以用来实现记录用户登录状态等功能。cookie 一般可以存储 4k 大小的数据，并且只能够被同源的网页所共享访问。\n \n服务器端可以使用 Set-Cookie 的响应头部来配置 cookie 信息。一条cookie 包括了5个属性值 expires、domain、path、secure、HttpOnly。其中 expires 指定了 cookie 失效的时间，domain 是域名、path是路径，domain 和 path 一起限制了 cookie 能够被哪些 url 访问。secure 规定了 cookie 只能在确保安全的情况下传输，HttpOnly 规定了这个 cookie 只能被服务器访问，不能使用 js 脚本访问。\n \n在发生 xhr 的跨域请求的时候，即使是同源下的 cookie，也不会被自动添加到请求头部，除非显示地规定。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>详细资料可以参考：\n<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Cookies" target="_blank" rel="noopener noreferrer">《HTTP cookies》<ExternalLinkIcon/></a>\n<a href="https://segmentfault.com/a/1190000004556040" target="_blank" rel="noopener noreferrer">《聊一聊 cookie》<ExternalLinkIcon/></a></p>\n<h2 id="_63-模块化开发怎么做" tabindex="-1"><a class="header-anchor" href="#_63-模块化开发怎么做" aria-hidden="true">#</a> 63. 模块化开发怎么做？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>我对模块的理解是，一个模块是实现一个特定功能的一组方法。在最开始的时候，js 只实现一些简单的功能，所以并没有模块的概念\n，但随着程序越来越复杂，代码的模块化开发变得越来越重要。\n \n由于函数具有独立作用域的特点，最原始的写法是使用函数来作为模块，几个函数作为一个模块，但是这种方式容易造成全局变量的污\n染，并且模块间没有联系。\n \n后面提出了对象写法，通过将函数作为一个对象的方法来实现，这样解决了直接使用函数作为模块的一些缺点，但是这种办法会暴露所\n有的所有的模块成员，外部代码可以修改内部属性的值。\n \n现在最常用的是立即执行函数的写法，通过利用闭包来实现模块私有作用域的建立，同时不会对全局作用域造成污染。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>详细资料可以参考：\n<a href="https://juejin.im/post/5ab378c46fb9a028ce7b824f" target="_blank" rel="noopener noreferrer">《浅谈模块化开发》<ExternalLinkIcon/></a>\n<a href="http://www.ruanyifeng.com/blog/2012/10/javascript_module.html" target="_blank" rel="noopener noreferrer">《Javascript 模块化编程（一）：模块的写法》<ExternalLinkIcon/></a>\n<a href="https://juejin.im/post/5aaa37c8f265da23945f365c" target="_blank" rel="noopener noreferrer">《前端模块化：CommonJS，AMD，CMD，ES6》<ExternalLinkIcon/></a>\n<a href="http://es6.ruanyifeng.com/#docs/module" target="_blank" rel="noopener noreferrer">《Module 的语法》<ExternalLinkIcon/></a></p>\n<h2 id="_64-js-的几种模块规范" tabindex="-1"><a class="header-anchor" href="#_64-js-的几种模块规范" aria-hidden="true">#</a> 64. js 的几种模块规范？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>js 中现在比较成熟的有四种模块加载方案。\n \n第一种是 CommonJS 方案，它通过 require 来引入模块，通过 module.exports 定义模块的输出接口。这种模块加载方案是\n服务器端的解决方案，它是以同步的方式来引入模块的，因为在服务端文件都存储在本地磁盘，所以读取非常快，所以以同步的方式\n加载没有问题。但如果是在浏览器端，由于模块的加载是使用网络请求，因此使用异步加载的方式更加合适。\n \n第二种是 AMD 方案，这种方案采用异步加载的方式来加载模块，模块的加载不影响后面语句的执行，所有依赖这个模块的语句都定\n义在一个回调函数里，等到加载完成后再执行回调函数。require.js 实现了 AMD 规范。\n \n第三种是 CMD 方案，这种方案和 AMD 方案都是为了解决异步模块加载的问题，sea.js 实现了 CMD 规范。它和 require.js\n的区别在于模块定义时对依赖的处理不同和对依赖模块的执行时机的处理不同。参考60\n \n第四种方案是 ES6 提出的方案，使用 import 和 export 的形式来导入导出模块。这种方案和上面三种方案都不同。参考 61。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="_65-amd-和-cmd-规范的区别" tabindex="-1"><a class="header-anchor" href="#_65-amd-和-cmd-规范的区别" aria-hidden="true">#</a> 65. AMD 和 CMD 规范的区别？</h2>\n<p>它们之间的主要区别有两个方面。</p>\n<p>（1）第一个方面是在模块定义时对依赖的处理不同。AMD 推崇依赖前置，在定义模块的时候就要声明其依赖的模块。而 CMD 推崇\n就近依赖，只有在用到某个模块的时候再去 require。</p>\n<p>（2）第二个方面是对依赖模块的执行时机处理不同。首先 AMD 和 CMD 对于模块的加载方式都是异步加载，不过它们的区别在于\n模块的执行时机，AMD 在依赖模块加载完成后就直接执行依赖模块，依赖模块的执行顺序和我们书写的顺序不一定一致。而 CMD\n在依赖模块加载完成后并不执行，只是下载而已，等到所有的依赖模块都加载好后，进入回调函数逻辑，遇到 require 语句\n的时候才执行对应的模块，这样模块的执行顺序就和我们书写的顺序保持一致了。</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>// CMD\ndefine(function(require, exports, module) {\n  var a = require("./a");\n  a.doSomething();\n  // 此处略去 100 行\n  var b = require("./b"); // 依赖可以就近书写\n  b.doSomething();\n  // ...\n});\n \n// AMD 默认推荐\ndefine(["./a", "./b"], function(a, b) {\n  // 依赖必须一开始就写好\n  a.doSomething();\n  // 此处略去 100 行\n  b.doSomething();\n  // ...\n});\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>详细资料可以参考：\n<a href="https://juejin.im/post/5a422b036fb9a045211ef789" target="_blank" rel="noopener noreferrer">《前端模块化，AMD 与 CMD 的区别》<ExternalLinkIcon/></a></p>\n<h2 id="_66-es6-模块与-commonjs-模块、amd、cmd-的差异。" tabindex="-1"><a class="header-anchor" href="#_66-es6-模块与-commonjs-模块、amd、cmd-的差异。" aria-hidden="true">#</a> 66. ES6 模块与 CommonJS 模块、AMD、CMD 的差异。</h2>\n<ul>\n<li>\n<p>1.CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。CommonJS 模块输出的是值的拷贝，也就是说，一旦输出一个值，模块内部的变化就影响不到这个值。ES6 模块的运行机制与 CommonJS 不一样。JS 引擎对脚本静态分析的时候，遇到模块加载命令 import，就会生成一个只读引用。等到脚本真正执行时，再根据这个只读引用，到被加载的那个模块里面去取值。</p>\n</li>\n<li>\n<p>2.CommonJS 模块是运行时加载，ES6 模块是编译时输出接口。CommonJS 模块就是对象，即在输入时是先加载整个模块，生成一个对象，然后再从这个对象上面读取方法，这种加载称为“运行时加载”。而 ES6 模块不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成。</p>\n</li>\n</ul>\n<h2 id="_67-requirejs-的核心原理是什么-如何动态加载的-如何避免多次加载的-如何-缓存的" tabindex="-1"><a class="header-anchor" href="#_67-requirejs-的核心原理是什么-如何动态加载的-如何避免多次加载的-如何-缓存的" aria-hidden="true">#</a> 67. requireJS 的核心原理是什么？（如何动态加载的？如何避免多次加载的？如何 缓存的？）</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>require.js 的核心原理是通过动态创建 script 脚本来异步引入模块，然后对每个脚本的 load 事件进行监听，如果每个脚本都加载完成了，再调用回调函数。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>详细资料可以参考：\n<a href="https://github.com/HRFE/blog/issues/10" target="_blank" rel="noopener noreferrer">《requireJS 的用法和原理分析》<ExternalLinkIcon/></a>\n<a href="https://zhuanlan.zhihu.com/p/55039478" target="_blank" rel="noopener noreferrer">《requireJS 的核心原理是什么？》<ExternalLinkIcon/></a>\n<a href="https://www.cnblogs.com/dong-xu/p/7160919.html" target="_blank" rel="noopener noreferrer">《从 RequireJs 源码剖析脚本加载原理》<ExternalLinkIcon/></a>\n<a href="https://www.jianshu.com/p/5a39535909e4" target="_blank" rel="noopener noreferrer">《requireJS 原理分析》<ExternalLinkIcon/></a></p>\n<h2 id="_68-js-模块加载器的轮子怎么造-也就是如何实现一个模块加载器" tabindex="-1"><a class="header-anchor" href="#_68-js-模块加载器的轮子怎么造-也就是如何实现一个模块加载器" aria-hidden="true">#</a> 68. JS 模块加载器的轮子怎么造，也就是如何实现一个模块加载器？</h2>\n<p>详细资料可以参考：\n<a href="https://www.zhihu.com/question/21157540" target="_blank" rel="noopener noreferrer">《JS 模块加载器加载原理是怎么样的？》<ExternalLinkIcon/></a></p>\n<h2 id="_69-ecmascript6-怎么写-class-为什么会出现-class-这种东西" tabindex="-1"><a class="header-anchor" href="#_69-ecmascript6-怎么写-class-为什么会出现-class-这种东西" aria-hidden="true">#</a> 69. ECMAScript6 怎么写 class，为什么会出现 class 这种东西?</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>在我看来 ES6 新添加的 class 只是为了补充 js 中缺少的一些面向对象语言的特性，但本质上来说它只是一种语法糖，不是一个新的东西，其背后还是原型继承的思想。通过加入 class 可以有利于我们更好的组织代码。\n \n在 class 中添加的方法，其实是添加在类的原型上的。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>详细资料可以参考：\n<a href="https://www.zhihu.com/question/29789315" target="_blank" rel="noopener noreferrer">《ECMAScript 6 实现了 class，对 JavaScript 前端开发有什么意义？》<ExternalLinkIcon/></a>\n<a href="http://es6.ruanyifeng.com/#docs/class" target="_blank" rel="noopener noreferrer">《Class 的基本语法》<ExternalLinkIcon/></a></p>\n<h2 id="_70-documen-write-和-innerhtml-的区别" tabindex="-1"><a class="header-anchor" href="#_70-documen-write-和-innerhtml-的区别" aria-hidden="true">#</a> 70. documen.write 和 innerHTML 的区别？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>document.write 的内容会代替整个文档内容，会重写整个页面。\n \ninnerHTML 的内容只是替代指定元素的内容，只会重写页面中的部分内容。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>详细资料可以参考：\n<a href="https://www.nowcoder.com/questionTerminal/2c5d8105b2694d85b06eff85e871cf50" target="_blank" rel="noopener noreferrer">《简述 document.write 和 innerHTML 的区别。》<ExternalLinkIcon/></a></p>\n<h2 id="_71-dom-操作——怎样添加、移除、移动、复制、创建和查找节点" tabindex="-1"><a class="header-anchor" href="#_71-dom-操作——怎样添加、移除、移动、复制、创建和查找节点" aria-hidden="true">#</a> 71. DOM 操作——怎样添加、移除、移动、复制、创建和查找节点？</h2>\n<p>（1）创建新节点</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>createDocumentFragment(node);\ncreateElement(node);\ncreateTextNode(text);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>（2）添加、移除、替换、插入</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>appendChild(node)\nremoveChild(node)\nreplaceChild(new,old)\ninsertBefore(new,old)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>（3）查找</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>getElementById();\ngetElementsByName();\ngetElementsByTagName();\ngetElementsByClassName();\nquerySelector();\nquerySelectorAll();\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>（4）属性操作</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>getAttribute(key);\nsetAttribute(key, value);\nhasAttribute(key);\nremoveAttribute(key);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>详细资料可以参考：\n<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model/Introduction#DOM_interfaces" target="_blank" rel="noopener noreferrer">《DOM 概述》<ExternalLinkIcon/></a>\n<a href="https://harttle.land/2015/10/01/javascript-dom-api.html" target="_blank" rel="noopener noreferrer">《原生 JavaScript 的 DOM 操作汇总》<ExternalLinkIcon/></a>\n<a href="https://microzz.com/2017/04/06/jsdom/" target="_blank" rel="noopener noreferrer">《原生 JS 中 DOM 节点相关 API 合集》<ExternalLinkIcon/></a></p>\n<h2 id="_72-innerhtml-与-outerhtml-的区别" tabindex="-1"><a class="header-anchor" href="#_72-innerhtml-与-outerhtml-的区别" aria-hidden="true">#</a> 72. innerHTML 与 outerHTML 的区别？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>对于这样一个 HTML 元素：&lt;div>content&lt;br/>&lt;/div>。\n \ninnerHTML：内部 HTML，content&lt;br/>；\nouterHTML：外部 HTML，&lt;div>content&lt;br/>&lt;/div>；\ninnerText：内部文本，content ；\nouterText：内部文本，content ；\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="_73-call-和-apply-的区别" tabindex="-1"><a class="header-anchor" href="#_73-call-和-apply-的区别" aria-hidden="true">#</a> 73. .call() 和 .apply() 的区别？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>它们的作用一模一样，区别仅在于传入参数的形式的不同。\n \napply 接受两个参数，第一个参数指定了函数体内 this 对象的指向，第二个参数为一个带下标的集合，这个集合可以为数组，也可以为类数组，apply 方法把这个集合中的元素作为参数传递给被调用的函数。\n \ncall 传入的参数数量不固定，跟 apply 相同的是，第一个参数也是代表函数体内的 this 指向，从第二个参数开始往后，每个参数被依次传入函数。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>详细资料可以参考：\n<a href="https://juejin.im/entry/58d0a7b22f301e007e5a15ae" target="_blank" rel="noopener noreferrer">《apply、call 的区别和用途》<ExternalLinkIcon/></a></p>\n<h2 id="_74-javascript-类数组对象的定义" tabindex="-1"><a class="header-anchor" href="#_74-javascript-类数组对象的定义" aria-hidden="true">#</a> 74. JavaScript 类数组对象的定义？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>一个拥有 length 属性和若干索引属性的对象就可以被称为类数组对象，类数组对象和数组类似，但是不能调用数组的方法。\n \n常见的类数组对象有 arguments 和 DOM 方法的返回结果，还有一个函数也可以被看作是类数组对象，因为它含有 length\n属性值，代表可接收的参数个数。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>常见的类数组转换为数组的方法有这样几种：</p>\n<p>（1）通过 call 调用数组的 slice 方法来实现转换</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>Array.prototype.slice.call(arrayLike);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>（2）通过 call 调用数组的 splice 方法来实现转换</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>Array.prototype.splice.call(arrayLike, 0);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>（3）通过 apply 调用数组的 concat 方法来实现转换</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>Array.prototype.concat.apply([], arrayLike);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>（4）通过 Array.from 方法来实现转换</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>Array.from(arrayLike);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>详细的资料可以参考：\n<a href="https://github.com/mqyqingfeng/Blog/issues/14" target="_blank" rel="noopener noreferrer">《JavaScript 深入之类数组对象与 arguments》<ExternalLinkIcon/></a>\n<a href="https://segmentfault.com/a/1190000000415572" target="_blank" rel="noopener noreferrer">《javascript 类数组》<ExternalLinkIcon/></a>\n<a href="https://blog.lxxyx.cn/2016/05/07/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JavaScript%E7%B1%BB%E6%95%B0%E7%BB%84/" target="_blank" rel="noopener noreferrer">《深入理解 JavaScript 类数组》<ExternalLinkIcon/></a></p>\n<h2 id="_75-数组和对象有哪些原生方法-列举一下" tabindex="-1"><a class="header-anchor" href="#_75-数组和对象有哪些原生方法-列举一下" aria-hidden="true">#</a> 75. 数组和对象有哪些原生方法，列举一下？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>数组和字符串的转换方法：toString()、toLocalString()、join() 其中 join() 方法可以指定转换为字符串时的分隔符。\n \n数组尾部操作的方法 pop() 和 push()，push 方法可以传入多个参数。\n \n数组首部操作的方法 shift() 和 unshift() 重排序的方法 reverse() 和 sort()，sort() 方法可以传入一个函数来进行比较，传入前后两个值，如果返回值为正数，则交换两个参数的位置。\n \n数组连接的方法 concat() ，返回的是拼接好的数组，不影响原数组。\n \n数组截取办法 slice()，用于截取数组中的一部分返回，不影响原数组。\n \n数组插入方法 splice()，影响原数组查找特定项的索引的方法，indexOf() 和 lastIndexOf() 迭代方法 every()、some()、filter()、map() 和 forEach() 方法\n \n数组归并方法 reduce() 和 reduceRight() 方法\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>详细资料可以参考：\n<a href="http://cavszhouyou.top/JavaScript%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E4%B9%8BArray%E8%AF%A6%E8%A7%A3.html" target="_blank" rel="noopener noreferrer">《JavaScript 深入理解之 Array 类型详解》<ExternalLinkIcon/></a></p>\n<h2 id="_76-数组的-fill-方法" tabindex="-1"><a class="header-anchor" href="#_76-数组的-fill-方法" aria-hidden="true">#</a> 76. 数组的 fill 方法？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>fill() 方法用一个固定值填充一个数组中从起始索引到终止索引内的全部元素。不包括终止索引。\nfill 方法接受三个参数 value，start 以及 end，start 和 end 参数是可选的，其默认值分别为 0 和 this 对象的 length 属性值。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>详细资料可以参考：\n<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/fill" target="_blank" rel="noopener noreferrer">《Array.prototype.fill()》<ExternalLinkIcon/></a></p>\n<h2 id="_77-的长度" tabindex="-1"><a class="header-anchor" href="#_77-的长度" aria-hidden="true">#</a> 77. [,,,] 的长度？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>尾后逗号 （有时叫做“终止逗号”）在向 JavaScript 代码添加元素、参数、属性时十分有用。如果你想要添加新的属性，并且上一行已经使用了尾后逗号，你可以仅仅添加新的一行，而不需要修改上一行。这使得版本控制更加清晰，以及代码维护麻烦更少。\n \nJavaScript 一开始就支持数组字面值中的尾后逗号，随后向对象字面值（ECMAScript 5）中添加了尾后逗号。最近（ECMAS\ncript 2017），又将其添加到函数参数中。但是 JSON 不支持尾后逗号。\n \n如果使用了多于一个尾后逗号，会产生间隙。 带有间隙的数组叫做稀疏数组（密致数组没有间隙）。稀疏数组的长度为逗号的数\n量。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>详细资料可以参考：\n<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Trailing_commas" target="_blank" rel="noopener noreferrer">《尾后逗号》<ExternalLinkIcon/></a></p>\n<h2 id="_78-javascript-中的作用域与变量声明提升" tabindex="-1"><a class="header-anchor" href="#_78-javascript-中的作用域与变量声明提升" aria-hidden="true">#</a> 78. JavaScript 中的作用域与变量声明提升？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>变量提升的表现是，无论我们在函数中何处位置声明的变量，好像都被提升到了函数的首部，我们可以在变量声明前访问到而不会报错。\n \n造成变量声明提升的本质原因是 js 引擎在代码执行前有一个解析的过程，创建了执行上下文，初始化了一些代码执行时需要用到的对象。当我们访问一个变量时，我们会到当前执行上下文中的作用域链中去查找，而作用域链的首端指向的是当前执行上下文的变量对象，这个变量对象是执行上下文的一个属性，它包含了函数的形参、所有的函数和变量声明，这个对象的是在代码解析的时候创建的。这就是会出现变量声明提升的根本原因。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>详细资料可以参考：\n<a href="http://cavszhouyou.top/JavaScript%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E4%B9%8B%E5%8F%98%E9%87%8F%E5%AF%B9%E8%B1%A1.html" target="_blank" rel="noopener noreferrer">《JavaScript 深入理解之变量对象》<ExternalLinkIcon/></a></p>\n<h2 id="_79-如何编写高性能的-javascript" tabindex="-1"><a class="header-anchor" href="#_79-如何编写高性能的-javascript" aria-hidden="true">#</a> 79. 如何编写高性能的 Javascript ？</h2>\n<ul>\n<li>1.使用位运算代替一些简单的四则运算。</li>\n<li>2.避免使用过深的嵌套循环。</li>\n<li>3.不要使用未定义的变量。</li>\n<li>4.当需要多次访问数组长度时，可以用变量保存起来，避免每次都会去进行属性查找。</li>\n</ul>\n<p>详细资料可以参考：\n<a href="https://zhuanlan.zhihu.com/p/34780474" target="_blank" rel="noopener noreferrer">《如何编写高性能的 Javascript？》<ExternalLinkIcon/></a></p>\n<h2 id="_80-简单介绍一下-v8-引擎的垃圾回收机制" tabindex="-1"><a class="header-anchor" href="#_80-简单介绍一下-v8-引擎的垃圾回收机制" aria-hidden="true">#</a> 80. 简单介绍一下 V8 引擎的垃圾回收机制</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>v8 的垃圾回收机制基于分代回收机制，这个机制又基于世代假说，这个假说有两个特点，一是新生的对象容易早死，另一个是不死的对象会活得更久。基于这个假说，v8 引擎将内存分为了新生代和老生代。\n \n新创建的对象或者只经历过一次的垃圾回收的对象被称为新生代。经历过多次垃圾回收的对象被称为老生代。\n \n新生代被分为 From 和 To 两个空间，To 一般是闲置的。当 From 空间满了的时候会执行 Scavenge 算法进行垃圾回收。当我们执行垃圾回收算法的时候应用逻辑将会停止，等垃圾回收结束后再继续执行。这个算法分为三步：\n \n（1）首先检查 From 空间的存活对象，如果对象存活则判断对象是否满足晋升到老生代的条件，如果满足条件则晋升到老生代。如果不满足条件则移动 To 空间。\n \n（2）如果对象不存活，则释放对象的空间。\n \n（3）最后将 From 空间和 To 空间角色进行交换。\n \n新生代对象晋升到老生代有两个条件：\n \n（1）第一个是判断是对象否已经经过一次 Scavenge 回收。若经历过，则将对象从 From 空间复制到老生代中；若没有经历，则复制到 To 空间。\n \n（2）第二个是 To 空间的内存使用占比是否超过限制。当对象从 From 空间复制到 To 空间时，若 To 空间使用超过 25%，则对象直接晋升到老生代中。设置 25% 的原因主要是因为算法结束后，两个空间结束后会交换位置，如果 To 空间的内存太小，会影响后续的内存分配。\n \n老生代采用了标记清除法和标记压缩法。标记清除法首先会对内存中存活的对象进行标记，标记结束后清除掉那些没有标记的对象。由于标记清除后会造成很多的内存碎片，不便于后面的内存分配。所以了解决内存碎片的问题引入了标记压缩法。\n \n由于在进行垃圾回收的时候会暂停应用的逻辑，对于新生代方法由于内存小，每次停顿的时间不会太长，但对于老生代来说每次垃圾回收的时间长，停顿会造成很大的影响。 为了解决这个问题 V8 引入了增量标记的方法，将一次停顿进行的过程分为了多步，每次执行完一小步就让运行逻辑执行一会，就这样交替运行。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>详细资料可以参考：\n<a href="https://www.jianshu.com/p/b8ed21e8a4fb" target="_blank" rel="noopener noreferrer">《深入理解 V8 的垃圾回收原理》<ExternalLinkIcon/></a>\n<a href="https://zhuanlan.zhihu.com/p/23992332" target="_blank" rel="noopener noreferrer">《JavaScript 中的垃圾回收》<ExternalLinkIcon/></a></p>\n<h2 id="_81-哪些操作会造成内存泄漏" tabindex="-1"><a class="header-anchor" href="#_81-哪些操作会造成内存泄漏" aria-hidden="true">#</a> 81. 哪些操作会造成内存泄漏？</h2>\n<p>相关知识点：</p>\n<ul>\n<li>1.意外的全局变量</li>\n<li>2.被遗忘的计时器或回调函数</li>\n<li>3.脱离 DOM 的引用</li>\n<li>4.闭包</li>\n</ul>\n<p>回答：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>第一种情况是我们由于使用未声明的变量，而意外的创建了一个全局变量，而使这个变量一直留在内存中无法被回收。\n \n第二种情况是我们设置了 setInterval 定时器，而忘记取消它，如果循环函数有对外部变量的引用的话，那么这个变量会被一直留\n在内存中，而无法被回收。\n \n第三种情况是我们获取一个 DOM 元素的引用，而后面这个元素被删除，由于我们一直保留了对这个元素的引用，所以它也无法被回\n收。\n \n第四种情况是不合理的使用闭包，从而导致某些变量一直被留在内存当中。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>详细资料可以参考：\n<a href="http://www.ruanyifeng.com/blog/2017/04/memory-leak.html" target="_blank" rel="noopener noreferrer">《JavaScript 内存泄漏教程》<ExternalLinkIcon/></a>\n<a href="https://jinlong.github.io/2016/05/01/4-Types-of-Memory-Leaks-in-JavaScript-and-How-to-Get-Rid-Of-Them/" target="_blank" rel="noopener noreferrer">《4 类 JavaScript 内存泄漏及如何避免》<ExternalLinkIcon/></a>\n<a href="https://juejin.im/entry/5a64366c6fb9a01c9332c706" target="_blank" rel="noopener noreferrer">《杜绝 js 中四种内存泄漏类型的发生》<ExternalLinkIcon/></a>\n<a href="https://segmentfault.com/a/1190000008901861" target="_blank" rel="noopener noreferrer">《javascript 典型内存泄漏及 chrome 的排查方法》<ExternalLinkIcon/></a></p>\n<h2 id="_82-需求-实现一个页面操作不会整页刷新的网站-并且能在浏览器前进、后退时正确响应。给出你的技术实现方案" tabindex="-1"><a class="header-anchor" href="#_82-需求-实现一个页面操作不会整页刷新的网站-并且能在浏览器前进、后退时正确响应。给出你的技术实现方案" aria-hidden="true">#</a> 82. 需求：实现一个页面操作不会整页刷新的网站，并且能在浏览器前进、后退时正确响应。给出你的技术实现方案？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>通过使用 pushState + ajax 实现浏览器无刷新前进后退，当一次 ajax 调用成功后我们将一条 state 记录加入到 history\n对象中。一条 state 记录包含了 url、title 和 content 属性，在 popstate 事件中可以获取到这个 state 对象，我们可\n以使用 content 来传递数据。最后我们通过对 window.onpopstate 事件监听来响应浏览器的前进后退操作。\n \n使用 pushState 来实现有两个问题，一个是打开首页时没有记录，我们可以使用 replaceState 来将首页的记录替换，另一个问\n题是当一个页面刷新的时候，仍然会向服务器端请求数据，因此如果请求的 url 需要后端的配合将其重定向到一个页面。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>详细资料可以参考：\n<a href="http://blog.chenxu.me/post/detail?id=ed4f0732-897f-48e4-9d4f-821e82f17fad" target="_blank" rel="noopener noreferrer">《pushState + ajax 实现浏览器无刷新前进后退》<ExternalLinkIcon/></a>\n<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/History_API" target="_blank" rel="noopener noreferrer">《Manipulating the browser history》<ExternalLinkIcon/></a></p>\n<h2 id="_83-如何判断当前脚本运行在浏览器还是-node-环境中-阿里" tabindex="-1"><a class="header-anchor" href="#_83-如何判断当前脚本运行在浏览器还是-node-环境中-阿里" aria-hidden="true">#</a> 83. 如何判断当前脚本运行在浏览器还是 node 环境中？（阿里）</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>this === window ? \'browser\' : \'node\';\n \n通过判断 Global 对象是否为 window，如果不为 window，当前脚本没有运行在浏览器中。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="_84-把-script-标签放在页面的最底部的-body-封闭之前和封闭之后有什么区别-浏览器会如何解析它们" tabindex="-1"><a class="header-anchor" href="#_84-把-script-标签放在页面的最底部的-body-封闭之前和封闭之后有什么区别-浏览器会如何解析它们" aria-hidden="true">#</a> 84. 把 script 标签放在页面的最底部的 body 封闭之前和封闭之后有什么区别？浏览器会如何解析它们？</h2>\n<p>详细资料可以参考：\n<a href="https://www.zhihu.com/question/20027966" target="_blank" rel="noopener noreferrer">《为什么把 script 标签放在 body 结束标签之后 html 结束标签之前？》<ExternalLinkIcon/></a>\n<a href="https://zhuanlan.zhihu.com/p/30558018" target="_blank" rel="noopener noreferrer">《从 Chrome 源码看浏览器如何加载资源》<ExternalLinkIcon/></a></p>\n<h2 id="_85-移动端的点击事件的有延迟-时间是多久-为什么会有-怎么解决这个延时" tabindex="-1"><a class="header-anchor" href="#_85-移动端的点击事件的有延迟-时间是多久-为什么会有-怎么解决这个延时" aria-hidden="true">#</a> 85. 移动端的点击事件的有延迟，时间是多久，为什么会有？ 怎么解决这个延时？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>移动端点击有 300ms 的延迟是因为移动端会有双击缩放的这个操作，因此浏览器在 click 之后要等待 300ms，看用户有没有下一次点击，来判断这次操作是不是双击。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>有三种办法来解决这个问题：</p>\n<ul>\n<li>1.通过 meta 标签禁用网页的缩放。</li>\n<li>2.通过 meta 标签将网页的 viewport 设置为 ideal viewport。</li>\n<li>3.调用一些 js 库，比如 FastClick</li>\n</ul>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>click 延时问题还可能引起点击穿透的问题，就是如果我们在一个元素上注册了 touchStart 的监听事件，这个事件会将这个元素隐藏掉，我们发现当这个元素隐藏后，触发了这个元素下的一个元素的点击事件，这就是点击穿透。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>详细资料可以参考：\n<a href="https://juejin.im/post/5b3cc9836fb9a04f9a5cb0e0" target="_blank" rel="noopener noreferrer">《移动端 300ms 点击延迟和点击穿透》<ExternalLinkIcon/></a></p>\n<h2 id="_86-什么是-前端路由-什么时候适合使用-前端路由-前端路由-有哪些优点和缺点" tabindex="-1"><a class="header-anchor" href="#_86-什么是-前端路由-什么时候适合使用-前端路由-前端路由-有哪些优点和缺点" aria-hidden="true">#</a> 86. 什么是“前端路由”？什么时候适合使用“前端路由”？“前端路由”有哪些优点和缺点？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>（1）什么是前端路由？\n \n前端路由就是把不同路由对应不同的内容或页面的任务交给前端来做，之前是通过服务端根据 url 的不同返回不同的页面实现的。\n \n（2）什么时候使用前端路由？\n \n在单页面应用，大部分页面结构不变，只改变部分内容的使用\n \n（3）前端路由有什么优点和缺点？\n \n优点：用户体验好，不需要每次都从服务器全部获取，快速展现给用户\n \n缺点：单页面无法记住之前滚动的位置，无法在前进，后退的时候记住滚动的位置\n \n前端路由一共有两种实现方式，一种是通过 hash 的方式，一种是通过使用 pushState 的方式。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>详细资料可以参考：\n<a href="https://segmentfault.com/q/1010000005336260" target="_blank" rel="noopener noreferrer">《什么是“前端路由”》<ExternalLinkIcon/></a>\n<a href="https://github.com/kaola-fed/blog/issues/137" target="_blank" rel="noopener noreferrer">《浅谈前端路由》<ExternalLinkIcon/></a>\n<a href="https://www.zhihu.com/question/53064386" target="_blank" rel="noopener noreferrer">《前端路由是什么东西？》<ExternalLinkIcon/></a></p>\n<h2 id="_87-如何测试前端代码么-知道-bdd-tdd-unit-test-么-知道怎么测试你的前端工程么-mocha-sinon-jasmin-qunit" tabindex="-1"><a class="header-anchor" href="#_87-如何测试前端代码么-知道-bdd-tdd-unit-test-么-知道怎么测试你的前端工程么-mocha-sinon-jasmin-qunit" aria-hidden="true">#</a> 87. 如何测试前端代码么？ 知道 BDD, TDD, Unit Test 么？ 知道怎么测试你的前端工程么(mocha, sinon, jasmin, qUnit..)？</h2>\n<p>详细资料可以参考：\n<a href="https://juejin.im/post/5b2da89cf265da597f1c7cab" target="_blank" rel="noopener noreferrer">《浅谈前端单元测试》<ExternalLinkIcon/></a></p>\n<h2 id="_88-检测浏览器版本版本有哪些方式" tabindex="-1"><a class="header-anchor" href="#_88-检测浏览器版本版本有哪些方式" aria-hidden="true">#</a> 88. 检测浏览器版本版本有哪些方式？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>检测浏览器版本一共有两种方式：\n \n一种是检测 window.navigator.userAgent 的值，但这种方式很不可靠，因为 userAgent 可以被改写，并且早期的浏览器如 ie，会通过伪装自己的 userAgent 的值为 Mozilla 来躲过服务器的检测。\n \n第二种方式是功能检测，根据每个浏览器独有的特性来进行判断，如 ie 下独有的 ActiveXObject。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>详细资料可以参考：\n<a href="https://www.jianshu.com/p/d99f4ca385ac" target="_blank" rel="noopener noreferrer">《JavaScript 判断浏览器类型》<ExternalLinkIcon/></a></p>\n<h2 id="_89-什么是-polyfill" tabindex="-1"><a class="header-anchor" href="#_89-什么是-polyfill" aria-hidden="true">#</a> 89. 什么是 Polyfill ？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>Polyfill 指的是用于实现浏览器并不支持的原生 API 的代码。\n \n比如说 querySelectorAll 是很多现代浏览器都支持的原生 Web API，但是有些古老的浏览器并不支持，那么假设有人写了一段代码来实现这个功能使这些浏览器也支持了这个功能，那么这就可以成为一个 Polyfill。\n \n一个 shim 是一个库，有自己的 API，而不是单纯实现原生不支持的 API。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>详细资料可以参考：\n<a href="https://segmentfault.com/a/1190000002593432" target="_blank" rel="noopener noreferrer">《Web 开发中的“黑话”》<ExternalLinkIcon/></a>\n<a href="https://juejin.im/post/5a579bc7f265da3e38496ba1" target="_blank" rel="noopener noreferrer">《Polyfill 为何物》<ExternalLinkIcon/></a></p>\n<h2 id="_90-使用-js-实现获取文件扩展名" tabindex="-1"><a class="header-anchor" href="#_90-使用-js-实现获取文件扩展名" aria-hidden="true">#</a> 90. 使用 JS 实现获取文件扩展名？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>// String.lastIndexOf() 方法返回指定值（本例中的\'.\'）在调用该方法的字符串中最后出现的位置，如果没找到则返回 -1。\n \n// 对于 \'filename\' 和 \'.hiddenfile\' ，lastIndexOf 的返回值分别为 0 和 -1 无符号右移操作符(>>>) 将 -1 转换为 4294967295 ，将 -2 转换为 4294967294 ，这个方法可以保证边缘情况时文件名不变。\n \n// String.prototype.slice() 从上面计算的索引处提取文件的扩展名。如果索引比文件名的长度大，结果为""。\nfunction getFileExtension(filename) {\n  return filename.slice(((filename.lastIndexOf(".") - 1) >>> 0) + 2);\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>详细资料可以参考：\n<a href="https://segmentfault.com/a/1190000004993946" target="_blank" rel="noopener noreferrer">《如何更有效的获取文件扩展名》<ExternalLinkIcon/></a></p>\n<h2 id="_91-介绍一下-js-的节流与防抖" tabindex="-1"><a class="header-anchor" href="#_91-介绍一下-js-的节流与防抖" aria-hidden="true">#</a> 91. 介绍一下 js 的节流与防抖？</h2>\n<p>相关知识点：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>// 函数防抖： 在事件被触发 n 秒后再执行回调，如果在这 n 秒内事件又被触发，则重新计时。\n \n// 函数节流： 规定一个单位时间，在这个单位时间内，只能有一次触发事件的回调函数执行，如果在同一个单位时间内某事件被触发多次，只有一次能生效。\n \n// 函数防抖的实现\nfunction debounce(fn, wait) {\n  var timer = null;\n \n  return function() {\n    var context = this,\n      args = arguments;\n \n    // 如果此时存在定时器的话，则取消之前的定时器重新记时\n    if (timer) {\n      clearTimeout(timer);\n      timer = null;\n    }\n \n    // 设置定时器，使事件间隔指定事件后执行\n    timer = setTimeout(() => {\n      fn.apply(context, args);\n    }, wait);\n  };\n}\n \n// 函数节流的实现;\nfunction throttle(fn, delay) {\n  var preTime = Date.now();\n \n  return function() {\n    var context = this,\n      args = arguments,\n      nowTime = Date.now();\n \n    // 如果两次时间间隔超过了指定时间，则执行函数。\n    if (nowTime - preTime >= delay) {\n      preTime = Date.now();\n      return fn.apply(context, args);\n    }\n  };\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><p>回答：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>函数防抖是指在事件被触发 n 秒后再执行回调，如果在这 n 秒内事件又被触发，则重新计时。这可以使用在一些点击请求的事件上，避免因为用户的多次点击向后端发送多次请求。\n \n函数节流是指规定一个单位时间，在这个单位时间内，只能有一次触发事件的回调函数执行，如果在同一个单位时间内某事件被触发多次，只有一次能生效。节流可以使用在 scroll 函数的事件监听上，通过事件节流来降低事件调用的频率。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>详细资料可以参考：\n<a href="https://juejin.im/post/5a35ed25f265da431d3cc1b1" target="_blank" rel="noopener noreferrer">《轻松理解 JS 函数节流和函数防抖》<ExternalLinkIcon/></a>\n<a href="https://juejin.im/post/5aa60b0e518825556b6c6d1a" target="_blank" rel="noopener noreferrer">《JavaScript 事件节流和事件防抖》<ExternalLinkIcon/></a>\n<a href="https://juejin.im/entry/5b1d2d54f265da6e2545bfa4" target="_blank" rel="noopener noreferrer">《JS 的防抖与节流》<ExternalLinkIcon/></a></p>\n<h2 id="_92-object-is-与原来的比较操作符-、-的区别" tabindex="-1"><a class="header-anchor" href="#_92-object-is-与原来的比较操作符-、-的区别" aria-hidden="true">#</a> 92. Object.is() 与原来的比较操作符 “=”、“” 的区别？</h2>\n<p>相关知识点：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>两等号判等，会在比较时进行类型转换。\n三等号判等（判断严格），比较时不进行隐式类型转换，（类型不同则会返回false）。\n \nObject.is 在三等号判等的基础上特别处理了 NaN 、-0 和 +0 ，保证 -0 和 +0 不再相同，但 Object.is(NaN, NaN) 会返回 true.\n \nObject.is 应被认为有其特殊的用途，而不能用它认为它比其它的相等对比更宽松或严格。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>回答：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>使用双等号进行相等判断时，如果两边的类型不一致，则会进行强制类型转化后再进行比较。\n \n使用三等号进行相等判断时，如果两边的类型不一致时，不会做强制类型准换，直接返回 false。\n \n使用 Object.is 来进行相等判断时，一般情况下和三等号的判断相同，它处理了一些特殊的情况，比如 -0 和 +0 不再相等，两个 NaN 认定为是相等的。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="_93-escape-encodeuri-encodeuricomponent-有什么区别" tabindex="-1"><a class="header-anchor" href="#_93-escape-encodeuri-encodeuricomponent-有什么区别" aria-hidden="true">#</a> 93. escape,encodeURI,encodeURIComponent 有什么区别？</h2>\n<p>相关知识点：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>escape 和 encodeURI 都属于 Percent-encoding，基本功能都是把 URI 非法字符转化成合法字符，转化后形式类似「%*」。\n它们的根本区别在于，escape 在处理 0xff 之外字符的时候，是直接使用字符的 unicode 在前面加上一个「%u」，而 encode URI 则是先进行 UTF-8，再在 UTF-8 的每个字节码前加上一个「%」；在处理 0xff 以内字符时，编码方式是一样的（都是「%XX」，XX 为字符的 16 进制 unicode，同时也是字符的 UTF-8），只是范围（即哪些字符编码哪些字符不编码）不一样。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>回答：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>encodeURI 是对整个 URI 进行转义，将 URI 中的非法字符转换为合法字符，所以对于一些在 URI 中有特殊意义的字符不会进行转义。\n \nencodeURIComponent 是对 URI 的组成部分进行转义，所以一些特殊字符也会得到转义。\n \nescape 和 encodeURI 的作用相同，不过它们对于 unicode 编码为 0xff 之外字符的时候会有区别，escape 是直接在字符的 unicode 编码前加上 %u，而 encodeURI 首先会将字符转换为 UTF-8 的格式，再在每个字节前加上 %。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>详细资料可以参考：\n<a href="https://www.zhihu.com/question/21861899" target="_blank" rel="noopener noreferrer">《escape,encodeURI,encodeURIComponent 有什么区别?》<ExternalLinkIcon/></a></p>\n<h2 id="_94-unicode-和-utf-8-之间的关系" tabindex="-1"><a class="header-anchor" href="#_94-unicode-和-utf-8-之间的关系" aria-hidden="true">#</a> 94. Unicode 和 UTF-8 之间的关系？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>Unicode 是一种字符集合，现在可容纳 100 多万个字符。每个字符对应一个不同的 Unicode 编码，它只规定了符号的二进制代码，却没有规定这个二进制代码在计算机中如何编码传输。\n \nUTF-8 是一种对 Unicode 的编码方式，它是一种变长的编码方式，可以用 1~4 个字节来表示一个字符。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>详细资料可以参考：\n<a href="https://blog.51cto.com/polaris/377468" target="_blank" rel="noopener noreferrer">《字符编码详解》<ExternalLinkIcon/></a>\n<a href="http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html" target="_blank" rel="noopener noreferrer">《字符编码笔记：ASCII，Unicode 和 UTF-8》<ExternalLinkIcon/></a></p>\n<h2 id="_95-js-的事件循环是什么" tabindex="-1"><a class="header-anchor" href="#_95-js-的事件循环是什么" aria-hidden="true">#</a> 95. js 的事件循环是什么？</h2>\n<p>相关知识点：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>事件队列是一个存储着待执行任务的队列，其中的任务严格按照时间先后顺序执行，排在队头的任务将会率先执行，而排在队尾的任务会最后执行。事件队列每次仅执行一个任务，在该任务执行完毕之后，再执行下一个任务。执行栈则是一个类似于函数调用栈的运行容器，当执行栈为空时，JS 引擎便检查事件队列，如果不为空的话，事件队列便将第一个任务压入执行栈中运行。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>回答：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>因为 js 是单线程运行的，在代码执行的时候，通过将不同函数的执行上下文压入执行栈中来保证代码的有序执行。在执行同步代码的时候，如果遇到了异步事件，js 引擎并不会一直等待其返回结果，而是会将这个事件挂起，继续执行执行栈中的其他任务。当异步事件执行完毕后，再将异步事件对应的回调加入到与当前执行栈中不同的另一个任务队列中等待执行。任务队列可以分为宏任务对列和微任务对列，当当前执行栈中的事件执行完毕后，js 引擎首先会判断微任务对列中是否有任务可以执行，如果有就将微任务队首的事件压入栈中执行。当微任务对列中的任务都执行完成后再去判断宏任务对列中的任务。\n \n微任务包括了 promise 的回调、node 中的 process.nextTick 、对 Dom 变化监听的 MutationObserver。\n \n宏任务包括了 script 脚本的执行、setTimeout ，setInterval ，setImmediate 一类的定时事件，还有如 I/O 操作、UI 渲\n染等。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>详细资料可以参考：\n<a href="https://juejin.im/post/5afbc62151882542af04112d" target="_blank" rel="noopener noreferrer">《浏览器事件循环机制（event loop）》<ExternalLinkIcon/></a>\n<a href="https://zhuanlan.zhihu.com/p/33058983" target="_blank" rel="noopener noreferrer">《详解 JavaScript 中的 Event Loop（事件循环）机制》<ExternalLinkIcon/></a>\n<a href="http://www.ruanyifeng.com/blog/2013/10/event_loop.html" target="_blank" rel="noopener noreferrer">《什么是 Event Loop？》<ExternalLinkIcon/></a>\n<a href="https://juejin.im/post/59e85eebf265da430d571f89" target="_blank" rel="noopener noreferrer">《这一次，彻底弄懂 JavaScript 执行机制》<ExternalLinkIcon/></a></p>\n<h2 id="_96-js-中的深浅拷贝实现" tabindex="-1"><a class="header-anchor" href="#_96-js-中的深浅拷贝实现" aria-hidden="true">#</a> 96. js 中的深浅拷贝实现？</h2>\n<p>相关资料：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>// 浅拷贝的实现;\n \nfunction shallowCopy(object) {\n  // 只拷贝对象\n  if (!object || typeof object !== "object") return;\n \n  // 根据 object 的类型判断是新建一个数组还是对象\n  let newObject = Array.isArray(object) ? [] : {};\n \n  // 遍历 object，并且判断是 object 的属性才拷贝\n  for (let key in object) {\n    if (object.hasOwnProperty(key)) {\n      newObject[key] = object[key];\n    }\n  }\n \n  return newObject;\n}\n \n// 深拷贝的实现;\n \nfunction deepCopy(object) {\n  if (!object || typeof object !== "object") return;\n \n  let newObject = Array.isArray(object) ? [] : {};\n \n  for (let key in object) {\n    if (object.hasOwnProperty(key)) {\n      newObject[key] =\n        typeof object[key] === "object" ? deepCopy(object[key]) : object[key];\n    }\n  }\n \n  return newObject;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><p>回答：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>浅拷贝指的是将一个对象的属性值复制到另一个对象，如果有的属性的值为引用类型的话，那么会将这个引用的地址复制给对象，因此两个对象会有同一个引用类型的引用。浅拷贝可以使用  Object.assign 和展开运算符来实现。\n \n深拷贝相对浅拷贝而言，如果遇到属性值为引用类型的时候，它新建一个引用类型并将对应的值复制给它，因此对象获得的一个新的引用类型而不是一个原有类型的引用。深拷贝对于一些对象可以使用 JSON 的两个函数来实现，但是由于 JSON 的对象格式比 js 的对象格式更加严格，所以如果属性值里边出现函数或者 Symbol 类型的值时，会转换失败。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>详细资料可以参考：\n<a href="https://github.com/mqyqingfeng/Blog/issues/32" target="_blank" rel="noopener noreferrer">《JavaScript 专题之深浅拷贝》<ExternalLinkIcon/></a>\n<a href="https://juejin.im/book/5bdc715fe51d454e755f75ef/section/5bed40d951882545f73004f6" target="_blank" rel="noopener noreferrer">《前端面试之道》<ExternalLinkIcon/></a></p>\n<h2 id="_97-手写-call、apply-及-bind-函数" tabindex="-1"><a class="header-anchor" href="#_97-手写-call、apply-及-bind-函数" aria-hidden="true">#</a> 97. 手写 call、apply 及 bind 函数</h2>\n<p>相关资料：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>// call函数实现\nFunction.prototype.myCall = function(context) {\n  // 判断调用对象\n  if (typeof this !== "function") {\n    console.error("type error");\n  }\n \n  // 获取参数\n  let args = [...arguments].slice(1),\n    result = null;\n \n  // 判断 context 是否传入，如果未传入则设置为 window\n  context = context || window;\n \n  // 将调用函数设为对象的方法\n  context.fn = this;\n \n  // 调用函数\n  result = context.fn(...args);\n \n  // 将属性删除\n  delete context.fn;\n \n  return result;\n};\n \n// apply 函数实现\n \nFunction.prototype.myApply = function(context) {\n  // 判断调用对象是否为函数\n  if (typeof this !== "function") {\n    throw new TypeError("Error");\n  }\n \n  let result = null;\n \n  // 判断 context 是否存在，如果未传入则为 window\n  context = context || window;\n \n  // 将函数设为对象的方法\n  context.fn = this;\n \n  // 调用方法\n  if (arguments[1]) {\n    result = context.fn(...arguments[1]);\n  } else {\n    result = context.fn();\n  }\n \n  // 将属性删除\n  delete context.fn;\n \n  return result;\n};\n \n// bind 函数实现\nFunction.prototype.myBind = function(context) {\n  // 判断调用对象是否为函数\n  if (typeof this !== "function") {\n    throw new TypeError("Error");\n  }\n \n  // 获取参数\n  var args = [...arguments].slice(1),\n    fn = this;\n \n  return function Fn() {\n    // 根据调用方式，传入不同绑定值\n    return fn.apply(\n      this instanceof Fn ? this : context,\n      args.concat(...arguments)\n    );\n  };\n};\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br></div></div><p>回答：</p>\n<p>call 函数的实现步骤：</p>\n<ul>\n<li>1.判断调用对象是否为函数，即使我们是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。</li>\n<li>2.判断传入上下文对象是否存在，如果不存在，则设置为 window 。</li>\n<li>3.处理传入的参数，截取第一个参数后的所有参数。</li>\n<li>4.将函数作为上下文对象的一个属性。</li>\n<li>5.使用上下文对象来调用这个方法，并保存返回结果。</li>\n<li>6.删除刚才新增的属性。</li>\n<li>7.返回结果。</li>\n</ul>\n<p>apply 函数的实现步骤：</p>\n<ul>\n<li>1.判断调用对象是否为函数，即使我们是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。</li>\n<li>2.判断传入上下文对象是否存在，如果不存在，则设置为 window 。</li>\n<li>3.将函数作为上下文对象的一个属性。</li>\n<li>4.判断参数值是否传入</li>\n<li>4.使用上下文对象来调用这个方法，并保存返回结果。</li>\n<li>5.删除刚才新增的属性</li>\n<li>6.返回结果</li>\n</ul>\n<p>bind 函数的实现步骤：</p>\n<ul>\n<li>1.判断调用对象是否为函数，即使我们是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。</li>\n<li>2.保存当前函数的引用，获取其余传入参数值。</li>\n<li>3.创建一个函数返回</li>\n<li>4.函数内部使用 apply 来绑定函数调用，需要判断函数作为构造函数的情况，这个时候需要传入当前函数的 this 给 apply 调用，其余情况都传入指定的上下文对象。</li>\n</ul>\n<p>详细资料可以参考：\n<a href="https://juejin.im/book/5bdc715fe51d454e755f75ef/section/5bdd0d8e6fb9a04a044073fe" target="_blank" rel="noopener noreferrer">《手写 call、apply 及 bind 函数》<ExternalLinkIcon/></a>\n<a href="https://github.com/mqyqingfeng/Blog/issues/11" target="_blank" rel="noopener noreferrer">《JavaScript 深入之 call 和 apply 的模拟实现》<ExternalLinkIcon/></a></p>\n<h2 id="_98-函数柯里化的实现" tabindex="-1"><a class="header-anchor" href="#_98-函数柯里化的实现" aria-hidden="true">#</a> 98. 函数柯里化的实现</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>// 函数柯里化指的是一种将使用多个参数的一个函数转换成一系列使用一个参数的函数的技术。\n \nfunction curry(fn, args) {\n  // 获取函数需要的参数长度\n  let length = fn.length;\n \n  args = args || [];\n \n  return function() {\n    let subArgs = args.slice(0);\n \n    // 拼接得到现有的所有参数\n    for (let i = 0; i &lt; arguments.length; i++) {\n      subArgs.push(arguments[i]);\n    }\n \n    // 判断参数的长度是否已经满足函数所需参数的长度\n    if (subArgs.length >= length) {\n      // 如果满足，执行函数\n      return fn.apply(this, subArgs);\n    } else {\n      // 如果不满足，递归返回科里化的函数，等待参数的传入\n      return curry.call(this, fn, subArgs);\n    }\n  };\n}\n \n// es6 实现\nfunction curry(fn, ...args) {\n  return fn.length &lt;= args.length ? fn(...args) : curry.bind(null, fn, ...args);\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><p>详细资料可以参考：\n<a href="https://github.com/mqyqingfeng/Blog/issues/42" target="_blank" rel="noopener noreferrer">《JavaScript 专题之函数柯里化》<ExternalLinkIcon/></a></p>\n<h2 id="_99-为什么-0-1-0-2-0-3-如何解决这个问题" tabindex="-1"><a class="header-anchor" href="#_99-为什么-0-1-0-2-0-3-如何解决这个问题" aria-hidden="true">#</a> 99. 为什么 0.1 + 0.2 != 0.3？如何解决这个问题？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>当计算机计算 0.1+0.2 的时候，实际上计算的是这两个数字在计算机里所存储的二进制，0.1 和 0.2 在转换为二进制表示的时候会出现位数无限循环的情况。js 中是以 64 位双精度格式来存储数字的，只有 53 位的有效数字，超过这个长度的位数会被截取掉这样就造成了精度丢失的问题。这是第一个会造成精度丢失的地方。在对两个以 64 位双精度格式的数据进行计算的时候，首先会进行对阶的处理，对阶指的是将阶码对齐，也就是将小数点的位置对齐后，再进行计算，一般是小阶向大阶对齐，因此小阶的数在对齐的过程中，有效数字会向右移动，移动后超过有效位数的位会被截取掉，这是第二个可能会出现精度丢失的地方。当两个数据阶码对齐后，进行相加运算后，得到的结果可能会超过 53 位有效数字，因此超过的位数也会被截取掉，这是可能发生精度丢失的第三个地方。\n \n对于这样的情况，我们可以将其转换为整数后再进行运算，运算后再转换为对应的小数，以这种方式来解决这个问题。\n \n我们还可以将两个数相加的结果和右边相减，如果相减的结果小于一个极小数，那么我们就可以认定结果是相等的，这个极小数可以\n使用 es6 的 Number.EPSILON\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>详细资料可以参考：\n<a href="https://blog.csdn.net/Lixuanshengchao/article/details/82049191" target="_blank" rel="noopener noreferrer">《十进制的 0.1 为什么不能用二进制很好的表示？》<ExternalLinkIcon/></a>\n<a href="https://blog.csdn.net/zhengyanan815/article/details/78550073" target="_blank" rel="noopener noreferrer">《十进制浮点数转成二进制》<ExternalLinkIcon/></a>\n<a href="http://www.ruanyifeng.com/blog/2010/06/ieee_floating-point_representation.html" target="_blank" rel="noopener noreferrer">《浮点数的二进制表示》<ExternalLinkIcon/></a>\n<a href="https://juejin.im/post/5b372f106fb9a00e6714aa21" target="_blank" rel="noopener noreferrer">《js 浮点数存储精度丢失原理》<ExternalLinkIcon/></a>\n<a href="https://juejin.im/post/594a31d0a0bb9f006b0b2624" target="_blank" rel="noopener noreferrer">《浮点数精度之谜》<ExternalLinkIcon/></a>\n<a href="https://github.com/camsong/blog/issues/9" target="_blank" rel="noopener noreferrer">《JavaScript 浮点数陷阱及解法》<ExternalLinkIcon/></a>\n<a href="https://juejin.im/post/5bd2f10a51882555e072d0c4" target="_blank" rel="noopener noreferrer">《0.1+0.2 ! 0.3？》<ExternalLinkIcon/></a>\n<a href="https://juejin.im/entry/59cdd7fb6fb9a00a600f8eef" target="_blank" rel="noopener noreferrer">《JavaScript 中奇特的~运算符》<ExternalLinkIcon/></a></p>\n<h2 id="_100-原码、反码和补码的介绍" tabindex="-1"><a class="header-anchor" href="#_100-原码、反码和补码的介绍" aria-hidden="true">#</a> 100. 原码、反码和补码的介绍</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>原码是计算机中对数字的二进制的定点表示方法，最高位表示符号位，其余位表示数值位。优点是易于分辨，缺点是不能够直接参与运算。\n \n正数的反码和其原码一样；负数的反码，符号位为1，数值部分按原码取反。\n如 [+7]原 = 00000111，[+7]反 = 00000111； [-7]原 = 10000111，[-7]反 = 11111000。\n \n正数的补码和其原码一样；负数的补码为其反码加1。\n \n例如 [+7]原 = 00000111，[+7]反 = 00000111，[+7]补 = 00000111；\n[-7]原 = 10000111，[-7]反 = 11111000，[-7]补 = 11111001\n \n之所以在计算机中使用补码来表示负数的原因是，这样可以将加法运算扩展到所有的数值计算上，因此在数字电路中我们只需要考虑加法器的设计就行了，而不用再为减法设置新的数字电路。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>详细资料可以参考：\n<a href="http://www.ruanyifeng.com/blog/2009/08/twos_complement.html" target="_blank" rel="noopener noreferrer">《关于 2 的补码》<ExternalLinkIcon/></a></p>\n<h2 id="_101-toprecision-和-tofixed-和-math-round-的区别" tabindex="-1"><a class="header-anchor" href="#_101-toprecision-和-tofixed-和-math-round-的区别" aria-hidden="true">#</a> 101. toPrecision 和 toFixed 和 Math.round 的区别？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>toPrecision 用于处理精度，精度是从左至右第一个不为 0 的数开始数起。\ntoFixed 是对小数点后指定位数取整，从小数点开始数起。\nMath.round 是将一个数字四舍五入到一个整数。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="_102-什么是-xss-攻击-如何防范-xss-攻击" tabindex="-1"><a class="header-anchor" href="#_102-什么是-xss-攻击-如何防范-xss-攻击" aria-hidden="true">#</a> 102. 什么是 XSS 攻击？如何防范 XSS 攻击？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>XSS 攻击指的是跨站脚本攻击，是一种代码注入攻击。攻击者通过在网站注入恶意脚本，使之在用户的浏览器上运行，从而盗取用户的信息如 cookie 等。\n \nXSS 的本质是因为网站没有对恶意代码进行过滤，与正常的代码混合在一起了，浏览器没有办法分辨哪些脚本是可信的，从而导致了恶意代码的执行。\n \nXSS 一般分为存储型、反射型和 DOM 型。\n \n存储型指的是恶意代码提交到了网站的数据库中，当用户请求数据的时候，服务器将其拼接为 HTML 后返回给了用户，从而导致了恶意代码的执行。\n \n反射型指的是攻击者构建了特殊的 URL，当服务器接收到请求后，从 URL 中获取数据，拼接到 HTML 后返回，从而导致了恶意代码的执行。\n \nDOM 型指的是攻击者构建了特殊的 URL，用户打开网站后，js 脚本从 URL 中获取数据，从而导致了恶意代码的执行。\n \nXSS 攻击的预防可以从两个方面入手，一个是恶意代码提交的时候，一个是浏览器执行恶意代码的时候。\n \n对于第一个方面，如果我们对存入数据库的数据都进行的转义处理，但是一个数据可能在多个地方使用，有的地方可能不需要转义，由于我们没有办法判断数据最后的使用场景，所以直接在输入端进行恶意代码的处理，其实是不太可靠的。\n \n因此我们可以从浏览器的执行来进行预防，一种是使用纯前端的方式，不用服务器端拼接后返回。另一种是对需要插入到 HTML 中的代码做好充分的转义。对于 DOM 型的攻击，主要是前端脚本的不可靠而造成的，我们对于数据获取渲染和字符串拼接的时候应该对可能出现的恶意代码情况进行判断。\n \n还有一些方式，比如使用 CSP ，CSP 的本质是建立一个白名单，告诉浏览器哪些外部资源可以加载和执行，从而防止恶意代码的注入攻击。\n \n还可以对一些敏感信息进行保护，比如 cookie 使用 http-only ，使得脚本无法获取。也可以使用验证码，避免脚本伪装成用户执行一些操作。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>详细资料可以参考：\n<a href="https://juejin.im/post/5bad9140e51d450e935c6d64" target="_blank" rel="noopener noreferrer">《前端安全系列（一）：如何防止 XSS 攻击？》<ExternalLinkIcon/></a></p>\n<h2 id="_103-什么是-csp" tabindex="-1"><a class="header-anchor" href="#_103-什么是-csp" aria-hidden="true">#</a> 103. 什么是 CSP？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>CSP 指的是内容安全策略，它的本质是建立一个白名单，告诉浏览器哪些外部资源可以加载和执行。我们只需要配置规则，如何拦截由浏览器自己来实现。\n \n通常有两种方式来开启 CSP，一种是设置 HTTP 首部中的 Content-Security-Policy，一种是设置 meta 标签的方式 &lt;meta\nhttp-equiv="Content-Security-Policy">\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>详细资料可以参考：\n<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CSP" target="_blank" rel="noopener noreferrer">《内容安全策略（CSP）》<ExternalLinkIcon/></a>\n<a href="https://juejin.im/book/5bdc715fe51d454e755f75ef/section/5bdc721851882516c33430a2" target="_blank" rel="noopener noreferrer">《前端面试之道》<ExternalLinkIcon/></a></p>\n<h2 id="_104-什么是-csrf-攻击-如何防范-csrf-攻击" tabindex="-1"><a class="header-anchor" href="#_104-什么是-csrf-攻击-如何防范-csrf-攻击" aria-hidden="true">#</a> 104. 什么是 CSRF 攻击？如何防范 CSRF 攻击？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>CSRF 攻击指的是跨站请求伪造攻击，攻击者诱导用户进入一个第三方网站，然后该网站向被攻击网站发送跨站请求。如果用户在被\n攻击网站中保存了登录状态，那么攻击者就可以利用这个登录状态，绕过后台的用户验证，冒充用户向服务器执行一些操作。\n \nCSRF 攻击的本质是利用了 cookie 会在同源请求中携带发送给服务器的特点，以此来实现用户的冒充。\n \n一般的 CSRF 攻击类型有三种：\n \n第一种是 GET 类型的 CSRF 攻击，比如在网站中的一个 img 标签里构建一个请求，当用户打开这个网站的时候就会自动发起提\n交。\n \n第二种是 POST 类型的 CSRF 攻击，比如说构建一个表单，然后隐藏它，当用户进入页面时，自动提交这个表单。\n \n第三种是链接类型的 CSRF 攻击，比如说在 a 标签的 href 属性里构建一个请求，然后诱导用户去点击。\n \nCSRF 可以用下面几种方法来防护：\n \n第一种是同源检测的方法，服务器根据 http 请求头中 origin 或者 referer 信息来判断请求是否为允许访问的站点，从而对请求进行过滤。当 origin 或者 referer 信息都不存在的时候，直接阻止。这种方式的缺点是有些情况下 referer 可以被伪造。还有就是我们这种方法同时把搜索引擎的链接也给屏蔽了，所以一般网站会允许搜索引擎的页面请求，但是相应的页面请求这种请求方式也可能被攻击者给利用。\n \n第二种方法是使用 CSRF Token 来进行验证，服务器向用户返回一个随机数 Token ，当网站再次发起请求时，在请求参数中加入服务器端返回的 token ，然后服务器对这个 token 进行验证。这种方法解决了使用 cookie 单一验证方式时，可能会被冒用的问题，但是这种方法存在一个缺点就是，我们需要给网站中的所有请求都添加上这个 token，操作比较繁琐。还有一个问题是一般不会只有一台网站服务器，如果我们的请求经过负载平衡转移到了其他的服务器，但是这个服务器的 session 中没有保留这个 token 的话，就没有办法验证了。这种情况我们可以通过改变 token 的构建方式来解决。\n \n第三种方式使用双重 Cookie 验证的办法，服务器在用户访问网站页面时，向请求域名注入一个Cookie，内容为随机字符串，然后当用户再次向服务器发送请求的时候，从 cookie 中取出这个字符串，添加到 URL 参数中，然后服务器通过对 cookie 中的数据和参数中的数据进行比较，来进行验证。使用这种方式是利用了攻击者只能利用 cookie，但是不能访问获取 cookie 的特点。并且这种方法比 CSRF Token 的方法更加方便，并且不涉及到分布式访问的问题。这种方法的缺点是如果网站存在 XSS 漏洞的，那么这种方式会失效。同时这种方式不能做到子域名的隔离。\n \n第四种方式是使用在设置 cookie 属性的时候设置 Samesite ，限制 cookie 不能作为被第三方使用，从而可以避免被攻击者利用。Samesite 一共有两种模式，一种是严格模式，在严格模式下 cookie 在任何情况下都不可能作为第三方 Cookie 使用，在宽松模式下，cookie 可以被请求是 GET 请求，且会发生页面跳转的请求所使用。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>详细资料可以参考：\n<a href="https://juejin.im/post/5bc009996fb9a05d0a055192" target="_blank" rel="noopener noreferrer">《前端安全系列之二：如何防止 CSRF 攻击？》<ExternalLinkIcon/></a>\n[《<a href="https://www.jianshu.com/p/1f9c71850299" target="_blank" rel="noopener noreferrer"> HTTP 趣谈] origin, referer 和 host 区别》<ExternalLinkIcon/></a></p>\n<h2 id="_105-什么是-samesite-cookie-属性" tabindex="-1"><a class="header-anchor" href="#_105-什么是-samesite-cookie-属性" aria-hidden="true">#</a> 105. 什么是 Samesite Cookie 属性？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>Samesite Cookie 表示同站 cookie，避免 cookie 被第三方所利用。\n \n将 Samesite 设为 strict ，这种称为严格模式，表示这个 cookie 在任何情况下都不可能作为第三方 cookie。\n \n将 Samesite 设为 Lax ，这种模式称为宽松模式，如果这个请求是个 GET 请求，并且这个请求改变了当前页面或者打开了新的页面，那么这个 cookie 可以作为第三方 cookie，其余情况下都不能作为第三方 cookie。\n \n使用这种方法的缺点是，因为它不支持子域，所以子域没有办法与主域共享登录信息，每次转入子域的网站，都回重新登录。还有一个问题就是它的兼容性不够好。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="_106-什么是点击劫持-如何防范点击劫持" tabindex="-1"><a class="header-anchor" href="#_106-什么是点击劫持-如何防范点击劫持" aria-hidden="true">#</a> 106. 什么是点击劫持？如何防范点击劫持？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>点击劫持是一种视觉欺骗的攻击手段，攻击者将需要攻击的网站通过 iframe 嵌套的方式嵌入自己的网页中，并将 iframe 设置为透明，在页面中透出一个按钮诱导用户点击。\n \n我们可以在 http 相应头中设置 X-FRAME-OPTIONS 来防御用 iframe 嵌套的点击劫持攻击。通过不同的值，可以规定页面在特\n定的一些情况才能作为 iframe 来使用。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>详细资料可以参考：\n<a href="https://www.jianshu.com/p/251704d8ff18" target="_blank" rel="noopener noreferrer">《web 安全之--点击劫持攻击与防御技术简介》<ExternalLinkIcon/></a></p>\n<h2 id="_107-sql-注入攻击" tabindex="-1"><a class="header-anchor" href="#_107-sql-注入攻击" aria-hidden="true">#</a> 107. SQL 注入攻击？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>SQL 注入攻击指的是攻击者在 HTTP 请求中注入恶意的 SQL 代码，服务器使用参数构建数据库 SQL 命令时，恶意 SQL 被一起构\n造，破坏原有 SQL 结构，并在数据库中执行，达到编写程序时意料之外结果的攻击行为。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>详细资料可以参考：\n<a href="https://juejin.im/post/5bd5b820e51d456f72531fa8" target="_blank" rel="noopener noreferrer">《Web 安全漏洞之 SQL 注入》<ExternalLinkIcon/></a>\n<a href="http://blog.720ui.com/2016/security_web/#SQL%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB" target="_blank" rel="noopener noreferrer">《如何防范常见的 Web 攻击》<ExternalLinkIcon/></a></p>\n<h2 id="_108-什么是-mvvm-比之-mvc-有什么区别-什么又是-mvp" tabindex="-1"><a class="header-anchor" href="#_108-什么是-mvvm-比之-mvc-有什么区别-什么又是-mvp" aria-hidden="true">#</a> 108. 什么是 MVVM？比之 MVC 有什么区别？什么又是 MVP ？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>MVC、MVP 和 MVVM 是三种常见的软件架构设计模式，主要通过分离关注点的方式来组织代码结构，优化我们的开发效率。\n \n比如说我们实验室在以前项目开发的时候，使用单页应用时，往往一个路由页面对应了一个脚本文件，所有的页面逻辑都在一个脚本文件里。页面的渲染、数据的获取，对用户事件的响应所有的应用逻辑都混合在一起，这样在开发简单项目时，可能看不出什么问题，当时一旦项目变得复杂，那么整个文件就会变得冗长，混乱，这样对我们的项目开发和后期的项目维护是非常不利的。\n \nMVC 通过分离 Model、View 和 Controller 的方式来组织代码结构。其中 View 负责页面的显示逻辑，Model 负责存储页面的业务数据，以及对相应数据的操作。并且 View 和 Model 应用了观察者模式，当 Model 层发生改变的时候它会通知有关 View 层更新页面。Controller 层是 View 层和 Model 层的纽带，它主要负责用户与应用的响应操作，当用户与页面产生交互的时候，Co\nntroller 中的事件触发器就开始工作了，通过调用 Model 层，来完成对 Model 的修改，然后 Model 层再去通知 View 层更新。\n \nMVP 模式与 MVC 唯一不同的在于 Presenter 和 Controller。在 MVC 模式中我们使用观察者模式，来实现当 Model 层数据发生变化的时候，通知 View 层的更新。这样 View 层和 Model 层耦合在一起，当项目逻辑变得复杂的时候，可能会造成代码的混乱，并且可能会对代码的复用性造成一些问题。MVP 的模式通过使用 Presenter 来实现对 View 层和 Model 层的解耦。MVC 中的\nController 只知道 Model 的接口，因此它没有办法控制 View 层的更新，MVP 模式中，View 层的接口暴露给了 Presenter 因此我们可以在 Presenter 中将 Model 的变化和 View 的变化绑定在一起，以此来实现 View 和 Model 的同步更新。这样就实现了对 View 和 Model 的解耦，Presenter 还包含了其他的响应逻辑。\n \nMVVM 模式中的 VM，指的是 ViewModel，它和 MVP 的思想其实是相同的，不过它通过双向的数据绑定，将 View 和 Model 的同步更新给自动化了。当 Model 发生变化的时候，ViewModel 就会自动更新；ViewModel 变化了，View 也会更新。这样就将 Presenter 中的工作给自动化了。我了解过一点双向数据绑定的原理，比如 vue 是通过使用数据劫持和发布订阅者模式来实现的这一功\n能。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>详细资料可以参考：\n<a href="https://juejin.im/post/593021272f301e0058273468" target="_blank" rel="noopener noreferrer">《浅析前端开发中的 MVC/MVP/MVVM 模式》<ExternalLinkIcon/></a>\n<a href="http://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html" target="_blank" rel="noopener noreferrer">《MVC，MVP 和 MVVM 的图示》<ExternalLinkIcon/></a>\n<a href="https://juejin.im/book/5bdc715fe51d454e755f75ef/section/5bdc72e6e51d45054f664dbf" target="_blank" rel="noopener noreferrer">《MVVM》<ExternalLinkIcon/></a>\n<a href="https://segmentfault.com/a/1190000015310674" target="_blank" rel="noopener noreferrer">《一篇文章了解架构模式：MVC/MVP/MVVM》<ExternalLinkIcon/></a></p>\n<h2 id="_109-vue-双向数据绑定原理" tabindex="-1"><a class="header-anchor" href="#_109-vue-双向数据绑定原理" aria-hidden="true">#</a> 109. vue 双向数据绑定原理？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>vue 通过使用双向数据绑定，来实现了 View 和 Model 的同步更新。vue 的双向数据绑定主要是通过使用数据劫持和发布订阅者模式来实现的。\n \n首先我们通过 Object.defineProperty() 方法来对 Model 数据各个属性添加访问器属性，以此来实现数据的劫持，因此当 Model 中的数据发生变化的时候，我们可以通过配置的 setter 和 getter 方法来实现对 View 层数据更新的通知。\n \n数据在 html 模板中一共有两种绑定情况，一种是使用 v-model 来对 value 值进行绑定，一种是作为文本绑定，在对模板引擎进行解析的过程中。\n \n如果遇到元素节点，并且属性值包含 v-model 的话，我们就从 Model 中去获取 v-model 所对应的属性的值，并赋值给元素的 value 值。然后给这个元素设置一个监听事件，当 View 中元素的数据发生变化的时候触发该事件，通知 Model 中的对应的属性的值进行更新。\n \n如果遇到了绑定的文本节点，我们使用 Model 中对应的属性的值来替换这个文本。对于文本节点的更新，我们使用了发布订阅者模式，属性作为一个主题，我们为这个节点设置一个订阅者对象，将这个订阅者对象加入这个属性主题的订阅者列表中。当 Model 层数据发生改变的时候，Model 作为发布者向主题发出通知，主题收到通知再向它的所有订阅者推送，订阅者收到通知后更改自己的数\n据。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>详细资料可以参考：\n<a href="http://www.cnblogs.com/kidney/p/6052935.html?utm_source=gold_browser_extension" target="_blank" rel="noopener noreferrer">《Vue.js 双向绑定的实现原理》<ExternalLinkIcon/></a></p>\n<h2 id="_110-object-defineproperty-介绍" tabindex="-1"><a class="header-anchor" href="#_110-object-defineproperty-介绍" aria-hidden="true">#</a> 110. Object.defineProperty 介绍？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>Object.defineProperty 函数一共有三个参数，第一个参数是需要定义属性的对象，第二个参数是需要定义的属性，第三个是该属性描述符。\n \n一个属性的描述符有四个属性，分别是 value 属性的值，writable 属性是否可写，enumerable 属性是否可枚举，configurable 属性是否可配置修改。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>详细资料可以参考：\n<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="noopener noreferrer">《Object.defineProperty()》<ExternalLinkIcon/></a></p>\n<h2 id="_111-使用-object-defineproperty-来进行数据劫持有什么缺点" tabindex="-1"><a class="header-anchor" href="#_111-使用-object-defineproperty-来进行数据劫持有什么缺点" aria-hidden="true">#</a> 111. 使用 Object.defineProperty() 来进行数据劫持有什么缺点？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>有一些对属性的操作，使用这种方法无法拦截，比如说通过下标方式修改数组数据或者给对象新增属性，vue 内部通过重写函数解决了这个问题。在 Vue3.0 中已经不使用这种方式了，而是通过使用 Proxy 对对象进行代理，从而实现数据劫持。使用 Proxy 的好处是它可以完美的监听到任何方式的数据改变，唯一的缺点是兼容性的问题，因为这是 ES6 的语法。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="_112-什么是-virtual-dom-为什么-virtual-dom-比原生-dom-快" tabindex="-1"><a class="header-anchor" href="#_112-什么是-virtual-dom-为什么-virtual-dom-比原生-dom-快" aria-hidden="true">#</a> 112. 什么是 Virtual DOM？为什么 Virtual DOM 比原生 DOM 快？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>我对 Virtual DOM 的理解是，\n \n首先对我们将要插入到文档中的 DOM 树结构进行分析，使用 js 对象将其表示出来，比如一个元素对象，包含 TagName、props 和 Children 这些属性。然后我们将这个 js 对象树给保存下来，最后再将 DOM 片段插入到文档中。\n \n当页面的状态发生改变，我们需要对页面的 DOM 的结构进行调整的时候，我们首先根据变更的状态，重新构建起一棵对象树，然后将这棵新的对象树和旧的对象树进行比较，记录下两棵树的的差异。\n \n最后将记录的有差异的地方应用到真正的 DOM 树中去，这样视图就更新了。\n \n我认为 Virtual DOM 这种方法对于我们需要有大量的 DOM 操作的时候，能够很好的提高我们的操作效率，通过在操作前确定需要做的最小修改，尽可能的减少 DOM 操作带来的重流和重绘的影响。其实 Virtual DOM 并不一定比我们真实的操作 DOM 要快，这种方法的目的是为了提高我们开发时的可维护性，在任意的情况下，都能保证一个尽量小的性能消耗去进行操作。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>详细资料可以参考：\n<a href="https://juejin.im/book/5bdc715fe51d454e755f75ef/section/5bdc72e6e51d45054f664dbf" target="_blank" rel="noopener noreferrer">《Virtual DOM》<ExternalLinkIcon/></a>\n<a href="https://github.com/y8n/blog/issues/5" target="_blank" rel="noopener noreferrer">《理解 Virtual DOM》<ExternalLinkIcon/></a>\n<a href="https://github.com/livoras/blog/issues/13" target="_blank" rel="noopener noreferrer">《深度剖析：如何实现一个 Virtual DOM 算法》<ExternalLinkIcon/></a>\n<a href="https://www.zhihu.com/question/31809713/answer/53544875" target="_blank" rel="noopener noreferrer">《网上都说操作真实 DOM 慢，但测试结果却比 React 更快，为什么？》<ExternalLinkIcon/></a></p>\n<h2 id="_113-如何比较两个-dom-树的差异" tabindex="-1"><a class="header-anchor" href="#_113-如何比较两个-dom-树的差异" aria-hidden="true">#</a> 113. 如何比较两个 DOM 树的差异？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>两个树的完全 diff 算法的时间复杂度为 O(n^3) ，但是在前端中，我们很少会跨层级的移动元素，所以我们只需要比较同一层级的元素进行比较，这样就可以将算法的时间复杂度降低为 O(n)。\n \n算法首先会对新旧两棵树进行一个深度优先的遍历，这样每个节点都会有一个序号。在深度遍历的时候，每遍历到一个节点，我们就将这个节点和新的树中的节点进行比较，如果有差异，则将这个差异记录到一个对象中。\n \n在对列表元素进行对比的时候，由于 TagName 是重复的，所以我们不能使用这个来对比。我们需要给每一个子节点加上一个 key，列表对比的时候使用 key 来进行比较，这样我们才能够复用老的 DOM 树上的节点。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="_114-什么是-requestanimationframe" tabindex="-1"><a class="header-anchor" href="#_114-什么是-requestanimationframe" aria-hidden="true">#</a> 114. 什么是 requestAnimationFrame ？</h2>\n<p>详细资料可以参考：\n<a href="https://juejin.im/post/5a82f0626fb9a06358657c9c" target="_blank" rel="noopener noreferrer">《你需要知道的 requestAnimationFrame》<ExternalLinkIcon/></a>\n<a href="https://www.zhangxinxu.com/wordpress/2013/09/css3-animation-requestanimationframe-tween-%E5%8A%A8%E7%94%BB%E7%AE%97%E6%B3%95/" target="_blank" rel="noopener noreferrer">《CSS3 动画那么强，requestAnimationFrame 还有毛线用？》<ExternalLinkIcon/></a></p>\n<h2 id="_115-谈谈你对-webpack-的看法" tabindex="-1"><a class="header-anchor" href="#_115-谈谈你对-webpack-的看法" aria-hidden="true">#</a> 115. 谈谈你对 webpack 的看法</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>我当时使用 webpack 的一个最主要原因是为了简化页面依赖的管理，并且通过将其打包为一个文件来降低页面加载时请求的资源\n数。\n \n我认为 webpack 的主要原理是，它将所有的资源都看成是一个模块，并且把页面逻辑当作一个整体，通过一个给定的入口文件，webpack 从这个文件开始，找到所有的依赖文件，将各个依赖文件模块通过 loader 和 plugins 处理后，然后打包在一起，最后输出一个浏览器可识别的 JS 文件。\n \nWebpack 具有四个核心的概念，分别是 Entry（入口）、Output（输出）、loader 和 Plugins（插件）。\n \nEntry 是 webpack 的入口起点，它指示 webpack 应该从哪个模块开始着手，来作为其构建内部依赖图的开始。\n \nOutput 属性告诉 webpack 在哪里输出它所创建的打包文件，也可指定打包文件的名称，默认位置为 ./dist。\n \nloader 可以理解为 webpack 的编译器，它使得 webpack 可以处理一些非 JavaScript 文件。在对 loader 进行配置的时候，test 属性，标志有哪些后缀的文件应该被处理，是一个正则表达式。use 属性，指定 test 类型的文件应该使用哪个 loader 进行预处理。常用的 loader 有 css-loader、style-loader 等。\n \n插件可以用于执行范围更广的任务，包括打包、优化、压缩、搭建服务器等等，要使用一个插件，一般是先使用 npm 包管理器进行安装，然后在配置文件中引入，最后将其实例化后传递给 plugins 数组属性。\n \n使用 webpack 的确能够提供我们对于项目的管理，但是它的缺点就是调试和配置起来太麻烦了。但现在 webpack4.0 的免配置一定程度上解决了这个问题。但是我感觉就是对我来说，就是一个黑盒，很多时候出现了问题，没有办法很好的定位。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>详细资料可以参考：\n<a href="https://juejin.im/post/5b38d27451882574d87aa5d5#heading-0" target="_blank" rel="noopener noreferrer">《不聊 webpack 配置，来说说它的原理》<ExternalLinkIcon/></a>\n<a href="https://juejin.im/entry/5b5724d05188251aa01647fd" target="_blank" rel="noopener noreferrer">《前端工程化——构建工具选型：grunt、gulp、webpack》<ExternalLinkIcon/></a>\n<a href="https://juejin.im/post/5afa9cd0f265da0b981b9af9#heading-0" target="_blank" rel="noopener noreferrer">《浅入浅出 webpack》<ExternalLinkIcon/></a>\n<a href="https://juejin.im/entry/5ae5c8c9f265da0b9f400d8e" target="_blank" rel="noopener noreferrer">《前端构建工具发展及其比较》<ExternalLinkIcon/></a></p>\n<h2 id="_116-offsetwidth-offsetheight-clientwidth-clientheight-与-scrollwidth-scrollheight-的区别" tabindex="-1"><a class="header-anchor" href="#_116-offsetwidth-offsetheight-clientwidth-clientheight-与-scrollwidth-scrollheight-的区别" aria-hidden="true">#</a> 116. offsetWidth/offsetHeight,clientWidth/clientHeight 与 scrollWidth/scrollHeight 的区别？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>clientWidth/clientHeight 返回的是元素的内部宽度，它的值只包含 content + padding，如果有滚动条，不包含滚动条。\nclientTop 返回的是上边框的宽度。\nclientLeft 返回的左边框的宽度。\n \noffsetWidth/offsetHeight 返回的是元素的布局宽度，它的值包含 content + padding + border 包含了滚动条。\noffsetTop 返回的是当前元素相对于其 offsetParent 元素的顶部的距离。\noffsetLeft 返回的是当前元素相对于其 offsetParent 元素的左部的距离。\n \nscrollWidth/scrollHeight 返回值包含 content + padding + 溢出内容的尺寸。\nscrollTop 属性返回的是一个元素的内容垂直滚动的像素数。\nscrollLeft 属性返回的是元素滚动条到元素左边的距离。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>详细资料可以参考：\n<a href="https://juejin.im/post/5bc9366d5188255c4834e75a" target="_blank" rel="noopener noreferrer">《最全的获取元素宽高及位置的方法》<ExternalLinkIcon/></a>\n<a href="http://www.ruanyifeng.com/blog/2009/09/find_element_s_position_using_javascript.html" target="_blank" rel="noopener noreferrer">《用 Javascript 获取页面元素的位置》<ExternalLinkIcon/></a></p>\n<h2 id="_117-谈一谈你理解的函数式编程" tabindex="-1"><a class="header-anchor" href="#_117-谈一谈你理解的函数式编程" aria-hidden="true">#</a> 117. 谈一谈你理解的函数式编程？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>简单说，"函数式编程"是一种"编程范式"（programming paradigm），也就是如何编写程序的方法论。\n \n它具有以下特性：闭包和高阶函数、惰性计算、递归、函数是"第一等公民"、只用"表达式"。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>详细资料可以参考：\n<a href="http://www.ruanyifeng.com/blog/2012/04/functional_programming.html" target="_blank" rel="noopener noreferrer">《函数式编程初探》<ExternalLinkIcon/></a></p>\n<h2 id="_118-异步编程的实现方式" tabindex="-1"><a class="header-anchor" href="#_118-异步编程的实现方式" aria-hidden="true">#</a> 118. 异步编程的实现方式？</h2>\n<p>相关资料：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>回调函数\n优点：简单、容易理解\n缺点：不利于维护，代码耦合高\n \n事件监听（采用时间驱动模式，取决于某个事件是否发生）：\n优点：容易理解，可以绑定多个事件，每个事件可以指定多个回调函数\n缺点：事件驱动型，流程不够清晰\n \n发布/订阅（观察者模式）\n类似于事件监听，但是可以通过‘消息中心’，了解现在有多少发布者，多少订阅者\n \nPromise 对象\n优点：可以利用 then 方法，进行链式写法；可以书写错误时的回调函数；\n缺点：编写和理解，相对比较难\n \nGenerator 函数\n优点：函数体内外的数据交换、错误处理机制\n缺点：流程管理不方便\n \nasync 函数\n优点：内置执行器、更好的语义、更广的适用性、返回的是 Promise、结构清晰。\n缺点：错误处理机制\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>回答：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>js 中的异步机制可以分为以下几种：\n \n第一种最常见的是使用回调函数的方式，使用回调函数的方式有一个缺点是，多个回调函数嵌套的时候会造成回调函数地狱，上下两层的回调函数间的代码耦合度太高，不利于代码的可维护。\n \n第二种是 Promise 的方式，使用 Promise 的方式可以将嵌套的回调函数作为链式调用。但是使用这种方法，有时会造成多个 then 的链式调用，可能会造成代码的语义不够明确。\n \n第三种是使用 generator 的方式，它可以在函数的执行过程中，将函数的执行权转移出去，在函数外部我们还可以将执行权转移回来。当我们遇到异步函数执行的时候，将函数执行权转移出去，当异步函数执行完毕的时候我们再将执行权给转移回来。因此我们在 generator 内部对于异步操作的方式，可以以同步的顺序来书写。使用这种方式我们需要考虑的问题是何时将函数的控制权转移回来，因此我们需要有一个自动执行 generator 的机制，比如说 co 模块等方式来实现 generator 的自动执行。\n \n第四种是使用 async 函数的形式，async 函数是 generator 和 promise 实现的一个自动执行的语法糖，它内部自带执行器，当函数内部执行到一个 await 语句的时候，如果语句返回一个 promise 对象，那么函数将会等待 promise 对象的状态变为 resolve 后再继续向下执行。因此我们可以将异步逻辑，转化为同步的顺序来书写，并且这个函数可以自动执行。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="_119-js-动画与-css-动画区别及相应实现" tabindex="-1"><a class="header-anchor" href="#_119-js-动画与-css-动画区别及相应实现" aria-hidden="true">#</a> 119. Js 动画与 CSS 动画区别及相应实现</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>CSS3 的动画的优点\n \n在性能上会稍微好一些，浏览器会对 CSS3 的动画做一些优化\n代码相对简单\n \n缺点\n \n在动画控制上不够灵活\n兼容性不好\n \nJavaScript 的动画正好弥补了这两个缺点，控制能力很强，可以单帧的控制、变换，同时写得好完全可以兼容 IE6，并且功能强大。对于一些复杂控制的动画，使用 javascript 会比较靠谱。而在实现一些小的交互动效的时候，就多考虑考虑 CSS 吧\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="_120-get-请求传参长度的误区" tabindex="-1"><a class="header-anchor" href="#_120-get-请求传参长度的误区" aria-hidden="true">#</a> 120. get 请求传参长度的误区</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>误区：我们经常说 get 请求参数的大小存在限制，而 post 请求的参数大小是无限制的。\n \n实际上 HTTP 协议从未规定 GET/POST 的请求长度限制是多少。对 get 请求参数的限制是来源与浏览器或web 服务器，浏览器或 web 服务器限制了 url 的长度。为了明确这个概念，我们必须再次强调下面几点:\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul>\n<li>1.HTTP 协议未规定 GET 和 POST 的长度限制</li>\n<li>2.GET 的最大长度显示是因为浏览器和 web 服务器限制了 URI 的长度</li>\n<li>3.不同的浏览器和 WEB 服务器，限制的最大长度不一样</li>\n<li>4.要支持 IE，则最大长度为 2083byte，若只支持 Chrome，则最大长度 8182byte</li>\n</ul>\n<h2 id="_121-url-和-uri-的区别" tabindex="-1"><a class="header-anchor" href="#_121-url-和-uri-的区别" aria-hidden="true">#</a> 121. URL 和 URI 的区别？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>URI: Uniform Resource Identifier      指的是统一资源标识符\nURL: Uniform Resource Location        指的是统一资源定位符\nURN: Universal Resource Name          指的是统一资源名称\n \nURI 指的是统一资源标识符，用唯一的标识来确定一个资源，它是一种抽象的定义，也就是说，不管使用什么方法来定义，只要能唯一的标识一个资源，就可以称为 URI。\n \nURL 指的是统一资源定位符，URN 指的是统一资源名称。URL 和 URN 是 URI 的子集，URL 可以理解为使用地址来标识资源，URN 可以理解为使用名称来标识资源。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>详细资料可以参考：\n<a href="https://www.zhihu.com/question/21950864" target="_blank" rel="noopener noreferrer">《HTTP 协议中 URI 和 URL 有什么区别？》<ExternalLinkIcon/></a>\n<a href="http://web.jobbole.com/83452/" target="_blank" rel="noopener noreferrer">《你知道 URL、URI 和 URN 三者之间的区别吗？》<ExternalLinkIcon/></a>\n<a href="https://segmentfault.com/a/1190000006081973" target="_blank" rel="noopener noreferrer">《URI、URL 和 URN 的区别》<ExternalLinkIcon/></a></p>\n<h2 id="_122-get-和-post-请求在缓存方面的区别" tabindex="-1"><a class="header-anchor" href="#_122-get-和-post-请求在缓存方面的区别" aria-hidden="true">#</a> 122. get 和 post 请求在缓存方面的区别</h2>\n<p>相关知识点：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>get 请求类似于查找的过程，用户获取数据，可以不用每次都与数据库连接，所以可以使用缓存。\n \npost 不同，post 做的一般是修改和删除的工作，所以必须与数据库交互，所以不能使用缓存。因此 get 请求适合于请求缓存。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>回答：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>缓存一般只适用于那些不会更新服务端数据的请求。一般 get 请求都是查找请求，不会对服务器资源数据造成修改，而 post 请求一般都会对服务器数据造成修改，所以，一般会对 get 请求进行缓存，很少会对 post 请求进行缓存。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>详细资料可以参考：\n<a href="https://blog.csdn.net/qq_27093465/article/details/50479289" target="_blank" rel="noopener noreferrer">《HTML 关于 post 和 get 的区别以及缓存问题的理解》<ExternalLinkIcon/></a></p>\n<h2 id="_123-图片的懒加载和预加载" tabindex="-1"><a class="header-anchor" href="#_123-图片的懒加载和预加载" aria-hidden="true">#</a> 123. 图片的懒加载和预加载</h2>\n<p>相关知识点：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>预加载：提前加载图片，当用户需要查看时可直接从本地缓存中渲染。\n \n懒加载：懒加载的主要目的是作为服务器前端的优化，减少请求数或延迟请求数。\n \n两种技术的本质：两者的行为是相反的，一个是提前加载，一个是迟缓甚至不加载。 懒加载对服务器前端有一定的缓解压力作用，预加载则会增加服务器前端压力。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>回答：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>懒加载也叫延迟加载，指的是在长网页中延迟加载图片的时机，当用户需要访问时，再去加载，这样可以提高网站的首屏加载速度，提升用户的体验，并且可以减少服务器的压力。它适用于图片很多，页面很长的电商网站的场景。懒加载的实现原理是，将页面上的图片的 src 属性设置为空字符串，将图片的真实路径保存在一个自定义属性中，当页面滚动的时候，进行判断，如果图片进入页面可视区域内，则从自定义属性中取出真实路径赋值给图片的 src 属性，以此来实现图片的延迟加载。\n \n预加载指的是将所需的资源提前请求加载到本地，这样后面在需要用到时就直接从缓存取资源。通过预加载能够减少用户的等待时间，提高用户的体验。我了解的预加载的最常用的方式是使用 js 中的 image 对象，通过为 image 对象来设置 scr 属性，来实现图片的预加载。\n \n这两种方式都是提高网页性能的方式，两者主要区别是一个是提前加载，一个是迟缓甚至不加载。懒加载对服务器前端有一定的缓解压力作用，预加载则会增加服务器前端压力。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>详细资料可以参考：\n<a href="https://juejin.im/post/5b0c3b53f265da09253cbed0" target="_blank" rel="noopener noreferrer">《懒加载和预加载》<ExternalLinkIcon/></a>\n<a href="https://juejin.im/entry/5a73f38cf265da4e99575be3" target="_blank" rel="noopener noreferrer">《网页图片加载优化方案》<ExternalLinkIcon/></a>\n<a href="https://www.zhangxinxu.com/wordpress/2016/06/image-preload-based-on-user-behavior/" target="_blank" rel="noopener noreferrer">《基于用户行为的图片等资源预加载》<ExternalLinkIcon/></a></p>\n<h2 id="_124-mouseover-和-mouseenter-的区别" tabindex="-1"><a class="header-anchor" href="#_124-mouseover-和-mouseenter-的区别" aria-hidden="true">#</a> 124. mouseover 和 mouseenter 的区别？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>当鼠标移动到元素上时就会触发 mouseenter 事件，类似 mouseover，它们两者之间的差别是 mouseenter 不会冒泡。\n \n由于 mouseenter 不支持事件冒泡，导致在一个元素的子元素上进入或离开的时候会触发其 mouseover 和 mouseout 事件，但是却不会触发 mouseenter 和 mouseleave 事件。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>详细资料可以参考：\n<a href="https://github.com/qianlongo/zepto-analysis/issues/1" target="_blank" rel="noopener noreferrer">《mouseenter 与 mouseover 为何这般纠缠不清？》<ExternalLinkIcon/></a></p>\n<h2 id="_125-js-拖拽功能的实现" tabindex="-1"><a class="header-anchor" href="#_125-js-拖拽功能的实现" aria-hidden="true">#</a> 125. js 拖拽功能的实现</h2>\n<p>相关知识点：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>首先是三个事件，分别是 mousedown，mousemove，mouseup\n当鼠标点击按下的时候，需要一个 tag 标识此时已经按下，可以执行 mousemove 里面的具体方法。\nclientX，clientY 标识的是鼠标的坐标，分别标识横坐标和纵坐标，并且我们用 offsetX 和 offsetY 来表示\n元素的元素的初始坐标，移动的举例应该是：\n鼠标移动时候的坐标-鼠标按下去时候的坐标。\n也就是说定位信息为：\n鼠标移动时候的坐标-鼠标按下去时候的坐标+元素初始情况下的 offetLeft.\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>回答：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>一个元素的拖拽过程，我们可以分为三个步骤，第一步是鼠标按下目标元素，第二步是鼠标保持按下的状态移动鼠标，第三步是鼠\n标抬起，拖拽过程结束。\n \n这三步分别对应了三个事件，mousedown 事件，mousemove 事件和 mouseup 事件。只有在鼠标按下的状态移动鼠标我们才会\n执行拖拽事件，因此我们需要在 mousedown 事件中设置一个状态来标识鼠标已经按下，然后在 mouseup 事件中再取消这个状\n态。在 mousedown 事件中我们首先应该判断，目标元素是否为拖拽元素，如果是拖拽元素，我们就设置状态并且保存这个时候鼠\n标的位置。然后在 mousemove 事件中，我们通过判断鼠标现在的位置和以前位置的相对移动，来确定拖拽元素在移动中的坐标。\n最后 mouseup 事件触发后，清除状态，结束拖拽事件。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>详细资料可以参考：\n<a href="https://blog.csdn.net/LZGS_4/article/details/43523465" target="_blank" rel="noopener noreferrer">《原生 js 实现拖拽功能基本思路》<ExternalLinkIcon/></a></p>\n<h2 id="_126-为什么使用-settimeout-实现-setinterval-怎么模拟" tabindex="-1"><a class="header-anchor" href="#_126-为什么使用-settimeout-实现-setinterval-怎么模拟" aria-hidden="true">#</a> 126. 为什么使用 setTimeout 实现 setInterval？怎么模拟？</h2>\n<p>相关知识点：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>// 思路是使用递归函数，不断地去执行 setTimeout 从而达到 setInterval 的效果\n \nfunction mySetInterval(fn, timeout) {\n  // 控制器，控制定时器是否继续执行\n  var timer = {\n    flag: true\n  };\n \n  // 设置递归函数，模拟定时器执行。\n  function interval() {\n    if (timer.flag) {\n      fn();\n      setTimeout(interval, timeout);\n    }\n  }\n \n  // 启动定时器\n  setTimeout(interval, timeout);\n \n  // 返回控制器\n  return timer;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>回答：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>setInterval 的作用是每隔一段指定时间执行一个函数，但是这个执行不是真的到了时间立即执行，它真正的作用是每隔一段时间将事件加入事件队列中去，只有当当前的执行栈为空的时候，才能去从事件队列中取出事件执行。所以可能会出现这样的情况，就是当前执行栈执行的时间很长，导致事件队列里边积累多个定时器加入的事件，当执行栈结束的时候，这些事件会依次执行，因此就不能到间隔一段时间执行的效果。\n \n针对 setInterval 的这个缺点，我们可以使用 setTimeout 递归调用来模拟 setInterval，这样我们就确保了只有一个事件结束了，我们才会触发下一个定时器事件，这样解决了 setInterval 的问题。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>详细资料可以参考：\n<a href="https://www.jianshu.com/p/32479bdfd851" target="_blank" rel="noopener noreferrer">《用 setTimeout 实现 setInterval》<ExternalLinkIcon/></a>\n<a href="https://zhuanlan.zhihu.com/p/51995737" target="_blank" rel="noopener noreferrer">《setInterval 有什么缺点？》<ExternalLinkIcon/></a></p>\n<h2 id="_127-let-和-const-的注意点" tabindex="-1"><a class="header-anchor" href="#_127-let-和-const-的注意点" aria-hidden="true">#</a> 127. let 和 const 的注意点？</h2>\n<ul>\n<li>1.声明的变量只在声明时的代码块内有效</li>\n<li>2.不存在声明提升</li>\n<li>3.存在暂时性死区，如果在变量声明前使用，会报错</li>\n<li>4.不允许重复声明，重复声明会报错</li>\n</ul>\n<h2 id="_128-什么是-rest-参数" tabindex="-1"><a class="header-anchor" href="#_128-什么是-rest-参数" aria-hidden="true">#</a> 128. 什么是 rest 参数？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>rest 参数（形式为...变量名），用于获取函数的多余参数。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="_129-什么是尾调用-使用尾调用有什么好处" tabindex="-1"><a class="header-anchor" href="#_129-什么是尾调用-使用尾调用有什么好处" aria-hidden="true">#</a> 129. 什么是尾调用，使用尾调用有什么好处？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>尾调用指的是函数的最后一步调用另一个函数。我们代码执行是基于执行栈的，所以当我们在一个函数里调用另一个函数时，我们会保留当前的执行上下文，然后再新建另外一个执行上下文加入栈中。使用尾调用的话，因为已经是函数的最后一步，所以这个时候我们可以不必再保留当前的执行上下文，从而节省了内存，这就是尾调用优化。但是 ES6 的尾调用优化只在严格模式下开启，正常模式是无效的。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="_130-symbol-类型的注意点" tabindex="-1"><a class="header-anchor" href="#_130-symbol-类型的注意点" aria-hidden="true">#</a> 130. Symbol 类型的注意点？</h2>\n<ul>\n<li>1.Symbol 函数前不能使用 new 命令，否则会报错。</li>\n<li>2.Symbol 函数可以接受一个字符串作为参数，表示对 Symbol 实例的描述，主要是为了在控制台显示，或者转为字符串时，比较容易区分。</li>\n<li>3.Symbol 作为属性名，该属性不会出现在 for...in、for...of 循环中，也不会被 Object.keys()、Object.getOwnPropertyNames()、JSON.stringify() 返回。</li>\n<li>4.Object.getOwnPropertySymbols 方法返回一个数组，成员是当前对象的所有用作属性名的 Symbol 值。</li>\n<li>5.Symbol.for 接受一个字符串作为参数，然后搜索有没有以该参数作为名称的 Symbol 值。如果有，就返回这个 Symbol 值，否则就新建并返回一个以该字符串为名称的 Symbol 值。</li>\n<li>6.Symbol.keyFor 方法返回一个已登记的 Symbol 类型值的 key。</li>\n</ul>\n<h2 id="_131-set-和-weakset-结构" tabindex="-1"><a class="header-anchor" href="#_131-set-和-weakset-结构" aria-hidden="true">#</a> 131. Set 和 WeakSet 结构？</h2>\n<ul>\n<li>1.ES6 提供了新的数据结构 Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。</li>\n<li>2.WeakSet 结构与 Set 类似，也是不重复的值的集合。但是 WeakSet 的成员只能是对象，而不能是其他类型的值。WeakSet 中的对象都是弱引用，即垃圾回收机制不考虑 WeakSet 对该对象的引用，</li>\n</ul>\n<h2 id="_132-map-和-weakmap-结构" tabindex="-1"><a class="header-anchor" href="#_132-map-和-weakmap-结构" aria-hidden="true">#</a> 132. Map 和 WeakMap 结构？</h2>\n<ul>\n<li>1.Map 数据结构。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。</li>\n<li>2.WeakMap 结构与 Map 结构类似，也是用于生成键值对的集合。但是 WeakMap 只接受对象作为键名（ null 除外），不接受其他类型的值作为键名。而且 WeakMap 的键名所指向的对象，不计入垃圾回收机制。</li>\n</ul>\n<h2 id="_133-什么是-proxy" tabindex="-1"><a class="header-anchor" href="#_133-什么是-proxy" aria-hidden="true">#</a> 133. 什么是 Proxy ？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>Proxy 用于修改某些操作的默认行为，等同于在语言层面做出修改，所以属于一种“元编程”，即对编程语言进行编程。\n \nProxy 可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。Proxy 这个词的原意是代理，用在这里表示由它来“代理”某些操作，可以译为“代理器”。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="_134-reflect-对象创建目的" tabindex="-1"><a class="header-anchor" href="#_134-reflect-对象创建目的" aria-hidden="true">#</a> 134. Reflect 对象创建目的？</h2>\n<ul>\n<li>1.将 Object 对象的一些明显属于语言内部的方法（比如 Object.defineProperty，放到 Reflect 对象上。</li>\n<li>2.修改某些 Object 方法的返回结果，让其变得更合理。</li>\n<li>3.让 Object 操作都变成函数行为。</li>\n<li>4.Reflect 对象的方法与 Proxy 对象的方法一一对应，只要是 Proxy 对象的方法，就能在 Reflect 对象上找到对应的方法。这就让 Proxy 对象可以方便地调用对应的 Reflect 方法，完成默认行为，作为修改行为的基础。也就是说，不管 Proxy 怎么修改默认行为，你总可以在 Reflect 上获取默认行为。</li>\n</ul>\n<h2 id="_135-require-模块引入的查找方式" tabindex="-1"><a class="header-anchor" href="#_135-require-模块引入的查找方式" aria-hidden="true">#</a> 135. require 模块引入的查找方式？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>当 Node 遇到 require(X) 时，按下面的顺序处理。\n \n（1）如果 X 是内置模块（比如 require(\'http\')）\n　　a. 返回该模块。\n　　b. 不再继续执行。\n \n（2）如果 X 以 "./" 或者 "/" 或者 "../" 开头\n　　a. 根据 X 所在的父模块，确定 X 的绝对路径。\n　　b. 将 X 当成文件，依次查找下面文件，只要其中有一个存在，就返回该文件，不再继续执行。\n    X\n    X.js\n    X.json\n    X.node\n \n　　c. 将 X 当成目录，依次查找下面文件，只要其中有一个存在，就返回该文件，不再继续执行。\n    X/package.json（main字段）\n    X/index.js\n    X/index.json\n    X/index.node\n \n（3）如果 X 不带路径\n　　a. 根据 X 所在的父模块，确定 X 可能的安装目录。\n　　b. 依次在每个目录中，将 X 当成文件名或目录名加载。\n \n（4）抛出 "not found"\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>详细资料可以参考：\n<a href="http://www.ruanyifeng.com/blog/2015/05/require.html" target="_blank" rel="noopener noreferrer">《require() 源码解读》<ExternalLinkIcon/></a></p>\n<h2 id="_136-什么是-promise-对象-什么是-promises-a-规范" tabindex="-1"><a class="header-anchor" href="#_136-什么是-promise-对象-什么是-promises-a-规范" aria-hidden="true">#</a> 136. 什么是 Promise 对象，什么是 Promises/A+ 规范？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>Promise 对象是异步编程的一种解决方案，最早由社区提出。Promises/A+ 规范是 JavaScript Promise 的标准，规定了一个 Promise 所必须具有的特性。\n \nPromise 是一个构造函数，接收一个函数作为参数，返回一个 Promise 实例。一个 Promise 实例有三种状态，分别是 pending、resolved 和 rejected，分别代表了进行中、已成功和已失败。实例的状态只能由 pending 转变 resolved 或者 rejected 状态，并且状态一经改变，就凝固了，无法再被改变了。状态的改变是通过 resolve() 和 reject() 函数来实现的，我们\n可以在异步操作结束后调用这两个函数改变 Promise 实例的状态，它的原型上定义了一个 then 方法，使用这个 then 方法可以为两个状态的改变注册回调函数。这个回调函数属于微任务，会在本轮事件循环的末尾执行。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>详细资料可以参考：\n<a href="http://www.ituring.com.cn/article/66566" target="_blank" rel="noopener noreferrer">《Promises/A+ 规范》<ExternalLinkIcon/></a>\n<a href="http://es6.ruanyifeng.com/#docs/promise#Promise-resolve" target="_blank" rel="noopener noreferrer">《Promise》<ExternalLinkIcon/></a></p>\n<h2 id="_137-手写一个-promise" tabindex="-1"><a class="header-anchor" href="#_137-手写一个-promise" aria-hidden="true">#</a> 137. 手写一个 Promise</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>const PENDING = "pending";\nconst RESOLVED = "resolved";\nconst REJECTED = "rejected";\n \nfunction MyPromise(fn) {\n  // 保存初始化状态\n  var self = this;\n \n  // 初始化状态\n  this.state = PENDING;\n \n  // 用于保存 resolve 或者 rejected 传入的值\n  this.value = null;\n \n  // 用于保存 resolve 的回调函数\n  this.resolvedCallbacks = [];\n \n  // 用于保存 reject 的回调函数\n  this.rejectedCallbacks = [];\n \n  // 状态转变为 resolved 方法\n  function resolve(value) {\n    // 判断传入元素是否为 Promise 值，如果是，则状态改变必须等待前一个状态改变后再进行改变\n    if (value instanceof MyPromise) {\n      return value.then(resolve, reject);\n    }\n \n    // 保证代码的执行顺序为本轮事件循环的末尾\n    setTimeout(() => {\n      // 只有状态为 pending 时才能转变，\n      if (self.state === PENDING) {\n        // 修改状态\n        self.state = RESOLVED;\n \n        // 设置传入的值\n        self.value = value;\n \n        // 执行回调函数\n        self.resolvedCallbacks.forEach(callback => {\n          callback(value);\n        });\n      }\n    }, 0);\n  }\n \n  // 状态转变为 rejected 方法\n  function reject(value) {\n    // 保证代码的执行顺序为本轮事件循环的末尾\n    setTimeout(() => {\n      // 只有状态为 pending 时才能转变\n      if (self.state === PENDING) {\n        // 修改状态\n        self.state = REJECTED;\n \n        // 设置传入的值\n        self.value = value;\n \n        // 执行回调函数\n        self.rejectedCallbacks.forEach(callback => {\n          callback(value);\n        });\n      }\n    }, 0);\n  }\n \n  // 将两个方法传入函数执行\n  try {\n    fn(resolve, reject);\n  } catch (e) {\n    // 遇到错误时，捕获错误，执行 reject 函数\n    reject(e);\n  }\n}\n \nMyPromise.prototype.then = function(onResolved, onRejected) {\n  // 首先判断两个参数是否为函数类型，因为这两个参数是可选参数\n  onResolved =\n    typeof onResolved === "function"\n      ? onResolved\n      : function(value) {\n          return value;\n        };\n \n  onRejected =\n    typeof onRejected === "function"\n      ? onRejected\n      : function(error) {\n          throw error;\n        };\n \n  // 如果是等待状态，则将函数加入对应列表中\n  if (this.state === PENDING) {\n    this.resolvedCallbacks.push(onResolved);\n    this.rejectedCallbacks.push(onRejected);\n  }\n \n  // 如果状态已经凝固，则直接执行对应状态的函数\n \n  if (this.state === RESOLVED) {\n    onResolved(this.value);\n  }\n \n  if (this.state === REJECTED) {\n    onRejected(this.value);\n  }\n};\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br></div></div><h2 id="_138-如何检测浏览器所支持的最小字体大小" tabindex="-1"><a class="header-anchor" href="#_138-如何检测浏览器所支持的最小字体大小" aria-hidden="true">#</a> 138. 如何检测浏览器所支持的最小字体大小？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>用 JS 设置 DOM 的字体为某一个值，然后再取出来，如果值设置成功，就说明支持。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="_139-怎么做-js-代码-error-统计" tabindex="-1"><a class="header-anchor" href="#_139-怎么做-js-代码-error-统计" aria-hidden="true">#</a> 139. 怎么做 JS 代码 Error 统计？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>error 统计使用浏览器的 window.error 事件。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="_140-单例模式模式是什么" tabindex="-1"><a class="header-anchor" href="#_140-单例模式模式是什么" aria-hidden="true">#</a> 140. 单例模式模式是什么？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>单例模式保证了全局只有一个实例来被访问。比如说常用的如弹框组件的实现和全局状态的实现。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="_141-策略模式是什么" tabindex="-1"><a class="header-anchor" href="#_141-策略模式是什么" aria-hidden="true">#</a> 141. 策略模式是什么？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>策略模式主要是用来将方法的实现和方法的调用分离开，外部通过不同的参数可以调用不同的策略。我主要在 MVP 模式解耦的时候\n用来将视图层的方法定义和方法调用分离。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="_142-代理模式是什么" tabindex="-1"><a class="header-anchor" href="#_142-代理模式是什么" aria-hidden="true">#</a> 142. 代理模式是什么？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code> 代理模式是为一个对象提供一个代用品或占位符，以便控制对它的访问。比如说常见的事件代理。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="_143-中介者模式是什么" tabindex="-1"><a class="header-anchor" href="#_143-中介者模式是什么" aria-hidden="true">#</a> 143. 中介者模式是什么？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>中介者模式指的是，多个对象通过一个中介者进行交流，而不是直接进行交流，这样能够将通信的各个对象解耦。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="_144-适配器模式是什么" tabindex="-1"><a class="header-anchor" href="#_144-适配器模式是什么" aria-hidden="true">#</a> 144. 适配器模式是什么？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>适配器用来解决两个接口不兼容的情况，不需要改变已有的接口，通过包装一层的方式实现两个接口的正常协作。假如我们需要一种\n新的接口返回方式，但是老的接口由于在太多地方已经使用了，不能随意更改，这个时候就可以使用适配器模式。比如我们需要一种\n自定义的时间返回格式，但是我们又不能对 js 时间格式化的接口进行修改，这个时候就可以使用适配器模式。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>更多关于设计模式的资料可以参考：\n<a href="https://juejin.im/book/5bdc715fe51d454e755f75ef/section/5bdc74186fb9a049ab0d0b6b" target="_blank" rel="noopener noreferrer">《前端面试之道》<ExternalLinkIcon/></a>\n<a href="https://juejin.im/post/59df4f74f265da430f311909#heading-3" target="_blank" rel="noopener noreferrer">《JavaScript 设计模式》<ExternalLinkIcon/></a>\n<a href="https://juejin.im/post/5afe6430518825428630bc4d" target="_blank" rel="noopener noreferrer">《JavaScript 中常见设计模式整理》<ExternalLinkIcon/></a></p>\n<h2 id="_145-观察者模式和发布订阅模式有什么不同" tabindex="-1"><a class="header-anchor" href="#_145-观察者模式和发布订阅模式有什么不同" aria-hidden="true">#</a> 145. 观察者模式和发布订阅模式有什么不同？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>发布订阅模式其实属于广义上的观察者模式\n \n在观察者模式中，观察者需要直接订阅目标事件。在目标发出内容改变的事件后，直接接收事件并作出响应。\n \n而在发布订阅模式中，发布者和订阅者之间多了一个调度中心。调度中心一方面从发布者接收事件，另一方面向订阅者发布事件，订阅者需要在调度中心中订阅事件。通过调度中心实现了发布者和订阅者关系的解耦。使用发布订阅者模式更利于我们代码的可维护性。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>详细资料可以参考：\n<a href="https://www.zhihu.com/question/23486749" target="_blank" rel="noopener noreferrer">《观察者模式和发布订阅模式有什么不同？》<ExternalLinkIcon/></a></p>\n<h2 id="_146-vue-的生命周期是什么" tabindex="-1"><a class="header-anchor" href="#_146-vue-的生命周期是什么" aria-hidden="true">#</a> 146. Vue 的生命周期是什么？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>Vue 的生命周期指的是组件从创建到销毁的一系列的过程，被称为 Vue 的生命周期。通过提供的 Vue 在生命周期各个阶段的钩子函数，我们可以很好的在 Vue 的各个生命阶段实现一些操作。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="_147-vue-的各个生命阶段是什么" tabindex="-1"><a class="header-anchor" href="#_147-vue-的各个生命阶段是什么" aria-hidden="true">#</a> 147. Vue 的各个生命阶段是什么？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>Vue 一共有8个生命阶段，分别是创建前、创建后、加载前、加载后、更新前、更新后、销毁前和销毁后，每个阶段对应了一个生命周期的钩子函数。\n \n（1）beforeCreate 钩子函数，在实例初始化之后，在数据监听和事件配置之前触发。因此在这个事件中我们是获取不到 data 数据的。\n \n（2）created 钩子函数，在实例创建完成后触发，此时可以访问 data、methods 等属性。但这个时候组件还没有被挂载到页面中去，所以这个时候访问不到 $el 属性。一般我们可以在这个函数中进行一些页面初始化的工作，比如通过 ajax 请求数据来对页面进行初始化。\n \n（3）beforeMount 钩子函数，在组件被挂载到页面之前触发。在 beforeMount 之前，会找到对应的 template，并编译成 render 函数。\n \n（4）mounted 钩子函数，在组件挂载到页面之后触发。此时可以通过 DOM API 获取到页面中的 DOM 元素。\n \n（5）beforeUpdate 钩子函数，在响应式数据更新时触发，发生在虚拟 DOM 重新渲染和打补丁之前，这个时候我们可以对可能会被移除的元素做一些操作，比如移除事件监听器。\n \n（6）updated 钩子函数，虚拟 DOM 重新渲染和打补丁之后调用。\n \n（7）beforeDestroy 钩子函数，在实例销毁之前调用。一般在这一步我们可以销毁定时器、解绑全局事件等。\n \n（8）destroyed 钩子函数，在实例销毁之后调用，调用后，Vue 实例中的所有东西都会解除绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。\n \n当我们使用 keep-alive 的时候，还有两个钩子函数，分别是 activated 和 deactivated 。用 keep-alive 包裹的组件在切换时不会进行销毁，而是缓存到内存中并执行 deactivated 钩子函数，命中缓存渲染后会执行 actived 钩子函数。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>详细资料可以参考：\n<a href="https://juejin.im/entry/5aee8fbb518825671952308c" target="_blank" rel="noopener noreferrer">《vue 生命周期深入》<ExternalLinkIcon/></a>\n<a href="https://cn.vuejs.org/v2/guide/instance.html" target="_blank" rel="noopener noreferrer">《Vue 实例》<ExternalLinkIcon/></a></p>\n<h2 id="_148-vue-组件间的参数传递方式" tabindex="-1"><a class="header-anchor" href="#_148-vue-组件间的参数传递方式" aria-hidden="true">#</a> 148. Vue 组件间的参数传递方式？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>（1）父子组件间通信\n \n第一种方法是子组件通过 props 属性来接受父组件的数据，然后父组件在子组件上注册监听事件，子组件通过 emit 触发事\n件来向父组件发送数据。\n \n第二种是通过 ref 属性给子组件设置一个名字。父组件通过 $refs 组件名来获得子组件，子组件通过 $parent 获得父组\n件，这样也可以实现通信。\n \n第三种是使用 provider/inject，在父组件中通过 provider 提供变量，在子组件中通过 inject 来将变量注入到组件\n中。不论子组件有多深，只要调用了 inject 那么就可以注入 provider 中的数据。\n \n（2）兄弟组件间通信\n \n第一种是使用 eventBus 的方法，它的本质是通过创建一个空的 Vue 实例来作为消息传递的对象，通信的组件引入这个实\n例，通信的组件通过在这个实例上监听和触发事件，来实现消息的传递。\n \n第二种是通过 $parent.$refs 来获取到兄弟组件，也可以进行通信。\n \n（3）任意组件之间\n \n使用 eventBus ，其实就是创建一个事件中心，相当于中转站，可以用它来传递事件和接收事件。\n \n \n如果业务逻辑复杂，很多组件之间需要同时处理一些公共的数据，这个时候采用上面这一些方法可能不利于项目的维护。这个时候\n可以使用 vuex ，vuex 的思想就是将这一些公共的数据抽离出来，将它作为一个全局的变量来管理，然后其他组件就可以对这个\n公共数据进行读写操作，这样达到了解耦的目的。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>详细资料可以参考：\n<a href="https://juejin.im/entry/5ba215ac5188255c6d0d8345" target="_blank" rel="noopener noreferrer">《VUE 组件之间数据传递全集》<ExternalLinkIcon/></a></p>\n<h2 id="_149-computed-和-watch-的差异" tabindex="-1"><a class="header-anchor" href="#_149-computed-和-watch-的差异" aria-hidden="true">#</a> 149. computed 和 watch 的差异？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>（1）computed 是计算一个新的属性，并将该属性挂载到 Vue 实例上，而 watch 是监听已经存在且已挂载到 Vue 实例上的数据，所以用 watch 同样可以监听 computed 计算属性的变化。\n \n（2）computed 本质是一个惰性求值的观察者，具有缓存性，只有当依赖变化后，第一次访问 computed 属性，才会计算新的值。而 watch 则是当数据发生变化便会调用执行函数。\n \n（3）从使用场景上说，computed 适用一个数据被多个数据影响，而 watch 适用一个数据影响多个数据。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>详细资料可以参考：\n<a href="https://juejin.im/post/5b98c4da6fb9a05d353c5fd7" target="_blank" rel="noopener noreferrer">《做面试的不倒翁：浅谈 Vue 中 computed 实现原理》<ExternalLinkIcon/></a>\n<a href="https://juejin.im/post/5af908ea5188254265399009" target="_blank" rel="noopener noreferrer">《深入理解 Vue 的 watch 实现原理及其实现方式》<ExternalLinkIcon/></a></p>\n<h2 id="_150-vue-router-中的导航钩子函数" tabindex="-1"><a class="header-anchor" href="#_150-vue-router-中的导航钩子函数" aria-hidden="true">#</a> 150. vue-router 中的导航钩子函数</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>（1）全局的钩子函数 beforeEach 和 afterEach\n \nbeforeEach 有三个参数，to 代表要进入的路由对象，from 代表离开的路由对象。next 是一个必须要执行的函数，如果不传参数，那就执行下一个钩子函数，如果传入 false，则终止跳转，如果传入一个路径，则导航到对应的路由，如果传入 error ，则导航终止，error 传入错误的监听函数。\n \n（2）单个路由独享的钩子函数 beforeEnter，它是在路由配置上直接进行定义的。\n \n（3）组件内的导航钩子主要有这三种：beforeRouteEnter、beforeRouteUpdate、beforeRouteLeave。它们是直接在路由组\n件内部直接进行定义的。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>详细资料可以参考：\n<a href="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E5%85%A8%E5%B1%80%E5%89%8D%E7%BD%AE%E5%AE%88%E5%8D%AB" target="_blank" rel="noopener noreferrer">《导航守卫》<ExternalLinkIcon/></a></p>\n<h2 id="_151-route-和-router-的区别" tabindex="-1"><a class="header-anchor" href="#_151-route-和-router-的区别" aria-hidden="true">#</a> 151. $route 和 $router 的区别？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>$route 是“路由信息对象”，包括 path，params，hash，query，fullPath，matched，name 等路由信息参数。而 $router 是“路由实例”对象包括了路由的跳转方法，钩子函数等。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="_152-vue-常用的修饰符" tabindex="-1"><a class="header-anchor" href="#_152-vue-常用的修饰符" aria-hidden="true">#</a> 152. vue 常用的修饰符？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>.prevent: 提交事件不再重载页面；.stop: 阻止单击事件冒泡；.self: 当事件发生在该元素本身而不是子元素的时候会触发；\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="_153-vue-中-key-值的作用" tabindex="-1"><a class="header-anchor" href="#_153-vue-中-key-值的作用" aria-hidden="true">#</a> 153. vue 中 key 值的作用？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>vue 中 key 值的作用可以分为两种情况来考虑。\n \n第一种情况是 v-if 中使用 key。由于 Vue 会尽可能高效地渲染元素，通常会复用已有元素而不是从头开始渲染。因此当我们使用 v-if 来实现元素切换的时候，如果切换前后含有相同类型的元素，那么这个元素就会被复用。如果是相同的 input 元素，那么切换前后用户的输入不会被清除掉，这样是不符合需求的。因此我们可以通过使用 key 来唯一的标识一个元素，这个情况下，使用 key 的元素不会被复用。这个时候 key 的作用是用来标识一个独立的元素。\n \n第二种情况是 v-for 中使用 key。用 v-for 更新已渲染过的元素列表时，它默认使用“就地复用”的策略。如果数据项的顺序发生了改变，Vue 不会移动 DOM 元素来匹配数据项的顺序，而是简单复用此处的每个元素。因此通过为每个列表项提供一个 key 值，来以便 Vue 跟踪元素的身份，从而高效的实现复用。这个时候 key 的作用是为了高效的更新渲染虚拟 DOM。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>详细资料可以参考：\n<a href="https://segmentfault.com/a/1190000016344599" target="_blank" rel="noopener noreferrer">《Vue 面试中，经常会被问到的面试题 Vue 知识点整理》<ExternalLinkIcon/></a>\n<a href="https://www.zhihu.com/question/61064119" target="_blank" rel="noopener noreferrer">《Vue2.0 v-for 中 :key 到底有什么用？》<ExternalLinkIcon/></a>\n<a href="https://www.cnblogs.com/RainyBear/p/8563101.html" target="_blank" rel="noopener noreferrer">《vue 中 key 的作用》<ExternalLinkIcon/></a></p>\n<h2 id="_154-computed-和-watch-区别" tabindex="-1"><a class="header-anchor" href="#_154-computed-和-watch-区别" aria-hidden="true">#</a> 154. computed 和 watch 区别？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>computed 是计算属性，依赖其他属性计算值，并且 computed 的值有缓存，只有当计算值变化才会返回内容。\n \nwatch 监听到值的变化就会执行回调，在回调中可以进行一些逻辑操作。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="_155-keep-alive-组件有什么作用" tabindex="-1"><a class="header-anchor" href="#_155-keep-alive-组件有什么作用" aria-hidden="true">#</a> 155. keep-alive 组件有什么作用？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>如果你需要在组件切换的时候，保存一些组件的状态防止多次渲染，就可以使用 keep-alive 组件包裹需要保存的组件。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="_156-vue-中-mixin-和-mixins-区别" tabindex="-1"><a class="header-anchor" href="#_156-vue-中-mixin-和-mixins-区别" aria-hidden="true">#</a> 156. vue 中 mixin 和 mixins 区别？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>mixin 用于全局混入，会影响到每个组件实例。\n \nmixins 应该是我们最常使用的扩展组件的方式了。如果多个组件中有相同的业务逻辑，就可以将这些逻辑剥离出来，通过 mixins 混入代码，比如上拉下拉加载数据这种逻辑等等。另外需要注意的是 mixins 混入的钩子函数会先于组件内的钩子函数执行，并且在遇到同名选项的时候也会有选择性的进行合并\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>详细资料可以参考：\n<a href="https://juejin.im/book/5bdc715fe51d454e755f75ef/section/5bdc731b51882516c56ced6f" target="_blank" rel="noopener noreferrer">《前端面试之道》<ExternalLinkIcon/></a>\n<a href="https://cn.vuejs.org/v2/guide/mixins.html" target="_blank" rel="noopener noreferrer">《混入》<ExternalLinkIcon/></a></p>\n<h2 id="_157-开发中常用的几种-content-type" tabindex="-1"><a class="header-anchor" href="#_157-开发中常用的几种-content-type" aria-hidden="true">#</a> 157. 开发中常用的几种 Content-Type ？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>（1）application/x-www-form-urlencoded\n \n浏览器的原生 form 表单，如果不设置 enctype 属性，那么最终就会以 application/x-www-form-urlencoded 方式提交数据。该种方式提交的数据放在 body 里面，数据按照 key1=val1&amp;key2=val2 的方式进行编码，key 和 val 都进行了 URL\n转码。\n \n（2）multipart/form-data\n \n该种方式也是一个常见的 POST 提交方式，通常表单上传文件时使用该种方式。\n \n（3）application/json\n \n告诉服务器消息主体是序列化后的 JSON 字符串。\n \n（4）text/xml\n \n该种方式主要用来提交 XML 格式的数据。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>详细资料可以参考：\n<a href="https://honglu.me/2015/07/13/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%87%A0%E7%A7%8DContent-Type/" target="_blank" rel="noopener noreferrer">《常用的几种 Content-Type》<ExternalLinkIcon/></a></p>\n<h2 id="_158-如何封装一个-javascript-的类型判断函数" tabindex="-1"><a class="header-anchor" href="#_158-如何封装一个-javascript-的类型判断函数" aria-hidden="true">#</a> 158. 如何封装一个 javascript 的类型判断函数？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>function getType(value) {\n  // 判断数据是 null 的情况\n  if (value === null) {\n    return value + "";\n  }\n \n  // 判断数据是引用类型的情况\n  if (typeof value === "object") {\n    let valueClass = Object.prototype.toString.call(value),\n      type = valueClass.split(" ")[1].split("");\n \n    type.pop();\n \n    return type.join("").toLowerCase();\n  } else {\n    // 判断数据是基本数据类型的情况和函数的情况\n    return typeof value;\n  }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>详细资料可以参考：\n<a href="https://github.com/mqyqingfeng/Blog/issues/28" target="_blank" rel="noopener noreferrer">《JavaScript 专题之类型判断(上)》<ExternalLinkIcon/></a></p>\n<h2 id="_159-如何判断一个对象是否为空对象" tabindex="-1"><a class="header-anchor" href="#_159-如何判断一个对象是否为空对象" aria-hidden="true">#</a> 159. 如何判断一个对象是否为空对象？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>function checkNullObj(obj) {\n  return Object.keys(obj).length === 0;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>详细资料可以参考：\n<a href="https://blog.csdn.net/FungLeo/article/details/78113661" target="_blank" rel="noopener noreferrer">《js 判断一个 object 对象是否为空》<ExternalLinkIcon/></a></p>\n<h2 id="_160-使用闭包实现每隔一秒打印-1-2-3-4" tabindex="-1"><a class="header-anchor" href="#_160-使用闭包实现每隔一秒打印-1-2-3-4" aria-hidden="true">#</a> 160. 使用闭包实现每隔一秒打印 1,2,3,4</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>// 使用闭包实现\nfor (var i = 0; i &lt; 5; i++) {\n  (function(i) {\n    setTimeout(function() {\n      console.log(i);\n    }, i * 1000);\n  })(i);\n}\n \n// 使用 let 块级作用域\n \nfor (let i = 0; i &lt; 5; i++) {\n  setTimeout(function() {\n    console.log(i);\n  }, i * 1000);\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="_161-手写一个-jsonp" tabindex="-1"><a class="header-anchor" href="#_161-手写一个-jsonp" aria-hidden="true">#</a> 161. 手写一个 jsonp</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>function jsonp(url, params, callback) {\n  // 判断是否含有参数\n  let queryString = url.indexOf("?") === "-1" ? "?" : "&amp;";\n \n  // 添加参数\n  for (var k in params) {\n    if (params.hasOwnProperty(k)) {\n      queryString += k + "=" + params[k] + "&amp;";\n    }\n  }\n \n  // 处理回调函数名\n  let random = Math.random()\n      .toString()\n      .replace(".", ""),\n    callbackName = "myJsonp" + random;\n \n  // 添加回调函数\n  queryString += "callback=" + callbackName;\n \n  // 构建请求\n  let scriptNode = document.createElement("script");\n  scriptNode.src = url + queryString;\n \n  window[callbackName] = function() {\n    // 调用回调函数\n    callback(...arguments);\n \n    // 删除这个引入的脚本\n    document.getElementsByTagName("head")[0].removeChild(scriptNode);\n  };\n \n  // 发起请求\n  document.getElementsByTagName("head")[0].appendChild(scriptNode);\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><p>详细资料可以参考：\n<a href="https://www.cnblogs.com/zzc5464/p/jsonp.html" target="_blank" rel="noopener noreferrer">《原生 jsonp 具体实现》<ExternalLinkIcon/></a>\n<a href="https://segmentfault.com/a/1190000007665361#articleHeader1" target="_blank" rel="noopener noreferrer">《jsonp 的原理与实现》<ExternalLinkIcon/></a></p>\n<h2 id="_162-手写一个观察者模式" tabindex="-1"><a class="header-anchor" href="#_162-手写一个观察者模式" aria-hidden="true">#</a> 162. 手写一个观察者模式？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>var events = (function() {\n  var topics = {};\n \n  return {\n    // 注册监听函数\n    subscribe: function(topic, handler) {\n      if (!topics.hasOwnProperty(topic)) {\n        topics[topic] = [];\n      }\n      topics[topic].push(handler);\n    },\n \n    // 发布事件，触发观察者回调事件\n    publish: function(topic, info) {\n      if (topics.hasOwnProperty(topic)) {\n        topics[topic].forEach(function(handler) {\n          handler(info);\n        });\n      }\n    },\n \n    // 移除主题的一个观察者的回调事件\n    remove: function(topic, handler) {\n      if (!topics.hasOwnProperty(topic)) return;\n \n      var handlerIndex = -1;\n      topics[topic].forEach(function(item, index) {\n        if (item === handler) {\n          handlerIndex = index;\n        }\n      });\n \n      if (handlerIndex >= 0) {\n        topics[topic].splice(handlerIndex, 1);\n      }\n    },\n \n    // 移除主题的所有观察者的回调事件\n    removeAll: function(topic) {\n      if (topics.hasOwnProperty(topic)) {\n        topics[topic] = [];\n      }\n    }\n  };\n})();\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br></div></div><p>详细资料可以参考：\n<a href="https://segmentfault.com/a/1190000006934031#articleHeader1" target="_blank" rel="noopener noreferrer">《JS 事件模型》<ExternalLinkIcon/></a></p>\n<h2 id="_163-eventemitter-实现" tabindex="-1"><a class="header-anchor" href="#_163-eventemitter-实现" aria-hidden="true">#</a> 163. EventEmitter 实现</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>class EventEmitter {\n  constructor() {\n    this.events = {};\n  }\n \n  on(event, callback) {\n    let callbacks = this.events[event] || [];\n    callbacks.push(callback);\n    this.events[event] = callbacks;\n \n    return this;\n  }\n \n  off(event, callback) {\n    let callbacks = this.events[event];\n    this.events[event] = callbacks &amp;&amp; callbacks.filter(fn => fn !== callback);\n \n    return this;\n  }\n \n  emit(event, ...args) {\n    let callbacks = this.events[event];\n    callbacks.forEach(fn => {\n      fn(...args);\n    });\n \n    return this;\n  }\n \n  once(event, callback) {\n    let wrapFun = function(...args) {\n      callback(...args);\n \n      this.off(event, wrapFun);\n    };\n    this.on(event, wrapFun);\n \n    return this;\n  }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div><h2 id="_164-一道常被人轻视的前端-js-面试题" tabindex="-1"><a class="header-anchor" href="#_164-一道常被人轻视的前端-js-面试题" aria-hidden="true">#</a> 164. 一道常被人轻视的前端 JS 面试题</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>function Foo() {\n  getName = function() {\n    alert(1);\n  };\n  return this;\n}\nFoo.getName = function() {\n  alert(2);\n};\nFoo.prototype.getName = function() {\n  alert(3);\n};\nvar getName = function() {\n  alert(4);\n};\nfunction getName() {\n  alert(5);\n}\n \n//请写出以下输出结果：\nFoo.getName(); // 2\ngetName(); // 4\nFoo().getName(); // 1\ngetName(); // 1\nnew Foo.getName(); // 2\nnew Foo().getName(); // 3\nnew new Foo().getName(); // 3\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><p>详细资料可以参考：\n<a href="https://github.com/Wscats/Good-text-Share/issues/85" target="_blank" rel="noopener noreferrer">《前端程序员经常忽视的一个 JavaScript 面试题》<ExternalLinkIcon/></a>\n<a href="https://segmentfault.com/q/1010000008430170" target="_blank" rel="noopener noreferrer">《一道考察运算符优先级的 JavaScript 面试题》<ExternalLinkIcon/></a>\n<a href="https://www.cnblogs.com/xxcanghai/p/5189353.html" target="_blank" rel="noopener noreferrer">《一道常被人轻视的前端 JS 面试题》<ExternalLinkIcon/></a></p>\n<h2 id="_165-如何确定页面的可用性时间-什么是-performance-api" tabindex="-1"><a class="header-anchor" href="#_165-如何确定页面的可用性时间-什么是-performance-api" aria-hidden="true">#</a> 165. 如何确定页面的可用性时间，什么是 Performance API？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>Performance API 用于精确度量、控制、增强浏览器的性能表现。这个 API 为测量网站性能，提供以前没有办法做到的精度。\n \n使用 getTime 来计算脚本耗时的缺点，首先，getTime方法（以及 Date 对象的其他方法）都只能精确到毫秒级别（一秒的千分之一），想要得到更小的时间差别就无能为力了。其次，这种写法只能获取代码运行过程中的时间进度，无法知道一些后台事件的时间进度，比如浏览器用了多少时间从服务器加载网页。\n \n为了解决这两个不足之处，ECMAScript 5引入“高精度时间戳”这个 API，部署在 performance 对象上。它的精度可以达到1毫秒\n的千分之一（1秒的百万分之一）。\n \nnavigationStart：当前浏览器窗口的前一个网页关闭，发生 unload 事件时的 Unix 毫秒时间戳。如果没有前一个网页，则等于 fetchStart 属性。\n \nloadEventEnd：返回当前网页 load 事件的回调函数运行结束时的 Unix 毫秒时间戳。如果该事件还没有发生，返回 0。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>根据上面这些属性，可以计算出网页加载各个阶段的耗时。比如，网页加载整个过程的耗时的计算方法如下：</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>var t = performance.timing;\nvar pageLoadTime = t.loadEventEnd - t.navigationStart;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>详细资料可以参考：\n<a href="http://javascript.ruanyifeng.com/bom/performance.html" target="_blank" rel="noopener noreferrer">《Performance API》<ExternalLinkIcon/></a></p>\n<h2 id="_166-js-中的命名规则" tabindex="-1"><a class="header-anchor" href="#_166-js-中的命名规则" aria-hidden="true">#</a> 166. js 中的命名规则</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>（1）第一个字符必须是字母、下划线（_）或美元符号（$）\n（2）余下的字符可以是下划线、美元符号或任何字母或数字字符\n \n一般我们推荐使用驼峰法来对变量名进行命名，因为这样可以与 ECMAScript 内置的函数和对象命名格式保持一致。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>详细资料可以参考：\n<a href="http://www.w3school.com.cn/js/pro_js_variables.asp" target="_blank" rel="noopener noreferrer">《ECMAScript 变量》<ExternalLinkIcon/></a></p>\n<h2 id="_167-js-语句末尾分号是否可以省略" tabindex="-1"><a class="header-anchor" href="#_167-js-语句末尾分号是否可以省略" aria-hidden="true">#</a> 167. js 语句末尾分号是否可以省略？</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>在 ECMAScript 规范中，语句结尾的分号并不是必需的。但是我们一般最好不要省略分号，因为加上分号一方面有\n利于我们代码的可维护性，另一方面也可以避免我们在对代码进行压缩时出现错误。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="_168-object-assign" tabindex="-1"><a class="header-anchor" href="#_168-object-assign" aria-hidden="true">#</a> 168. Object.assign()</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>Object.assign() 方法用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="_169-math-ceil-和-math-floor" tabindex="-1"><a class="header-anchor" href="#_169-math-ceil-和-math-floor" aria-hidden="true">#</a> 169. Math.ceil 和 Math.floor</h2>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> 向上取整，函数返回一个大于或等于给定数字的最小整数。\n \nMath<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> 向下取整，函数返回一个小于或等于给定数字的最大整数。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="_170-js-for-循环注意点" tabindex="-1"><a class="header-anchor" href="#_170-js-for-循环注意点" aria-hidden="true">#</a> 170. js for 循环注意点</h2>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">,</span> j <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n \n<span class="token comment">// 当判断语句含有多个语句时，以最后一个判断语句的值为准，因此上面的代码会执行 10 次。</span>\n<span class="token comment">// 当判断语句为空时，循环会一直进行。</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>',date:"2022-10-16",deps:[],hoistedTags:[],links:[],pathInferred:"/面试/2022/20221016.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"20221016",filePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/面试/2022/20221016.md",filePathRelative:"面试/2022/20221016.md",componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/面试/2022/20221016.html.vue",componentFilePathRelative:"pages/面试/2022/20221016.html.vue",componentFileChunkName:"v-7ade95ec",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/面试/2022/20221016.html.js",dataFilePathRelative:"pages/面试/2022/20221016.html.js",dataFileChunkName:"v-7ade95ec",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/面试/2022/20221016.html",htmlFilePathRelative:"面试/2022/20221016.html"},{data:{key:"v-11de4d87",path:"/%E5%B7%A5%E5%85%B7/2022/20221001.html",title:"Webpack 5基础入门手册",lang:"zh-CN",frontmatter:{title:"Webpack 5基础入门手册",date:"2022-10-01T00:00:00.000Z",tags:["webpack"],categories:["工具"]},excerpt:"",headers:[{level:2,title:"基础使用",slug:"基础使用",children:[]},{level:2,title:"自定义 webpack 配置",slug:"自定义-webpack-配置",children:[]},{level:2,title:"配置文件",slug:"配置文件",children:[]},{level:2,title:"自动引入资源",slug:"自动引入资源",children:[]},{level:2,title:"使用 source map",slug:"使用-source-map",children:[]},{level:2,title:"使用 watch mode(观察模式)",slug:"使用-watch-mode-观察模式",children:[]},{level:2,title:"使用 webpack-dev-server",slug:"使用-webpack-dev-server",children:[]},{level:2,title:"资源模块",slug:"资源模块",children:[]},{level:2,title:"Loader(预处理加载器)",slug:"loader-预处理加载器",children:[]},{level:2,title:"抽离和压缩css",slug:"抽离和压缩css",children:[]},{level:2,title:"babel-loader",slug:"babel-loader",children:[]},{level:2,title:"代码分离",slug:"代码分离",children:[]},{level:2,title:"拆分生产环境和开发环境",slug:"拆分生产环境和开发环境",children:[{level:3,title:"公共路径",slug:"公共路径",children:[]},{level:3,title:"环境变量",slug:"环境变量",children:[]},{level:3,title:"拆分配置文件",slug:"拆分配置文件",children:[]},{level:3,title:"合并配置文件",slug:"合并配置文件",children:[]}]},{level:2,title:"模块热替换与热加载",slug:"模块热替换与热加载",children:[]},{level:2,title:"eslint",slug:"eslint",children:[{level:3,title:"结合webpack使用",slug:"结合webpack使用",children:[]}]},{level:2,title:"git-hooks 与 husky",slug:"git-hooks-与-husky",children:[{level:3,title:"提交代码前进行 eslist 检测",slug:"提交代码前进行-eslist-检测",children:[]},{level:3,title:"使用 husky 进行代码提交前 eslist 检测",slug:"使用-husky-进行代码提交前-eslist-检测",children:[]}]},{level:2,title:"Webpack 模块与解析原理",slug:"webpack-模块与解析原理",children:[]},{level:2,title:"外部扩展",slug:"外部扩展",children:[]},{level:2,title:"依赖图",slug:"依赖图",children:[]},{level:2,title:"Web Works",slug:"web-works",children:[]},{level:2,title:"TypeScript",slug:"typescript",children:[{level:3,title:"使用第三方类库",slug:"使用第三方类库",children:[]}]},{level:2,title:"多页面应用",slug:"多页面应用",children:[{level:3,title:"entry 配置",slug:"entry-配置",children:[]}]},{level:2,title:"Tree shaking",slug:"tree-shaking",children:[]},{level:2,title:"渐进式网络应用程序 PWA",slug:"渐进式网络应用程序-pwa",children:[]},{level:2,title:"Shimming 预置全局变量",slug:"shimming-预置全局变量",children:[{level:3,title:"this 指向",slug:"this-指向",children:[]}]},{level:2,title:"创建一个小轮子",slug:"创建一个小轮子",children:[{level:3,title:"如何构建一个 library",slug:"如何构建一个-library",children:[]},{level:3,title:"创建一个 webpack-numbers",slug:"创建一个-webpack-numbers",children:[]},{level:3,title:"发布到 npm package上",slug:"发布到-npm-package上",children:[]}]},{level:2,title:"dll (动态链接库)",slug:"dll-动态链接库",children:[]}],git:{updatedTime:null,contributors:[]}},key:"v-11de4d87",path:"/%E5%B7%A5%E5%85%B7/2022/20221001.html",title:"Webpack 5基础入门手册",lang:"zh-CN",frontmatter:{title:"Webpack 5基础入门手册",date:"2022-10-01T00:00:00.000Z",tags:["webpack"],categories:["工具"]},excerpt:"",headers:[{level:2,title:"基础使用",slug:"基础使用",children:[]},{level:2,title:"自定义 webpack 配置",slug:"自定义-webpack-配置",children:[]},{level:2,title:"配置文件",slug:"配置文件",children:[]},{level:2,title:"自动引入资源",slug:"自动引入资源",children:[]},{level:2,title:"使用 source map",slug:"使用-source-map",children:[]},{level:2,title:"使用 watch mode(观察模式)",slug:"使用-watch-mode-观察模式",children:[]},{level:2,title:"使用 webpack-dev-server",slug:"使用-webpack-dev-server",children:[]},{level:2,title:"资源模块",slug:"资源模块",children:[]},{level:2,title:"Loader(预处理加载器)",slug:"loader-预处理加载器",children:[]},{level:2,title:"抽离和压缩css",slug:"抽离和压缩css",children:[]},{level:2,title:"babel-loader",slug:"babel-loader",children:[]},{level:2,title:"代码分离",slug:"代码分离",children:[]},{level:2,title:"拆分生产环境和开发环境",slug:"拆分生产环境和开发环境",children:[{level:3,title:"公共路径",slug:"公共路径",children:[]},{level:3,title:"环境变量",slug:"环境变量",children:[]},{level:3,title:"拆分配置文件",slug:"拆分配置文件",children:[]},{level:3,title:"合并配置文件",slug:"合并配置文件",children:[]}]},{level:2,title:"模块热替换与热加载",slug:"模块热替换与热加载",children:[]},{level:2,title:"eslint",slug:"eslint",children:[{level:3,title:"结合webpack使用",slug:"结合webpack使用",children:[]}]},{level:2,title:"git-hooks 与 husky",slug:"git-hooks-与-husky",children:[{level:3,title:"提交代码前进行 eslist 检测",slug:"提交代码前进行-eslist-检测",children:[]},{level:3,title:"使用 husky 进行代码提交前 eslist 检测",slug:"使用-husky-进行代码提交前-eslist-检测",children:[]}]},{level:2,title:"Webpack 模块与解析原理",slug:"webpack-模块与解析原理",children:[]},{level:2,title:"外部扩展",slug:"外部扩展",children:[]},{level:2,title:"依赖图",slug:"依赖图",children:[]},{level:2,title:"Web Works",slug:"web-works",children:[]},{level:2,title:"TypeScript",slug:"typescript",children:[{level:3,title:"使用第三方类库",slug:"使用第三方类库",children:[]}]},{level:2,title:"多页面应用",slug:"多页面应用",children:[{level:3,title:"entry 配置",slug:"entry-配置",children:[]}]},{level:2,title:"Tree shaking",slug:"tree-shaking",children:[]},{level:2,title:"渐进式网络应用程序 PWA",slug:"渐进式网络应用程序-pwa",children:[]},{level:2,title:"Shimming 预置全局变量",slug:"shimming-预置全局变量",children:[{level:3,title:"this 指向",slug:"this-指向",children:[]}]},{level:2,title:"创建一个小轮子",slug:"创建一个小轮子",children:[{level:3,title:"如何构建一个 library",slug:"如何构建一个-library",children:[]},{level:3,title:"创建一个 webpack-numbers",slug:"创建一个-webpack-numbers",children:[]},{level:3,title:"发布到 npm package上",slug:"发布到-npm-package上",children:[]}]},{level:2,title:"dll (动态链接库)",slug:"dll-动态链接库",children:[]}],content:"\r\n::: tip\r\n\r\nWebpack 是一种前端资源构建工具，静态模块打包器 ( module bundler )。在 Webpack 看来，前端的所有资源文件 ( js / json / css / img / less / … ) 都会作为模块处理。它将根据模块的依赖关系进行静态分析，打包生成对应的静态资源 ( module )。\r\n\r\n:::\r\n\r\n## 基础使用\r\n\r\n- 安装\r\n\r\n  首先使用 npm init -y 初始化项目，然后安装 webpack 以及 webpack-cli \r\n\r\n  ```js\r\n  // 本地安装(推荐)\r\n  npm i webpack webpack-cli -D\r\n  // 运行 webpack\r\n  npx webpack\r\n  // 查看打包详细信息\r\n  npx webpack --stats detailed\r\n  ```\r\n\r\n## 自定义 webpack 配置\r\n\r\n实际上，`webpack-cli`给我们提供了丰富的终端命令行指令，可以通过 `webpack --help`来查看\r\n\r\n- 指定入口文件和mode\r\n\r\n  ```js\r\n  // entry 命令后面就是指定的入口文件，mode 后面就是指定的 mode 通过选择 development(开发环境), production(生产环境) 或 none 之中的一个，来设置 mode 参数，你可以启用 webpack 内置在相应环境下的优化。其默认值为 production。\r\n  npx webpack --entry ./src/index.js --mode production\r\n  ```\r\n\r\n## 配置文件\r\n\r\n在文件根目录下新建 `webpack.config.js` 配置文件\r\n\r\n```js\r\n// webpack.config.js\r\nconst path = require('path')\r\nmodule.exports = {\r\n  entry: './src/index.js', // 设置入口文件\r\n\r\n  output: {  // 设置出口\r\n    filename: 'bundle.js', // 设置打包后的文件名\r\n    path: path.resolve(__dirname, './dist')  // 文件输出路径。例：会生成一个dist文件夹\r\n  },\r\n\r\n  mode: 'none' // 设置 mode 模式\r\n}\r\n\r\n// index.html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n  <meta charset=\"UTF-8\">\r\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n  <title>Hello</title>\r\n</head>\r\n<body>\r\n  // 在 script 标签里手动引入打包后的文件，打开html，就可以运行打包后文件里的方法了\r\n  <script src=\"./dist/bundle.js\"><\/script>\r\n</body>\r\n</html>\r\n```\r\n\r\n## 自动引入资源\r\n\r\n首先安装插件：\r\n\r\n```js\r\nnpm i html-webpack-plugin -D\r\n```\r\n\r\n调整 `webpack.config.js`配置文件：\r\n\r\n```js\r\nconst path = require('path')\r\nconst HtmlWebpackPlugin = require('html-webpack-plugin') // 引入插件\r\nmodule.exports = {\r\n  entry: './src/index.js',\r\n\r\n  output: {\r\n    filename: 'bundle.js',\r\n    path: path.resolve(__dirname, './dist'),\r\n    clean: true  // 清理在打包过程中清理上一次打包中没有用的内容\r\n  },\r\n\r\n  mode: 'none',\r\n\r\n  plugins: [ // 在 plugins 配置项里配置webpack插件\r\n    new HtmlWebpackPlugin({    \r\n      template: './index.html', // 指定模板\r\n      filename: 'app.html',   // 指定打包后的文件夹里的 html 文件名\r\n      inject: 'body'    //  指定在生成的 html 文件里的 body 标签里生成 script 标签\r\n    })\r\n  ]\r\n}\r\n```\r\n\r\n## 使用 source map\r\n\r\n当`webpack`打包源代码时，可能会很难追踪到error(错误)和warning(警告)在源代码中的原始位置。例如，如果将三个源文件（ `a.js` , `b.js`和`c.js`）打包到一个bundle ( `bundle.js` ）中，而其中一个源文件包含一个错误，那么堆栈跟踪就会直接指向到 bundle.js。你可能需要准确地知道错误来自于哪个源文件，所以这种提示这通常不会提供太多帮助。\r\n为了更容易地追踪error和 warning，JavaScript提供了`source maps` 功能，可以将编译后的代码映射回原始源代码。如果一个错误来自于b.js , source map就会明确的告诉你。\r\n\r\n```js\r\nmodule.exports = {\r\n  // ...\r\n  mode: 'development', // 设置 mode 为开发环境\r\n\r\n  devtool: 'cheap-module-source-map', // 在开发模式下追踪代码\r\n}\r\n// 配置好后，如果有错误或者警告，打开浏览器控制台就能准确知道报错位置\r\n```\r\n\r\n## 使用 watch mode(观察模式)\r\n\r\n在每次编译代码时，手动运行`npx webpack`会显得很麻烦。\r\n我们可以在webpack启动时添加\"watch”参数。如果其中一个文件被更新，代码将被重新编译，所以你不必再去手动运行整个构建。\r\n\r\n```js\r\nnpx webpack --watch\r\n```\r\n\r\n## 使用 webpack-dev-server\r\n\r\n`webpack-dev-server` 为你提供了一个基本的web server，并且具有live reloading(实时重新加载)功能\r\n\r\n```js\r\n// 先下载\r\nnpm i webpack-dev-server -D\r\n\r\n// webpack.config.js\r\nconst path = require('path')\r\nmodule.exports = {\r\n  // ...\r\n  devServer: {  // 配置 webpack-dev-server\r\n    static: path.resolve(__dirname, './dist'), // 告诉 dev server ，从什么位置查找文件\r\n    compress: false, // 设置是否在服务器中进行代码压缩，减少传输的大小\r\n    port: 3000, // 设置端口号\r\n    headers: {  // 可以设置一些头部给浏览器\r\n      'X-Access-Token': 'abc123'\r\n    },\r\n    proxy: { // 设置代理\r\n      '/api': 'http://localhost:9000'\r\n    },\r\n    // https: true,  如果想将本地http服务变成https服务，但是访问时浏览器会报是不安全的，因为我们默认使用的是自签名证书\r\n    http2: true,  // 如果想开启http2, http2 自带 https 证书\r\n    historyApiFallback: true  // 如果我们的应用是个SPA(单页面应用)，例 当路由到/some时(可以直接在地址栏里输入)，会发现此时刷新页面后，控制台会报错。开启 historyApiFallback 配置就不会报错了\r\n  }\r\n}\r\n\r\n// 运行 webpack-dev-server\r\nnpx webpack-dev-server serve\r\n```\r\n\r\n## 资源模块\r\n\r\n资源模块(asset module)是一种模块类型，它允许使用资源文件（字体，图标等）而无需配置额外 loader。\r\n\r\n资源模块类型(asset module type)，通过添加 4 种新的模块类型，来替换所有这些 loader：\r\n\r\n- `asset/resource` 发送一个单独的文件并导出 URL。之前通过使用 `file-loader` 实现。\r\n- `asset/inline` 导出一个资源的 data URL。之前通过使用 `url-loader` 实现。\r\n- `asset/source` 导出资源的源代码。之前通过使用 `raw-loader` 实现。\r\n- `asset` 在导出一个 data URI 和发送一个单独的文件之间自动选择。之前通过使用 `url-loader`，并且配置资源体积限制实现。\r\n\r\n当在 webpack 5 中使用旧的 assets loader（如 `file-loader`/`url-loader`/`raw-loader` 等）和 asset 模块时，你可能想停止当前 asset 模块的处理，并再次启动处理，这可能会导致 asset 重复，你可以通过将 asset 模块的类型设置为 `'javascript/auto'` 来解决。\r\n\r\n```js\r\nmodule.exports = {\r\n  entry: './src/index.js',\r\n  output: {\r\n    filename: 'bundle.js',\r\n    path: path.resolve(__dirname, './dist'),\r\n    clean: true,\r\n    // 第一种设置输出资源时，资源的名字，会随机生成哈希值\r\n    assetModuleFilename: 'images/[contenthash][ext]' \r\n  },\r\n  // ... \r\n  module: {  // 在 module 对象里配置模块， rules 配置项里配置规则\r\n    rules: [\r\n      {\r\n        test: /\\.png$/, // 以 png 为扩展名的文件\r\n        type: 'asset/resource',  // 使用 asset/resource 类型，打包后的文件夹里，会输出一张图片，在控制台上看，img标签的src是一个本地链接\r\n        generator: {  // 第二种设置输出资源时，资源的名字，会随机生成哈希值，generator 优先级高于 output \r\n          filename: 'images/[contenthash][ext]'\r\n        }\r\n      },\r\n\r\n      {\r\n        test: /\\.svg$/,\r\n        type: 'asset/inline'  // 使用 asset/resource 类型，不会在打包后的文件夹里生成图片，在控制台上看，img标签的src是一个data URL\r\n      },\r\n\r\n      {\r\n        test: /\\.txt$/,\r\n        type: 'asset/source' // 例： 会将 txt 文件的内容提取出来，我们可以在 js 文件中导入，并放入 div 中\r\n      },\r\n\r\n      {\r\n        test: /\\.jpg$/,\r\n        type: 'asset',\r\n        parser: {\r\n          dataUrlCondition: {\r\n            maxSize: 4 * 1024 * 1024 // 自动地在resource和 inline 之间进行选择: webpack默认条件，小于8kb的文件，将会视为inline模块类型,否则会被视为resource模块类型。可以在 dataUrlCondition 修改\r\n          }\r\n        }\r\n      }\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\n## Loader(预处理加载器)\r\n\r\nWebpack 支持使用 [loader](https://webpack.docschina.org/concepts/loaders) 对文件进行预处理。你可以构建包括 JavaScript 在内的任何静态资源。并且可以使用 Node.js 轻松编写自己的 loader。\r\n\r\n[`module.rules`](https://webpack.docschina.org/configuration/module/#modulerules) 允许你在 webpack 配置中指定多个 loader。 这种方式是展示 loader 的一种简明方式，并且有助于使代码变得简洁和易于维护。同时让你对各个 loader 有个全局概览：\r\n\r\nloader 从右到左（或从下到上）地取值(evaluate)/执行(execute)。在下面的示例中，从 sass-loader 开始执行，然后继续执行 css-loader，最后以 style-loader 为结束。查看 [loader 功能](https://webpack.docschina.org/concepts/loaders/#loader-features) 章节，了解有关 loader 顺序的更多信息。\r\n\r\n```js\r\nmodule.exports = {\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /\\.css$/,\r\n        use: [\r\n          { loader: 'style-loader' },\r\n          {\r\n            loader: 'css-loader',\r\n            options: {\r\n              modules: true,\r\n            },\r\n          },\r\n          { loader: 'sass-loader' },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n};\r\n```\r\n\r\n## 抽离和压缩css\r\n\r\n在多数情况下，我们也可以进行压缩CSS，以便在生产环境中节省加载时间，同时还可以将CSS文件抽离成一个单独的文件。实现这个功能，需要`mini-css-extract-plugin`这个插件来帮忙，本插件会将CSS提取到单独的文件中，为每个包含CSS的JS文件创建一个cSS文件，并且支持CSS和Source Maps 的按需加载。\r\n本插件基于webpack v5的新特性构建，并且需要webpack 5才能正常工作。之后将loader 与 plugin添加到你的 webpack配置文件中\r\n\r\n```js\r\n// 下载\r\nnpm i mini-css-extract-plugin -D\r\nnpm i css-minimizer-webpack-plugin -D\r\n// webpack.config.js\r\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin')  // 第一步引入抽离css插件\r\nconst CssMinimizerPlugin = require('css-minimizer-webpack-plugin')   // 第一步引入引入压缩css插件\r\nconst toml = require('toml')  // 处理toml 文件的插件\r\nconst yaml = require('yaml')  // 处理yaml 文件的插件\r\nconst json5 = require('json5')  // 处理 json5 文件的插件\r\n\r\nmodule.exports = {\r\n  // ... \r\n  mode: 'production', // 使用压缩css插件，修改 mode 为生产环境\r\n    \r\n  plugins: [\r\n    new HtmlWebpackPlugin({\r\n      template: './index.html',\r\n      filename: 'app.html',\r\n      inject: 'body'\r\n    }),\r\n    \r\n    new MiniCssExtractPlugin({ // 第二步，在 plugins 引入配置\r\n      filename: 'styles/[contenthash].css' //配置打包后的文件名\r\n    })\r\n  ],\r\n\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /\\.(css|less)$/, // 以css或less后缀的文件\r\n//第三步，style-loader 替换成 MiniCssExtractPlugin.loader\r\n        use: [MiniCssExtractPlugin.loader, 'css-loader', 'less-loader']\r\n      },\r\n\r\n      {\r\n        test: /\\.(woff|woff2|eot|ttf|otf)$/, // 字体资源\r\n        type: 'asset/resource'\r\n      },\r\n\r\n      {\r\n        test: /\\.(csv|tsv)$/,  // 其他资源文件，例如csv，tsv\r\n        use: 'csv-loader'\r\n      },\r\n\r\n      {\r\n        test: /\\.xml$/,  // 处理 xml 资源文件\r\n        use: 'xml-loader'\r\n      },\r\n\r\n      {\r\n        test: /\\.toml$/,\r\n        type: 'json',\r\n        parser: {\r\n          parse: toml.parse\r\n        }\r\n      },\r\n\r\n      {\r\n        test: /\\.yaml$/,\r\n        type: 'json',\r\n        parser: {\r\n          parse: yaml.parse\r\n        }\r\n      },\r\n\r\n      {\r\n        test: /\\.json5$/,\r\n        type: 'json',\r\n        parser: {\r\n          parse: json5.parse\r\n        }\r\n      }\r\n    ]\r\n  },\r\n\r\n  optimization: { // 在 optimization 优化配置里配置css压缩插件\r\n    minimizer: [\r\n      new CssMinimizerPlugin()\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\n## babel-loader\r\n\r\n作用：将 ES6 的代码转译成低版本浏览器支持的 ES5\r\n\r\n```js\r\n// 下载\r\nnpm i babel-loader @babel/core @babel/preset-env -D\r\n```\r\n\r\n在 webpack 配置对象中，需要将 babel-loader 添加到 module 列表中，就像下面这样：\r\n\r\n```javascript\r\nmodule: {\r\n  rules: [\r\n    {\r\n      test: /\\.js$/,\r\n      use: { \r\n        loader: 'babel-loader',\r\n        exclude: /node_modules)/, // 排除node_modules 里的js\r\n        options: {  \r\n          presets: ['@babel/preset-env'] // 在 options 里配置预设\r\n        }\r\n      }\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\n此时执行编译，在浏览器里打开项目发现报了一个致命错误:  regeneratorRuntime is not defined这个错误显然是未能正确配置babel。regeneratorRuntime 是webpack打包生成的全局辅助函数，由babel生成，用于兼容async/await的语法。\r\n\r\n```js\r\n// 正确配置,第一步下载插件\r\nnpm install --save @babel/runtime  // 这个包中包含了regeneratorRuntime 运行时需要\r\nnpm install --save-dev @babel/plugin-transform-runtime // 这个插件会在需要 regeneratorRuntime 的地方自动 require 导包\r\n\r\n// 第二步，修改 webpack.config.js 配置\r\nmodule: {\r\n  rules: [\r\n    {\r\n      test: /\\.js$/,\r\n      exclude: /(node_modules|bower_components)/, \r\n      use: { \r\n        loader: 'babel-loader',\r\n        options: {  \r\n          presets: ['@babel/preset-env'],\r\n          plugins: [\r\n              [\r\n                '@babel/plugin-transform-runtime'\r\n              ]\r\n            ]\r\n        }\r\n      }\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\n## 代码分离\r\n\r\n代码分离是 webpack 中最引人注目的特性之一。此特性能够把代码分离到不同的 bundle 中，然后可以按需加载或并行加载这些文件。代码分离可以用于获取更小的 bundle，以及控制资源加载优先级，如果使用合理，会极大影响加载时间。\r\n\r\n常用的代码分离方法有三种：\r\n\r\n- **入口起点**：使用 [`entry`](https://webpack.docschina.org/configuration/entry-context) 配置手动地分离代码。\r\n- **防止重复**：使用 [Entry dependencies](https://webpack.docschina.org/configuration/entry-context/#dependencies) 或者 [`SplitChunksPlugin`](https://webpack.docschina.org/plugins/split-chunks-plugin) 去重和分离 chunk。\r\n- **动态导入**：通过模块的内联函数调用来分离代码。\r\n\r\n更具体的请参考[官方文档](https://webpack.docschina.org/guides/code-splitting#root)\r\n\r\n## 拆分生产环境和开发环境\r\n\r\n### 公共路径\r\n\r\n[`publicPath`](https://webpack.docschina.org/configuration/output/#outputpublicpath) 配置选项在各种场景中都非常有用。你可以通过它来指定应用程序中所有资源的基础路径。\r\n\r\n```js\r\n// webpack.config.js\r\nmodule.exports = (env) => {\r\n  return {\r\n    // ...\r\n    output: {\r\n   // 项目中所有引入的资源前缀都改成了下面的公共路径\r\n      publicPath: 'http://localhost:8080/' // 配置公共路径\r\n    },\r\n  }\r\n}\r\n```\r\n\r\n### 环境变量\r\n\r\n```js\r\n// 设置了一个环境变量, production 为 true\r\nnpx webpack --env production=true\r\n// 改造 webpack.config.js\r\nmodule.exports = (env) => { // 改造成一个函数，拿到 env 参数\r\n  return {\r\n    // ...\r\n    mode: env.production ? 'production' : 'development',\r\n  }\r\n}\r\n```\r\n\r\n### 拆分配置文件\r\n\r\n如果配置文件中，都通过三元运算符的方式来进行配置，显然特别糟糕，我们可以拆分配置文件\r\n\r\n1. 在项目根目录中创建一个 config 文件夹，文件夹下创建 `webpack.config.dev.js` ,  `webpack.config.prod,js` 文件\r\n\r\n2.  如果将`module.exports`配置文件改成了函数形式，还原到原来的 `module.exports = { }`\r\n\r\n   ```js\r\n   // 通过 npx webpack -c 指定配置文件\r\n   npx webpack -c ./config/webpack.config.dev.js\r\n   ```\r\n\r\n### 合并配置文件\r\n\r\n开发配置文件和生产配置文件中，有很多相同的代码，我们可以创建一个 `webpack.config.commin.js`文件提取出来，并合并配置文件\r\n\r\n```js\r\n// 第一步下载webpack-merge\r\nnpm i webpack-merge -D\r\n// 第二步：在根目录 config 文件夹下创建一个 webpack.config.js\r\n\r\n// 第三步 webpack.config.js\r\nconst { merge } = require('webpack-merge') // 导入\r\n// 导入三个配置文件\r\nconst commonConfig = require('./webpack.config.common')\r\nconst productionConfig = require('./webpack.config.prod')\r\nconst developmentConfig = require('./webpack.config.dev')\r\n// 如果用户传入的环境变量里有development，则是开发配置合并公共配置\r\nmodule.exports = (env) => {\r\n  switch(true) {\r\n    case env.development:\r\n      return merge(commonConfig, developmentConfig)\r\n\r\n    case env.production:\r\n      return merge(commonConfig, productionConfig)\r\n\r\n    defult:\r\n      return new Error('No matching configuration was found')\r\n  }\r\n}\r\n```\r\n\r\n## 模块热替换与热加载\r\n\r\n> 模块热替换(HMR - hot module replacement)功能会在应用程序运行过程中，替换、添加或删除 [模块](https://webpack.docschina.org/concepts/modules/)，而无需重新加载整个页面。主要是通过以下几种方式，来显著加快开发速度：\r\n\r\n- 保留在完全重新加载页面期间丢失的应用程序状态。\r\n- 只更新变更内容，以节省宝贵的开发时间。\r\n- 在源代码中 CSS/JS 产生修改时，会立刻在浏览器中进行更新，这几乎相当于在浏览器 devtools 直接更改样式。\r\n\r\n```js\r\n// 开启webpack的热模块替换特性，需要配置devServer.hot参数:\r\nmodule.exports = {\r\n  // ...\r\n  devServer: {\r\n    hot: true,  // 默认开启热替换\r\n    liveReload: true // 默认开启热加载\r\n  }\r\n}\r\n```\r\n\r\n## eslint\r\n\r\n`eslint`是用来扫描我们所写的代码是否符合规范的工具。 往往我们的项目是多人协作 开发的，我们期望统一的代码规范，这时候可以让eslint来对我们进行约束。 严格意义上来说，eslint配置跟webpack无关，但在工程化开发环境中，它往往是不可或缺的。\r\n\r\n```js\r\n// 下载\r\nnpm i eslint -D\r\n```\r\n\r\n配置`eslint`，只需要在根目录下添加一个.eslintrc文件(或者.eslintrc.json, .js等)。当然，我们可以使用`eslint`工具来自动生成它：\r\n\r\n```js\r\nnpx eslint --init\r\n// 第一种只检查语法  第二种检查语法并发现问题  第三种检查语法发现问题并规范格式，我们通常选择第三种\r\n✔ How would you like to use ESLint? · syntax\r\n// 选择模块化语法，这里选择ESM\r\n✔ What type of modules does your project use? · esm\r\n// 选择是使用react还是vue,或者什么都没有\r\n✔ Which framework does your project use? · react\r\n// 项目中使用TS吗\r\n✔ Does your project use TypeScript? · No / Yes\r\n// 代码运行在哪里，browser浏览器，还是node后端\r\n✔ Where does your code run? · browser\r\n// 使用哪种方式配置规范，流行式/一问一答/导入自有的文件，这里选择的是第一种\r\n✔ How would you like to define a style for your project? · guide \r\n// 选择哪一种流行规范\r\n✔ which stvle quide do vou want to follow. airbnb\r\n// 配置文件放在什么地方\r\n✔ What format do you want your config file to be in? · JSON\r\n```\r\n\r\n```json\r\n// .eslintrc.json\r\n{\r\n    \"env\": { // 指定脚本的运行环境。每种环境都有一组特定的预定义全局变量。此处使用的 browser 预定义了浏览器环境中的全局变量，es6 启用除了 modules 以外的所有 ECMAScript 6 特性（该选项会自动设置 ecmaVersion 解析器选项为 6）。    \r\n        \"browser\": true,\r\n        \"es2021\": true // 支持es2021\r\n    },\r\n    \"extends\": [  // 检测中使用的预定义的规则集合。\r\n        \"airbnb-base\"  // 可以使用这个扩展文件来帮我们  检查文件\r\n    ],\r\n    \"parserOptions\": {\r\n        \"ecmaVersion\": 12,  \r\n        \"sourceType\": \"module\"  // 类型为 module\r\n    },\r\n    \"rules\": {\r\n      \"no-console\": 0  // 关闭不允许使用 console 规则\r\n    },\r\n    \"globals\": {\r\n\r\n    }\r\n}\r\n\r\n```\r\n\r\n### 结合webpack使用\r\n\r\n```js\r\nmodule.exports = {\r\n  //...\r\n  {\r\n        test: /\\.(js|jsx)$/,\r\n        exclude: /node-modules/,\r\n        use: ['babel-loader', 'eslint-loader']\r\n   },\r\n};\r\n```\r\n\r\n## git-hooks 与 husky\r\n\r\n为了保证团队里的开发人员提交的代码符合规范，我们可以在开发者上传代码时进行 校验。 我们常用 `husky` 来协助进行代码提交时的 `eslint` 校验。在使用`husky`之前， 我们先来研究一下 `git-hooks` 。\r\n\r\n```js\r\n初始化项目 git init\r\n在项目里运行 ls -la 命令 我们可以看到，存在一个\".git\"名称的文件夹。事实上，在我们项目中根目录下运行git命令时，git 会根据它来工作。\r\ncd .git  \r\ncd hooks\r\nls -la  // 进入到 hooks 文件夹里，可以看到有很多 sample 文件\r\n```\r\n\r\n### 提交代码前进行 eslist 检测\r\n\r\n我们需要使用`git hooks`里的 `pre-commit.sample` 文件里的方法\r\n\r\n```js\r\n// cat命令可以查看一个文件的内容\r\ncat pre-commit.sample\r\n// 我们可以看到这样一句话，大概意思是要启用这个钩子的话，我们就把这个文件的后缀名去掉。\r\nTo enable this hook, rename this file to \"pre-commit\"\r\n```\r\n\r\n虽然这样对我们本地来讲是可行的，但要注意，`.git`文件夹的改动无法同步到远端仓库。所以我们期望将`git-hook`的执行权移交到外面来。我们回到项目的根目录下，然后我们新建一个文件夹，暂时命名 为`.mygithooks`然后在此文件夹下，新增一个`git-hook`文件,命名为`pre-commit`，并写入以下内容：\r\n\r\n```js\r\nnpx eslint ./src  \r\n```\r\n\r\n我们新建了自己的`git-hook`，但此时 git 并不能识别。下面我们执行这行命令\r\n\r\n```js\r\n// 项目根目录下\r\ngit config core.hooksPath .mygithooks\r\n```\r\n\r\n上述命令给我们自己的文件，配置了`git-hook`的执行权限。 但这个时候我们`git commit`的话，可能会报这样的警告，并且没有执行我们的 shell\r\n\r\n```js\r\nhint: The 'pre-commit' hook was ignored because it's not set as \r\nexecutable.\r\n\r\nhint: You can disable this warning with `git config \r\nadvice.ignoredHook false`\r\n```\r\n\r\n这是因为我们的操作系统没有给出这个文件的可执行权限。 因此我们得再执行这样一句命令\r\n\r\n```\r\nchmod +x .mygithooks/pre-commit\r\n```\r\n\r\n现在我们执行 `git commit` 会先执行 `npx eslint ./src` 命令，进行 `eslist` 检测\r\n\r\n### 使用 husky 进行代码提交前 eslist 检测\r\n\r\nhusky在升级到7.x后，做了跟我们上述同样的事。 安装它之前，我们需要在package.json中的script里，先添加\r\n\r\n```js\r\n\"sctript\": {\r\n    // ...\r\n    \"prepare\": \"husky install\"  // prepare是一个npm钩子，意思是安装依赖的时候，会先执行husky install命令。这个命令就做了上述的123这三件事！\r\n}\r\n// 下载 husky\r\nnpm i husky -D\r\n```\r\n\r\n我们安装了7.x的`husky`会发现，项目根目录下生成了`.husky`的文件夹。 当然，7.x的`husky`似乎是有bug的，如果不能正常使用，那么我们只需要验证两件事\r\n\r\n```js\r\n// 第一件事：是否移交了git-hook的配置权限，执行命令 \"git config --list\"查看core.hooksPath配置是否存在，是否正确指向了.husky。如果没有，我们只需要手动的给加上就行：\r\ngit config core.hooksPath .husky\r\n// 第二件事：是否是可执行文件，如果没有，手动加上\r\nchmod +x .mygithooks/pre-commit \r\n```\r\n\r\n然后我们在`.husky`文件夹下创建一个文件命名为`pre-commit`，\r\n\r\n```\r\n// pre-commit\r\nnpx eslint ./src  \r\n```\r\n\r\n现在我们进行 `git commit` 提交，`husky`就会进行 `eslist` 检测\r\n\r\n## Webpack 模块与解析原理\r\n\r\n- **Webpack 模块**：所有能被引入的都可以当成一个模块，\r\n  例如：ESM，CommonJS，AMD，css/scss/less 文件中的 @import 语句\r\n\r\n- **解析原理**：\r\n\r\n  1. webpack 通过 Resolvers 实现了模块解析，它是基 enhanced-resolve 这个包实现的\r\n\r\n  2. 通过内置的 **enhanced-resolve** 可以解析**绝对路径**，**相对路径**，**模块路径**\r\n\r\n     ```js\r\n     // webpack.config.js\r\n     const path = require('path');\r\n     module.exports = {\r\n       //...\r\n       resolve: {  // 可以通过 resolve 里的 alias 配置项配置自定义路径\r\n         alias: {\r\n           \"@utils\": path.resolve(__dirname, 'src/utils/')\r\n        },\r\n      },\r\n     };\r\n     \r\n     ```\r\n\r\n  3. 如果遇到一个文件夹下有相同名称不同类型的文件（**main.js**，**main.json**），例如通过 **import** 导入时，没有写明导入文件夹哪个 **main** 文件，**webpack** 会默认导入 **js** 文件\r\n\r\n     ```js\r\n     // webpack会按照数组顺序去解析这些后缀名，对于同名的文件，webpack总是会先解析列在数组首位的后缀名的文件。\r\n     \r\n     module.exports = {\r\n       //...\r\n       resolve: {\r\n         extensions: ['.js', '.json', '.wasm'],\r\n      },\r\n     };\r\n     ```\r\n\r\n## 外部扩展\r\n\r\n有时候我们为了减小打包后的体积，从而把一些不变的第三方库用cdn的形式引入进来，比如jQuery\r\n\r\n```html\r\n<script \r\n  src=\"https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.js\"\r\n><\/script>\r\n\r\n```\r\n\r\n这个时候我们想在我们的代码里使用引入的**jquery**———但似乎三种模块引入方式都 不行，这时候怎么办呢？ webpack给我们提供了**Externals**的配置属性，让我们可以 配置外部扩展模块\r\n\r\n```js\r\nmodule.exports = {\r\n  //...\r\n  externals: {\r\n    jquery: 'jQuery', // key的名必须和你引入的名一样，value 是暴露在window上\r\n },\r\n};\r\n\r\n// index.js\r\nimport $ from 'jquery';\r\nconsole.log($);\r\n```\r\n\r\n## 依赖图\r\n\r\n每当一个文件依赖另一个文件时，webpack 会直接将文件视为存在依赖关系。 这使 得 webpack 可以获取非代码资源，如 images 或 web 字体等。并会把它们作为 依 赖 提供给应用程序。 当 webpack 开始工作时，它会根据我们写好的配置,从入口(entry) 开始，webpack 会递归的构建一个 依赖关系图，这个依赖图包含着应用程序中所需的每个模块，然后将所有模块打包为bundle(也就是output的配置项)。 单纯讲似乎很抽象，我们更期望能够可视化打包产物的依赖图，下边列示了一些bundle分析工具。\r\n\r\n- webpack-chart：webpack stats 可交互饼图；\r\n- webpack-visualizer：可视化并分析你的bundle，检查哪些模块占用空间，哪些可能使重复使用的；\r\n- webpack-bundle-analyzer：一个 plugin 和 CLI 工具，它将 bundle 内容展示为一个便捷的、交互式、可缩放的树状图形式；\r\n- webpack bundle optimize helper：分析你的bundle并提供可操作的改进措施，减少 bundle 的大小；\r\n- bundle-stats：生成一个 bundle 报告 ( bundle大小、资源、模块 )，并比较不同构建之间的结果。\r\n\r\n我们来使用 **webpack-bundle-analyzer** 实现下面这个案例。\r\n\r\n```js\r\n// 首先安装这个插件作为开发依赖\r\nnpm install --save-dev webpack-bundle-analyzer\r\n// 在配置文件中配置\r\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\r\nconst { BundleAnalyzerPlugin } = require('webpack-bundle-analyzer')\r\n\r\nmodule.exports = {\r\n  mode: 'development',\r\n  entry: {\r\n    app: './src/app.js',\r\n    app2: './src/app2.js'\r\n  },\r\n  plugins: [\r\n    new HtmlWebpackPlugin(),\r\n    new BundleAnalyzerPlugin()\r\n  ]\r\n}\r\n\r\n// 执行 webpack \r\nnpx webpack serve\r\n// 执行完后，点击执行后出现的网址，就可以看到可视化的打包产物依赖图\r\n```\r\n\r\n## Web Works\r\n\r\nhtml5之前，打开一个常规的网页，浏览器会启用几个线程？ 一般而言，至少存在三个线程(公用线程不计入在内):\r\n\r\n分别是js引擎线程(处理js)、GUI渲染线程(渲染页面)、浏览器事件触发线程(控制交 互)。 当一段JS脚本长时间占用着处理机,就会挂起浏览器的GUI更新，而后面的事件响应也 被排在队列中得不到处理，从而造成了浏览器被锁定进入假死状态。 现在如果遇到了这种情况，我们可以做的不仅仅是优化代码————webpack5 提供了解决方案，webworker。\r\n\r\nwebWorkers提供了js的后台处理线程的API，它允许将复杂耗时的单纯js逻辑处理放 在浏览器后台线程中进行处理，让js线程不阻塞UI线程的渲染。\r\n\r\n- 在入口文件同级目录下创建一个**work**脚本 `work.js`文件\r\n\r\n```js\r\nself.onmessage = (message) => {\r\n // self.postMessage 函数会返回结果\r\n  self.postMessage({\r\n    answer: 1111       \r\n  })\r\n}\r\n```\r\n\r\n```js\r\n// 入口文件 app.js\r\nconst worker = new Worker(new URL('./work.js', import.meta.url))\r\n\r\nworker.postMessage({\r\n  question: 'hi，那边的workder线程，请告诉我今天的幸运数字是多少？'\r\n})\r\n\r\nworker.onmessage = (message) => {\r\n  console.log(message.data.answer) // 接受 workder 返回的结果\r\n}\r\n```\r\n\r\n## TypeScript\r\n\r\n> 在前端生态里，TS扮演着越来越重要的角色。 我们直入正题，讲下如何在webpack工程化环境中集成TS。 首先，当然是安装我们的ts和对应的loader。\r\n\r\n```js\r\nnpm install --save-dev typescript ts-loader\r\n```\r\n\r\n接下来我们需要在项目根目录下添加一个ts的配置文件————tsconfig.json，我们可以用**ts**自带的工具来自动化生成它。\r\n\r\n```\r\nnpx tsc --init\r\n```\r\n\r\n我们发现生成了一个tsconfig.json，里面注释掉了绝大多数配置。 现在，根据我们想要的效果来打开对应的配置。\r\n\r\n```json\r\n{\r\n  \"compilerOptions\": {\r\n    \"rootDir\": \"./src\",   // 指定入口\r\n    \"outDir\": \"./dist\",   // 指定出口\r\n    \"noImplicitAny\": true,\r\n    \"sourceMap\": true,\r\n    \"module\": \"es6\",\r\n    \"target\": \"es5\",\r\n    \"jsx\": \"react\",\r\n    \"allowJs\": true,\r\n    \"moduleResolution\": \"node\"  \r\n }\r\n}\r\n```\r\n\r\n好了，接下来我们新增一个src/index.ts，内置一些内容。 然后我们别忘了更改我们的entry及配置对应的loder。 当然，还有**resolve.extensions**，将.ts放在.js之前，这样它会先找.ts。 注意，如果我们使用了**sourceMap**，一定记得和上面的ts配置一样，设置**sourcemap**为true。 也别忘记在我们的**webpack.config.js**里\r\n\r\n```js\r\nconst path = require('path')\r\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\r\n\r\nmodule.exports = {\r\n  mode: 'development',\r\n  entry: './src/app.ts',\r\n  devtool: 'inline-source-map',\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /\\.ts$/,\r\n        use: 'ts-loader',\r\n        exclude: /node_modules/\r\n      }\r\n    ]\r\n  },\r\n  resolve: {\r\n    extensions: ['.ts', '.js']\r\n  },\r\n  output: {\r\n    filename: 'bundle.js',\r\n    path: path.resolve(__dirname, './dist')\r\n  },\r\n  plugins: [\r\n    new HtmlWebpackPlugin()\r\n  ]\r\n}\r\n```\r\n\r\n### 使用第三方类库\r\n\r\n在从 npm 上安装第三方库时，一定要记得同时安装这个库的类型声明文件，我们可以从 [TypeSearch](https://www.ty pescriptlang.org/dt/search?search=) 中找到并安装这些第三方库的类型声明文件。举个例子，如果想安装 lodash 类型声明文件，我们可以运行下面的命令\r\n\r\n```js\r\nnpm install --save-dev @types/lodash\r\n```\r\n\r\n## 多页面应用\r\n\r\n### entry 配置\r\n\r\n- **单个入口（简写）语法**：`entry: string | [string]`\r\n\r\n```js\r\nmodule.exports = {\r\n  entry: './path/to/my/entry/file.js',\r\n};\r\n```\r\n\r\n```js\r\n// 多入口\r\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\r\n\r\nmodule.exports = {\r\n  mode: 'development',\r\n  plugins: [\r\n    new HtmlWebpackPlugin({\r\n      title: '多页面应用',  // 设置 title 标签，但模板的title内容需要改成 <title><%= htmlWebpackPlugin.options.title %></title>\r\n      template: './index.html',  // 设置模板\r\n      inject: 'body',  // 设置 script 标签注入哪个标签里\r\n      filename: 'chanel1/index.html',  // 设置输出 html 文件名\r\n      chunks: ['main', 'lodash'], // 默认会将 entry 里的所有入口引入\r\n      publicPath: 'http://www.b.com/'  // 设置公共路径\r\n    }),\r\n\r\n    new HtmlWebpackPlugin({\r\n      template: './index2.html',\r\n      inject: 'body',\r\n      filename: 'chanel2/index2.html',\r\n      chunks: ['main2', 'lodash'],\r\n      publicPath: 'http://www.a.com/'\r\n    })\r\n  ],\r\n\r\n  entry: {\r\n    main: {\r\n      import: ['./src/app2.js', './src/app.js'],\r\n      dependOn: 'lodash',   // 上面2个入口文件可能都用了 lodash，抽离出来\r\n      filename: 'chanel1/[name].js' // 设置打包后的输出文件\r\n    },\r\n    main2: {\r\n      import: './src/app3.js',\r\n      dependOn: 'lodash',\r\n      filename: 'chanel2/[name].js'\r\n    },\r\n    lodash: {\r\n      import: 'lodash',\r\n      filename: 'common/[name].js'\r\n    }\r\n  },\r\n\r\n  output: {\r\n    clean: true\r\n  }\r\n}\r\n```\r\n\r\n## Tree shaking\r\n\r\n`Tree Shaking` 指基于 ES Module 进行静态分析，通过 AST 将用不到的函数进行移除，从而减小打包体积。\r\n\r\n> 注意 Webpack 不能百分百安全地进行 tree-shaking。有些模块导入，只要被引入， 就会对应用程序产生重要的影响。一个很好的例子就是全局样式表，或者设置全局配 置的JavaScript 文件。\r\n>\r\n> Webpack 认为这样的文件有“副作用”。具有副作用的文件不应该做 tree-shaking， 因为这将破坏整个应用程序。\r\n>\r\n> Webpack 的设计者清楚地认识到不知道哪些文件有副作用的情况下打包代码的风 险，因此webpack4默认地将所有代码视为有副作用。这可以保护你免于删除必要的 文件，但这意味着 Webpack 的默认行为实际上是不进行 tree-shaking。值得注意的 是webpack5默认会进行 tree-shaking。 如何告诉 Webpack 你的代码无副作用，可以通过 package.json 有一个特殊的属性  sideEffects，就是为此而存在的。它有三个可能的值\r\n\r\n- **true**：如果不指定其他值的话。这意味着所有的文件都有副作用，也就是没有一个文件 可以 **tree-shaking**。\r\n- **false**：告诉 Webpack 没有文件有副作用，所有文件都可以 **tree-shaking**。\r\n- **数组[…]** ：是文件路径数组。它告诉 webpack，除了数组中包含的文件外，你的任何文件 都没有副作用。因此，除了指定的文件之外，其他文件都可以安全地进行 **treeshaking**。\r\n\r\n## 渐进式网络应用程序 PWA\r\n\r\n> **渐进式网络应用程序(progressive web application - PWA)，是一种可以提供类似于  native app(原生应用程序) 体验的 web app(网络应用程序)。PWA 可以用来做很多事。其中最重要的是，在离线(offline)时应用程序能够继续运行功能。这是通过使用 名为 Service Workers 的 web 技术来实现的。**\r\n\r\n## Shimming 预置全局变量\r\n\r\n可以通过内置的 **ProvidePlugin** 插件实现不用下载第三方包，在 webpack 编译的每个模块中，通过访问一个变量来获取一个 package。如果 webpack 看到模块中用到这个变量，它将在最终  bundle 中引入给定的 package。\r\n\r\n```js\r\nconst webpack = require('webpack')\r\nmodule.exports = {\r\n  mode: 'development',\r\n  entry: './src/index.js',\r\n  plugins: [\r\n    new webpack.ProvidePlugin({ \r\n      _: 'lodash' // 如果你遇到了至少一处用到 _ 变量的模块实例，你将 lodash package 引入进来，并将其提供给需要用到它的模块。\r\n\r\n   })\r\n ]\r\n}\r\n```\r\n\r\n还可以使用 ProvidePlugin 暴露出某个模块中单个导出，通过配置一个“数组路径”，这样就能很好的与 tree shaking 配合，将 lodash 中的其余没有用到的导出去除。\r\n\r\n```js\r\nconst webpack = require('webpack')\r\n\r\nmodule.exports = {\r\n  mode: 'development',\r\n  entry: './src/index.js',\r\n  plugins: [\r\n    new webpack.ProvidePlugin({\r\n      join: ['lodash', 'join'],\r\n   })\r\n ]\r\n}\r\n```\r\n\r\n### this 指向\r\n\r\n当模块运行在 CommonJS 上下文中，这将会变成一个问题，也就是说此时的 this 指向的是 module.exports 。在这种情况下，你可以通过使用 imports-loader 覆盖 this 指向\r\n\r\n```js\r\nnpm i imports-loader -D\r\n\r\n// webpack.config.js\r\nmodule.exports = {\r\n  // ...\r\n  module: {\r\n    rules: [\r\n      {  // 让 ./src/index.js 文件的 this 指向 window\r\n        test: require.resolve('./src/index.js'),\r\n        use: 'imports-loader?wrapper=window'\r\n      }\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\n## 创建一个小轮子\r\n\r\n### 如何构建一个 library\r\n\r\n> 除了打包应用程序，webpack 还可以用于打包 JavaScript library\r\n\r\n```js\r\n// 搭建好 webpapck 环境后，创建一个 src 文件夹 ，下有一个 indnx.js\r\nexport const add = (x, y) => {\r\n  return x + y\r\n}\r\n```\r\n\r\n```js\r\n//  webpack.config.js\r\nconst path = require(\"path\");\r\n\r\nmodule.exports = {\r\n  mode: 'production',\r\n  entry: './src/index.js',\r\n  // experiments: {  // ESM 引入暂时是一个实验性的功能，需要手动开启，还需要将 library 中的 name 属性删除\r\n  //   outputModule: true,\r\n  // },\r\n  output: {\r\n    path: path.resolve(__dirname, 'dist'),\r\n    filename: 'mylib.js',\r\n    library: {\r\n      name: 'mylib',  // 定义一个 library 名字\r\n      type: 'umd'  // 让我们的轮子可以通过 CommonJS，ASD，script src 引入\t\r\n    },\r\n    globalObject: 'globalThis' // 配置全局this\r\n  }\r\n}\r\n```\r\n\r\n### 创建一个 webpack-numbers\r\n\r\n> 假设我们正在编写一个名为 webpack-numbers 的小的 library，可以将数字 1 到 5 转换为文本表示，反之亦然，例如将 2 转换为 'two'。\r\n\r\n```js\r\n// 我们将 lodash 安装为 devDependencies 而不是 dependencies ，因为我们不需要将其打包到我们的库中，否则我们的库体积很容易变大。\r\nnpm i webpack webpack-cli lodash -D\r\n```\r\n\r\n```json\r\n// 在项目根目录下创建一个 src 文件夹，里面创建一个 ref.json\r\n[\r\n  {\r\n    \"num\": 1,\r\n    \"word\": \"One\"\r\n  },\r\n  {\r\n    \"num\": 2,\r\n    \"word\": \"Two\"\r\n  },\r\n  {\r\n    \"num\": 3,\r\n    \"word\": \"Three\"\r\n  },\r\n  {\r\n    \"num\": 4,\r\n    \"word\": \"Four\"\r\n  },\r\n  {\r\n    \"num\": 5,\r\n    \"word\": \"Five\"\r\n  },\r\n  {\r\n    \"num\": 0,\r\n    \"word\": \"Zero\"\r\n  }\r\n]\r\n```\r\n\r\n```js\r\n// src/index.js\r\nimport _ from 'lodash'\r\nimport numRef from './ref.json'\r\n\r\nexport function numToWord(num) {\r\n  return _.reduce(numRef, (accum, ref) => {\r\n    return ref.num === num ? ref.word : accum\r\n  }, '')\r\n}\r\n\r\nexport function wordToNum(word) {\r\n  return _.reduce(numRef, (accum, ref) => {\r\n    return ref.word === word && word.toLowerCase() ? ref.num : accum\r\n  }, -1)\r\n}\r\n```\r\n\r\n```js\r\n// webpack.config.js\r\nconst path = require(\"path\");\r\n\r\nmodule.exports = {\r\n  mode: 'production',\r\n  entry: './src/index.js',\r\n  output: {\r\n    path: path.resolve(__dirname, 'dist'),\r\n    filename: 'webpack-numbers.js',\r\n    library: {\r\n      name: 'webpackNumbers',\r\n      type: 'umd'\r\n    },\r\n    globalObject: 'globalThis'\r\n  },\r\n  externals: {\r\n    lodash: {\r\n      commonjs: 'lodash', //common规范中使用，其实下面一个可以不用写\r\n      commonjs2: 'lodash', \r\n      amd: 'lodash',  // amd 规范中所有\r\n      root: '_'  // 全局使用\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n```json\r\n// package.json\r\n{\r\n  // ...\r\n  \"main\": \"dist/webpack-numbers.js\", // 修改入口，修改成打包后的文件\r\n  // ... \r\n}\r\n\r\n```\r\n\r\n\r\n\r\n### 发布到 npm package上\r\n\r\n- 先在 npm 官网注册账号，点击个人图标，点击 packages 进去\r\n\r\n- 回到项目根目录打开命令行\r\n\r\n  ```js\r\n  npm config get registry  // 输入后返回下面的地址才是正确\r\n  https://registry.npmjs.org/  \r\n  \r\n  // 然后执行下面命令添加一个用户，然后输入npm官网注册的用户名\r\n  npm adduser\r\n  // 然后执行下面命令发布我们的包，成功后就可以在 npm 官网上看到并使用npm 下载\r\n  npm publish\r\n  ```\r\n\r\n## dll (动态链接库)\r\n\r\n可以通过 **webapck** 内置的 `DllPlugin`链接一些第三方库，减少 **webpack** 打包时间，下面以 `jquery` 为例\r\n\r\n```js\r\n// 在根目录下创建一个 webpack.dll.config.js 文件配置 dll\r\n// webpack.dll.config.js\r\nconst path = require(\"path\")\r\nconst webpack = require('webpack')\r\n\r\nmodule.exports = {\r\n  mode: 'production',\r\n  entry: {\r\n    jquery: ['jquery'] // 设置入口文件，这里是 jquery 包\r\n  },\r\n  output: {\r\n    filename: '[name].js',\r\n    path: path.resolve(__dirname, 'dll'),\r\n    library: '[name]_[hash]'\r\n  },\r\n  plugins: [\r\n    new webpack.DllPlugin({  // 通过 DllPlugin 配置 dll\r\n      name: '[name]_[hash]',\r\n      path: path.resolve(__dirname, 'dll/manifest.json')\r\n    })\r\n  ]\r\n}\r\n```\r\n\r\n```js\r\n// webpack.config.js\r\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\r\nconst path = require('path')\r\nconst webpack = require('webpack')\r\nconst AddAssetHtmlPlugin = require('add-asset-html-webpack-plugin') // 下载这个插件并导入，这个插件可以把 dll 文件夹也打包到 dist 文件夹里，这样打包时间又会恢复，但 jquery 第三方库单独拿出来了\r\n\r\nmodule.exports = {\r\n  mode: 'production',\r\n  entry: './src/index.js',\r\n  plugins: [\r\n    new HtmlWebpackPlugin(),\r\n    new webpack.DllReferencePlugin({ // 链接到动态链接库\r\n      manifest: path.resolve(__dirname, './dll/manifest.json')\r\n    }),\r\n    new AddAssetHtmlPlugin({\r\n      filepath: path.resolve(__dirname, './dll/jquery.js'),\r\n      publicPath: './'\r\n    })\r\n  ]\r\n}\r\n```\r\n\r\n[官方文档](https://webpack.docschina.org/concepts/)",contentRendered:'<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>Webpack 是一种前端资源构建工具，静态模块打包器 ( module bundler )。在 Webpack 看来，前端的所有资源文件 ( js / json / css / img / less / … ) 都会作为模块处理。它将根据模块的依赖关系进行静态分析，打包生成对应的静态资源 ( module )。</p>\n</div>\n<h2 id="基础使用" tabindex="-1"><a class="header-anchor" href="#基础使用" aria-hidden="true">#</a> 基础使用</h2>\n<ul>\n<li>\n<p>安装</p>\n<p>首先使用 npm init -y 初始化项目，然后安装 webpack 以及 webpack-cli</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 本地安装(推荐)</span>\nnpm i webpack webpack<span class="token operator">-</span>cli <span class="token operator">-</span><span class="token constant">D</span>\n<span class="token comment">// 运行 webpack</span>\nnpx webpack\n<span class="token comment">// 查看打包详细信息</span>\nnpx webpack <span class="token operator">--</span>stats detailed\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li>\n</ul>\n<h2 id="自定义-webpack-配置" tabindex="-1"><a class="header-anchor" href="#自定义-webpack-配置" aria-hidden="true">#</a> 自定义 webpack 配置</h2>\n<p>实际上，<code>webpack-cli</code>给我们提供了丰富的终端命令行指令，可以通过 <code>webpack --help</code>来查看</p>\n<ul>\n<li>\n<p>指定入口文件和mode</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// entry 命令后面就是指定的入口文件，mode 后面就是指定的 mode 通过选择 development(开发环境), production(生产环境) 或 none 之中的一个，来设置 mode 参数，你可以启用 webpack 内置在相应环境下的优化。其默认值为 production。</span>\nnpx webpack <span class="token operator">--</span>entry <span class="token punctuation">.</span><span class="token operator">/</span>src<span class="token operator">/</span>index<span class="token punctuation">.</span>js <span class="token operator">--</span>mode production\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li>\n</ul>\n<h2 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件" aria-hidden="true">#</a> 配置文件</h2>\n<p>在文件根目录下新建 <code>webpack.config.js</code> 配置文件</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// webpack.config.js</span>\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">\'./src/index.js\'</span><span class="token punctuation">,</span> <span class="token comment">// 设置入口文件</span>\n\n  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token comment">// 设置出口</span>\n    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">\'bundle.js\'</span><span class="token punctuation">,</span> <span class="token comment">// 设置打包后的文件名</span>\n    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'./dist\'</span><span class="token punctuation">)</span>  <span class="token comment">// 文件输出路径。例：会生成一个dist文件夹</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">\'none\'</span> <span class="token comment">// 设置 mode 模式</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// index.html</span>\n<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span>\n<span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span>\n<span class="token operator">&lt;</span>head<span class="token operator">></span>\n  <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span>meta http<span class="token operator">-</span>equiv<span class="token operator">=</span><span class="token string">"X-UA-Compatible"</span> content<span class="token operator">=</span><span class="token string">"IE=edge"</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span>title<span class="token operator">></span>Hello<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>\n<span class="token operator">&lt;</span>body<span class="token operator">></span>\n  <span class="token comment">// 在 script 标签里手动引入打包后的文件，打开html，就可以运行打包后文件里的方法了</span>\n  <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"./dist/bundle.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h2 id="自动引入资源" tabindex="-1"><a class="header-anchor" href="#自动引入资源" aria-hidden="true">#</a> 自动引入资源</h2>\n<p>首先安装插件：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>npm i html<span class="token operator">-</span>webpack<span class="token operator">-</span>plugin <span class="token operator">-</span><span class="token constant">D</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>调整 <code>webpack.config.js</code>配置文件：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'html-webpack-plugin\'</span><span class="token punctuation">)</span> <span class="token comment">// 引入插件</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">\'./src/index.js\'</span><span class="token punctuation">,</span>\n\n  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">\'bundle.js\'</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'./dist\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">clean</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token comment">// 清理在打包过程中清理上一次打包中没有用的内容</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">\'none\'</span><span class="token punctuation">,</span>\n\n  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token comment">// 在 plugins 配置项里配置webpack插件</span>\n    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    \n      <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">\'./index.html\'</span><span class="token punctuation">,</span> <span class="token comment">// 指定模板</span>\n      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">\'app.html\'</span><span class="token punctuation">,</span>   <span class="token comment">// 指定打包后的文件夹里的 html 文件名</span>\n      <span class="token literal-property property">inject</span><span class="token operator">:</span> <span class="token string">\'body\'</span>    <span class="token comment">//  指定在生成的 html 文件里的 body 标签里生成 script 标签</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h2 id="使用-source-map" tabindex="-1"><a class="header-anchor" href="#使用-source-map" aria-hidden="true">#</a> 使用 source map</h2>\n<p>当<code>webpack</code>打包源代码时，可能会很难追踪到error(错误)和warning(警告)在源代码中的原始位置。例如，如果将三个源文件（ <code>a.js</code> , <code>b.js</code>和<code>c.js</code>）打包到一个bundle ( <code>bundle.js</code> ）中，而其中一个源文件包含一个错误，那么堆栈跟踪就会直接指向到 bundle.js。你可能需要准确地知道错误来自于哪个源文件，所以这种提示这通常不会提供太多帮助。\n为了更容易地追踪error和 warning，JavaScript提供了<code>source maps</code> 功能，可以将编译后的代码映射回原始源代码。如果一个错误来自于b.js , source map就会明确的告诉你。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">\'development\'</span><span class="token punctuation">,</span> <span class="token comment">// 设置 mode 为开发环境</span>\n\n  <span class="token literal-property property">devtool</span><span class="token operator">:</span> <span class="token string">\'cheap-module-source-map\'</span><span class="token punctuation">,</span> <span class="token comment">// 在开发模式下追踪代码</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 配置好后，如果有错误或者警告，打开浏览器控制台就能准确知道报错位置</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="使用-watch-mode-观察模式" tabindex="-1"><a class="header-anchor" href="#使用-watch-mode-观察模式" aria-hidden="true">#</a> 使用 watch mode(观察模式)</h2>\n<p>在每次编译代码时，手动运行<code>npx webpack</code>会显得很麻烦。\n我们可以在webpack启动时添加&quot;watch”参数。如果其中一个文件被更新，代码将被重新编译，所以你不必再去手动运行整个构建。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>npx webpack <span class="token operator">--</span>watch\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="使用-webpack-dev-server" tabindex="-1"><a class="header-anchor" href="#使用-webpack-dev-server" aria-hidden="true">#</a> 使用 webpack-dev-server</h2>\n<p><code>webpack-dev-server</code> 为你提供了一个基本的web server，并且具有live reloading(实时重新加载)功能</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 先下载</span>\nnpm i webpack<span class="token operator">-</span>dev<span class="token operator">-</span>server <span class="token operator">-</span><span class="token constant">D</span>\n\n<span class="token comment">// webpack.config.js</span>\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token comment">// 配置 webpack-dev-server</span>\n    <span class="token keyword">static</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'./dist\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 告诉 dev server ，从什么位置查找文件</span>\n    <span class="token literal-property property">compress</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 设置是否在服务器中进行代码压缩，减少传输的大小</span>\n    <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">3000</span><span class="token punctuation">,</span> <span class="token comment">// 设置端口号</span>\n    <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token comment">// 可以设置一些头部给浏览器</span>\n      <span class="token string-property property">\'X-Access-Token\'</span><span class="token operator">:</span> <span class="token string">\'abc123\'</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 设置代理</span>\n      <span class="token string-property property">\'/api\'</span><span class="token operator">:</span> <span class="token string">\'http://localhost:9000\'</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">// https: true,  如果想将本地http服务变成https服务，但是访问时浏览器会报是不安全的，因为我们默认使用的是自签名证书</span>\n    <span class="token literal-property property">http2</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment">// 如果想开启http2, http2 自带 https 证书</span>\n    <span class="token literal-property property">historyApiFallback</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token comment">// 如果我们的应用是个SPA(单页面应用)，例 当路由到/some时(可以直接在地址栏里输入)，会发现此时刷新页面后，控制台会报错。开启 historyApiFallback 配置就不会报错了</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 运行 webpack-dev-server</span>\nnpx webpack<span class="token operator">-</span>dev<span class="token operator">-</span>server serve\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h2 id="资源模块" tabindex="-1"><a class="header-anchor" href="#资源模块" aria-hidden="true">#</a> 资源模块</h2>\n<p>资源模块(asset module)是一种模块类型，它允许使用资源文件（字体，图标等）而无需配置额外 loader。</p>\n<p>资源模块类型(asset module type)，通过添加 4 种新的模块类型，来替换所有这些 loader：</p>\n<ul>\n<li><code>asset/resource</code> 发送一个单独的文件并导出 URL。之前通过使用 <code>file-loader</code> 实现。</li>\n<li><code>asset/inline</code> 导出一个资源的 data URL。之前通过使用 <code>url-loader</code> 实现。</li>\n<li><code>asset/source</code> 导出资源的源代码。之前通过使用 <code>raw-loader</code> 实现。</li>\n<li><code>asset</code> 在导出一个 data URI 和发送一个单独的文件之间自动选择。之前通过使用 <code>url-loader</code>，并且配置资源体积限制实现。</li>\n</ul>\n<p>当在 webpack 5 中使用旧的 assets loader（如 <code>file-loader</code>/<code>url-loader</code>/<code>raw-loader</code> 等）和 asset 模块时，你可能想停止当前 asset 模块的处理，并再次启动处理，这可能会导致 asset 重复，你可以通过将 asset 模块的类型设置为 <code>\'javascript/auto\'</code> 来解决。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">\'./src/index.js\'</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">\'bundle.js\'</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'./dist\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">clean</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token comment">// 第一种设置输出资源时，资源的名字，会随机生成哈希值</span>\n    <span class="token literal-property property">assetModuleFilename</span><span class="token operator">:</span> <span class="token string">\'images/[contenthash][ext]\'</span> \n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">// ... </span>\n  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token comment">// 在 module 对象里配置模块， rules 配置项里配置规则</span>\n    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.png$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">// 以 png 为扩展名的文件</span>\n        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">\'asset/resource\'</span><span class="token punctuation">,</span>  <span class="token comment">// 使用 asset/resource 类型，打包后的文件夹里，会输出一张图片，在控制台上看，img标签的src是一个本地链接</span>\n        <span class="token literal-property property">generator</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token comment">// 第二种设置输出资源时，资源的名字，会随机生成哈希值，generator 优先级高于 output </span>\n          <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">\'images/[contenthash][ext]\'</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n      <span class="token punctuation">{</span>\n        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.svg$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">\'asset/inline\'</span>  <span class="token comment">// 使用 asset/resource 类型，不会在打包后的文件夹里生成图片，在控制台上看，img标签的src是一个data URL</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n      <span class="token punctuation">{</span>\n        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.txt$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">\'asset/source\'</span> <span class="token comment">// 例： 会将 txt 文件的内容提取出来，我们可以在 js 文件中导入，并放入 div 中</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n      <span class="token punctuation">{</span>\n        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.jpg$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">\'asset\'</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">parser</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token literal-property property">dataUrlCondition</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n            <span class="token literal-property property">maxSize</span><span class="token operator">:</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token comment">// 自动地在resource和 inline 之间进行选择: webpack默认条件，小于8kb的文件，将会视为inline模块类型,否则会被视为resource模块类型。可以在 dataUrlCondition 修改</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br></div></div><h2 id="loader-预处理加载器" tabindex="-1"><a class="header-anchor" href="#loader-预处理加载器" aria-hidden="true">#</a> Loader(预处理加载器)</h2>\n<p>Webpack 支持使用 <a href="https://webpack.docschina.org/concepts/loaders" target="_blank" rel="noopener noreferrer">loader<ExternalLinkIcon/></a> 对文件进行预处理。你可以构建包括 JavaScript 在内的任何静态资源。并且可以使用 Node.js 轻松编写自己的 loader。</p>\n<p><a href="https://webpack.docschina.org/configuration/module/#modulerules" target="_blank" rel="noopener noreferrer"><code>module.rules</code><ExternalLinkIcon/></a> 允许你在 webpack 配置中指定多个 loader。 这种方式是展示 loader 的一种简明方式，并且有助于使代码变得简洁和易于维护。同时让你对各个 loader 有个全局概览：</p>\n<p>loader 从右到左（或从下到上）地取值(evaluate)/执行(execute)。在下面的示例中，从 sass-loader 开始执行，然后继续执行 css-loader，最后以 style-loader 为结束。查看 <a href="https://webpack.docschina.org/concepts/loaders/#loader-features" target="_blank" rel="noopener noreferrer">loader 功能<ExternalLinkIcon/></a> 章节，了解有关 loader 顺序的更多信息。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span> <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">\'style-loader\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">{</span>\n            <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span>\n            <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n              <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">{</span> <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">\'sass-loader\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h2 id="抽离和压缩css" tabindex="-1"><a class="header-anchor" href="#抽离和压缩css" aria-hidden="true">#</a> 抽离和压缩css</h2>\n<p>在多数情况下，我们也可以进行压缩CSS，以便在生产环境中节省加载时间，同时还可以将CSS文件抽离成一个单独的文件。实现这个功能，需要<code>mini-css-extract-plugin</code>这个插件来帮忙，本插件会将CSS提取到单独的文件中，为每个包含CSS的JS文件创建一个cSS文件，并且支持CSS和Source Maps 的按需加载。\n本插件基于webpack v5的新特性构建，并且需要webpack 5才能正常工作。之后将loader 与 plugin添加到你的 webpack配置文件中</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 下载</span>\nnpm i mini<span class="token operator">-</span>css<span class="token operator">-</span>extract<span class="token operator">-</span>plugin <span class="token operator">-</span><span class="token constant">D</span>\nnpm i css<span class="token operator">-</span>minimizer<span class="token operator">-</span>webpack<span class="token operator">-</span>plugin <span class="token operator">-</span><span class="token constant">D</span>\n<span class="token comment">// webpack.config.js</span>\n<span class="token keyword">const</span> MiniCssExtractPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'mini-css-extract-plugin\'</span><span class="token punctuation">)</span>  <span class="token comment">// 第一步引入抽离css插件</span>\n<span class="token keyword">const</span> CssMinimizerPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'css-minimizer-webpack-plugin\'</span><span class="token punctuation">)</span>   <span class="token comment">// 第一步引入引入压缩css插件</span>\n<span class="token keyword">const</span> toml <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'toml\'</span><span class="token punctuation">)</span>  <span class="token comment">// 处理toml 文件的插件</span>\n<span class="token keyword">const</span> yaml <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'yaml\'</span><span class="token punctuation">)</span>  <span class="token comment">// 处理yaml 文件的插件</span>\n<span class="token keyword">const</span> json5 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'json5\'</span><span class="token punctuation">)</span>  <span class="token comment">// 处理 json5 文件的插件</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ... </span>\n  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">\'production\'</span><span class="token punctuation">,</span> <span class="token comment">// 使用压缩css插件，修改 mode 为生产环境</span>\n    \n  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">\'./index.html\'</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">\'app.html\'</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">inject</span><span class="token operator">:</span> <span class="token string">\'body\'</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    \n    <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token comment">// 第二步，在 plugins 引入配置</span>\n      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">\'styles/[contenthash].css\'</span> <span class="token comment">//配置打包后的文件名</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n\n  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(css|less)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">// 以css或less后缀的文件</span>\n<span class="token comment">//第三步，style-loader 替换成 MiniCssExtractPlugin.loader</span>\n        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span> <span class="token string">\'css-loader\'</span><span class="token punctuation">,</span> <span class="token string">\'less-loader\'</span><span class="token punctuation">]</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n      <span class="token punctuation">{</span>\n        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(woff|woff2|eot|ttf|otf)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">// 字体资源</span>\n        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">\'asset/resource\'</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n      <span class="token punctuation">{</span>\n        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(csv|tsv)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>  <span class="token comment">// 其他资源文件，例如csv，tsv</span>\n        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token string">\'csv-loader\'</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n      <span class="token punctuation">{</span>\n        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.xml$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>  <span class="token comment">// 处理 xml 资源文件</span>\n        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token string">\'xml-loader\'</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n      <span class="token punctuation">{</span>\n        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.toml$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">\'json\'</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">parser</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token literal-property property">parse</span><span class="token operator">:</span> toml<span class="token punctuation">.</span>parse\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n      <span class="token punctuation">{</span>\n        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.yaml$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">\'json\'</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">parser</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token literal-property property">parse</span><span class="token operator">:</span> yaml<span class="token punctuation">.</span>parse\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n      <span class="token punctuation">{</span>\n        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.json5$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">\'json\'</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">parser</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token literal-property property">parse</span><span class="token operator">:</span> json5<span class="token punctuation">.</span>parse\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n  <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 在 optimization 优化配置里配置css压缩插件</span>\n    <span class="token literal-property property">minimizer</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token keyword">new</span> <span class="token class-name">CssMinimizerPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br></div></div><h2 id="babel-loader" tabindex="-1"><a class="header-anchor" href="#babel-loader" aria-hidden="true">#</a> babel-loader</h2>\n<p>作用：将 ES6 的代码转译成低版本浏览器支持的 ES5</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 下载</span>\nnpm i babel<span class="token operator">-</span>loader @babel<span class="token operator">/</span>core @babel<span class="token operator">/</span>preset<span class="token operator">-</span>env <span class="token operator">-</span><span class="token constant">D</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>在 webpack 配置对象中，需要将 babel-loader 添加到 module 列表中，就像下面这样：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n      <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">{</span> \n        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">\'babel-loader\'</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">// 排除node_modules 里的js</span>\n        <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>  \n          <span class="token literal-property property">presets</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'@babel/preset-env\'</span><span class="token punctuation">]</span> <span class="token comment">// 在 options 里配置预设</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>此时执行编译，在浏览器里打开项目发现报了一个致命错误:  regeneratorRuntime is not defined这个错误显然是未能正确配置babel。regeneratorRuntime 是webpack打包生成的全局辅助函数，由babel生成，用于兼容async/await的语法。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 正确配置,第一步下载插件</span>\nnpm install <span class="token operator">--</span>save @babel<span class="token operator">/</span>runtime  <span class="token comment">// 这个包中包含了regeneratorRuntime 运行时需要</span>\nnpm install <span class="token operator">--</span>save<span class="token operator">-</span>dev @babel<span class="token operator">/</span>plugin<span class="token operator">-</span>transform<span class="token operator">-</span>runtime <span class="token comment">// 这个插件会在需要 regeneratorRuntime 的地方自动 require 导包</span>\n\n<span class="token comment">// 第二步，修改 webpack.config.js 配置</span>\n<span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n      <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(node_modules|bower_components)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> \n      <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">{</span> \n        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">\'babel-loader\'</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>  \n          <span class="token literal-property property">presets</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'@babel/preset-env\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n          <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n              <span class="token punctuation">[</span>\n                <span class="token string">\'@babel/plugin-transform-runtime\'</span>\n              <span class="token punctuation">]</span>\n            <span class="token punctuation">]</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h2 id="代码分离" tabindex="-1"><a class="header-anchor" href="#代码分离" aria-hidden="true">#</a> 代码分离</h2>\n<p>代码分离是 webpack 中最引人注目的特性之一。此特性能够把代码分离到不同的 bundle 中，然后可以按需加载或并行加载这些文件。代码分离可以用于获取更小的 bundle，以及控制资源加载优先级，如果使用合理，会极大影响加载时间。</p>\n<p>常用的代码分离方法有三种：</p>\n<ul>\n<li><strong>入口起点</strong>：使用 <a href="https://webpack.docschina.org/configuration/entry-context" target="_blank" rel="noopener noreferrer"><code>entry</code><ExternalLinkIcon/></a> 配置手动地分离代码。</li>\n<li><strong>防止重复</strong>：使用 <a href="https://webpack.docschina.org/configuration/entry-context/#dependencies" target="_blank" rel="noopener noreferrer">Entry dependencies<ExternalLinkIcon/></a> 或者 <a href="https://webpack.docschina.org/plugins/split-chunks-plugin" target="_blank" rel="noopener noreferrer"><code>SplitChunksPlugin</code><ExternalLinkIcon/></a> 去重和分离 chunk。</li>\n<li><strong>动态导入</strong>：通过模块的内联函数调用来分离代码。</li>\n</ul>\n<p>更具体的请参考<a href="https://webpack.docschina.org/guides/code-splitting#root" target="_blank" rel="noopener noreferrer">官方文档<ExternalLinkIcon/></a></p>\n<h2 id="拆分生产环境和开发环境" tabindex="-1"><a class="header-anchor" href="#拆分生产环境和开发环境" aria-hidden="true">#</a> 拆分生产环境和开发环境</h2>\n<h3 id="公共路径" tabindex="-1"><a class="header-anchor" href="#公共路径" aria-hidden="true">#</a> 公共路径</h3>\n<p><a href="https://webpack.docschina.org/configuration/output/#outputpublicpath" target="_blank" rel="noopener noreferrer"><code>publicPath</code><ExternalLinkIcon/></a> 配置选项在各种场景中都非常有用。你可以通过它来指定应用程序中所有资源的基础路径。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// webpack.config.js</span>\nmodule<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">env</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n   <span class="token comment">// 项目中所有引入的资源前缀都改成了下面的公共路径</span>\n      <span class="token literal-property property">publicPath</span><span class="token operator">:</span> <span class="token string">\'http://localhost:8080/\'</span> <span class="token comment">// 配置公共路径</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="环境变量" tabindex="-1"><a class="header-anchor" href="#环境变量" aria-hidden="true">#</a> 环境变量</h3>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 设置了一个环境变量, production 为 true</span>\nnpx webpack <span class="token operator">--</span>env production<span class="token operator">=</span><span class="token boolean">true</span>\n<span class="token comment">// 改造 webpack.config.js</span>\nmodule<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">env</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span> <span class="token comment">// 改造成一个函数，拿到 env 参数</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n    <span class="token literal-property property">mode</span><span class="token operator">:</span> env<span class="token punctuation">.</span>production <span class="token operator">?</span> <span class="token string">\'production\'</span> <span class="token operator">:</span> <span class="token string">\'development\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="拆分配置文件" tabindex="-1"><a class="header-anchor" href="#拆分配置文件" aria-hidden="true">#</a> 拆分配置文件</h3>\n<p>如果配置文件中，都通过三元运算符的方式来进行配置，显然特别糟糕，我们可以拆分配置文件</p>\n<ol>\n<li>\n<p>在项目根目录中创建一个 config 文件夹，文件夹下创建 <code>webpack.config.dev.js</code> ,  <code>webpack.config.prod,js</code> 文件</p>\n</li>\n<li>\n<p>如果将<code>module.exports</code>配置文件改成了函数形式，还原到原来的 <code>module.exports = { }</code></p>\n</li>\n</ol>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 通过 npx webpack -c 指定配置文件</span>\nnpx webpack <span class="token operator">-</span>c <span class="token punctuation">.</span><span class="token operator">/</span>config<span class="token operator">/</span>webpack<span class="token punctuation">.</span>config<span class="token punctuation">.</span>dev<span class="token punctuation">.</span>js\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="合并配置文件" tabindex="-1"><a class="header-anchor" href="#合并配置文件" aria-hidden="true">#</a> 合并配置文件</h3>\n<p>开发配置文件和生产配置文件中，有很多相同的代码，我们可以创建一个 <code>webpack.config.commin.js</code>文件提取出来，并合并配置文件</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 第一步下载webpack-merge</span>\nnpm i webpack<span class="token operator">-</span>merge <span class="token operator">-</span><span class="token constant">D</span>\n<span class="token comment">// 第二步：在根目录 config 文件夹下创建一个 webpack.config.js</span>\n\n<span class="token comment">// 第三步 webpack.config.js</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> merge <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack-merge\'</span><span class="token punctuation">)</span> <span class="token comment">// 导入</span>\n<span class="token comment">// 导入三个配置文件</span>\n<span class="token keyword">const</span> commonConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./webpack.config.common\'</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> productionConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./webpack.config.prod\'</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> developmentConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./webpack.config.dev\'</span><span class="token punctuation">)</span>\n<span class="token comment">// 如果用户传入的环境变量里有development，则是开发配置合并公共配置</span>\nmodule<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">env</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">switch</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">case</span> env<span class="token punctuation">.</span>development<span class="token operator">:</span>\n      <span class="token keyword">return</span> <span class="token function">merge</span><span class="token punctuation">(</span>commonConfig<span class="token punctuation">,</span> developmentConfig<span class="token punctuation">)</span>\n\n    <span class="token keyword">case</span> env<span class="token punctuation">.</span>production<span class="token operator">:</span>\n      <span class="token keyword">return</span> <span class="token function">merge</span><span class="token punctuation">(</span>commonConfig<span class="token punctuation">,</span> productionConfig<span class="token punctuation">)</span>\n\n    <span class="token literal-property property">defult</span><span class="token operator">:</span>\n      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">\'No matching configuration was found\'</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h2 id="模块热替换与热加载" tabindex="-1"><a class="header-anchor" href="#模块热替换与热加载" aria-hidden="true">#</a> 模块热替换与热加载</h2>\n<blockquote>\n<p>模块热替换(HMR - hot module replacement)功能会在应用程序运行过程中，替换、添加或删除 <a href="https://webpack.docschina.org/concepts/modules/" target="_blank" rel="noopener noreferrer">模块<ExternalLinkIcon/></a>，而无需重新加载整个页面。主要是通过以下几种方式，来显著加快开发速度：</p>\n</blockquote>\n<ul>\n<li>保留在完全重新加载页面期间丢失的应用程序状态。</li>\n<li>只更新变更内容，以节省宝贵的开发时间。</li>\n<li>在源代码中 CSS/JS 产生修改时，会立刻在浏览器中进行更新，这几乎相当于在浏览器 devtools 直接更改样式。</li>\n</ul>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 开启webpack的热模块替换特性，需要配置devServer.hot参数:</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">hot</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment">// 默认开启热替换</span>\n    <span class="token literal-property property">liveReload</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">// 默认开启热加载</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="eslint" tabindex="-1"><a class="header-anchor" href="#eslint" aria-hidden="true">#</a> eslint</h2>\n<p><code>eslint</code>是用来扫描我们所写的代码是否符合规范的工具。 往往我们的项目是多人协作 开发的，我们期望统一的代码规范，这时候可以让eslint来对我们进行约束。 严格意义上来说，eslint配置跟webpack无关，但在工程化开发环境中，它往往是不可或缺的。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 下载</span>\nnpm i eslint <span class="token operator">-</span><span class="token constant">D</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>配置<code>eslint</code>，只需要在根目录下添加一个.eslintrc文件(或者.eslintrc.json, .js等)。当然，我们可以使用<code>eslint</code>工具来自动生成它：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>npx eslint <span class="token operator">--</span>init\n<span class="token comment">// 第一种只检查语法  第二种检查语法并发现问题  第三种检查语法发现问题并规范格式，我们通常选择第三种</span>\n✔ How would you like to use ESLint<span class="token operator">?</span> · syntax\n<span class="token comment">// 选择模块化语法，这里选择ESM</span>\n✔ What type <span class="token keyword">of</span> modules does your project use<span class="token operator">?</span> · esm\n<span class="token comment">// 选择是使用react还是vue,或者什么都没有</span>\n✔ Which framework does your project use<span class="token operator">?</span> · react\n<span class="token comment">// 项目中使用TS吗</span>\n✔ Does your project use TypeScript<span class="token operator">?</span> · No <span class="token operator">/</span> Yes\n<span class="token comment">// 代码运行在哪里，browser浏览器，还是node后端</span>\n✔ Where does your code run<span class="token operator">?</span> · browser\n<span class="token comment">// 使用哪种方式配置规范，流行式/一问一答/导入自有的文件，这里选择的是第一种</span>\n✔ How would you like to define a style <span class="token keyword">for</span> your project<span class="token operator">?</span> · guide \n<span class="token comment">// 选择哪一种流行规范</span>\n✔ which stvle quide <span class="token keyword">do</span> vou want to follow<span class="token punctuation">.</span> airbnb\n<span class="token comment">// 配置文件放在什么地方</span>\n✔ What format <span class="token keyword">do</span> you want your config file to be <span class="token keyword">in</span><span class="token operator">?</span> · <span class="token constant">JSON</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><div class="language-json ext-json line-numbers-mode"><pre v-pre class="language-json"><code><span class="token comment">// .eslintrc.json</span>\n<span class="token punctuation">{</span>\n    <span class="token property">"env"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 指定脚本的运行环境。每种环境都有一组特定的预定义全局变量。此处使用的 browser 预定义了浏览器环境中的全局变量，es6 启用除了 modules 以外的所有 ECMAScript 6 特性（该选项会自动设置 ecmaVersion 解析器选项为 6）。    </span>\n        <span class="token property">"browser"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        <span class="token property">"es2021"</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">// 支持es2021</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token property">"extends"</span><span class="token operator">:</span> <span class="token punctuation">[</span>  <span class="token comment">// 检测中使用的预定义的规则集合。</span>\n        <span class="token string">"airbnb-base"</span>  <span class="token comment">// 可以使用这个扩展文件来帮我们  检查文件</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token property">"parserOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">"ecmaVersion"</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>  \n        <span class="token property">"sourceType"</span><span class="token operator">:</span> <span class="token string">"module"</span>  <span class="token comment">// 类型为 module</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token property">"rules"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">"no-console"</span><span class="token operator">:</span> <span class="token number">0</span>  <span class="token comment">// 关闭不允许使用 console 规则</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token property">"globals"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h3 id="结合webpack使用" tabindex="-1"><a class="header-anchor" href="#结合webpack使用" aria-hidden="true">#</a> 结合webpack使用</h3>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.(js|jsx)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        exclude<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node-modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'babel-loader\'</span><span class="token punctuation">,</span> <span class="token string">\'eslint-loader\'</span><span class="token punctuation">]</span>\n   <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="git-hooks-与-husky" tabindex="-1"><a class="header-anchor" href="#git-hooks-与-husky" aria-hidden="true">#</a> git-hooks 与 husky</h2>\n<p>为了保证团队里的开发人员提交的代码符合规范，我们可以在开发者上传代码时进行 校验。 我们常用 <code>husky</code> 来协助进行代码提交时的 <code>eslint</code> 校验。在使用<code>husky</code>之前， 我们先来研究一下 <code>git-hooks</code> 。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>初始化项目 git init\n在项目里运行 ls <span class="token operator">-</span>la 命令 我们可以看到，存在一个<span class="token string">".git"</span>名称的文件夹。事实上，在我们项目中根目录下运行git命令时，git 会根据它来工作。\ncd <span class="token punctuation">.</span>git  \ncd hooks\nls <span class="token operator">-</span>la  <span class="token comment">// 进入到 hooks 文件夹里，可以看到有很多 sample 文件</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="提交代码前进行-eslist-检测" tabindex="-1"><a class="header-anchor" href="#提交代码前进行-eslist-检测" aria-hidden="true">#</a> 提交代码前进行 eslist 检测</h3>\n<p>我们需要使用<code>git hooks</code>里的 <code>pre-commit.sample</code> 文件里的方法</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// cat命令可以查看一个文件的内容</span>\ncat pre<span class="token operator">-</span>commit<span class="token punctuation">.</span>sample\n<span class="token comment">// 我们可以看到这样一句话，大概意思是要启用这个钩子的话，我们就把这个文件的后缀名去掉。</span>\nTo enable <span class="token keyword">this</span> hook<span class="token punctuation">,</span> rename <span class="token keyword">this</span> file to <span class="token string">"pre-commit"</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>虽然这样对我们本地来讲是可行的，但要注意，<code>.git</code>文件夹的改动无法同步到远端仓库。所以我们期望将<code>git-hook</code>的执行权移交到外面来。我们回到项目的根目录下，然后我们新建一个文件夹，暂时命名 为<code>.mygithooks</code>然后在此文件夹下，新增一个<code>git-hook</code>文件,命名为<code>pre-commit</code>，并写入以下内容：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>npx eslint <span class="token punctuation">.</span><span class="token operator">/</span>src  \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>我们新建了自己的<code>git-hook</code>，但此时 git 并不能识别。下面我们执行这行命令</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 项目根目录下</span>\ngit config core<span class="token punctuation">.</span>hooksPath <span class="token punctuation">.</span>mygithooks\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>上述命令给我们自己的文件，配置了<code>git-hook</code>的执行权限。 但这个时候我们<code>git commit</code>的话，可能会报这样的警告，并且没有执行我们的 shell</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token literal-property property">hint</span><span class="token operator">:</span> The <span class="token string">\'pre-commit\'</span> hook was ignored because it\'s not <span class="token keyword">set</span> <span class="token keyword">as</span> \nexecutable<span class="token punctuation">.</span>\n\n<span class="token literal-property property">hint</span><span class="token operator">:</span> You can disable <span class="token keyword">this</span> warning <span class="token keyword">with</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">git config \nadvice.ignoredHook false</span><span class="token template-punctuation string">`</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>这是因为我们的操作系统没有给出这个文件的可执行权限。 因此我们得再执行这样一句命令</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>chmod +x .mygithooks/pre-commit\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>现在我们执行 <code>git commit</code> 会先执行 <code>npx eslint ./src</code> 命令，进行 <code>eslist</code> 检测</p>\n<h3 id="使用-husky-进行代码提交前-eslist-检测" tabindex="-1"><a class="header-anchor" href="#使用-husky-进行代码提交前-eslist-检测" aria-hidden="true">#</a> 使用 husky 进行代码提交前 eslist 检测</h3>\n<p>husky在升级到7.x后，做了跟我们上述同样的事。 安装它之前，我们需要在package.json中的script里，先添加</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token string-property property">"sctript"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n    <span class="token string">"prepare"</span><span class="token operator">:</span> <span class="token string">"husky install"</span>  <span class="token comment">// prepare是一个npm钩子，意思是安装依赖的时候，会先执行husky install命令。这个命令就做了上述的123这三件事！</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 下载 husky</span>\nnpm i husky <span class="token operator">-</span><span class="token constant">D</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>我们安装了7.x的<code>husky</code>会发现，项目根目录下生成了<code>.husky</code>的文件夹。 当然，7.x的<code>husky</code>似乎是有bug的，如果不能正常使用，那么我们只需要验证两件事</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 第一件事：是否移交了git-hook的配置权限，执行命令 "git config --list"查看core.hooksPath配置是否存在，是否正确指向了.husky。如果没有，我们只需要手动的给加上就行：</span>\ngit config core<span class="token punctuation">.</span>hooksPath <span class="token punctuation">.</span>husky\n<span class="token comment">// 第二件事：是否是可执行文件，如果没有，手动加上</span>\nchmod <span class="token operator">+</span>x <span class="token punctuation">.</span>mygithooks<span class="token operator">/</span>pre<span class="token operator">-</span>commit \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>然后我们在<code>.husky</code>文件夹下创建一个文件命名为<code>pre-commit</code>，</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>// pre-commit\nnpx eslint ./src  \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>现在我们进行 <code>git commit</code> 提交，<code>husky</code>就会进行 <code>eslist</code> 检测</p>\n<h2 id="webpack-模块与解析原理" tabindex="-1"><a class="header-anchor" href="#webpack-模块与解析原理" aria-hidden="true">#</a> Webpack 模块与解析原理</h2>\n<ul>\n<li>\n<p><strong>Webpack 模块</strong>：所有能被引入的都可以当成一个模块，\n例如：ESM，CommonJS，AMD，css/scss/less 文件中的 @import 语句</p>\n</li>\n<li>\n<p><strong>解析原理</strong>：</p>\n<ol>\n<li>\n<p>webpack 通过 Resolvers 实现了模块解析，它是基 enhanced-resolve 这个包实现的</p>\n</li>\n<li>\n<p>通过内置的 <strong>enhanced-resolve</strong> 可以解析<strong>绝对路径</strong>，<strong>相对路径</strong>，<strong>模块路径</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// webpack.config.js</span>\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  resolve<span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token comment">// 可以通过 resolve 里的 alias 配置项配置自定义路径</span>\n    alias<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token string">"@utils"</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'src/utils/\'</span><span class="token punctuation">)</span>\n   <span class="token punctuation">}</span><span class="token punctuation">,</span>\n <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></li>\n<li>\n<p>如果遇到一个文件夹下有相同名称不同类型的文件（<strong>main.js</strong>，<strong>main.json</strong>），例如通过 <strong>import</strong> 导入时，没有写明导入文件夹哪个 <strong>main</strong> 文件，<strong>webpack</strong> 会默认导入 <strong>js</strong> 文件</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// webpack会按照数组顺序去解析这些后缀名，对于同名的文件，webpack总是会先解析列在数组首位的后缀名的文件。</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  resolve<span class="token operator">:</span> <span class="token punctuation">{</span>\n    extensions<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'.js\'</span><span class="token punctuation">,</span> <span class="token string">\'.json\'</span><span class="token punctuation">,</span> <span class="token string">\'.wasm\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li>\n</ol>\n</li>\n</ul>\n<h2 id="外部扩展" tabindex="-1"><a class="header-anchor" href="#外部扩展" aria-hidden="true">#</a> 外部扩展</h2>\n<p>有时候我们为了减小打包后的体积，从而把一些不变的第三方库用cdn的形式引入进来，比如jQuery</p>\n<div class="language-html ext-html line-numbers-mode"><pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> \n  <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.js<span class="token punctuation">"</span></span>\n<span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>这个时候我们想在我们的代码里使用引入的<strong>jquery</strong>———但似乎三种模块引入方式都 不行，这时候怎么办呢？ webpack给我们提供了<strong>Externals</strong>的配置属性，让我们可以 配置外部扩展模块</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n  externals<span class="token operator">:</span> <span class="token punctuation">{</span>\n    jquery<span class="token operator">:</span> <span class="token string">\'jQuery\'</span><span class="token punctuation">,</span> <span class="token comment">// key的名必须和你引入的名一样，value 是暴露在window上</span>\n <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// index.js</span>\n<span class="token keyword">import</span> $ <span class="token keyword">from</span> <span class="token string">\'jquery\'</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>$<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="依赖图" tabindex="-1"><a class="header-anchor" href="#依赖图" aria-hidden="true">#</a> 依赖图</h2>\n<p>每当一个文件依赖另一个文件时，webpack 会直接将文件视为存在依赖关系。 这使 得 webpack 可以获取非代码资源，如 images 或 web 字体等。并会把它们作为 依 赖 提供给应用程序。 当 webpack 开始工作时，它会根据我们写好的配置,从入口(entry) 开始，webpack 会递归的构建一个 依赖关系图，这个依赖图包含着应用程序中所需的每个模块，然后将所有模块打包为bundle(也就是output的配置项)。 单纯讲似乎很抽象，我们更期望能够可视化打包产物的依赖图，下边列示了一些bundle分析工具。</p>\n<ul>\n<li>webpack-chart：webpack stats 可交互饼图；</li>\n<li>webpack-visualizer：可视化并分析你的bundle，检查哪些模块占用空间，哪些可能使重复使用的；</li>\n<li>webpack-bundle-analyzer：一个 plugin 和 CLI 工具，它将 bundle 内容展示为一个便捷的、交互式、可缩放的树状图形式；</li>\n<li>webpack bundle optimize helper：分析你的bundle并提供可操作的改进措施，减少 bundle 的大小；</li>\n<li>bundle-stats：生成一个 bundle 报告 ( bundle大小、资源、模块 )，并比较不同构建之间的结果。</li>\n</ul>\n<p>我们来使用 <strong>webpack-bundle-analyzer</strong> 实现下面这个案例。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 首先安装这个插件作为开发依赖</span>\nnpm install <span class="token operator">--</span>save<span class="token operator">-</span>dev webpack<span class="token operator">-</span>bundle<span class="token operator">-</span>analyzer\n<span class="token comment">// 在配置文件中配置</span>\n<span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'html-webpack-plugin\'</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> BundleAnalyzerPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack-bundle-analyzer\'</span><span class="token punctuation">)</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">\'development\'</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">app</span><span class="token operator">:</span> <span class="token string">\'./src/app.js\'</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">app2</span><span class="token operator">:</span> <span class="token string">\'./src/app2.js\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token keyword">new</span> <span class="token class-name">BundleAnalyzerPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 执行 webpack </span>\nnpx webpack serve\n<span class="token comment">// 执行完后，点击执行后出现的网址，就可以看到可视化的打包产物依赖图</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h2 id="web-works" tabindex="-1"><a class="header-anchor" href="#web-works" aria-hidden="true">#</a> Web Works</h2>\n<p>html5之前，打开一个常规的网页，浏览器会启用几个线程？ 一般而言，至少存在三个线程(公用线程不计入在内):</p>\n<p>分别是js引擎线程(处理js)、GUI渲染线程(渲染页面)、浏览器事件触发线程(控制交 互)。 当一段JS脚本长时间占用着处理机,就会挂起浏览器的GUI更新，而后面的事件响应也 被排在队列中得不到处理，从而造成了浏览器被锁定进入假死状态。 现在如果遇到了这种情况，我们可以做的不仅仅是优化代码————webpack5 提供了解决方案，webworker。</p>\n<p>webWorkers提供了js的后台处理线程的API，它允许将复杂耗时的单纯js逻辑处理放 在浏览器后台线程中进行处理，让js线程不阻塞UI线程的渲染。</p>\n<ul>\n<li>在入口文件同级目录下创建一个<strong>work</strong>脚本 <code>work.js</code>文件</li>\n</ul>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>self<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n <span class="token comment">// self.postMessage 函数会返回结果</span>\n  self<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">answer</span><span class="token operator">:</span> <span class="token number">1111</span>       \n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 入口文件 app.js</span>\n<span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">\'./work.js\'</span><span class="token punctuation">,</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\nworker<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">question</span><span class="token operator">:</span> <span class="token string">\'hi，那边的workder线程，请告诉我今天的幸运数字是多少？\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\nworker<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>data<span class="token punctuation">.</span>answer<span class="token punctuation">)</span> <span class="token comment">// 接受 workder 返回的结果</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="typescript" tabindex="-1"><a class="header-anchor" href="#typescript" aria-hidden="true">#</a> TypeScript</h2>\n<blockquote>\n<p>在前端生态里，TS扮演着越来越重要的角色。 我们直入正题，讲下如何在webpack工程化环境中集成TS。 首先，当然是安装我们的ts和对应的loader。</p>\n</blockquote>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>npm install <span class="token operator">--</span>save<span class="token operator">-</span>dev typescript ts<span class="token operator">-</span>loader\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>接下来我们需要在项目根目录下添加一个ts的配置文件————tsconfig.json，我们可以用<strong>ts</strong>自带的工具来自动化生成它。</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>npx tsc --init\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>我们发现生成了一个tsconfig.json，里面注释掉了绝大多数配置。 现在，根据我们想要的效果来打开对应的配置。</p>\n<div class="language-json ext-json line-numbers-mode"><pre v-pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"rootDir"</span><span class="token operator">:</span> <span class="token string">"./src"</span><span class="token punctuation">,</span>   <span class="token comment">// 指定入口</span>\n    <span class="token property">"outDir"</span><span class="token operator">:</span> <span class="token string">"./dist"</span><span class="token punctuation">,</span>   <span class="token comment">// 指定出口</span>\n    <span class="token property">"noImplicitAny"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token property">"sourceMap"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"es6"</span><span class="token punctuation">,</span>\n    <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"es5"</span><span class="token punctuation">,</span>\n    <span class="token property">"jsx"</span><span class="token operator">:</span> <span class="token string">"react"</span><span class="token punctuation">,</span>\n    <span class="token property">"allowJs"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token property">"moduleResolution"</span><span class="token operator">:</span> <span class="token string">"node"</span>  \n <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>好了，接下来我们新增一个src/index.ts，内置一些内容。 然后我们别忘了更改我们的entry及配置对应的loder。 当然，还有<strong>resolve.extensions</strong>，将.ts放在.js之前，这样它会先找.ts。 注意，如果我们使用了<strong>sourceMap</strong>，一定记得和上面的ts配置一样，设置<strong>sourcemap</strong>为true。 也别忘记在我们的<strong>webpack.config.js</strong>里</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'html-webpack-plugin\'</span><span class="token punctuation">)</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">\'development\'</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">\'./src/app.ts\'</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">devtool</span><span class="token operator">:</span> <span class="token string">\'inline-source-map\'</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.ts$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token string">\'ts-loader\'</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'.ts\'</span><span class="token punctuation">,</span> <span class="token string">\'.js\'</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">\'bundle.js\'</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'./dist\'</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h3 id="使用第三方类库" tabindex="-1"><a class="header-anchor" href="#使用第三方类库" aria-hidden="true">#</a> 使用第三方类库</h3>\n<p>在从 npm 上安装第三方库时，一定要记得同时安装这个库的类型声明文件，我们可以从 [TypeSearch](https://www.ty pescriptlang.org/dt/search?search=) 中找到并安装这些第三方库的类型声明文件。举个例子，如果想安装 lodash 类型声明文件，我们可以运行下面的命令</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>npm install <span class="token operator">--</span>save<span class="token operator">-</span>dev @types<span class="token operator">/</span>lodash\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="多页面应用" tabindex="-1"><a class="header-anchor" href="#多页面应用" aria-hidden="true">#</a> 多页面应用</h2>\n<h3 id="entry-配置" tabindex="-1"><a class="header-anchor" href="#entry-配置" aria-hidden="true">#</a> entry 配置</h3>\n<ul>\n<li><strong>单个入口（简写）语法</strong>：<code>entry: string | [string]</code></li>\n</ul>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token operator">:</span> <span class="token string">\'./path/to/my/entry/file.js\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 多入口</span>\n<span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'html-webpack-plugin\'</span><span class="token punctuation">)</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">\'development\'</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">\'多页面应用\'</span><span class="token punctuation">,</span>  <span class="token comment">// 设置 title 标签，但模板的title内容需要改成 &lt;title>&lt;%= htmlWebpackPlugin.options.title %>&lt;/title></span>\n      <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">\'./index.html\'</span><span class="token punctuation">,</span>  <span class="token comment">// 设置模板</span>\n      <span class="token literal-property property">inject</span><span class="token operator">:</span> <span class="token string">\'body\'</span><span class="token punctuation">,</span>  <span class="token comment">// 设置 script 标签注入哪个标签里</span>\n      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">\'chanel1/index.html\'</span><span class="token punctuation">,</span>  <span class="token comment">// 设置输出 html 文件名</span>\n      <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'main\'</span><span class="token punctuation">,</span> <span class="token string">\'lodash\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 默认会将 entry 里的所有入口引入</span>\n      <span class="token literal-property property">publicPath</span><span class="token operator">:</span> <span class="token string">\'http://www.b.com/\'</span>  <span class="token comment">// 设置公共路径</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\n    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">\'./index2.html\'</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">inject</span><span class="token operator">:</span> <span class="token string">\'body\'</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">\'chanel2/index2.html\'</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'main2\'</span><span class="token punctuation">,</span> <span class="token string">\'lodash\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">publicPath</span><span class="token operator">:</span> <span class="token string">\'http://www.a.com/\'</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n\n  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">main</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token keyword">import</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'./src/app2.js\'</span><span class="token punctuation">,</span> <span class="token string">\'./src/app.js\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">dependOn</span><span class="token operator">:</span> <span class="token string">\'lodash\'</span><span class="token punctuation">,</span>   <span class="token comment">// 上面2个入口文件可能都用了 lodash，抽离出来</span>\n      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">\'chanel1/[name].js\'</span> <span class="token comment">// 设置打包后的输出文件</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">main2</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token keyword">import</span><span class="token operator">:</span> <span class="token string">\'./src/app3.js\'</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">dependOn</span><span class="token operator">:</span> <span class="token string">\'lodash\'</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">\'chanel2/[name].js\'</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">lodash</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token keyword">import</span><span class="token operator">:</span> <span class="token string">\'lodash\'</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">\'common/[name].js\'</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">clean</span><span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br></div></div><h2 id="tree-shaking" tabindex="-1"><a class="header-anchor" href="#tree-shaking" aria-hidden="true">#</a> Tree shaking</h2>\n<p><code>Tree Shaking</code> 指基于 ES Module 进行静态分析，通过 AST 将用不到的函数进行移除，从而减小打包体积。</p>\n<blockquote>\n<p>注意 Webpack 不能百分百安全地进行 tree-shaking。有些模块导入，只要被引入， 就会对应用程序产生重要的影响。一个很好的例子就是全局样式表，或者设置全局配 置的JavaScript 文件。</p>\n<p>Webpack 认为这样的文件有“副作用”。具有副作用的文件不应该做 tree-shaking， 因为这将破坏整个应用程序。</p>\n<p>Webpack 的设计者清楚地认识到不知道哪些文件有副作用的情况下打包代码的风 险，因此webpack4默认地将所有代码视为有副作用。这可以保护你免于删除必要的 文件，但这意味着 Webpack 的默认行为实际上是不进行 tree-shaking。值得注意的 是webpack5默认会进行 tree-shaking。 如何告诉 Webpack 你的代码无副作用，可以通过 package.json 有一个特殊的属性  sideEffects，就是为此而存在的。它有三个可能的值</p>\n</blockquote>\n<ul>\n<li><strong>true</strong>：如果不指定其他值的话。这意味着所有的文件都有副作用，也就是没有一个文件 可以 <strong>tree-shaking</strong>。</li>\n<li><strong>false</strong>：告诉 Webpack 没有文件有副作用，所有文件都可以 <strong>tree-shaking</strong>。</li>\n<li><strong>数组[…]</strong> ：是文件路径数组。它告诉 webpack，除了数组中包含的文件外，你的任何文件 都没有副作用。因此，除了指定的文件之外，其他文件都可以安全地进行 <strong>treeshaking</strong>。</li>\n</ul>\n<h2 id="渐进式网络应用程序-pwa" tabindex="-1"><a class="header-anchor" href="#渐进式网络应用程序-pwa" aria-hidden="true">#</a> 渐进式网络应用程序 PWA</h2>\n<blockquote>\n<p><strong>渐进式网络应用程序(progressive web application - PWA)，是一种可以提供类似于  native app(原生应用程序) 体验的 web app(网络应用程序)。PWA 可以用来做很多事。其中最重要的是，在离线(offline)时应用程序能够继续运行功能。这是通过使用 名为 Service Workers 的 web 技术来实现的。</strong></p>\n</blockquote>\n<h2 id="shimming-预置全局变量" tabindex="-1"><a class="header-anchor" href="#shimming-预置全局变量" aria-hidden="true">#</a> Shimming 预置全局变量</h2>\n<p>可以通过内置的 <strong>ProvidePlugin</strong> 插件实现不用下载第三方包，在 webpack 编译的每个模块中，通过访问一个变量来获取一个 package。如果 webpack 看到模块中用到这个变量，它将在最终  bundle 中引入给定的 package。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack\'</span><span class="token punctuation">)</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  mode<span class="token operator">:</span> <span class="token string">\'development\'</span><span class="token punctuation">,</span>\n  entry<span class="token operator">:</span> <span class="token string">\'./src/index.js\'</span><span class="token punctuation">,</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>ProvidePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> \n      _<span class="token operator">:</span> <span class="token string">\'lodash\'</span> <span class="token comment">// 如果你遇到了至少一处用到 _ 变量的模块实例，你将 lodash package 引入进来，并将其提供给需要用到它的模块。</span>\n\n   <span class="token punctuation">}</span><span class="token punctuation">)</span>\n <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>还可以使用 ProvidePlugin 暴露出某个模块中单个导出，通过配置一个“数组路径”，这样就能很好的与 tree shaking 配合，将 lodash 中的其余没有用到的导出去除。</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack\'</span><span class="token punctuation">)</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  mode<span class="token operator">:</span> <span class="token string">\'development\'</span><span class="token punctuation">,</span>\n  entry<span class="token operator">:</span> <span class="token string">\'./src/index.js\'</span><span class="token punctuation">,</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>ProvidePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      join<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'lodash\'</span><span class="token punctuation">,</span> <span class="token string">\'join\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n   <span class="token punctuation">}</span><span class="token punctuation">)</span>\n <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="this-指向" tabindex="-1"><a class="header-anchor" href="#this-指向" aria-hidden="true">#</a> this 指向</h3>\n<p>当模块运行在 CommonJS 上下文中，这将会变成一个问题，也就是说此时的 this 指向的是 module.exports 。在这种情况下，你可以通过使用 imports-loader 覆盖 this 指向</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>npm i imports<span class="token operator">-</span>loader <span class="token operator">-</span><span class="token constant">D</span>\n\n<span class="token comment">// webpack.config.js</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>  <span class="token comment">// 让 ./src/index.js 文件的 this 指向 window</span>\n        <span class="token literal-property property">test</span><span class="token operator">:</span> require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">\'./src/index.js\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token string">\'imports-loader?wrapper=window\'</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="创建一个小轮子" tabindex="-1"><a class="header-anchor" href="#创建一个小轮子" aria-hidden="true">#</a> 创建一个小轮子</h2>\n<h3 id="如何构建一个-library" tabindex="-1"><a class="header-anchor" href="#如何构建一个-library" aria-hidden="true">#</a> 如何构建一个 library</h3>\n<blockquote>\n<p>除了打包应用程序，webpack 还可以用于打包 JavaScript library</p>\n</blockquote>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 搭建好 webpapck 环境后，创建一个 src 文件夹 ，下有一个 indnx.js</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> x <span class="token operator">+</span> y\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">//  webpack.config.js</span>\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">\'production\'</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">\'./src/index.js\'</span><span class="token punctuation">,</span>\n  <span class="token comment">// experiments: {  // ESM 引入暂时是一个实验性的功能，需要手动开启，还需要将 library 中的 name 属性删除</span>\n  <span class="token comment">//   outputModule: true,</span>\n  <span class="token comment">// },</span>\n  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'dist\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">\'mylib.js\'</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">library</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">\'mylib\'</span><span class="token punctuation">,</span>  <span class="token comment">// 定义一个 library 名字</span>\n      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">\'umd\'</span>  <span class="token comment">// 让我们的轮子可以通过 CommonJS，ASD，script src 引入\t</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">globalObject</span><span class="token operator">:</span> <span class="token string">\'globalThis\'</span> <span class="token comment">// 配置全局this</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h3 id="创建一个-webpack-numbers" tabindex="-1"><a class="header-anchor" href="#创建一个-webpack-numbers" aria-hidden="true">#</a> 创建一个 webpack-numbers</h3>\n<blockquote>\n<p>假设我们正在编写一个名为 webpack-numbers 的小的 library，可以将数字 1 到 5 转换为文本表示，反之亦然，例如将 2 转换为 \'two\'。</p>\n</blockquote>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 我们将 lodash 安装为 devDependencies 而不是 dependencies ，因为我们不需要将其打包到我们的库中，否则我们的库体积很容易变大。</span>\nnpm i webpack webpack<span class="token operator">-</span>cli lodash <span class="token operator">-</span><span class="token constant">D</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-json ext-json line-numbers-mode"><pre v-pre class="language-json"><code><span class="token comment">// 在项目根目录下创建一个 src 文件夹，里面创建一个 ref.json</span>\n<span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    <span class="token property">"num"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    <span class="token property">"word"</span><span class="token operator">:</span> <span class="token string">"One"</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    <span class="token property">"num"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n    <span class="token property">"word"</span><span class="token operator">:</span> <span class="token string">"Two"</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    <span class="token property">"num"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>\n    <span class="token property">"word"</span><span class="token operator">:</span> <span class="token string">"Three"</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    <span class="token property">"num"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>\n    <span class="token property">"word"</span><span class="token operator">:</span> <span class="token string">"Four"</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    <span class="token property">"num"</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>\n    <span class="token property">"word"</span><span class="token operator">:</span> <span class="token string">"Five"</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    <span class="token property">"num"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    <span class="token property">"word"</span><span class="token operator">:</span> <span class="token string">"Zero"</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// src/index.js</span>\n<span class="token keyword">import</span> _ <span class="token keyword">from</span> <span class="token string">\'lodash\'</span>\n<span class="token keyword">import</span> numRef <span class="token keyword">from</span> <span class="token string">\'./ref.json\'</span>\n\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">numToWord</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> _<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>numRef<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">accum<span class="token punctuation">,</span> ref</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> ref<span class="token punctuation">.</span>num <span class="token operator">===</span> num <span class="token operator">?</span> ref<span class="token punctuation">.</span>word <span class="token operator">:</span> accum\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">\'\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">wordToNum</span><span class="token punctuation">(</span><span class="token parameter">word</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> _<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>numRef<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">accum<span class="token punctuation">,</span> ref</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> ref<span class="token punctuation">.</span>word <span class="token operator">===</span> word <span class="token operator">&amp;&amp;</span> word<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> ref<span class="token punctuation">.</span>num <span class="token operator">:</span> accum\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// webpack.config.js</span>\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">\'production\'</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">\'./src/index.js\'</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'dist\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">\'webpack-numbers.js\'</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">library</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">\'webpackNumbers\'</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">\'umd\'</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">globalObject</span><span class="token operator">:</span> <span class="token string">\'globalThis\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">externals</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">lodash</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">commonjs</span><span class="token operator">:</span> <span class="token string">\'lodash\'</span><span class="token punctuation">,</span> <span class="token comment">//common规范中使用，其实下面一个可以不用写</span>\n      <span class="token literal-property property">commonjs2</span><span class="token operator">:</span> <span class="token string">\'lodash\'</span><span class="token punctuation">,</span> \n      <span class="token literal-property property">amd</span><span class="token operator">:</span> <span class="token string">\'lodash\'</span><span class="token punctuation">,</span>  <span class="token comment">// amd 规范中所有</span>\n      <span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token string">\'_\'</span>  <span class="token comment">// 全局使用</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><div class="language-json ext-json line-numbers-mode"><pre v-pre class="language-json"><code><span class="token comment">// package.json</span>\n<span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"dist/webpack-numbers.js"</span><span class="token punctuation">,</span> <span class="token comment">// 修改入口，修改成打包后的文件</span>\n  <span class="token comment">// ... </span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="发布到-npm-package上" tabindex="-1"><a class="header-anchor" href="#发布到-npm-package上" aria-hidden="true">#</a> 发布到 npm package上</h3>\n<ul>\n<li>\n<p>先在 npm 官网注册账号，点击个人图标，点击 packages 进去</p>\n</li>\n<li>\n<p>回到项目根目录打开命令行</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code>npm config <span class="token keyword">get</span> registry  <span class="token comment">// 输入后返回下面的地址才是正确</span>\n<span class="token literal-property property">https</span><span class="token operator">:</span><span class="token operator">/</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">registry.npmjs.org</span><span class="token regex-delimiter">/</span></span>  \n\n<span class="token comment">// 然后执行下面命令添加一个用户，然后输入npm官网注册的用户名</span>\nnpm adduser\n<span class="token comment">// 然后执行下面命令发布我们的包，成功后就可以在 npm 官网上看到并使用npm 下载</span>\nnpm publish\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li>\n</ul>\n<h2 id="dll-动态链接库" tabindex="-1"><a class="header-anchor" href="#dll-动态链接库" aria-hidden="true">#</a> dll (动态链接库)</h2>\n<p>可以通过 <strong>webapck</strong> 内置的 <code>DllPlugin</code>链接一些第三方库，减少 <strong>webpack</strong> 打包时间，下面以 <code>jquery</code> 为例</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 在根目录下创建一个 webpack.dll.config.js 文件配置 dll</span>\n<span class="token comment">// webpack.dll.config.js</span>\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack\'</span><span class="token punctuation">)</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">\'production\'</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">jquery</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'jquery\'</span><span class="token punctuation">]</span> <span class="token comment">// 设置入口文件，这里是 jquery 包</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">\'[name].js\'</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'dll\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">library</span><span class="token operator">:</span> <span class="token string">\'[name]_[hash]\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DllPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment">// 通过 DllPlugin 配置 dll</span>\n      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">\'[name]_[hash]\'</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'dll/manifest.json\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// webpack.config.js</span>\n<span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'html-webpack-plugin\'</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'webpack\'</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> AddAssetHtmlPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'add-asset-html-webpack-plugin\'</span><span class="token punctuation">)</span> <span class="token comment">// 下载这个插件并导入，这个插件可以把 dll 文件夹也打包到 dist 文件夹里，这样打包时间又会恢复，但 jquery 第三方库单独拿出来了</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">\'production\'</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">\'./src/index.js\'</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DllReferencePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token comment">// 链接到动态链接库</span>\n      <span class="token literal-property property">manifest</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'./dll/manifest.json\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token keyword">new</span> <span class="token class-name">AddAssetHtmlPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token literal-property property">filepath</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'./dll/jquery.js\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">publicPath</span><span class="token operator">:</span> <span class="token string">\'./\'</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p><a href="https://webpack.docschina.org/concepts/" target="_blank" rel="noopener noreferrer">官方文档<ExternalLinkIcon/></a></p>\n',date:"2022-10-01",deps:[],hoistedTags:[],links:[],pathInferred:"/工具/2022/20221001.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"20221001",filePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/工具/2022/20221001.md",filePathRelative:"工具/2022/20221001.md",componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/工具/2022/20221001.html.vue",componentFilePathRelative:"pages/工具/2022/20221001.html.vue",componentFileChunkName:"v-11de4d87",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/工具/2022/20221001.html.js",dataFilePathRelative:"pages/工具/2022/20221001.html.js",dataFileChunkName:"v-11de4d87",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/工具/2022/20221001.html",htmlFilePathRelative:"工具/2022/20221001.html"},{data:{key:"v-546b4dc0",path:"/%E5%B7%A5%E5%85%B7/2022/20221019.html",title:"尤雨溪推荐神器 ni ，能替代 npm/yarn/pnpm ？",lang:"zh-CN",frontmatter:{title:"尤雨溪推荐神器 ni ，能替代 npm/yarn/pnpm ？",date:"2022-10-19T00:00:00.000Z",tags:["工具"],categories:["工具"]},excerpt:"",headers:[{level:2,title:"ni 原理",slug:"ni-原理",children:[]},{level:2,title:"使用",slug:"使用",children:[]},{level:2,title:"阅读源码",slug:"阅读源码",children:[]},{level:2,title:"主流程 runner - runCli 函数",slug:"主流程-runner-runcli-函数",children:[]},{level:2,title:"主流程 runner - run 主函数",slug:"主流程-runner-run-主函数",children:[]},{level:2,title:"根据锁文件猜测用哪个包管理器 - detect 函数",slug:"根据锁文件猜测用哪个包管理器-detect-函数",children:[]},{level:2,title:"抹平不同的包管理器的命令差异 - parseNi 函数",slug:"抹平不同的包管理器的命令差异-parseni-函数",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],git:{updatedTime:null,contributors:[]}},key:"v-546b4dc0",path:"/%E5%B7%A5%E5%85%B7/2022/20221019.html",title:"尤雨溪推荐神器 ni ，能替代 npm/yarn/pnpm ？",lang:"zh-CN",frontmatter:{title:"尤雨溪推荐神器 ni ，能替代 npm/yarn/pnpm ？",date:"2022-10-19T00:00:00.000Z",tags:["工具"],categories:["工具"]},excerpt:"",headers:[{level:2,title:"ni 原理",slug:"ni-原理",children:[]},{level:2,title:"使用",slug:"使用",children:[]},{level:2,title:"阅读源码",slug:"阅读源码",children:[]},{level:2,title:"主流程 runner - runCli 函数",slug:"主流程-runner-runcli-函数",children:[]},{level:2,title:"主流程 runner - run 主函数",slug:"主流程-runner-run-主函数",children:[]},{level:2,title:"根据锁文件猜测用哪个包管理器 - detect 函数",slug:"根据锁文件猜测用哪个包管理器-detect-函数",children:[]},{level:2,title:"抹平不同的包管理器的命令差异 - parseNi 函数",slug:"抹平不同的包管理器的命令差异-parseni-函数",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],content:"\r\n::: tip\r\n\r\n我们日常开发中，可能容易 **npm、yarn、pnpm** 混用。有了 **ni** 后，可以用于日常开发使用。Vue 核心成员 [Anthony Fu](https://link.juejin.cn/?target=https%3A%2F%2Fantfu.me) 发现问题，最终开发了一个工具 [ni](https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fantfu%2Fni) 解决问题。通过这一篇可以学到\r\n\r\n1. 学会 ni 使用和理解其原理\r\n2. 学会调试学习源码\r\n3. 可以在日常工作中也使用 ni\r\n\r\n:::\r\n\r\n## ni 原理\r\n\r\n在它运行之前，它会检测你的 **yarn.lock** / **pnpm-lock.yaml** / **package-lock.json** 以了解当前的包管理器，并运行相应的命令。\r\n\r\n```\r\n单从这句话中可能有些不好理解，还是不知道它是个什么。我解释一下。\r\n\r\n使用 `ni` 在项目中安装依赖时：\r\n   假设你的项目中有锁文件 `yarn.lock`，那么它最终会执行 `yarn install` 命令。\r\n   假设你的项目中有锁文件 `pnpm-lock.yaml`，那么它最终会执行 `pnpm i` 命令。\r\n   假设你的项目中有锁文件 `package-lock.json`，那么它最终会执行 `npm i` 命令。\r\n\r\n使用 `ni -g vue-cli` 安装全局依赖时\r\n    默认使用 `npm i -g vue-cli`\r\n\r\n当然不只有 `ni` 安装依赖。\r\n    还有 `nr` - run\r\n    `nx` - execute\r\n    `nu` - upgrade\r\n    `nci` - clean install\r\n    `nrm` - remove\r\n```\r\n\r\n查看源码发现：**ni** 相关的命令，都可以在末尾追加 **\\? **，表示只打印，不是真正执行。所以全局安装 **ni** 后，可以尽情测试，比如 **ni  \\?**，**nr dev --port=3000 \\?**，因为打印，所以可以在各种目录下执行，有助于理解 ni源码。我测试了如下图所示：\r\n\r\n![命令测试图示](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bebec9efba69488ab2167ef1c6121781~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?)\r\n\r\n假设项目目录下没有锁文件，默认就会让用户从**npm、yarn、pnpm** 选择，然后执行相应的命令。 但如果在 **~/.nirc** 文件中，设置了全局默认的配置，则使用默认配置执行对应命令。\r\n\r\n```\r\n//~/.nirc\r\n\r\n//fallback when no lock found\r\ndefaultAgent=npm # default \"prompt\"\r\n\r\n//for global installs\r\nglobalAgent=npm\r\n```\r\n\r\n## 使用\r\n\r\n- 先全局安装: npm i -g @antfu/ni\r\n\r\n```\r\nni\r\n\r\n# npm install\r\n# yarn install\r\n# pnpm install\r\n\r\nni axios\r\n\r\n# npm i axios\r\n# yarn add axios\r\n# pnpm i axios\r\n\r\nnr dev --port=3000\r\n\r\n# npm run dev -- --port=3000\r\n# yarn run dev --port=3000\r\n# pnpm run dev -- --port=3000\r\n\r\nnr -\r\n\r\n# 重新执行最后一次执行的命令\r\n# rerun the last command\r\n```\r\n\r\n更多的使用请查看官方github地址: https://github.com/antfu/ni#how\r\n\r\n## 阅读源码\r\n\r\n- 众所周知，看一个开源项目，先从 package.json 文件开始看起。\r\n\r\n```js\r\npackage.json 文件\r\n\r\n{\r\n    \"name\": \"@antfu/ni\",\r\n    \"version\": \"0.10.0\",\r\n    \"description\": \"Use the right package manager\",\r\n    // 暴露了六个命令\r\n    \"bin\": {\r\n        \"ni\": \"bin/ni.js\",\r\n        \"nci\": \"bin/nci.js\",\r\n        \"nr\": \"bin/nr.js\",\r\n        \"nu\": \"bin/nu.js\",\r\n        \"nx\": \"bin/nx.js\",\r\n        \"nrm\": \"bin/nrm.js\"\r\n    },\r\n    \"scripts\": {\r\n        // 省略了其他的命令 用 esno 执行 ts 文件\r\n        // 可以加上 ? 便于调试，也可以不加\r\n        // 或者是终端 npm run dev \\?\r\n        \"dev\": \"esno src/ni.ts ?\"\r\n    },\r\n}\r\n```\r\n\r\n- 根据 **dev** 命令，我们找到主入口文件 **src/ni.ts**。\r\n\r\n```js\r\n// ni/src/ni.ts\r\nimport { parseNi } from './commands'\r\nimport { runCli } from './runner'\r\n\r\n// 我们可以在这里打断点\r\nrunCli(parseNi)\r\n```\r\n\r\n找到 **ni/package.json** 的 **scripts** ，把鼠标移动到 **dev** 命令上，会出现**运行脚本**和**调试脚本**命令。如下图所示，选择调试脚本\r\n\r\n![VSCode 调试](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c14f2badd837455194dc6a222480a61f~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?)\r\n\r\n## 主流程 runner - runCli 函数\r\n\r\n- 这个函数就是对终端传入的命令行参数做一次解析。最终还是执行的 **run** 函数，对于 **process** 不了解的读者，可以看[阮一峰老师写的 process 对象](https://link.juejin.cn/?target=http%3A%2F%2Fjavascript.ruanyifeng.com%2Fnodejs%2Fprocess.html)\r\n\r\n```ts\r\n// ni/src/runner.ts\r\nexport async function runCli(fn: Runner, options: DetectOptions = {}) {\r\n  // process.argv：返回一个数组，成员是当前进程的所有命令行参数。\r\n  // 其中 process.argv 的第一和第二个元素是Node可执行文件和被执行JavaScript文件的完全限定的文件系统路径，无论你是否这样输入他们。\r\n  const args = process.argv.slice(2).filter(Boolean)\r\n  try {\r\n    await run(fn, args, options)\r\n  }\r\n  catch (error) {\r\n    // process.exit方法用来退出当前进程。它可以接受一个数值参数，如果参数大于0，表示执行失败；如果等于0表示执行成功。\r\n    process.exit(1)\r\n  }\r\n}\r\n```\r\n\r\n## 主流程 runner - run 主函数\r\n\r\n- 这个函数主要做了三件事\r\n\r\n```\r\n1. 根据锁文件猜测用哪个包管理器 npm/yarn/pnpm - detect 函数\r\n2. 抹平不同的包管理器的命令差异 - parseNi 函数\r\n3. 最终运行相应的脚本 - execa 工具\r\n```\r\n\r\n```ts\r\n// ni/src/runner.ts\r\n// 源码有删减\r\nimport execa from 'execa'\r\nconst DEBUG_SIGN = '?'\r\nexport async function run(fn: Runner, args: string[], options: DetectOptions = {}) {\r\n  // 命令参数包含 问号? 则是调试模式，不执行脚本\r\n  const debug = args.includes(DEBUG_SIGN)\r\n  if (debug)\r\n    // 调试模式下，删除这个问号\r\n    remove(args, DEBUG_SIGN)\r\n\r\n  // cwd 方法返回进程的当前目录（绝对路径）\r\n  let cwd = process.cwd()\r\n  let command\r\n\r\n  // 支持指定 文件目录\r\n  // ni -C packages/foo vite\r\n  // nr -C playground dev\r\n  if (args[0] === '-C') {\r\n    cwd = resolve(cwd, args[1])\r\n    // 删掉这两个参数 -C packages/foo\r\n    args.splice(0, 2)\r\n  }\r\n\r\n  // 如果是全局安装，那么使用全局的包管理器\r\n  const isGlobal = args.includes('-g')\r\n  if (isGlobal) {\r\n    command = await fn(getGlobalAgent(), args)\r\n  }\r\n  else {\r\n    let agent = await detect({ ...options, cwd }) || getDefaultAgent()\r\n    // 猜测使用哪个包管理器，如果没有发现锁文件，会返回 null，则调用 getDefaultAgent 函数，默认返回是让用户选择 prompt\r\n    if (agent === 'prompt') {\r\n      agent = (await prompts({\r\n        name: 'agent',\r\n        type: 'select',\r\n        message: 'Choose the agent',\r\n        choices: agents.map(value => ({ title: value, value })),\r\n      })).agent\r\n      if (!agent)\r\n        return\r\n    }\r\n    // 这里的 fn 是 传入解析代码的函数\r\n    command = await fn(agent as Agent, args, {\r\n      hasLock: Boolean(agent),\r\n      cwd,\r\n    })\r\n  }\r\n\r\n  // 如果没有命令，直接返回，上一个 runCli 函数报错，退出进程\r\n  if (!command)\r\n    return\r\n\r\n  // 如果是调试模式，那么直接打印出命令。调试非常有用。\r\n  if (debug) {\r\n    // eslint-disable-next-line no-console\r\n    console.log(command)\r\n    return\r\n  }\r\n\r\n  // 最终用 execa 执行命令，比如 npm i\r\n  // https://github.com/sindresorhus/execa\r\n  // 介绍：Process execution for humans\r\n\r\n  await execa.command(command, { stdio: 'inherit', encoding: 'utf-8', cwd })\r\n}\r\n```\r\n\r\n我们学习完主流程，接着来看两个重要的函数：**detect** 函数、**parseNi** 函数。根据入口我们可以知道。\r\n\r\n```ts\r\nrunCli(parseNi)\r\n\r\nrun(fn)\r\n\r\n这里 fn 则是 parseNi\r\n```\r\n\r\n##  根据锁文件猜测用哪个包管理器 - detect 函数\r\n\r\n```\r\n主要就做了三件事情\r\n\r\n1. 找到项目根路径下的锁文件。返回对应的包管理 `npm/yarn/pnpm`。\r\n2. 如果没找到，那就返回 `null`。\r\n3. 如果找到了，但是用户电脑没有这个命令，则询问用户是否自动安装。\r\n```\r\n\r\n```js\r\n// ni/src/agents.ts\r\nexport const LOCKS: Record<string, Agent> = {\r\n  'pnpm-lock.yaml': 'pnpm',\r\n  'yarn.lock': 'yarn',\r\n  'package-lock.json': 'npm',\r\n}\r\n```\r\n\r\n```ts\r\n// ni/src/detect.ts\r\nexport async function detect({ autoInstall, cwd }: DetectOptions) {\r\n  const result = await findUp(Object.keys(LOCKS), { cwd })\r\n  const agent = (result ? LOCKS[path.basename(result)] : null)\r\n\r\n  if (agent && !cmdExists(agent)) {\r\n    if (!autoInstall) {\r\n      console.warn(`Detected ${agent} but it doesn't seem to be installed.\\n`)\r\n\r\n      if (process.env.CI)\r\n        process.exit(1)\r\n\r\n      const link = terminalLink(agent, INSTALL_PAGE[agent])\r\n      const { tryInstall } = await prompts({\r\n        name: 'tryInstall',\r\n        type: 'confirm',\r\n        message: `Would you like to globally install ${link}?`,\r\n      })\r\n      if (!tryInstall)\r\n        process.exit(1)\r\n    }\r\n\r\n    await execa.command(`npm i -g ${agent}`, { stdio: 'inherit', cwd })\r\n  }\r\n\r\n  return agent\r\n}\r\n```\r\n\r\n## 抹平不同的包管理器的命令差异 - parseNi 函数\r\n\r\n```ts\r\n// ni/src/commands.ts\r\nexport const parseNi = <Runner>((agent, args, ctx) => {\r\n  // ni -v 输出版本号\r\n  if (args.length === 1 && args[0] === '-v') {\r\n    // eslint-disable-next-line no-console\r\n    console.log(`@antfu/ni v${version}`)\r\n    process.exit(0)\r\n  }\r\n\r\n  if (args.length === 0)\r\n    return getCommand(agent, 'install')\r\n  // 省略一些代码\r\n})\r\n```\r\n\r\n通过 **getCommand**  获取命令。\r\n\r\n```ts\r\n// ni/src/agents.ts\r\n// 有删减\r\n// 一份配置，写个这三种包管理器中的命令。\r\n\r\nexport const AGENTS = {\r\n  npm: {\r\n    'install': 'npm i'\r\n  },\r\n  yarn: {\r\n    'install': 'yarn install'\r\n  },\r\n  pnpm: {\r\n    'install': 'pnpm i'\r\n  },\r\n}\r\n```\r\n\r\n```ts\r\n// ni/src/commands.ts\r\nexport function getCommand(\r\n  agent: Agent,\r\n  command: Command,\r\n  args: string[] = [],\r\n) {\r\n  // 包管理器不在 AGENTS 中则报错\r\n  // 比如 npm 不在\r\n  if (!(agent in AGENTS))\r\n    throw new Error(`Unsupported agent \"${agent}\"`)\r\n\r\n  // 获取命令 安装则对应 npm install\r\n  const c = AGENTS[agent][command]\r\n\r\n  // 如果是函数，则执行函数。\r\n  if (typeof c === 'function')\r\n    return c(args)\r\n\r\n  // 命令 没找到，则报错\r\n  if (!c)\r\n    throw new Error(`Command \"${command}\" is not support by agent \"${agent}\"`)\r\n  // 最终拼接成命令字符串\r\n  return c.replace('{0}', args.join(' ')).trim()\r\n}\r\n```\r\n\r\n得到相应的命令，比如是 **npm i**，最终用这个工具 [execa](https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fsindresorhus%2Fexeca) 执行最终得到的相应的脚本。\r\n\r\n```ts\r\nawait execa.command(command, { stdio: 'inherit', encoding: 'utf-8', cwd })\r\n```\r\n\r\n## 总结\r\n\r\n- 我们看完源码，可以知道这个神器 **ni** 主要做了三件事\r\n\r\n```\r\n1. 根据锁文件猜测用哪个包管理器 npm/yarn/pnpm - detect 函数\r\n2. 抹平不同的包管理器的命令差异 - parseNi 函数\r\n3. 最终运行相应的脚本 - execa 工具\r\n```\r\n\r\n",contentRendered:'<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>我们日常开发中，可能容易 <strong>npm、yarn、pnpm</strong> 混用。有了 <strong>ni</strong> 后，可以用于日常开发使用。Vue 核心成员 <a href="https://link.juejin.cn/?target=https%3A%2F%2Fantfu.me" target="_blank" rel="noopener noreferrer">Anthony Fu<ExternalLinkIcon/></a> 发现问题，最终开发了一个工具 <a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fantfu%2Fni" target="_blank" rel="noopener noreferrer">ni<ExternalLinkIcon/></a> 解决问题。通过这一篇可以学到</p>\n<ol>\n<li>学会 ni 使用和理解其原理</li>\n<li>学会调试学习源码</li>\n<li>可以在日常工作中也使用 ni</li>\n</ol>\n</div>\n<h2 id="ni-原理" tabindex="-1"><a class="header-anchor" href="#ni-原理" aria-hidden="true">#</a> ni 原理</h2>\n<p>在它运行之前，它会检测你的 <strong>yarn.lock</strong> / <strong>pnpm-lock.yaml</strong> / <strong>package-lock.json</strong> 以了解当前的包管理器，并运行相应的命令。</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>单从这句话中可能有些不好理解，还是不知道它是个什么。我解释一下。\n\n使用 `ni` 在项目中安装依赖时：\n   假设你的项目中有锁文件 `yarn.lock`，那么它最终会执行 `yarn install` 命令。\n   假设你的项目中有锁文件 `pnpm-lock.yaml`，那么它最终会执行 `pnpm i` 命令。\n   假设你的项目中有锁文件 `package-lock.json`，那么它最终会执行 `npm i` 命令。\n\n使用 `ni -g vue-cli` 安装全局依赖时\n    默认使用 `npm i -g vue-cli`\n\n当然不只有 `ni` 安装依赖。\n    还有 `nr` - run\n    `nx` - execute\n    `nu` - upgrade\n    `nci` - clean install\n    `nrm` - remove\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>查看源码发现：<strong>ni</strong> 相关的命令，都可以在末尾追加 **? **，表示只打印，不是真正执行。所以全局安装 <strong>ni</strong> 后，可以尽情测试，比如 <strong>ni  ?</strong>，<strong>nr dev --port=3000 ?</strong>，因为打印，所以可以在各种目录下执行，有助于理解 ni源码。我测试了如下图所示：</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="命令测试图示" originSrc="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bebec9efba69488ab2167ef1c6121781~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?" data="aurora"></p>\n<p>假设项目目录下没有锁文件，默认就会让用户从<strong>npm、yarn、pnpm</strong> 选择，然后执行相应的命令。 但如果在 <strong>~/.nirc</strong> 文件中，设置了全局默认的配置，则使用默认配置执行对应命令。</p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>//~/.nirc\n\n//fallback when no lock found\ndefaultAgent=npm # default "prompt"\n\n//for global installs\nglobalAgent=npm\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h2>\n<ul>\n<li>先全局安装: npm i -g @antfu/ni</li>\n</ul>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>ni\n\n# npm install\n# yarn install\n# pnpm install\n\nni axios\n\n# npm i axios\n# yarn add axios\n# pnpm i axios\n\nnr dev --port=3000\n\n# npm run dev -- --port=3000\n# yarn run dev --port=3000\n# pnpm run dev -- --port=3000\n\nnr -\n\n# 重新执行最后一次执行的命令\n# rerun the last command\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>更多的使用请查看官方github地址: https://github.com/antfu/ni#how</p>\n<h2 id="阅读源码" tabindex="-1"><a class="header-anchor" href="#阅读源码" aria-hidden="true">#</a> 阅读源码</h2>\n<ul>\n<li>众所周知，看一个开源项目，先从 package.json 文件开始看起。</li>\n</ul>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">package</span><span class="token punctuation">.</span>json 文件\n\n<span class="token punctuation">{</span>\n    <span class="token string-property property">"name"</span><span class="token operator">:</span> <span class="token string">"@antfu/ni"</span><span class="token punctuation">,</span>\n    <span class="token string-property property">"version"</span><span class="token operator">:</span> <span class="token string">"0.10.0"</span><span class="token punctuation">,</span>\n    <span class="token string-property property">"description"</span><span class="token operator">:</span> <span class="token string">"Use the right package manager"</span><span class="token punctuation">,</span>\n    <span class="token comment">// 暴露了六个命令</span>\n    <span class="token string-property property">"bin"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token string-property property">"ni"</span><span class="token operator">:</span> <span class="token string">"bin/ni.js"</span><span class="token punctuation">,</span>\n        <span class="token string-property property">"nci"</span><span class="token operator">:</span> <span class="token string">"bin/nci.js"</span><span class="token punctuation">,</span>\n        <span class="token string-property property">"nr"</span><span class="token operator">:</span> <span class="token string">"bin/nr.js"</span><span class="token punctuation">,</span>\n        <span class="token string-property property">"nu"</span><span class="token operator">:</span> <span class="token string">"bin/nu.js"</span><span class="token punctuation">,</span>\n        <span class="token string-property property">"nx"</span><span class="token operator">:</span> <span class="token string">"bin/nx.js"</span><span class="token punctuation">,</span>\n        <span class="token string-property property">"nrm"</span><span class="token operator">:</span> <span class="token string">"bin/nrm.js"</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token string-property property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 省略了其他的命令 用 esno 执行 ts 文件</span>\n        <span class="token comment">// 可以加上 ? 便于调试，也可以不加</span>\n        <span class="token comment">// 或者是终端 npm run dev \\?</span>\n        <span class="token string-property property">"dev"</span><span class="token operator">:</span> <span class="token string">"esno src/ni.ts ?"</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><ul>\n<li>根据 <strong>dev</strong> 命令，我们找到主入口文件 <strong>src/ni.ts</strong>。</li>\n</ul>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// ni/src/ni.ts</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> parseNi <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./commands\'</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> runCli <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./runner\'</span>\n\n<span class="token comment">// 我们可以在这里打断点</span>\n<span class="token function">runCli</span><span class="token punctuation">(</span>parseNi<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>找到 <strong>ni/package.json</strong> 的 <strong>scripts</strong> ，把鼠标移动到 <strong>dev</strong> 命令上，会出现<strong>运行脚本</strong>和<strong>调试脚本</strong>命令。如下图所示，选择调试脚本</p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="VSCode 调试" originSrc="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c14f2badd837455194dc6a222480a61f~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?" data="aurora"></p>\n<h2 id="主流程-runner-runcli-函数" tabindex="-1"><a class="header-anchor" href="#主流程-runner-runcli-函数" aria-hidden="true">#</a> 主流程 runner - runCli 函数</h2>\n<ul>\n<li>这个函数就是对终端传入的命令行参数做一次解析。最终还是执行的 <strong>run</strong> 函数，对于 <strong>process</strong> 不了解的读者，可以看<a href="https://link.juejin.cn/?target=http%3A%2F%2Fjavascript.ruanyifeng.com%2Fnodejs%2Fprocess.html" target="_blank" rel="noopener noreferrer">阮一峰老师写的 process 对象<ExternalLinkIcon/></a></li>\n</ul>\n<div class="language-typescript ext-ts line-numbers-mode"><pre v-pre class="language-typescript"><code><span class="token comment">// ni/src/runner.ts</span>\n<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">runCli</span><span class="token punctuation">(</span>fn<span class="token operator">:</span> Runner<span class="token punctuation">,</span> options<span class="token operator">:</span> DetectOptions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// process.argv：返回一个数组，成员是当前进程的所有命令行参数。</span>\n  <span class="token comment">// 其中 process.argv 的第一和第二个元素是Node可执行文件和被执行JavaScript文件的完全限定的文件系统路径，无论你是否这样输入他们。</span>\n  <span class="token keyword">const</span> args <span class="token operator">=</span> process<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span>\n  <span class="token keyword">try</span> <span class="token punctuation">{</span>\n    <span class="token keyword">await</span> <span class="token function">run</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> args<span class="token punctuation">,</span> options<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// process.exit方法用来退出当前进程。它可以接受一个数值参数，如果参数大于0，表示执行失败；如果等于0表示执行成功。</span>\n    process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="主流程-runner-run-主函数" tabindex="-1"><a class="header-anchor" href="#主流程-runner-run-主函数" aria-hidden="true">#</a> 主流程 runner - run 主函数</h2>\n<ul>\n<li>这个函数主要做了三件事</li>\n</ul>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>1. 根据锁文件猜测用哪个包管理器 npm/yarn/pnpm - detect 函数\n2. 抹平不同的包管理器的命令差异 - parseNi 函数\n3. 最终运行相应的脚本 - execa 工具\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre v-pre class="language-typescript"><code><span class="token comment">// ni/src/runner.ts</span>\n<span class="token comment">// 源码有删减</span>\n<span class="token keyword">import</span> execa <span class="token keyword">from</span> <span class="token string">\'execa\'</span>\n<span class="token keyword">const</span> <span class="token constant">DEBUG_SIGN</span> <span class="token operator">=</span> <span class="token string">\'?\'</span>\n<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span>fn<span class="token operator">:</span> Runner<span class="token punctuation">,</span> args<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> options<span class="token operator">:</span> DetectOptions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 命令参数包含 问号? 则是调试模式，不执行脚本</span>\n  <span class="token keyword">const</span> debug <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token constant">DEBUG_SIGN</span><span class="token punctuation">)</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>debug<span class="token punctuation">)</span>\n    <span class="token comment">// 调试模式下，删除这个问号</span>\n    <span class="token function">remove</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> <span class="token constant">DEBUG_SIGN</span><span class="token punctuation">)</span>\n\n  <span class="token comment">// cwd 方法返回进程的当前目录（绝对路径）</span>\n  <span class="token keyword">let</span> cwd <span class="token operator">=</span> process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">let</span> command\n\n  <span class="token comment">// 支持指定 文件目录</span>\n  <span class="token comment">// ni -C packages/foo vite</span>\n  <span class="token comment">// nr -C playground dev</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">\'-C\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    cwd <span class="token operator">=</span> <span class="token function">resolve</span><span class="token punctuation">(</span>cwd<span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n    <span class="token comment">// 删掉这两个参数 -C packages/foo</span>\n    args<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 如果是全局安装，那么使用全局的包管理器</span>\n  <span class="token keyword">const</span> isGlobal <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">\'-g\'</span><span class="token punctuation">)</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>isGlobal<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    command <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token function">getGlobalAgent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> agent <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">detect</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>options<span class="token punctuation">,</span> cwd <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">getDefaultAgent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token comment">// 猜测使用哪个包管理器，如果没有发现锁文件，会返回 null，则调用 getDefaultAgent 函数，默认返回是让用户选择 prompt</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>agent <span class="token operator">===</span> <span class="token string">\'prompt\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      agent <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">prompts</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        name<span class="token operator">:</span> <span class="token string">\'agent\'</span><span class="token punctuation">,</span>\n        type<span class="token operator">:</span> <span class="token string">\'select\'</span><span class="token punctuation">,</span>\n        message<span class="token operator">:</span> <span class="token string">\'Choose the agent\'</span><span class="token punctuation">,</span>\n        choices<span class="token operator">:</span> agents<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>value <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> title<span class="token operator">:</span> value<span class="token punctuation">,</span> value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>agent\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>agent<span class="token punctuation">)</span>\n        <span class="token keyword">return</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 这里的 fn 是 传入解析代码的函数</span>\n    command <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fn</span><span class="token punctuation">(</span>agent <span class="token keyword">as</span> Agent<span class="token punctuation">,</span> args<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n      hasLock<span class="token operator">:</span> <span class="token function">Boolean</span><span class="token punctuation">(</span>agent<span class="token punctuation">)</span><span class="token punctuation">,</span>\n      cwd<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 如果没有命令，直接返回，上一个 runCli 函数报错，退出进程</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>command<span class="token punctuation">)</span>\n    <span class="token keyword">return</span>\n\n  <span class="token comment">// 如果是调试模式，那么直接打印出命令。调试非常有用。</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>debug<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// eslint-disable-next-line no-console</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span>\n    <span class="token keyword">return</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 最终用 execa 执行命令，比如 npm i</span>\n  <span class="token comment">// https://github.com/sindresorhus/execa</span>\n  <span class="token comment">// 介绍：Process execution for humans</span>\n\n  <span class="token keyword">await</span> execa<span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> <span class="token punctuation">{</span> stdio<span class="token operator">:</span> <span class="token string">\'inherit\'</span><span class="token punctuation">,</span> encoding<span class="token operator">:</span> <span class="token string">\'utf-8\'</span><span class="token punctuation">,</span> cwd <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br></div></div><p>我们学习完主流程，接着来看两个重要的函数：<strong>detect</strong> 函数、<strong>parseNi</strong> 函数。根据入口我们可以知道。</p>\n<div class="language-typescript ext-ts line-numbers-mode"><pre v-pre class="language-typescript"><code><span class="token function">runCli</span><span class="token punctuation">(</span>parseNi<span class="token punctuation">)</span>\n\n<span class="token function">run</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>\n\n这里 fn 则是 parseNi\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="根据锁文件猜测用哪个包管理器-detect-函数" tabindex="-1"><a class="header-anchor" href="#根据锁文件猜测用哪个包管理器-detect-函数" aria-hidden="true">#</a> 根据锁文件猜测用哪个包管理器 - detect 函数</h2>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>主要就做了三件事情\n\n1. 找到项目根路径下的锁文件。返回对应的包管理 `npm/yarn/pnpm`。\n2. 如果没找到，那就返回 `null`。\n3. 如果找到了，但是用户电脑没有这个命令，则询问用户是否自动安装。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// ni/src/agents.ts</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">LOCKS</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> Agent<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token string-property property">\'pnpm-lock.yaml\'</span><span class="token operator">:</span> <span class="token string">\'pnpm\'</span><span class="token punctuation">,</span>\n  <span class="token string-property property">\'yarn.lock\'</span><span class="token operator">:</span> <span class="token string">\'yarn\'</span><span class="token punctuation">,</span>\n  <span class="token string-property property">\'package-lock.json\'</span><span class="token operator">:</span> <span class="token string">\'npm\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre v-pre class="language-typescript"><code><span class="token comment">// ni/src/detect.ts</span>\n<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">detect</span><span class="token punctuation">(</span><span class="token punctuation">{</span> autoInstall<span class="token punctuation">,</span> cwd <span class="token punctuation">}</span><span class="token operator">:</span> DetectOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">findUp</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token constant">LOCKS</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> cwd <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> agent <span class="token operator">=</span> <span class="token punctuation">(</span>result <span class="token operator">?</span> <span class="token constant">LOCKS</span><span class="token punctuation">[</span>path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>agent <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">cmdExists</span><span class="token punctuation">(</span>agent<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>autoInstall<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Detected </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>agent<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> but it doesn\'t seem to be installed.\\n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">CI</span><span class="token punctuation">)</span>\n        process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n\n      <span class="token keyword">const</span> link <span class="token operator">=</span> <span class="token function">terminalLink</span><span class="token punctuation">(</span>agent<span class="token punctuation">,</span> <span class="token constant">INSTALL_PAGE</span><span class="token punctuation">[</span>agent<span class="token punctuation">]</span><span class="token punctuation">)</span>\n      <span class="token keyword">const</span> <span class="token punctuation">{</span> tryInstall <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">prompts</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        name<span class="token operator">:</span> <span class="token string">\'tryInstall\'</span><span class="token punctuation">,</span>\n        type<span class="token operator">:</span> <span class="token string">\'confirm\'</span><span class="token punctuation">,</span>\n        message<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Would you like to globally install </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>link<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">?</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tryInstall<span class="token punctuation">)</span>\n        process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">await</span> execa<span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">npm i -g </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>agent<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span> stdio<span class="token operator">:</span> <span class="token string">\'inherit\'</span><span class="token punctuation">,</span> cwd <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> agent\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h2 id="抹平不同的包管理器的命令差异-parseni-函数" tabindex="-1"><a class="header-anchor" href="#抹平不同的包管理器的命令差异-parseni-函数" aria-hidden="true">#</a> 抹平不同的包管理器的命令差异 - parseNi 函数</h2>\n<div class="language-typescript ext-ts line-numbers-mode"><pre v-pre class="language-typescript"><code><span class="token comment">// ni/src/commands.ts</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> parseNi <span class="token operator">=</span> <span class="token operator">&lt;</span>Runner<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">(</span>agent<span class="token punctuation">,</span> args<span class="token punctuation">,</span> ctx<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// ni -v 输出版本号</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">\'-v\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// eslint-disable-next-line no-console</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">@antfu/ni v</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>version<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n    process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> <span class="token function">getCommand</span><span class="token punctuation">(</span>agent<span class="token punctuation">,</span> <span class="token string">\'install\'</span><span class="token punctuation">)</span>\n  <span class="token comment">// 省略一些代码</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>通过 <strong>getCommand</strong>  获取命令。</p>\n<div class="language-typescript ext-ts line-numbers-mode"><pre v-pre class="language-typescript"><code><span class="token comment">// ni/src/agents.ts</span>\n<span class="token comment">// 有删减</span>\n<span class="token comment">// 一份配置，写个这三种包管理器中的命令。</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">AGENTS</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  npm<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token string-property property">\'install\'</span><span class="token operator">:</span> <span class="token string">\'npm i\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  yarn<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token string-property property">\'install\'</span><span class="token operator">:</span> <span class="token string">\'yarn install\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  pnpm<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token string-property property">\'install\'</span><span class="token operator">:</span> <span class="token string">\'pnpm i\'</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre v-pre class="language-typescript"><code><span class="token comment">// ni/src/commands.ts</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getCommand</span><span class="token punctuation">(</span>\n  agent<span class="token operator">:</span> Agent<span class="token punctuation">,</span>\n  command<span class="token operator">:</span> Command<span class="token punctuation">,</span>\n  args<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 包管理器不在 AGENTS 中则报错</span>\n  <span class="token comment">// 比如 npm 不在</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>agent <span class="token keyword">in</span> <span class="token constant">AGENTS</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Unsupported agent "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>agent<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n\n  <span class="token comment">// 获取命令 安装则对应 npm install</span>\n  <span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token constant">AGENTS</span><span class="token punctuation">[</span>agent<span class="token punctuation">]</span><span class="token punctuation">[</span>command<span class="token punctuation">]</span>\n\n  <span class="token comment">// 如果是函数，则执行函数。</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> c <span class="token operator">===</span> <span class="token string">\'function\'</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> <span class="token function">c</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>\n\n  <span class="token comment">// 命令 没找到，则报错</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>c<span class="token punctuation">)</span>\n    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Command "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>command<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">" is not support by agent "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>agent<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n  <span class="token comment">// 最终拼接成命令字符串</span>\n  <span class="token keyword">return</span> c<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">\'{0}\'</span><span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">\' \'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>得到相应的命令，比如是 <strong>npm i</strong>，最终用这个工具 <a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fsindresorhus%2Fexeca" target="_blank" rel="noopener noreferrer">execa<ExternalLinkIcon/></a> 执行最终得到的相应的脚本。</p>\n<div class="language-typescript ext-ts line-numbers-mode"><pre v-pre class="language-typescript"><code><span class="token keyword">await</span> execa<span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> <span class="token punctuation">{</span> stdio<span class="token operator">:</span> <span class="token string">\'inherit\'</span><span class="token punctuation">,</span> encoding<span class="token operator">:</span> <span class="token string">\'utf-8\'</span><span class="token punctuation">,</span> cwd <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2>\n<ul>\n<li>我们看完源码，可以知道这个神器 <strong>ni</strong> 主要做了三件事</li>\n</ul>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>1. 根据锁文件猜测用哪个包管理器 npm/yarn/pnpm - detect 函数\n2. 抹平不同的包管理器的命令差异 - parseNi 函数\n3. 最终运行相应的脚本 - execa 工具\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',date:"2022-10-19",deps:[],hoistedTags:[],links:[],pathInferred:"/工具/2022/20221019.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"20221019",filePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/工具/2022/20221019.md",filePathRelative:"工具/2022/20221019.md",componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/工具/2022/20221019.html.vue",componentFilePathRelative:"pages/工具/2022/20221019.html.vue",componentFileChunkName:"v-546b4dc0",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/工具/2022/20221019.html.js",dataFilePathRelative:"pages/工具/2022/20221019.html.js",dataFileChunkName:"v-546b4dc0",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/工具/2022/20221019.html",htmlFilePathRelative:"工具/2022/20221019.html"},{data:{key:"v-3706649a",path:"/404.html",title:"",lang:"zh-CN",frontmatter:{layout:"404"},excerpt:"",headers:[],git:{}},key:"v-3706649a",path:"/404.html",title:"",lang:"zh-CN",frontmatter:{layout:"404"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/404.html.vue",componentFilePathRelative:"pages/404.html.vue",componentFileChunkName:"v-3706649a",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/404.html.js",dataFilePathRelative:"pages/404.html.js",dataFileChunkName:"v-3706649a",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/404.html",htmlFilePathRelative:"404.html"},{data:{key:"v-8daa1a0e",path:"/",title:"",lang:"zh-CN",frontmatter:{layout:"Layout",home:!0},excerpt:"",headers:[],git:{}},key:"v-8daa1a0e",path:"/",title:"",lang:"zh-CN",frontmatter:{layout:"Layout",home:!0},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/index.html.vue",componentFilePathRelative:"pages/index.html.vue",componentFileChunkName:"v-8daa1a0e",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/index.html.js",dataFilePathRelative:"pages/index.html.js",dataFileChunkName:"v-8daa1a0e",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/index.html",htmlFilePathRelative:"index.html"},{data:{key:"v-74bc627b",path:"/about/",title:"",lang:"zh-CN",frontmatter:{layout:"About",slug:"aurora-about"},excerpt:"",headers:[],git:{}},key:"v-74bc627b",path:"/about/",title:"",lang:"zh-CN",frontmatter:{layout:"About",slug:"aurora-about"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/about/index.html.vue",componentFilePathRelative:"pages/about/index.html.vue",componentFileChunkName:"v-74bc627b",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/about/index.html.js",dataFilePathRelative:"pages/about/index.html.js",dataFileChunkName:"v-74bc627b",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/about/index.html",htmlFilePathRelative:"about/index.html"},{data:{key:"v-14f724bf",path:"/mood/",title:"",lang:"zh-CN",frontmatter:{layout:"Mood",slug:"aurora-mood"},excerpt:"",headers:[],git:{}},key:"v-14f724bf",path:"/mood/",title:"",lang:"zh-CN",frontmatter:{layout:"Mood",slug:"aurora-mood"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/mood/index.html.vue",componentFilePathRelative:"pages/mood/index.html.vue",componentFileChunkName:"v-14f724bf",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/mood/index.html.js",dataFilePathRelative:"pages/mood/index.html.js",dataFileChunkName:"v-14f724bf",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/mood/index.html",htmlFilePathRelative:"mood/index.html"},{data:{key:"v-14e6501c",path:"/link/",title:"",lang:"zh-CN",frontmatter:{layout:"Link",slug:"aurora-link"},excerpt:"",headers:[],git:{}},key:"v-14e6501c",path:"/link/",title:"",lang:"zh-CN",frontmatter:{layout:"Link",slug:"aurora-link"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/link/index.html.vue",componentFilePathRelative:"pages/link/index.html.vue",componentFileChunkName:"v-14e6501c",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/link/index.html.js",dataFilePathRelative:"pages/link/index.html.js",dataFileChunkName:"v-14e6501c",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/link/index.html",htmlFilePathRelative:"link/index.html"},{data:{key:"v-744d024e",path:"/tag/",title:"",lang:"zh-CN",frontmatter:{layout:"Tag",slug:"aurora-tag"},excerpt:"",headers:[],git:{}},key:"v-744d024e",path:"/tag/",title:"",lang:"zh-CN",frontmatter:{layout:"Tag",slug:"aurora-tag"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/tag/index.html.vue",componentFilePathRelative:"pages/tag/index.html.vue",componentFileChunkName:"v-744d024e",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/tag/index.html.js",dataFilePathRelative:"pages/tag/index.html.js",dataFileChunkName:"v-744d024e",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/tag/index.html",htmlFilePathRelative:"tag/index.html"},{data:{key:"v-705c21a6",path:"/archive/",title:"",lang:"zh-CN",frontmatter:{layout:"Archive",slug:"aurora-archive"},excerpt:"",headers:[],git:{}},key:"v-705c21a6",path:"/archive/",title:"",lang:"zh-CN",frontmatter:{layout:"Archive",slug:"aurora-archive"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/archive/index.html.vue",componentFilePathRelative:"pages/archive/index.html.vue",componentFileChunkName:"v-705c21a6",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/archive/index.html.js",dataFilePathRelative:"pages/archive/index.html.js",dataFileChunkName:"v-705c21a6",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/archive/index.html",htmlFilePathRelative:"archive/index.html"},{data:{key:"v-6629f178",path:"/aurora-coze/",title:"",lang:"zh-CN",frontmatter:{layout:"CozeMood",slug:"aurora-coze-mood"},excerpt:"",headers:[],git:{}},key:"v-6629f178",path:"/aurora-coze/",title:"",lang:"zh-CN",frontmatter:{layout:"CozeMood",slug:"aurora-coze-mood"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/aurora-coze/index.html.vue",componentFilePathRelative:"pages/aurora-coze/index.html.vue",componentFileChunkName:"v-6629f178",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/aurora-coze/index.html.js",dataFilePathRelative:"pages/aurora-coze/index.html.js",dataFileChunkName:"v-6629f178",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/aurora-coze/index.html",htmlFilePathRelative:"aurora-coze/index.html"},{data:{key:"v-031dfb13",path:"/register/",title:"",lang:"zh-CN",frontmatter:{layout:"RegisterUser",slug:"aurora-coze-register"},excerpt:"",headers:[],git:{}},key:"v-031dfb13",path:"/register/",title:"",lang:"zh-CN",frontmatter:{layout:"RegisterUser",slug:"aurora-coze-register"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/register/index.html.vue",componentFilePathRelative:"pages/register/index.html.vue",componentFileChunkName:"v-031dfb13",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/register/index.html.js",dataFilePathRelative:"pages/register/index.html.js",dataFileChunkName:"v-031dfb13",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/register/index.html",htmlFilePathRelative:"register/index.html"},{data:{key:"v-e2acc714",path:"/photo/",title:"",lang:"zh-CN",frontmatter:{layout:"CozePhoto",slug:"aurora-photo"},excerpt:"",headers:[],git:{}},key:"v-e2acc714",path:"/photo/",title:"",lang:"zh-CN",frontmatter:{layout:"CozePhoto",slug:"aurora-photo"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/photo/index.html.vue",componentFilePathRelative:"pages/photo/index.html.vue",componentFileChunkName:"v-e2acc714",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/photo/index.html.js",dataFilePathRelative:"pages/photo/index.html.js",dataFileChunkName:"v-e2acc714",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/photo/index.html",htmlFilePathRelative:"photo/index.html"},{data:{key:"v-4382d077",path:"/next-mood/",title:"",lang:"zh-CN",frontmatter:{layout:"AuroraCozeMood",slug:"aurora-AuroraCozeMood"},excerpt:"",headers:[],git:{}},key:"v-4382d077",path:"/next-mood/",title:"",lang:"zh-CN",frontmatter:{layout:"AuroraCozeMood",slug:"aurora-AuroraCozeMood"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/next-mood/index.html.vue",componentFilePathRelative:"pages/next-mood/index.html.vue",componentFileChunkName:"v-4382d077",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/next-mood/index.html.js",dataFilePathRelative:"pages/next-mood/index.html.js",dataFileChunkName:"v-4382d077",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/next-mood/index.html",htmlFilePathRelative:"next-mood/index.html"},{data:{key:"v-3279cf61",path:"/aurora-archive/",title:"",lang:"zh-CN",frontmatter:{layout:"AuroraArchive",slug:"aurora-plugin-archive"},excerpt:"",headers:[],git:{}},key:"v-3279cf61",path:"/aurora-archive/",title:"",lang:"zh-CN",frontmatter:{layout:"AuroraArchive",slug:"aurora-plugin-archive"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/aurora-archive/index.html.vue",componentFilePathRelative:"pages/aurora-archive/index.html.vue",componentFileChunkName:"v-3279cf61",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/aurora-archive/index.html.js",dataFilePathRelative:"pages/aurora-archive/index.html.js",dataFileChunkName:"v-3279cf61",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/aurora-archive/index.html",htmlFilePathRelative:"aurora-archive/index.html"},{data:{key:"v-3c506944",path:"/aurora-music/",title:"",lang:"zh-CN",frontmatter:{layout:"AuroraMusic",slug:"aurora-plugin-music"},excerpt:"",headers:[],git:{}},key:"v-3c506944",path:"/aurora-music/",title:"",lang:"zh-CN",frontmatter:{layout:"AuroraMusic",slug:"aurora-plugin-music"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/aurora-music/index.html.vue",componentFilePathRelative:"pages/aurora-music/index.html.vue",componentFileChunkName:"v-3c506944",dataFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/.temp/pages/aurora-music/index.html.js",dataFilePathRelative:"pages/aurora-music/index.html.js",dataFileChunkName:"v-3c506944",htmlFilePath:"D:/编程练习/blog/my-blog2/vuepress-theme-aurora/docs/.vuepress/dist/aurora-music/index.html",htmlFilePathRelative:"aurora-music/index.html"}]}},n=>{n.O(0,[795,4594],(()=>(5698,n(n.s=5698)))),n.O()}]);