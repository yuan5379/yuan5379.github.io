"use strict";(self.webpackChunkdemo1=self.webpackChunkdemo1||[]).push([[3596],{4089:(a,s,n)=>{n.r(s),n.d(s,{data:()=>i});const i={key:"v-0db7d110",path:"/CICD/2023/20230515.html",title:"Jenkins 零基础入门",lang:"zh-CN",frontmatter:{title:"Jenkins 零基础入门",date:"2023-05-15T00:00:00.000Z",tags:["CICD"],categories:["CICD"]},excerpt:"",headers:[{level:2,title:"Jenkins是什么？",slug:"jenkins是什么",children:[]},{level:2,title:"本案例要实现的功能",slug:"本案例要实现的功能",children:[]},{level:2,title:"准备工作",slug:"准备工作",children:[]},{level:2,title:"Jenkins的安装与启动",slug:"jenkins的安装与启动",children:[]},{level:2,title:"Jenkins初始化",slug:"jenkins初始化",children:[]},{level:2,title:"创建任务",slug:"创建任务",children:[]},{level:2,title:"实现git钩子功能",slug:"实现git钩子功能",children:[]},{level:2,title:"实现自动化构建",slug:"实现自动化构建",children:[]},{level:2,title:"实现自动化部署",slug:"实现自动化部署",children:[]},{level:2,title:"实现邮件提醒",slug:"实现邮件提醒",children:[]},{level:2,title:"最后",slug:"最后",children:[]}],git:{updatedTime:null,contributors:[]}}},6433:(a,s,n)=>{n.r(s),n.d(s,{default:()=>oa});var i=n(6252);const e=(0,i.uE)('<div class="custom-container tip"><p class="custom-container-title">TIP</p><p>公司的前端构建及部署工作都是人工去做，随着业务扩大，项目迭代速度变快，人员增多，各种问题都暴露出来，本文是对前端自动化工作流进行探索后的一篇经验分享，将通过一个简单案例分享一下基于Jenkins的前端自动化工作流搭建的过程，搭建完这套工作流，我们只需要在本地发起一个git提交，剩下的单元测试，打包构建，代码部署，邮件提醒等功能全部自动化完成，让持续集成、持续交付、持续部署变得简单易操作，真正解决人工构建部署的诸多问题</p></div><h2 id="jenkins是什么" tabindex="-1"><a class="header-anchor" href="#jenkins是什么" aria-hidden="true">#</a> Jenkins是什么？</h2><p>Jenkins 是一款业界流行的开源持续集成工具，广泛用于项目开发，具有自动化构建、测试和部署等功能。</p><h2 id="本案例要实现的功能" tabindex="-1"><a class="header-anchor" href="#本案例要实现的功能" aria-hidden="true">#</a> 本案例要实现的功能</h2><p>本地项目发起一个git提交，剩下的单元测试，打包构建，代码部署，邮件提醒等全部自动化完成。</p><h2 id="准备工作" tabindex="-1"><a class="header-anchor" href="#准备工作" aria-hidden="true">#</a> 准备工作</h2><ol><li>先准备一个项目，我这里直接使用vue-cli脚手架生成了一个项目，其他技术栈也一样，只要是个项目就行。</li></ol>',7),l=(0,i._)("p",null,[(0,i._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"vue-cli生成的项目",originSrc:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/4/14/162c3fb8f8a9d41f~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image",data:"aurora"})],-1),t=(0,i._)("p",null,[(0,i._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"vue-cli生成的项目",originSrc:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/4/14/162c3ff9ebf6319e~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image",data:"aurora"})],-1),o=(0,i._)("p",null,"\\2. 建立这个项目的远端git仓库，并把本地代码提交上去。我这里用的码云，github也一致。 \\3. 准备一台能外网访问的服务器，非要用你自己的电脑当服务器也可以，保证外网可访问即可。我这里用的是阿里云ubantu14.04，另外，阿里云新手注册有一个月的免费服务器可领，不想花钱的可以试一下。 \\4. 服务器上配好Java环境。",-1),r=(0,i._)("h2",{id:"jenkins的安装与启动",tabindex:"-1"},[(0,i._)("a",{class:"header-anchor",href:"#jenkins的安装与启动","aria-hidden":"true"},"#"),(0,i.Uk)(" Jenkins的安装与启动")],-1),c=(0,i.Uk)("linux下："),p={href:"https://link.juejin.cn?target=https%3A%2F%2Fblog.csdn.net%2Ffenglailea%2Farticle%2Fdetails%2F25919367",target:"_blank",rel:"noopener noreferrer"},g=(0,i.Uk)("ubuntu 14.04中安装Jenkins"),u=(0,i.Uk)(" windows下："),m=(0,i.uE)('<ol><li>从Jenkins官网下载最新war文件。</li><li>运行<code>java -jar jenkins.war</code>即可。</li></ol><h2 id="jenkins初始化" tabindex="-1"><a class="header-anchor" href="#jenkins初始化" aria-hidden="true">#</a> Jenkins初始化</h2><ol><li>jenkins的默认端口是8080,启动成功后在浏览器打开。</li><li>进入后会让我们输管理员密码，打开网页上提示路径下的文件，复制密码粘贴输入即可。</li><li>然后会让安装需要的插件，此处选默认即可，等待安装完成。</li><li>创建一个管理员账户。</li><li>上面都完成后会看到这个界面。</li></ol>',3),d=(0,i._)("p",null,[(0,i._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"Jenkins初始化完成",originSrc:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/4/14/162c486771d8309c~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image",data:"aurora"})],-1),b=(0,i._)("h2",{id:"创建任务",tabindex:"-1"},[(0,i._)("a",{class:"header-anchor",href:"#创建任务","aria-hidden":"true"},"#"),(0,i.Uk)(" 创建任务")],-1),h=(0,i._)("ol",null,[(0,i._)("li",null,[(0,i._)("p",null,"点击创建一个新任务"),(0,i._)("p",null,[(0,i._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"新任务",originSrc:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/4/14/162c48a03fd6dfdd~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image",data:"aurora"})])]),(0,i._)("li",null,[(0,i._)("p",null,"选择自由风格的软件项目，并起一个名字"),(0,i._)("p",null,[(0,i._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"自由风格的软件项目",originSrc:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/4/14/162c48a7c39e576f~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image",data:"aurora"})])])],-1),k=(0,i._)("p",null,"至此，基础准备工作已经完成，我们在服务器上安装了Jenkins并启动，然后进行了初始化配置，建立了一个新任务。接下来我们开始配置我们需要的功能。",-1),_=(0,i._)("h2",{id:"实现git钩子功能",tabindex:"-1"},[(0,i._)("a",{class:"header-anchor",href:"#实现git钩子功能","aria-hidden":"true"},"#"),(0,i.Uk)(" 实现git钩子功能")],-1),j=(0,i._)("p",null,"首先我们要实现一个git钩子功能，就是我们向github/码云等远程仓库push我们的代码时，jenkins能知道我们提交了代码，这是自动构建自动部署的前提，钩子的实现原理是在远端仓库上配置一个Jenkins服务器的接口地址，当本地向远端仓库发起push时，远端仓库会向配置的Jenkins服务器的接口地址发起一个带参数的请求，jenkins收到后开始工作。",-1),v=(0,i._)("ol",null,[(0,i._)("li",null,[(0,i._)("p",null,"打开刚创建的任务，选择配置，添加远程仓库地址，配置登录名及密码及分支。"),(0,i._)("p",null,[(0,i._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"添加仓库地址",originSrc:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/4/14/162c4b63c9152782~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image",data:"aurora"})])]),(0,i._)("li",null,[(0,i._)("p",null,[(0,i.Uk)("安装Generic Webhook Trigger Plugin插件（系统管理-插件管理-搜索Generic Webhook Trigger Plugin）如果可选插件列表为空，点击高级标签页，替换升级站点的URL为："),(0,i._)("code",null,"http://mirror.xmission.com/jenkins/updates/update-center.json"),(0,i.Uk)("并且点击提交和立即获取。")])]),(0,i._)("li",null,[(0,i._)("p",null,"添加触发器"),(0,i._)("p",null,"第2步安装的触发器插件功能很强大，可以根据不同的触发参数触发不同的构建操作，比如我向远程仓库提交的是master分支的代码，就执行代码部署工作，我向远程仓库提交的是某个feature分支，就执行单元测试，单元测试通过后合并至dev分支。灵活性很高，可以自定义配置适合自己公司的方案，这里方便演示我们不做任何条件判断，只要有提交就触发。在任务配置里勾选Generic Webhook Trigger即可"),(0,i._)("p",null,[(0,i._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"添加触发器",originSrc:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/4/14/162c4c36ea15b935~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image",data:"aurora"})])]),(0,i._)("li",null,[(0,i._)("p",null,"仓库配置钩子 此处以码云为例，因为公司用的是码云，github的配置基本一致，进入码云项目主页后，点击管理-webhooks-添加，会跳出一个这样的框来。"),(0,i._)("p",null,[(0,i._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"仓库配置钩子",originSrc:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/4/14/162c4cfe042bba32~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image",data:"aurora"})]),(0,i._)("p",null,"URL格式为"),(0,i._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,i._)("pre",{class:"language-text"},[(0,i._)("code",null,"http://<User ID>:<API Token>@<Jenkins IP地址>:端口/generic-webhook-trigger/invoke\n")]),(0,i._)("div",{class:"line-numbers"},[(0,i._)("span",{class:"line-number"},"1"),(0,i._)("br")])]),(0,i._)("p",null,"userid和api token在jenkins的系统管理-管理用户-admin-设置里，这是我的"),(0,i._)("p",null,[(0,i._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"URL格式",originSrc:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/4/14/162c4d8b530af3a0~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image",data:"aurora"})]),(0,i._)("p",null,"Jenkins IP地址和端口是你部署jenkins服务器的ip地址，端口号没改过的话就是8080。"),(0,i._)("p",null,"密码填你和上面userid对应的密码，我这里是root。"),(0,i._)("p",null,"下面的几个选项是你在仓库执行什么操作的时候触发钩子，这里默认用push。"),(0,i._)("p",null,"点击提交完成配置。")]),(0,i._)("li",null,[(0,i._)("p",null,"测试钩子"),(0,i._)("p",null,[(0,i._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"测试钩子",originSrc:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/4/14/162c4df2c9b49941~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image",data:"aurora"})]),(0,i._)("p",null,"点击测试，如果配置是成功的，你的Jenkins左侧栏构建执行状态里将会出现一个任务。")])],-1),f=(0,i._)("p",null,[(0,i._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"测试钩子",originSrc:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/4/15/162c4e3169a3c1f3~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image",data:"aurora"})],-1),z=(0,i._)("p",null,"另外，你也可以试下本地提交代码，提交代码后，jenkins也会开始一个任务,目前我们没有配置任务开始后让它做什么，所以默认它只会在你提交新代码后，将新代码拉取到jenkins服务器上。到此为止，git钩子我们配置完成。",-1),x=(0,i._)("p",null,"gif效果图：",-1),y=(0,i._)("p",null,[(0,i._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"完整效果图",originSrc:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/4/15/162c7630b81b74c9~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image",data:"aurora"})],-1),S=(0,i.uE)('<h2 id="实现自动化构建" tabindex="-1"><a class="header-anchor" href="#实现自动化构建" aria-hidden="true">#</a> 实现自动化构建</h2><p>git push触发钩子后，jenkins就要开始工作了，自动化的构建任务可以有很多种，比如说安装升级依赖包，单元测试，e2e测试，压缩静态资源，批量重命名等等，无论是npm script还是webpack，gulp之类的工作流，你之前在本地能做的，在这里同样可以做。 作为演示，这里只演示三个基本常用的工作流程，安装依赖包-&gt;单元测试-&gt;打包，也就是下面这三个命令。</p><div class="language-arduino ext-arduino line-numbers-mode"><pre class="language-arduino"><code>arduino复制代码npm install\nnpm <span class="token builtin">run</span> test\nnpm <span class="token builtin">run</span> build\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',3),J=(0,i._)("ol",null,[(0,i._)("li",null,[(0,i._)("p",null,"首先，和本地运行npm script一样，我们要想在jenkins里面执行npm命令，先要在jenkins里面配置node的环境，可以通过配置环境变量的方式引入node，也可以通过安装插件的方式，这里使用了插件的方式，安装一下nvm wrapper这个插件。")]),(0,i._)("li",null,[(0,i._)("p",null,"打开刚刚的jenkins任务，点击配置里面的构建环境，勾选这个，并指定一个node版本。"),(0,i._)("p",null,[(0,i._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"构建环境",originSrc:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/4/15/162c7726c4fc17ba~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image",data:"aurora"})])]),(0,i._)("li",null,[(0,i._)("p",null,"点击构建，把要执行的命令输进去，多个命令使用&&分开。")])],-1),w=(0,i._)("p",null,[(0,i._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"执行的命令",originSrc:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/4/15/162c7771ae212268~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image",data:"aurora"})],-1),U=(0,i._)("p",null,"\\4. 保存。 \\5. 此时本地修改一下代码push测试一下（也可以点击立即构建测试），点击本次触发的那个任务，选择控制台输出，将会看到Jenkins在云端执行的过程。",-1),E=(0,i._)("p",null,[(0,i._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"云端执行的过程",originSrc:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/4/15/162c77e6e52b6a0c~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image",data:"aurora"})],-1),F=(0,i._)("p",null,"命令行最后一行是Finished状态的如果是SUCCESS（蓝色）则证明执行的任务都顺利进行，是FAILURE（红色）则证明中间有重大错误导致任务失败，UNSTABLE（黄色）代表有虽然有些小问题，但不阻碍任务进行，黄色或者红色可以去命令行看下错误输出，看下哪里出了问题。",-1),C=(0,i._)("p",null,[(0,i._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"状态",originSrc:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/4/15/162c783645ca6071~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image",data:"aurora"})],-1),P=(0,i._)("p",null,"\\6. 如果上一步是SUCCESS，点击项目的工作空间，将会发现多了dist和node_modules两个文件夹。",-1),I=(0,i._)("p",null,[(0,i._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"文件夹",originSrc:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/4/15/162c78ab9b46a7c6~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image",data:"aurora"})],-1),T=(0,i.uE)('<p>至此，我们已经搭建了一个简易的构建工作流程，构建完成了，我们需要自动化部署。</p><h2 id="实现自动化部署" tabindex="-1"><a class="header-anchor" href="#实现自动化部署" aria-hidden="true">#</a> 实现自动化部署</h2><p>自动化部署可能是我们最需要的功能了，公司就一台服务器，我们可以使用人工部署的方式，但是如果公司有100台服务器呢，人工部署就有些吃力了，而且一旦线上出了问题，回滚也很麻烦。所以这一节实现一下自动部署的功能。</p><ol><li>首先，先在Jenkins上装一个插件Publish Over SSH，我们将通过这个工具实现服务器部署功能。</li><li>在要部署代码的服务器上创建一个文件夹用于接收Jenkins传过来的代码，我在服务器上建了一个testjenkins的文件夹。</li><li>Jenkins想要往服务器上部署代码必须登录服务器才可以，这里有两种登录验证方式，一种是ssh验证，一种是密码验证，就像你自己登录你的服务器，你可以使用ssh免密登录，也可以每次输密码登录，系统管理-系统设置里找到Publish over SSH这一项。 重点参数说明：</li></ol><div class="language-vbnet ext-vbnet line-numbers-mode"><pre class="language-vbnet"><code>vbnet复制代码Passphrase：密码（<span class="token keyword">key</span>的密码，没设置就是空）\nPath <span class="token keyword">to</span> <span class="token keyword">key</span>：<span class="token keyword">key</span>文件（私钥）的路径\n<span class="token keyword">Key</span>：将私钥复制到这个框中<span class="token punctuation">(</span>path <span class="token keyword">to</span> <span class="token keyword">key</span>和<span class="token keyword">key</span>写一个即可<span class="token punctuation">)</span>\n\nSSH Servers的配置：\nSSH Server <span class="token keyword">Name</span>：标识的名字（随便你取什么）\nHostname：需要连接ssh的主机名或<span class="token function">ip</span>地址（建议<span class="token function">ip</span>）\nUsername：用户名\nRemote Directory：远程目录（上面第二步建的testjenkins文件夹的路径）\n\n高级配置：\n<span class="token function">Use</span> password authentication<span class="token punctuation">,</span> <span class="token keyword">or</span> <span class="token function">use</span> a different <span class="token keyword">key</span>：勾选这个可以使用密码登录，不想配ssh的可以用这个先试试\nPassphrase <span class="token operator">/</span> Password：密码登录模式的密码\nPort：端口（默认<span class="token number">22</span>）\n<span class="token function">Timeout</span> <span class="token punctuation">(</span>ms<span class="token punctuation">)</span>：超时时间（毫秒）默认<span class="token number">300000</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>配置完成后，点击Test Configuration测试一下是否可以连接上，如果成功会返回success，失败会返回报错信息，根据报错信息改正即可。</p>',6),q=(0,i._)("p",null,[(0,i._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"返回信息",originSrc:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/4/15/162c7bb52a7713be~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image",data:"aurora"})],-1),A=(0,i.uE)('<p>\\4. 接下来进入我们创建的任务，点击构建，增加2行代码，意思是将dist里面的东西打包成一个文件，因为我们要传输。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>bash复制代码cd dist<span class="token operator">&amp;&amp;</span>\n<span class="token function">tar</span> -zcvf dist.tar.gz *\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',2),N=(0,i._)("p",null,[(0,i._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"增加2行代码",originSrc:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/4/15/162c7bf8fa29ec6d~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image",data:"aurora"})],-1),H=(0,i.uE)('<p>\\5. 点击构建后操作，增加构建后操作步骤，选择send build artificial over SSH， 参数说明：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>bash复制代码Name:选择一个你配好的ssh服务器\nSource files ：写你要传输的文件路径\nRemove prefix ：要去掉的前缀，不写远程服务器的目录结构将和Source files写的一致\nRemote directory ：写你要部署在远程服务器的那个目录地址下，不写就是SSH Servers配置里默认远程目录\nExec <span class="token builtin class-name">command</span> ：传输完了要执行的命令，我这里执行了解压缩和解压缩完成后删除压缩包2个命令\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',2),R=(0,i._)("p",null,[(0,i._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"参数说明",originSrc:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/4/15/162c7c7caf0713f5~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image",data:"aurora"})],-1),L=(0,i._)("p",null,[(0,i.Uk)("\\6. 现在当我们在本地将"),(0,i._)("code",null,"Welcome to Your Vue.js App"),(0,i.Uk)("修改为"),(0,i._)("code",null,"Jenkins"),(0,i.Uk)("后发出一个git push，过一会就会发现我们的服务器上已经部署好了最新的代码，是不是很6。")],-1),W=(0,i._)("p",null,[(0,i._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"效果",originSrc:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/4/15/162c7d37c88e9d5b~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image",data:"aurora"})],-1),D=(0,i._)("p",null,"至此，我们的自动化部署也完成了，但是如果过程中有异常怎么办，或是我们想知道每次Jenkins运行的日志及运行结果，我们可以通过配置邮件服务来让Jenkins每次完成任务后通知相关人员。",-1),G=(0,i._)("h2",{id:"实现邮件提醒",tabindex:"-1"},[(0,i._)("a",{class:"header-anchor",href:"#实现邮件提醒","aria-hidden":"true"},"#"),(0,i.Uk)(" 实现邮件提醒")],-1),Y=(0,i._)("p",null,"这里我们不用E-mail Notification，因为它的邮件服务功能太少，无法自定义邮件内容及自定义触发钩子，而且只能在异常情况下才能发邮件。我们使用Editable Email Notification这个。",-1),Z=(0,i._)("ol",null,[(0,i._)("li",null,[(0,i._)("p",null,"打开系统管理-系统配置-Extended E-mail Notification，不是系统管理-系统配置-邮件通知，千万不要配错了，否则不起作用。配置一下用来发邮件的邮箱，我这里用的是我自己的qq邮箱。"),(0,i._)("p",null,[(0,i._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"邮箱",originSrc:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/4/15/162c7e1c8ac2aa01~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image",data:"aurora"})]),(0,i._)("p",null,"要是用别的厂家的邮箱服务就查下别的邮箱厂家smtp怎么配，用qq邮箱的除了user Name和password其他的和我写一样就行。另外password写的不是qq邮箱的密码，而是开启smtp服务后发短信获取的密码。")]),(0,i._)("li",null,[(0,i._)("p",null,"打开创建的那个任务，增加构建后操作步骤选择Editable Email Notification，Project Recipient List那里写你要发给谁邮件，可以多个，用分号隔开。")])],-1),B=(0,i._)("p",null,[(0,i._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"邮件",originSrc:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/4/15/162c7f232c5f77e8~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image",data:"aurora"})],-1),K=(0,i._)("p",null,"然后点击Advanced Settings-Triggers-Add Trigger，选择always，意思是无论什么情况任务执行完就发邮件，也可以选择其他模式，如任务执行异常了才发邮件。",-1),O=(0,i._)("p",null,[(0,i._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"发邮件",originSrc:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/4/15/162c7f57bcfe4f46~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image",data:"aurora"})],-1),V=(0,i._)("p",null,"我这里配置的接收邮件的地址也是我的qq邮箱，这个可以根据自己公司的工作流程配。 \\4. 现在当我们在本地修改代码后发出一个git push，Jenkins自动构建部署完成后就会给我发一封邮件，邮件附件里会有本次任务的日志。",-1),M=(0,i._)("p",null,[(0,i._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"qq邮件",originSrc:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/4/15/162c7fe5e340972c~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image",data:"aurora"})],-1),Q=(0,i._)("p",null,"至此，我们的邮件提醒功能也配置完了。",-1),X=(0,i._)("h2",{id:"最后",tabindex:"-1"},[(0,i._)("a",{class:"header-anchor",href:"#最后","aria-hidden":"true"},"#"),(0,i.Uk)(" 最后")],-1),$=(0,i._)("p",null,"通过上面这个案例，我们搭建了一套简单的自动化工作流，只需要在本地发起一个git提交，就可以在云端自动化构建，自动化部署，部署完成或出现异常后自动邮件通知，让持续集成、持续交付、持续部署变得简单易操作，解放了人力构建部署的生产力，也统一了构建环境，真实线上的CI服务配置比这个要复杂，大体流程可以参考下阮一峰老师的这篇文章:",-1),aa={href:"https://link.juejin.cn?target=http%3A%2F%2Fwww.ruanyifeng.com%2Fblog%2F2015%2F09%2Fcontinuous-integration.html",target:"_blank",rel:"noopener noreferrer"},sa=(0,i.Uk)("持续集成是什么？"),na=(0,i._)("p",null,"Jenkins还有很多强大的特性，如Pipeline，slave等，插件也很丰富，社区生态也很好，如果公司暂时没有自行搭建CI服务的能力，使用免费开源的Jenkins是很好的选择。另外，如果你的项目是开源项目，也可以使用Travis CI做持续集成，这个配置起来比Jenkins简单，可以参考百度EFE的这篇文章：",-1),ia={href:"https://link.juejin.cn?target=http%3A%2F%2Fefe.baidu.com%2Fblog%2Ffront-end-continuous-integration-tools%2F",target:"_blank",rel:"noopener noreferrer"},ea=(0,i.Uk)("前端开源项目持续集成三剑客"),la=(0,i._)("p",null,[(0,i._)("strong",null,"原文链接"),(0,i.Uk)("：https://juejin.cn/post/6844903591417757710")],-1),ta={},oa=(0,n(3744).Z)(ta,[["render",function(a,s){const n=(0,i.up)("ExternalLinkIcon");return(0,i.wg)(),(0,i.iD)(i.HY,null,[e,l,t,o,r,(0,i._)("p",null,[c,(0,i._)("a",p,[g,(0,i.Wm)(n)]),u]),m,d,b,h,k,_,j,v,f,z,x,y,S,J,w,U,E,F,C,P,I,T,q,A,N,H,R,L,W,D,G,Y,Z,B,K,O,V,M,Q,X,$,(0,i._)("p",null,[(0,i._)("a",aa,[sa,(0,i.Wm)(n)])]),na,(0,i._)("p",null,[(0,i._)("a",ia,[ea,(0,i.Wm)(n)])]),la],64)}]])}}]);