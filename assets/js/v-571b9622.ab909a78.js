"use strict";(self.webpackChunkdemo1=self.webpackChunkdemo1||[]).push([[822],{4367:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e={key:"v-571b9622",path:"/three/2023/20230115.html",title:"初探three",lang:"zh-CN",frontmatter:{title:"初探three",date:"2023-01-15T00:00:00.000Z",tags:["three"],categories:["three"]},excerpt:"",headers:[{level:2,title:"分析构成",slug:"分析构成",children:[]},{level:2,title:"容器canvas",slug:"容器canvas",children:[{level:3,title:"渲染器WebGLRenderer",slug:"渲染器webglrenderer",children:[]}]},{level:2,title:"场景Scene",slug:"场景scene",children:[]},{level:2,title:"相机OrthographicCamera or PerspectiveCamera",slug:"相机orthographiccamera-or-perspectivecamera",children:[{level:3,title:"正交相机（OrthographicCamera）",slug:"正交相机-orthographiccamera",children:[]},{level:3,title:"透视相机（PerspectiveCamera）",slug:"透视相机-perspectivecamera",children:[]}]},{level:2,title:"网格Mesh",slug:"网格mesh",children:[]},{level:2,title:"渲染场景与相机",slug:"渲染场景与相机",children:[]},{level:2,title:"操作几何体",slug:"操作几何体",children:[]},{level:2,title:"demo展示",slug:"demo展示",children:[]}],git:{updatedTime:null,contributors:[]}}},3450:(n,a,s)=>{s.r(a),s.d(a,{default:()=>j});var e=s(6252);const t=(0,e.uE)('<div class="custom-container tip"><p class="custom-container-title">TIP</p><p>最近经常刷到使用3D技术做的网站以及各种有趣的demo,这也成功引起了我的兴趣. 因此,我也准备浅尝一下制作3D效果的乐趣，在使用的技术上,选择了目前使用率比较高的threejs来进行demo的构建</p></div><h2 id="分析构成" tabindex="-1"><a class="header-anchor" href="#分析构成" aria-hidden="true">#</a> 分析构成</h2><p>首先分析一下使用threejs制作的3D效果需要的基本要素有哪些</p><ol><li>容器 -&gt; 用来承载构建的场景以及内容</li><li>渲染器 -&gt; 将内容渲染到容器中</li><li>场景 -&gt; 用来承载我们的内容(相机, 灯光, 动画, 网格等)</li><li>相机 -&gt; 调整相机可以调整页面展示内容的大小,多少,展示角度等</li><li>网格 -&gt; 网格是内容的主要组成部分,可以说是我们要展示的主体</li></ol><h2 id="容器canvas" tabindex="-1"><a class="header-anchor" href="#容器canvas" aria-hidden="true">#</a> 容器canvas</h2><p>three是使用canvas来作为承载一切的容器,因此我们首先要添加一个canvas</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>demo<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="渲染器webglrenderer" tabindex="-1"><a class="header-anchor" href="#渲染器webglrenderer" aria-hidden="true">#</a> 渲染器WebGLRenderer</h3><p>threejs中的渲染器使用的是<strong>WebGLRenderer</strong>, 通过 <strong>new THREE.WebGLRenderer</strong> 初始化渲染器，并将 canvas 容器作为参数传给它 通过调用 <strong>setSize</strong> 方法设置渲染器的尺寸； 调用 <strong>setPixelRatio</strong> 设置 canvas 的像素比为当前设备的屏幕像素比，避免高分屏下出现模糊情况。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 初始化渲染器</span>\n<span class="token keyword">const</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#demo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> renderer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>WebGLRenderer</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">canvas</span><span class="token operator">:</span> canvas\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 设置渲染器尺寸</span>\nrenderer<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">,</span> window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 设置canvas像素比为当前设备屏幕像素比</span>\nrenderer<span class="token punctuation">.</span><span class="token function">setPixelRatio</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>devicePixelRatio<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="场景scene" tabindex="-1"><a class="header-anchor" href="#场景scene" aria-hidden="true">#</a> 场景Scene</h2><p>使用 <strong>new THREE.Scene</strong> 来初始化场景, 后面我们的相机 网格等都需要放入场景中,下面是一些常见的场景属性</p><table><thead><tr><th>属性</th><th>参数介绍</th></tr></thead><tbody><tr><td>fog</td><td>设置场景的雾化效果,可以渲染出一层雾气，隐层远处的的物体</td></tr><tr><td>autoUpdate</td><td>设置是否自动更新</td></tr><tr><td>background</td><td>设置场景背景，默认为黑色</td></tr><tr><td>children</td><td>所有对象的列表</td></tr><tr><td>add()</td><td>向场景中添加对象</td></tr><tr><td>remove()</td><td>从场景中移除对象</td></tr><tr><td>getChildByName()</td><td>根据名字直接返回这个对象</td></tr><tr><td>traverse()</td><td>传入一个回调函数访问所有的对象</td></tr></tbody></table><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 初始化场景</span>\n<span class="token keyword">const</span> scene <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>Scene</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">// 场景颜色</span>\nscene<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>Color</span><span class="token punctuation">(</span><span class="token number">0x1a1a1a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="相机orthographiccamera-or-perspectivecamera" tabindex="-1"><a class="header-anchor" href="#相机orthographiccamera-or-perspectivecamera" aria-hidden="true">#</a> 相机OrthographicCamera or PerspectiveCamera</h2><p>threejs中相机主要分为两种：正交相机(OrthographicCamera)和透视相机(PerspectiveCamera)</p><h3 id="正交相机-orthographiccamera" tabindex="-1"><a class="header-anchor" href="#正交相机-orthographiccamera" aria-hidden="true">#</a> 正交相机（OrthographicCamera）</h3><p>这一摄像机使用orthographic projection（正交投影）来进行投影。 在这种投影模式下，无论物体距离相机距离远或者近，在最终渲染的图片中物体的大小都保持不变。 这对于渲染2D场景或者UI元素是非常有用的。</p><h3 id="透视相机-perspectivecamera" tabindex="-1"><a class="header-anchor" href="#透视相机-perspectivecamera" aria-hidden="true">#</a> 透视相机（PerspectiveCamera）</h3><p>这一摄像机使用perspective projection（透视投影）来进行投影。 这一投影模式被用来模拟人眼所看到的景象，它是3D场景的渲染中使用得最普遍的投影模式。</p>',20),p=(0,e._)("p",null,[(0,e._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"img",originSrc:"http://oss.xingyijun.cn/uploads/file-1673423427823.png",data:"aurora"}),(0,e.Uk)(" 在当前的demo中我们使用的是透视相机PerspectiveCamera")],-1),o=(0,e.uE)('<table><thead><tr><th>属性</th><th>参数介绍</th></tr></thead><tbody><tr><td>fov</td><td>摄像机视锥体垂直视野角度，从视图的底部到顶部，以角度来表示。默认值是50</td></tr><tr><td>aspect</td><td>摄像机视锥体的长宽比，通常是使用画布的宽/画布的高。默认值是1（正方形画布）</td></tr><tr><td>near</td><td>摄像机的近端面，表示的是从距离相机多远的位置开始渲染,默认值是0.1</td></tr><tr><td>far</td><td>摄像机的远端面，表示的是距离相机多远的位置截止渲染,默认值是2000</td></tr></tbody></table><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 初始化相机</span>\n<span class="token keyword">const</span> camera <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>PerspectiveCamera</span><span class="token punctuation">(</span><span class="token number">70</span><span class="token punctuation">,</span> sizes<span class="token punctuation">.</span>width <span class="token operator">/</span> sizes<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 相机的z轴</span>\ncamera<span class="token punctuation">.</span>position<span class="token punctuation">.</span>z <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n<span class="token comment">// 添加相机到场景种</span>\nscene<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>camera<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="网格mesh" tabindex="-1"><a class="header-anchor" href="#网格mesh" aria-hidden="true">#</a> 网格Mesh</h2>',3),c=(0,e.Uk)("threejs中使用 "),r=(0,e._)("strong",null,"new THREE.Mesh",-1),l=(0,e.Uk)(" 来创建网格,但是网格本身还有两部分构成: 几何体和材质 要创建一个可正常显示在场景中的三维模型，需要将网格 "),i=(0,e._)("strong",null,"Mesh",-1),u=(0,e.Uk)(" 添加到场景中，并创建所需的几何体 "),d=(0,e._)("strong",null,"Geometry",-1),k=(0,e.Uk)(" 和 材质 "),m=(0,e._)("strong",null,"Material",-1),b=(0,e.Uk)(" 几何体与材质分为多种,各有自己对应的属性和功能,本文在这里就不多做赘述了,有想深入了解的同学可以去查看文档 threejs中文文档: "),h={href:"https://threejs.org/docs/index.html#manual/zh/introduction/Creating-a-scene",target:"_blank",rel:"noopener noreferrer"},g=(0,e.Uk)("https://threejs.org/docs/index.html#manual/zh/introduction/Creating-a-scene"),v=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 添加立方缓冲几何体（BoxGeometry</span>\n<span class="token keyword">const</span> geometry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>BoxGeometry</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 设置基础网格材质(MeshBasicMaterial)</span>\n<span class="token keyword">const</span> material <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>MeshBasicMaterial</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token number">0xab6ab6</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 初始化网格对象</span>\n<span class="token keyword">const</span> mesh <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>Mesh</span><span class="token punctuation">(</span>geometry<span class="token punctuation">,</span> material<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 将网格对象添加到场景中</span>\nscene<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>mesh<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="渲染场景与相机" tabindex="-1"><a class="header-anchor" href="#渲染场景与相机" aria-hidden="true">#</a> 渲染场景与相机</h2><p>在上面的步骤都完成后,我们的几大要素都已经具备了,但是页面上依然是没有任何内容,这是因为还没有将场景与相机添加到渲染器中</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 将场景与相机添加到渲染器中并渲染</span>\nrenderer<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>scene<span class="token punctuation">,</span> camera<span class="token punctuation">)</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="操作几何体" tabindex="-1"><a class="header-anchor" href="#操作几何体" aria-hidden="true">#</a> 操作几何体</h2>',5),w=(0,e._)("p",null,[(0,e.Uk)("在添加如上代码后,页面上出现了几何体 "),(0,e._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"img",originSrc:"http://oss.xingyijun.cn/uploads/file-1673427382592.png",data:"aurora"}),(0,e.Uk)(" 虽然看上去像是一个2d的正方形,但实际上是立方体,此时它是正对着屏幕的.我们当然是更加希望看到一个3d的效果,如果可以还希望能够鼠标操作放大缩小等. 这时,就需要借助一个叫 **轨道控制器（OrbitControls）**的东西 这里我就不多介绍它是怎么引入的了,有需要的同学可以去查询一下,在单纯html中引入与在脚手架项目中引入也是有一些区别的 ..........就当这里已经引入了,通过使用 "),(0,e._)("strong",null,"new THREE.OrbitControls"),(0,e.Uk)(" 来初始化轨道控制器")],-1),f=(0,e.uE)('<table><thead><tr><th>参数</th><th>参数介绍</th></tr></thead><tbody><tr><td>object</td><td>将要被控制的相机。该相机不允许是其他任何对象的子级，除非该对象是场景自身</td></tr><tr><td>domElement</td><td>用于事件监听的HTML元素</td></tr></tbody></table><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 初始化轨道控制器</span>\n<span class="token keyword">const</span> controls <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>OrbitControls</span><span class="token punctuation">(</span>camera<span class="token punctuation">,</span> renderer<span class="token punctuation">.</span>domElement<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>当然单纯初始化轨道控制器后依然是无法进行使用的,因此在操作的同时,需要对其进行更新.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 创建一个更新的方法</span>\n<span class="token keyword">const</span> <span class="token function-variable function">update</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 跟随更新方法去渲染内容</span>\n  renderer<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>scene<span class="token punctuation">,</span> camera<span class="token punctuation">)</span>\n  <span class="token comment">// 更新控制器。必须在摄像机的变换发生任何手动改变后调用</span>\n  controls<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token comment">// 使用帧动画重复调用更新</span>\n  <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>update<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="demo展示" tabindex="-1"><a class="header-anchor" href="#demo展示" aria-hidden="true">#</a> demo展示</h2><p>在完成以上所有步骤后,得到了一个可以使用鼠标进行操作的3D立方体</p>',6),y=(0,e._)("iframe",{height:"300",scrolling:"no",title:"Space globe - Three.js",src:"https://codepen.io/qianshi-ffg/embed/JjBWqqv?default-tab=html%2Cresult",frameborder:"no",loading:"lazy",allowtransparency:"true",allowfullscreen:"true",style:{"box-sizing":"border-box","border-width":"0px","border-style":"solid","border-color":"rgb(229, 231, 235)","--tw-border-spacing-x":"0","--tw-border-spacing-y":"0","--tw-translate-x":"0","--tw-translate-y":"0","--tw-rotate":"0","--tw-skew-x":"0","--tw-skew-y":"0","--tw-scale-x":"1","--tw-scale-y":"1","--tw-pan-x":"","--tw-pan-y":"","--tw-pinch-zoom":"","--tw-scroll-snap-strictness":"proximity","--tw-ordinal":"","--tw-slashed-zero":"","--tw-numeric-figure":"","--tw-numeric-spacing":"","--tw-numeric-fraction":"","--tw-ring-inset":"","--tw-ring-offset-width":"0px","--tw-ring-offset-color":"#fff","--tw-ring-color":"rgb(59 130 246 / 0.5)","--tw-ring-offset-shadow":"0 0 #0000","--tw-ring-shadow":"0 0 #0000","--tw-shadow":"0 0 #0000","--tw-shadow-colored":"0 0 #0000","--tw-blur":"","--tw-brightness":"","--tw-contrast":"","--tw-grayscale":"","--tw-hue-rotate":"","--tw-invert":"","--tw-saturate":"","--tw-sepia":"","--tw-drop-shadow":"","--tw-backdrop-blur":"","--tw-backdrop-brightness":"","--tw-backdrop-contrast":"","--tw-backdrop-grayscale":"","--tw-backdrop-hue-rotate":"","--tw-backdrop-invert":"","--tw-backdrop-opacity":"","--tw-backdrop-saturate":"","--tw-backdrop-sepia":"",display:"block","vertical-align":"middle",color:"rgb(33, 53, 71)","font-family":'-apple-system, BlinkMacSystemFont, "Segoe UI Variable", "Segoe UI", system-ui, ui-sans-serif, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji"',"font-size":"16px","font-style":"normal","font-variant-ligatures":"normal","font-variant-caps":"normal","font-weight":"400","letter-spacing":"normal",orphans:"2","text-align":"left","text-indent":"0px","text-transform":"none","white-space":"normal",widows:"2","word-spacing":"0px","-webkit-text-stroke-width":"0px","background-color":"rgb(255, 255, 255)","text-decoration-thickness":"initial","text-decoration-style":"initial","text-decoration-color":"initial",width:"840px"}},null,-1),x={},j=(0,s(3744).Z)(x,[["render",function(n,a){const s=(0,e.up)("ExternalLinkIcon");return(0,e.wg)(),(0,e.iD)(e.HY,null,[t,p,o,(0,e._)("p",null,[c,r,l,i,u,d,k,m,b,(0,e._)("a",h,[g,(0,e.Wm)(s)])]),v,w,f,y],64)}]])}}]);