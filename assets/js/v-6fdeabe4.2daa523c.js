"use strict";(self.webpackChunkdemo1=self.webpackChunkdemo1||[]).push([[7505],{1398:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-6fdeabe4",path:"/html/2019/20190908.html",title:"DOM的基本操作",lang:"zh-CN",frontmatter:{title:"DOM的基本操作",date:"2019-09-08T00:00:00.000Z",tags:["html"],categories:["html"]},excerpt:"",headers:[{level:2,title:"DOM的获取",slug:"dom的获取",children:[]},{level:2,title:"遍历节点树",slug:"遍历节点树",children:[]},{level:2,title:"基于元素节点树的遍历 (遍历元素节点树)",slug:"基于元素节点树的遍历-遍历元素节点树",children:[]},{level:2,title:"复制节点",slug:"复制节点",children:[]}],git:{updatedTime:null,contributors:[]}}},6276:(n,s,a)=>{a.r(s),a.d(s,{default:()=>p});const e=(0,a(6252).uE)('<h2 id="dom的获取" tabindex="-1"><a class="header-anchor" href="#dom的获取" aria-hidden="true">#</a> DOM的获取</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token literal-property property">查看元素节点</span><span class="token operator">:</span>\n\t<span class="token number">1.</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span> <span class="token function">通过id标识，来获取</span><span class="token punctuation">(</span>查找<span class="token punctuation">)</span>到需要的元素\n\t    ie8以下id是不区分大小写的\n\t\n\t<span class="token number">2.</span>  document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span>  \n\t    最主流的用法，兼容性最好\n\t    通过标签名来获取元素，意为获取文档中所有该标签\n\t    返回值是一个伪数组，哪怕只有一个也是伪数组\n\t\t\n\t<span class="token number">3.</span>  document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span>  \n\t    通过类名来获取元素，意为获取文档中所有具有该类名的标签\n\t    返回值是一个伪数组，哪怕只有一个也是伪数组\n\t    <span class="token literal-property property">弊端</span><span class="token operator">:</span> 兼容性不好，并不是所有浏览器都可以使用\n\t\n\t<span class="token number">4.</span>  document<span class="token punctuation">.</span><span class="token function">getElementsByName</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span>  \n\t    并不常用，因为只有部分标签的name属性可以生效，一般是表单标签\n\t    通过name来获取元素\n\t    返回值是一个伪数组，哪怕只有一个也是伪数组\n\t\n\t<span class="token number">5.</span>  document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span>\n\t    通过css选择器来获取元素\n\t    返回值是一个具体的标签\n\t    <span class="token literal-property property">弊端</span><span class="token operator">:</span> 该方法并不是实时的，标签该表不会实时更新输出\n\t\t\n\t<span class="token number">6.</span>  document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span>\n\t    通过css选择器来获取元素\n\t    返回值是一个伪数组\n\t    <span class="token literal-property property">弊端</span><span class="token operator">:</span> 该方法并不是实时的，标签该表不会实时更新输出\n\t    可以用来保存父本\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><h2 id="遍历节点树" tabindex="-1"><a class="header-anchor" href="#遍历节点树" aria-hidden="true">#</a> 遍历节点树</h2><pre><code>1.  parentNode 父节点(最顶端的parentNode为#document)\n\n2.  childNodes 选择所有的子节点(包括文本、注释、元素等)\n\n3.  firstChild 选择第一个子节点\n    lastChild 选择最后一个子节点\n\n4.  nextSibling 后一个兄弟节点\n    previousSibling 前一个兄弟节点\n</code></pre><h2 id="基于元素节点树的遍历-遍历元素节点树" tabindex="-1"><a class="header-anchor" href="#基于元素节点树的遍历-遍历元素节点树" aria-hidden="true">#</a> 基于元素节点树的遍历 (遍历元素节点树)</h2><pre><code>1.  parentElement 返回当前元素的父元素节点(ie不兼容)\n\n2.  children 返回当前元素的所有子元素  返回值为伪数组\n\n3.  firstElementChild 返回当前元素的第一个子元素节点(ie不兼容)\n\n4.  lastElementChild 返回当前元素的最后一个子元素节点(ie不兼容)\n\n5.  nextElementSibling 当前元素的下一个兄弟元素节点(ie不兼容)\n\n6.  previousSibling 当前元素的前一个兄弟节点(ie不兼容)\n</code></pre><h2 id="复制节点" tabindex="-1"><a class="header-anchor" href="#复制节点" aria-hidden="true">#</a> 复制节点</h2><pre><code>格式: 节点.cloneNode();\n参数: true: 表示深克隆，克隆元素和内部结构, false: 表示浅克隆，只克隆元素自身结构\n</code></pre>',8),t={},p=(0,a(3744).Z)(t,[["render",function(n,s){return e}]])}}]);